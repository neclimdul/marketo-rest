<?php
/**
 * CustomActivityTypeTest
 *
 * Marketo Rest API
 *
 * Marketo Rest API
 *
 * OpenAPI spec version: 1.0
 * Contact: developerfeedback@marketo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.26
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Lead
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the model.
 */

namespace NecLimDul\MarketoRest\Lead\Test\Model;

use Faker\Factory;
use NecLimDul\MarketoRest\Lead\Model\ModelInterface;
use NecLimDul\MarketoRest\Lead\Model\CustomActivityType;
use PHPUnit\Framework\TestCase;

/**
 * CustomActivityTypeTest Class Doc Comment
 *
 * @category    Class
 * @description CustomActivityType
 * @package     NecLimDul\MarketoRest\Lead
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 *
 * @coversDefaultClass \NecLimDul\MarketoRest\Lead\Model\CustomActivityType
 */
class CustomActivityTypeTest extends TestCase
{

    /**
     * @var \NecLimDul\MarketoRest\Lead\Model\CustomActivityType
     */
    private $sot;

    /**
     * @var string[]
     */
    private $types = [
        'api_name' => 'string',
        'attributes' => '\NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeAttribute[]',
        'created_at' => 'string',
        'description' => 'string',
        'filter_name' => 'string',
        'id' => 'int',
        'name' => 'string',
        'primary_attribute' => '\NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeAttribute',
        'status' => 'string',
        'trigger_name' => 'string',
        'updated_at' => 'string',
];

    /**
     * @var \Faker\Generator
     */
    private $faker;

    /**
     * @var scalar[][]
     */
    private $allowedValues = [
        'status' => [
            'DRAFT' => 'draft',
            'APPROVED' => 'approved',
            'DELETED' => 'deleted',
            'APPROVED_WITH_DRAFT' => 'approved with draft',
        ],
    ];

    public function setUp(): void
    {
        parent::setUp();
        $this->faker = \Faker\Factory::create();
        $data = [];
        foreach ($this->types as $field => $type) {
            $data[$field] = $this->getFakeValue($type, $this->allowedValues[$field] ?? null);
        }
        $this->sot = new CustomActivityType($data);
    }

    /**
     * @param string $type
     * @param scalar[]|null $values
     * @return mixed
     */
    private function getFakeValue(string $type, ?array $values) {
        if (isset($values)) {
            // @todo random.
            return array_pop($values);
        }

        // @todo look for container hints.
        if (strcasecmp(substr($type, -2), '[]') === 0) {
            $return = [];
            $subType = substr($type, 0, -2);
            for ($i = 0; $i <= rand(0, 9); $i++) {
                $return[] = $this->getFakeValue($subType, $values);
            }
            return $return;
        }
        switch ($type) {
            case 'string':
                return $this->faker->word();
            case 'float':
                return $this->faker->randomFloat();
            case 'int':
                return $this->faker->randomNumber();
            case 'bool':
                return $this->faker->boolean();
            case '\DateTime':
                return $this->faker->dateTimeAD();
            case 'object':
                return new \stdClass();
        }
        if (class_exists($type) && is_subclass_of($type, ModelInterface::class)) {
            $model = new $type();
            $types = $type::swaggerTypes();
            foreach ($model->listInvalidProperties() as $field => $reason) {
                // @todo get allowed values? ((getter))AllowedValues
                // @phpstan-ignore-next-line
                $model[$field] = $this->getFakeValue($types[$field], null);
            }
            return $model;
        }
        $this->markTestSkipped('This type is not mocked yet: ' . $type);
    }

    /**
     * Test "CustomActivityType"
     *
     * @covers ::__construct
     */
    public function testCustomActivityType(): void
    {
        $this->assertInstanceOf(CustomActivityType::class, $this->sot);
    }

    /**
     * @covers ::swaggerTypes
     */
    public function testSwaggerTypes(): void
    {
        $this->assertEquals($this->types, CustomActivityType::swaggerTypes());
    }

    /**
     * @covers ::swaggerFormats
     */
    public function testSwaggerFormats(): void
    {
        $formats = $this->sot->swaggerFormats();
        $this->assertEquals(null, $formats['api_name']);
        $this->assertEquals(null, $formats['attributes']);
        $this->assertEquals(null, $formats['created_at']);
        $this->assertEquals(null, $formats['description']);
        $this->assertEquals(null, $formats['filter_name']);
        $this->assertEquals('int32', $formats['id']);
        $this->assertEquals(null, $formats['name']);
        $this->assertEquals(null, $formats['primary_attribute']);
        $this->assertEquals(null, $formats['status']);
        $this->assertEquals(null, $formats['trigger_name']);
        $this->assertEquals(null, $formats['updated_at']);
    }

    /**
     * @covers ::attributeMap
     */
    public function testAttributeMap(): void
    {
        $formats = $this->sot->attributeMap();
        $this->assertEquals('apiName', $formats['api_name']);
        $this->assertEquals('attributes', $formats['attributes']);
        $this->assertEquals('createdAt', $formats['created_at']);
        $this->assertEquals('description', $formats['description']);
        $this->assertEquals('filterName', $formats['filter_name']);
        $this->assertEquals('id', $formats['id']);
        $this->assertEquals('name', $formats['name']);
        $this->assertEquals('primaryAttribute', $formats['primary_attribute']);
        $this->assertEquals('status', $formats['status']);
        $this->assertEquals('triggerName', $formats['trigger_name']);
        $this->assertEquals('updatedAt', $formats['updated_at']);
    }

    /**
     * @covers ::getters
     * @covers ::setters
     */
    public function testGettersSetters(): void
    {
        $getters = $this->sot->getters();
        $setters = $this->sot->setters();
        foreach (array_keys($this->types) as $field) {
            $this->assertTrue(isset($setters[$field]));
            $this->assertTrue(isset($getters[$field]));
            $this->assertTrue(
                method_exists($this->sot, $getters[$field]),
                'Getter exists on model.'
            );
            $this->assertTrue(
                method_exists($this->sot, $setters[$field]),
                'Setter exists on model.'
            );
        }
    }

    /**
     * @covers ::getModelName
     */
    public function testGetModelName(): void
    {
        $this->assertEquals('CustomActivityType', $this->sot->getModelName());
    }

    /**
     * @covers ::listInvalidProperties
     * @covers ::valid
     */
    public function testValid(): void
    {
        $this->markTestIncomplete('TODO');
    }

    /**
     * @covers ::setAdditionalProperties
     * @covers ::setAdditionalProperty
     * @covers ::getAdditionalProperties
     */
    public function testAdditionalProperties(): void
    {
        $this->markTestIncomplete('TODO');
    }

    /**
     * @covers ::jsonSerialize
     * @covers ::__toString
     */
    public function testJson(): void
    {
        // Some minimal tests that json generates well.
        $json = json_encode($this->sot);
        $this->assertIsString($json, 'Json encoded');
        $json = json_decode($json);
        $string = json_decode((string) $this->sot);
        $this->assertEquals(
            $json,
            $string
        );
        $this->assertInstanceOf(\stdClass::class, $json);
        $this->assertInstanceOf(\stdClass::class, $string);
    }

    /**
     * Test attribute "api_name"
     *
     * @covers ::__construct
     * @covers ::getApiName
     * @covers ::setApiName
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyApiName(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['api_name'],
            $this->allowedValues['api_name'] ?? null
        );
        $this->sot->setApiName($v);
        $this->assertEquals($v, $this->sot->getApiName());
        $this->sot->setApiName(null);
        $this->assertNull($this->sot->getApiName());
        $this->sot->setApiName($v);

        $this->assertEquals($v, $this->sot['api_name']);
        $v = $this->getFakeValue(
            $this->types['api_name'],
            $this->allowedValues['api_name'] ?? null
        );
        $this->sot['api_name'] = $v;
        $this->assertEquals($v, $this->sot['api_name']);
        $this->assertTrue(isset($this->sot['api_name']));
        unset($this->sot['api_name']);
        $this->assertFalse(isset($this->sot['api_name']));
        $this->sot['api_name'] = $v;
        $this->assertEquals($v, $this->sot['api_name']);
        $this->assertTrue(isset($this->sot['api_name']));
    }

    /**
     * Test attribute "attributes"
     *
     * @covers ::__construct
     * @covers ::getAttributes
     * @covers ::setAttributes
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyAttributes(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['attributes'],
            $this->allowedValues['attributes'] ?? null
        );
        $this->sot->setAttributes($v);
        $this->assertEquals($v, $this->sot->getAttributes());
        $this->sot->setAttributes(null);
        $this->assertNull($this->sot->getAttributes());
        $this->sot->setAttributes($v);

        $this->assertEquals($v, $this->sot['attributes']);
        $v = $this->getFakeValue(
            $this->types['attributes'],
            $this->allowedValues['attributes'] ?? null
        );
        $this->sot['attributes'] = $v;
        $this->assertEquals($v, $this->sot['attributes']);
        $this->assertTrue(isset($this->sot['attributes']));
        unset($this->sot['attributes']);
        $this->assertFalse(isset($this->sot['attributes']));
        $this->sot['attributes'] = $v;
        $this->assertEquals($v, $this->sot['attributes']);
        $this->assertTrue(isset($this->sot['attributes']));
    }

    /**
     * Test attribute "created_at"
     *
     * @covers ::__construct
     * @covers ::getCreatedAt
     * @covers ::setCreatedAt
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyCreatedAt(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['created_at'],
            $this->allowedValues['created_at'] ?? null
        );
        $this->sot->setCreatedAt($v);
        $this->assertEquals($v, $this->sot->getCreatedAt());
        $this->sot->setCreatedAt(null);
        $this->assertNull($this->sot->getCreatedAt());
        $this->sot->setCreatedAt($v);

        $this->assertEquals($v, $this->sot['created_at']);
        $v = $this->getFakeValue(
            $this->types['created_at'],
            $this->allowedValues['created_at'] ?? null
        );
        $this->sot['created_at'] = $v;
        $this->assertEquals($v, $this->sot['created_at']);
        $this->assertTrue(isset($this->sot['created_at']));
        unset($this->sot['created_at']);
        $this->assertFalse(isset($this->sot['created_at']));
        $this->sot['created_at'] = $v;
        $this->assertEquals($v, $this->sot['created_at']);
        $this->assertTrue(isset($this->sot['created_at']));
    }

    /**
     * Test attribute "description"
     *
     * @covers ::__construct
     * @covers ::getDescription
     * @covers ::setDescription
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyDescription(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['description'],
            $this->allowedValues['description'] ?? null
        );
        $this->sot->setDescription($v);
        $this->assertEquals($v, $this->sot->getDescription());
        $this->sot->setDescription(null);
        $this->assertNull($this->sot->getDescription());
        $this->sot->setDescription($v);

        $this->assertEquals($v, $this->sot['description']);
        $v = $this->getFakeValue(
            $this->types['description'],
            $this->allowedValues['description'] ?? null
        );
        $this->sot['description'] = $v;
        $this->assertEquals($v, $this->sot['description']);
        $this->assertTrue(isset($this->sot['description']));
        unset($this->sot['description']);
        $this->assertFalse(isset($this->sot['description']));
        $this->sot['description'] = $v;
        $this->assertEquals($v, $this->sot['description']);
        $this->assertTrue(isset($this->sot['description']));
    }

    /**
     * Test attribute "filter_name"
     *
     * @covers ::__construct
     * @covers ::getFilterName
     * @covers ::setFilterName
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyFilterName(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['filter_name'],
            $this->allowedValues['filter_name'] ?? null
        );
        $this->sot->setFilterName($v);
        $this->assertEquals($v, $this->sot->getFilterName());
        $this->sot->setFilterName(null);
        $this->assertNull($this->sot->getFilterName());
        $this->sot->setFilterName($v);

        $this->assertEquals($v, $this->sot['filter_name']);
        $v = $this->getFakeValue(
            $this->types['filter_name'],
            $this->allowedValues['filter_name'] ?? null
        );
        $this->sot['filter_name'] = $v;
        $this->assertEquals($v, $this->sot['filter_name']);
        $this->assertTrue(isset($this->sot['filter_name']));
        unset($this->sot['filter_name']);
        $this->assertFalse(isset($this->sot['filter_name']));
        $this->sot['filter_name'] = $v;
        $this->assertEquals($v, $this->sot['filter_name']);
        $this->assertTrue(isset($this->sot['filter_name']));
    }

    /**
     * Test attribute "id"
     *
     * @covers ::__construct
     * @covers ::getId
     * @covers ::setId
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyId(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['id'],
            $this->allowedValues['id'] ?? null
        );
        $this->sot->setId($v);
        $this->assertEquals($v, $this->sot->getId());
        $this->sot->setId(null);
        $this->assertNull($this->sot->getId());
        $this->sot->setId($v);

        $this->assertEquals($v, $this->sot['id']);
        $v = $this->getFakeValue(
            $this->types['id'],
            $this->allowedValues['id'] ?? null
        );
        $this->sot['id'] = $v;
        $this->assertEquals($v, $this->sot['id']);
        $this->assertTrue(isset($this->sot['id']));
        unset($this->sot['id']);
        $this->assertFalse(isset($this->sot['id']));
        $this->sot['id'] = $v;
        $this->assertEquals($v, $this->sot['id']);
        $this->assertTrue(isset($this->sot['id']));
    }

    /**
     * Test attribute "name"
     *
     * @covers ::__construct
     * @covers ::getName
     * @covers ::setName
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyName(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['name'],
            $this->allowedValues['name'] ?? null
        );
        $this->sot->setName($v);
        $this->assertEquals($v, $this->sot->getName());
        $this->sot->setName(null);
        $this->assertNull($this->sot->getName());
        $this->sot->setName($v);

        $this->assertEquals($v, $this->sot['name']);
        $v = $this->getFakeValue(
            $this->types['name'],
            $this->allowedValues['name'] ?? null
        );
        $this->sot['name'] = $v;
        $this->assertEquals($v, $this->sot['name']);
        $this->assertTrue(isset($this->sot['name']));
        unset($this->sot['name']);
        $this->assertFalse(isset($this->sot['name']));
        $this->sot['name'] = $v;
        $this->assertEquals($v, $this->sot['name']);
        $this->assertTrue(isset($this->sot['name']));
    }

    /**
     * Test attribute "primary_attribute"
     *
     * @covers ::__construct
     * @covers ::getPrimaryAttribute
     * @covers ::setPrimaryAttribute
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyPrimaryAttribute(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['primary_attribute'],
            $this->allowedValues['primary_attribute'] ?? null
        );
        $this->sot->setPrimaryAttribute($v);
        $this->assertEquals($v, $this->sot->getPrimaryAttribute());
        $this->sot->setPrimaryAttribute(null);
        $this->assertNull($this->sot->getPrimaryAttribute());
        $this->sot->setPrimaryAttribute($v);

        $this->assertEquals($v, $this->sot['primary_attribute']);
        $v = $this->getFakeValue(
            $this->types['primary_attribute'],
            $this->allowedValues['primary_attribute'] ?? null
        );
        $this->sot['primary_attribute'] = $v;
        $this->assertEquals($v, $this->sot['primary_attribute']);
        $this->assertTrue(isset($this->sot['primary_attribute']));
        unset($this->sot['primary_attribute']);
        $this->assertFalse(isset($this->sot['primary_attribute']));
        $this->sot['primary_attribute'] = $v;
        $this->assertEquals($v, $this->sot['primary_attribute']);
        $this->assertTrue(isset($this->sot['primary_attribute']));
    }

    /**
     * Test attribute "status"
     *
     * @covers ::__construct
     * @covers ::getStatus
     * @covers ::setStatus
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyStatus(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['status'],
            $this->allowedValues['status'] ?? null
        );
        $this->sot->setStatus($v);
        $this->assertEquals($v, $this->sot->getStatus());
        $this->sot->setStatus(null);
        $this->assertNull($this->sot->getStatus());
        $this->sot->setStatus($v);

        $this->assertEquals($v, $this->sot['status']);
        $v = $this->getFakeValue(
            $this->types['status'],
            $this->allowedValues['status'] ?? null
        );
        $this->sot['status'] = $v;
        $this->assertEquals($v, $this->sot['status']);
        $this->assertTrue(isset($this->sot['status']));
        unset($this->sot['status']);
        $this->assertFalse(isset($this->sot['status']));
        $this->sot['status'] = $v;
        $this->assertEquals($v, $this->sot['status']);
        $this->assertTrue(isset($this->sot['status']));
    }

    /**
     * Test attribute "trigger_name"
     *
     * @covers ::__construct
     * @covers ::getTriggerName
     * @covers ::setTriggerName
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyTriggerName(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['trigger_name'],
            $this->allowedValues['trigger_name'] ?? null
        );
        $this->sot->setTriggerName($v);
        $this->assertEquals($v, $this->sot->getTriggerName());
        $this->sot->setTriggerName(null);
        $this->assertNull($this->sot->getTriggerName());
        $this->sot->setTriggerName($v);

        $this->assertEquals($v, $this->sot['trigger_name']);
        $v = $this->getFakeValue(
            $this->types['trigger_name'],
            $this->allowedValues['trigger_name'] ?? null
        );
        $this->sot['trigger_name'] = $v;
        $this->assertEquals($v, $this->sot['trigger_name']);
        $this->assertTrue(isset($this->sot['trigger_name']));
        unset($this->sot['trigger_name']);
        $this->assertFalse(isset($this->sot['trigger_name']));
        $this->sot['trigger_name'] = $v;
        $this->assertEquals($v, $this->sot['trigger_name']);
        $this->assertTrue(isset($this->sot['trigger_name']));
    }

    /**
     * Test attribute "updated_at"
     *
     * @covers ::__construct
     * @covers ::getUpdatedAt
     * @covers ::setUpdatedAt
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyUpdatedAt(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['updated_at'],
            $this->allowedValues['updated_at'] ?? null
        );
        $this->sot->setUpdatedAt($v);
        $this->assertEquals($v, $this->sot->getUpdatedAt());
        $this->sot->setUpdatedAt(null);
        $this->assertNull($this->sot->getUpdatedAt());
        $this->sot->setUpdatedAt($v);

        $this->assertEquals($v, $this->sot['updated_at']);
        $v = $this->getFakeValue(
            $this->types['updated_at'],
            $this->allowedValues['updated_at'] ?? null
        );
        $this->sot['updated_at'] = $v;
        $this->assertEquals($v, $this->sot['updated_at']);
        $this->assertTrue(isset($this->sot['updated_at']));
        unset($this->sot['updated_at']);
        $this->assertFalse(isset($this->sot['updated_at']));
        $this->sot['updated_at'] = $v;
        $this->assertEquals($v, $this->sot['updated_at']);
        $this->assertTrue(isset($this->sot['updated_at']));
    }
}
