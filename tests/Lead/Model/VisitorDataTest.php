<?php
/**
 * VisitorDataTest
 *
 * Marketo Rest API
 *
 * Marketo Rest API
 *
 * OpenAPI spec version: 1.0
 * Contact: developerfeedback@marketo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.26
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Lead
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the model.
 */

namespace NecLimDul\MarketoRest\Lead\Test\Model;

use Faker\Factory;
use NecLimDul\MarketoRest\Lead\Model\ModelInterface;
use NecLimDul\MarketoRest\Lead\Model\VisitorData;
use PHPUnit\Framework\TestCase;

/**
 * VisitorDataTest Class Doc Comment
 *
 * @category    Class
 * @description Page visit related data.  Used to populate additional activity fields for filtering and triggering.
 * @package     NecLimDul\MarketoRest\Lead
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 *
 * @coversDefaultClass \NecLimDul\MarketoRest\Lead\Model\VisitorData
 */
class VisitorDataTest extends TestCase
{

    /**
     * @var \NecLimDul\MarketoRest\Lead\Model\VisitorData
     */
    private $sot;

    /**
     * @var string[]
     */
    private $types = [
        'page_url' => 'string',
        'query_string' => 'string',
        'lead_client_ip_address' => 'string',
        'user_agent_string' => 'string',
];

    /**
     * @var \Faker\Generator
     */
    private $faker;

    /**
     * @var scalar[][]
     */
    private $allowedValues = [
    ];

    public function setUp(): void
    {
        parent::setUp();
        $this->faker = \Faker\Factory::create();
        $data = [];
        foreach ($this->types as $field => $type) {
            $data[$field] = $this->getFakeValue($type, $this->allowedValues[$field] ?? null);
        }
        $this->sot = new VisitorData($data);
    }

    /**
     * @param string $type
     * @param scalar[]|null $values
     * @return mixed
     */
    private function getFakeValue(string $type, ?array $values) {
        if (isset($values)) {
            // @todo random.
            return array_pop($values);
        }

        // @todo look for container hints.
        if (strcasecmp(substr($type, -2), '[]') === 0) {
            $return = [];
            $subType = substr($type, 0, -2);
            for ($i = 0; $i <= rand(0, 9); $i++) {
                $return[] = $this->getFakeValue($subType, $values);
            }
            return $return;
        }
        switch ($type) {
            case 'string':
                return $this->faker->word();
            case 'float':
                return $this->faker->randomFloat();
            case 'int':
                return $this->faker->randomNumber();
            case 'bool':
                return $this->faker->boolean();
            case '\DateTime':
                return $this->faker->dateTimeAD();
            case 'object':
                return new \stdClass();
        }
        if (class_exists($type) && is_subclass_of($type, ModelInterface::class)) {
            $model = new $type();
            $types = $type::swaggerTypes();
            foreach ($model->listInvalidProperties() as $field => $reason) {
                // @todo get allowed values? ((getter))AllowedValues
                // @phpstan-ignore-next-line
                $model[$field] = $this->getFakeValue($types[$field], null);
            }
            return $model;
        }
        $this->markTestSkipped('This type is not mocked yet: ' . $type);
    }

    /**
     * Test "VisitorData"
     *
     * @covers ::__construct
     */
    public function testVisitorData(): void
    {
        $this->assertInstanceOf(VisitorData::class, $this->sot);
    }

    /**
     * @covers ::swaggerTypes
     */
    public function testSwaggerTypes(): void
    {
        $this->assertEquals($this->types, VisitorData::swaggerTypes());
    }

    /**
     * @covers ::swaggerFormats
     */
    public function testSwaggerFormats(): void
    {
        $formats = $this->sot->swaggerFormats();
        $this->assertEquals(null, $formats['page_url']);
        $this->assertEquals(null, $formats['query_string']);
        $this->assertEquals(null, $formats['lead_client_ip_address']);
        $this->assertEquals(null, $formats['user_agent_string']);
    }

    /**
     * @covers ::attributeMap
     */
    public function testAttributeMap(): void
    {
        $formats = $this->sot->attributeMap();
        $this->assertEquals('pageURL', $formats['page_url']);
        $this->assertEquals('queryString', $formats['query_string']);
        $this->assertEquals('leadClientIpAddress', $formats['lead_client_ip_address']);
        $this->assertEquals('userAgentString', $formats['user_agent_string']);
    }

    /**
     * @covers ::getters
     * @covers ::setters
     */
    public function testGettersSetters(): void
    {
        $getters = $this->sot->getters();
        $setters = $this->sot->setters();
        foreach (array_keys($this->types) as $field) {
            $this->assertTrue(isset($setters[$field]));
            $this->assertTrue(isset($getters[$field]));
            $this->assertTrue(
                method_exists($this->sot, $getters[$field]),
                'Getter exists on model.'
            );
            $this->assertTrue(
                method_exists($this->sot, $setters[$field]),
                'Setter exists on model.'
            );
        }
    }

    /**
     * @covers ::getModelName
     */
    public function testGetModelName(): void
    {
        $this->assertEquals('VisitorData', $this->sot->getModelName());
    }

    /**
     * @covers ::listInvalidProperties
     * @covers ::valid
     */
    public function testValid(): void
    {
        $this->markTestIncomplete('TODO');
    }

    /**
     * @covers ::setAdditionalProperties
     * @covers ::setAdditionalProperty
     * @covers ::getAdditionalProperties
     */
    public function testAdditionalProperties(): void
    {
        $this->markTestIncomplete('TODO');
    }

    /**
     * @covers ::jsonSerialize
     * @covers ::__toString
     */
    public function testJson(): void
    {
        // Some minimal tests that json generates well.
        $json = json_encode($this->sot);
        $this->assertIsString($json, 'Json encoded');
        $json = json_decode($json);
        $string = json_decode((string) $this->sot);
        $this->assertEquals(
            $json,
            $string
        );
        $this->assertInstanceOf(\stdClass::class, $json);
        $this->assertInstanceOf(\stdClass::class, $string);
    }

    /**
     * Test attribute "page_url"
     *
     * @covers ::__construct
     * @covers ::getPageUrl
     * @covers ::setPageUrl
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyPageUrl(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['page_url'],
            $this->allowedValues['page_url'] ?? null
        );
        $this->sot->setPageUrl($v);
        $this->assertEquals($v, $this->sot->getPageUrl());
        $this->sot->setPageUrl(null);
        $this->assertNull($this->sot->getPageUrl());
        $this->sot->setPageUrl($v);

        $this->assertEquals($v, $this->sot['page_url']);
        $v = $this->getFakeValue(
            $this->types['page_url'],
            $this->allowedValues['page_url'] ?? null
        );
        $this->sot['page_url'] = $v;
        $this->assertEquals($v, $this->sot['page_url']);
        $this->assertTrue(isset($this->sot['page_url']));
        unset($this->sot['page_url']);
        $this->assertFalse(isset($this->sot['page_url']));
        $this->sot['page_url'] = $v;
        $this->assertEquals($v, $this->sot['page_url']);
        $this->assertTrue(isset($this->sot['page_url']));
    }

    /**
     * Test attribute "query_string"
     *
     * @covers ::__construct
     * @covers ::getQueryString
     * @covers ::setQueryString
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyQueryString(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['query_string'],
            $this->allowedValues['query_string'] ?? null
        );
        $this->sot->setQueryString($v);
        $this->assertEquals($v, $this->sot->getQueryString());
        $this->sot->setQueryString(null);
        $this->assertNull($this->sot->getQueryString());
        $this->sot->setQueryString($v);

        $this->assertEquals($v, $this->sot['query_string']);
        $v = $this->getFakeValue(
            $this->types['query_string'],
            $this->allowedValues['query_string'] ?? null
        );
        $this->sot['query_string'] = $v;
        $this->assertEquals($v, $this->sot['query_string']);
        $this->assertTrue(isset($this->sot['query_string']));
        unset($this->sot['query_string']);
        $this->assertFalse(isset($this->sot['query_string']));
        $this->sot['query_string'] = $v;
        $this->assertEquals($v, $this->sot['query_string']);
        $this->assertTrue(isset($this->sot['query_string']));
    }

    /**
     * Test attribute "lead_client_ip_address"
     *
     * @covers ::__construct
     * @covers ::getLeadClientIpAddress
     * @covers ::setLeadClientIpAddress
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyLeadClientIpAddress(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['lead_client_ip_address'],
            $this->allowedValues['lead_client_ip_address'] ?? null
        );
        $this->sot->setLeadClientIpAddress($v);
        $this->assertEquals($v, $this->sot->getLeadClientIpAddress());
        $this->sot->setLeadClientIpAddress(null);
        $this->assertNull($this->sot->getLeadClientIpAddress());
        $this->sot->setLeadClientIpAddress($v);

        $this->assertEquals($v, $this->sot['lead_client_ip_address']);
        $v = $this->getFakeValue(
            $this->types['lead_client_ip_address'],
            $this->allowedValues['lead_client_ip_address'] ?? null
        );
        $this->sot['lead_client_ip_address'] = $v;
        $this->assertEquals($v, $this->sot['lead_client_ip_address']);
        $this->assertTrue(isset($this->sot['lead_client_ip_address']));
        unset($this->sot['lead_client_ip_address']);
        $this->assertFalse(isset($this->sot['lead_client_ip_address']));
        $this->sot['lead_client_ip_address'] = $v;
        $this->assertEquals($v, $this->sot['lead_client_ip_address']);
        $this->assertTrue(isset($this->sot['lead_client_ip_address']));
    }

    /**
     * Test attribute "user_agent_string"
     *
     * @covers ::__construct
     * @covers ::getUserAgentString
     * @covers ::setUserAgentString
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyUserAgentString(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['user_agent_string'],
            $this->allowedValues['user_agent_string'] ?? null
        );
        $this->sot->setUserAgentString($v);
        $this->assertEquals($v, $this->sot->getUserAgentString());
        $this->sot->setUserAgentString(null);
        $this->assertNull($this->sot->getUserAgentString());
        $this->sot->setUserAgentString($v);

        $this->assertEquals($v, $this->sot['user_agent_string']);
        $v = $this->getFakeValue(
            $this->types['user_agent_string'],
            $this->allowedValues['user_agent_string'] ?? null
        );
        $this->sot['user_agent_string'] = $v;
        $this->assertEquals($v, $this->sot['user_agent_string']);
        $this->assertTrue(isset($this->sot['user_agent_string']));
        unset($this->sot['user_agent_string']);
        $this->assertFalse(isset($this->sot['user_agent_string']));
        $this->sot['user_agent_string'] = $v;
        $this->assertEquals($v, $this->sot['user_agent_string']);
        $this->assertTrue(isset($this->sot['user_agent_string']));
    }
}
