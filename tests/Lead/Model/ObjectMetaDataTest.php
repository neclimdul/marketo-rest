<?php
/**
 * ObjectMetaDataTest
 *
 * Marketo Rest API
 *
 * Marketo Rest API
 *
 * OpenAPI spec version: 1.0
 * Contact: developerfeedback@marketo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.26
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Lead
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the model.
 */

namespace NecLimDul\MarketoRest\Lead\Test\Model;

use Faker\Factory;
use NecLimDul\MarketoRest\Lead\Model\ModelInterface;
use NecLimDul\MarketoRest\Lead\Model\ObjectMetaData;
use PHPUnit\Framework\TestCase;

/**
 * ObjectMetaDataTest Class Doc Comment
 *
 * @category    Class
 * @description ObjectMetaData
 * @package     NecLimDul\MarketoRest\Lead
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 *
 * @coversDefaultClass \NecLimDul\MarketoRest\Lead\Model\ObjectMetaData
 */
class ObjectMetaDataTest extends TestCase
{

    /**
     * @var \NecLimDul\MarketoRest\Lead\Model\ObjectMetaData
     */
    private $sot;

    /**
     * @var string[]
     */
    private $types = [
        'created_at' => '\DateTime',
        'dedupe_fields' => 'string[]',
        'description' => 'string',
        'display_name' => 'string',
        'plural_name' => 'string',
        'fields' => '\NecLimDul\MarketoRest\Lead\Model\ObjectField[]',
        'id_field' => 'string',
        'api_name' => 'string',
        'relationships' => '\NecLimDul\MarketoRest\Lead\Model\ObjectRelation[]',
        'searchable_fields' => 'string[][]',
        'updated_at' => '\DateTime',
        'state' => 'string',
        'version' => 'string',
];

    /**
     * @var \Faker\Generator
     */
    private $faker;

    /**
     * @var scalar[][]
     */
    private $allowedValues = [
        'state' => [
            'DRAFT' => 'draft',
            'APPROVED' => 'approved',
            'APPROVED_WITH_DRAFT' => 'approvedWithDraft',
        ],
        'version' => [
            'DRAFT' => 'draft',
            'APPROVED' => 'approved',
        ],
    ];

    public function setUp(): void
    {
        parent::setUp();
        $this->faker = \Faker\Factory::create();
        $data = [];
        foreach ($this->types as $field => $type) {
            $data[$field] = $this->getFakeValue($type, $this->allowedValues[$field] ?? null);
        }
        $this->sot = new ObjectMetaData($data);
    }

    /**
     * @param string $type
     * @param scalar[]|null $values
     * @return mixed
     */
    private function getFakeValue(string $type, ?array $values) {
        if (isset($values)) {
            // @todo random.
            return array_pop($values);
        }

        // @todo look for container hints.
        if (strcasecmp(substr($type, -2), '[]') === 0) {
            $return = [];
            $subType = substr($type, 0, -2);
            for ($i = 0; $i <= rand(0, 9); $i++) {
                $return[] = $this->getFakeValue($subType, $values);
            }
            return $return;
        }
        switch ($type) {
            case 'string':
                return $this->faker->word();
            case 'float':
                return $this->faker->randomFloat();
            case 'int':
                return $this->faker->randomNumber();
            case 'bool':
                return $this->faker->boolean();
            case '\DateTime':
                return $this->faker->dateTimeAD();
            case 'object':
                return new \stdClass();
        }
        if (class_exists($type) && is_subclass_of($type, ModelInterface::class)) {
            $model = new $type();
            $types = $type::swaggerTypes();
            foreach ($model->listInvalidProperties() as $field => $reason) {
                // @todo get allowed values? ((getter))AllowedValues
                // @phpstan-ignore-next-line
                $model[$field] = $this->getFakeValue($types[$field], null);
            }
            return $model;
        }
        $this->markTestSkipped('This type is not mocked yet: ' . $type);
    }

    /**
     * Test "ObjectMetaData"
     *
     * @covers ::__construct
     */
    public function testObjectMetaData(): void
    {
        $this->assertInstanceOf(ObjectMetaData::class, $this->sot);
    }

    /**
     * @covers ::swaggerTypes
     */
    public function testSwaggerTypes(): void
    {
        $this->assertEquals($this->types, ObjectMetaData::swaggerTypes());
    }

    /**
     * @covers ::swaggerFormats
     */
    public function testSwaggerFormats(): void
    {
        $formats = $this->sot->swaggerFormats();
        $this->assertEquals('date-time', $formats['created_at']);
        $this->assertEquals(null, $formats['dedupe_fields']);
        $this->assertEquals(null, $formats['description']);
        $this->assertEquals(null, $formats['display_name']);
        $this->assertEquals(null, $formats['plural_name']);
        $this->assertEquals(null, $formats['fields']);
        $this->assertEquals(null, $formats['id_field']);
        $this->assertEquals(null, $formats['api_name']);
        $this->assertEquals(null, $formats['relationships']);
        $this->assertEquals(null, $formats['searchable_fields']);
        $this->assertEquals('date-time', $formats['updated_at']);
        $this->assertEquals(null, $formats['state']);
        $this->assertEquals(null, $formats['version']);
    }

    /**
     * @covers ::attributeMap
     */
    public function testAttributeMap(): void
    {
        $formats = $this->sot->attributeMap();
        $this->assertEquals('createdAt', $formats['created_at']);
        $this->assertEquals('dedupeFields', $formats['dedupe_fields']);
        $this->assertEquals('description', $formats['description']);
        $this->assertEquals('displayName', $formats['display_name']);
        $this->assertEquals('pluralName', $formats['plural_name']);
        $this->assertEquals('fields', $formats['fields']);
        $this->assertEquals('idField', $formats['id_field']);
        $this->assertEquals('apiName', $formats['api_name']);
        $this->assertEquals('relationships', $formats['relationships']);
        $this->assertEquals('searchableFields', $formats['searchable_fields']);
        $this->assertEquals('updatedAt', $formats['updated_at']);
        $this->assertEquals('state', $formats['state']);
        $this->assertEquals('version', $formats['version']);
    }

    /**
     * @covers ::getters
     * @covers ::setters
     */
    public function testGettersSetters(): void
    {
        $getters = $this->sot->getters();
        $setters = $this->sot->setters();
        foreach (array_keys($this->types) as $field) {
            $this->assertTrue(isset($setters[$field]));
            $this->assertTrue(isset($getters[$field]));
            $this->assertTrue(
                method_exists($this->sot, $getters[$field]),
                'Getter exists on model.'
            );
            $this->assertTrue(
                method_exists($this->sot, $setters[$field]),
                'Setter exists on model.'
            );
        }
    }

    /**
     * @covers ::getModelName
     */
    public function testGetModelName(): void
    {
        $this->assertEquals('ObjectMetaData', $this->sot->getModelName());
    }

    /**
     * @covers ::listInvalidProperties
     * @covers ::valid
     */
    public function testValid(): void
    {
        $this->markTestIncomplete('TODO');
    }

    /**
     * @covers ::setAdditionalProperties
     * @covers ::setAdditionalProperty
     * @covers ::getAdditionalProperties
     */
    public function testAdditionalProperties(): void
    {
        $this->markTestIncomplete('TODO');
    }

    /**
     * @covers ::jsonSerialize
     * @covers ::__toString
     */
    public function testJson(): void
    {
        // Some minimal tests that json generates well.
        $json = json_encode($this->sot);
        $this->assertIsString($json, 'Json encoded');
        $json = json_decode($json);
        $string = json_decode((string) $this->sot);
        $this->assertEquals(
            $json,
            $string
        );
        $this->assertInstanceOf(\stdClass::class, $json);
        $this->assertInstanceOf(\stdClass::class, $string);
    }

    /**
     * Test attribute "created_at"
     *
     * @covers ::__construct
     * @covers ::getCreatedAt
     * @covers ::setCreatedAt
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyCreatedAt(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['created_at'],
            $this->allowedValues['created_at'] ?? null
        );
        $this->sot->setCreatedAt($v);
        $this->assertEquals($v, $this->sot->getCreatedAt());

        $this->assertEquals($v, $this->sot['created_at']);
        $v = $this->getFakeValue(
            $this->types['created_at'],
            $this->allowedValues['created_at'] ?? null
        );
        $this->sot['created_at'] = $v;
        $this->assertEquals($v, $this->sot['created_at']);
        $this->assertTrue(isset($this->sot['created_at']));
        unset($this->sot['created_at']);
        $this->assertFalse(isset($this->sot['created_at']));
        $this->sot['created_at'] = $v;
        $this->assertEquals($v, $this->sot['created_at']);
        $this->assertTrue(isset($this->sot['created_at']));
    }

    /**
     * Test attribute "dedupe_fields"
     *
     * @covers ::__construct
     * @covers ::getDedupeFields
     * @covers ::setDedupeFields
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyDedupeFields(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['dedupe_fields'],
            $this->allowedValues['dedupe_fields'] ?? null
        );
        $this->sot->setDedupeFields($v);
        $this->assertEquals($v, $this->sot->getDedupeFields());

        $this->assertEquals($v, $this->sot['dedupe_fields']);
        $v = $this->getFakeValue(
            $this->types['dedupe_fields'],
            $this->allowedValues['dedupe_fields'] ?? null
        );
        $this->sot['dedupe_fields'] = $v;
        $this->assertEquals($v, $this->sot['dedupe_fields']);
        $this->assertTrue(isset($this->sot['dedupe_fields']));
        unset($this->sot['dedupe_fields']);
        $this->assertFalse(isset($this->sot['dedupe_fields']));
        $this->sot['dedupe_fields'] = $v;
        $this->assertEquals($v, $this->sot['dedupe_fields']);
        $this->assertTrue(isset($this->sot['dedupe_fields']));
    }

    /**
     * Test attribute "description"
     *
     * @covers ::__construct
     * @covers ::getDescription
     * @covers ::setDescription
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyDescription(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['description'],
            $this->allowedValues['description'] ?? null
        );
        $this->sot->setDescription($v);
        $this->assertEquals($v, $this->sot->getDescription());

        $this->assertEquals($v, $this->sot['description']);
        $v = $this->getFakeValue(
            $this->types['description'],
            $this->allowedValues['description'] ?? null
        );
        $this->sot['description'] = $v;
        $this->assertEquals($v, $this->sot['description']);
        $this->assertTrue(isset($this->sot['description']));
        unset($this->sot['description']);
        $this->assertFalse(isset($this->sot['description']));
        $this->sot['description'] = $v;
        $this->assertEquals($v, $this->sot['description']);
        $this->assertTrue(isset($this->sot['description']));
    }

    /**
     * Test attribute "display_name"
     *
     * @covers ::__construct
     * @covers ::getDisplayName
     * @covers ::setDisplayName
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyDisplayName(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['display_name'],
            $this->allowedValues['display_name'] ?? null
        );
        $this->sot->setDisplayName($v);
        $this->assertEquals($v, $this->sot->getDisplayName());

        $this->assertEquals($v, $this->sot['display_name']);
        $v = $this->getFakeValue(
            $this->types['display_name'],
            $this->allowedValues['display_name'] ?? null
        );
        $this->sot['display_name'] = $v;
        $this->assertEquals($v, $this->sot['display_name']);
        $this->assertTrue(isset($this->sot['display_name']));
        unset($this->sot['display_name']);
        $this->assertFalse(isset($this->sot['display_name']));
        $this->sot['display_name'] = $v;
        $this->assertEquals($v, $this->sot['display_name']);
        $this->assertTrue(isset($this->sot['display_name']));
    }

    /**
     * Test attribute "plural_name"
     *
     * @covers ::__construct
     * @covers ::getPluralName
     * @covers ::setPluralName
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyPluralName(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['plural_name'],
            $this->allowedValues['plural_name'] ?? null
        );
        $this->sot->setPluralName($v);
        $this->assertEquals($v, $this->sot->getPluralName());

        $this->assertEquals($v, $this->sot['plural_name']);
        $v = $this->getFakeValue(
            $this->types['plural_name'],
            $this->allowedValues['plural_name'] ?? null
        );
        $this->sot['plural_name'] = $v;
        $this->assertEquals($v, $this->sot['plural_name']);
        $this->assertTrue(isset($this->sot['plural_name']));
        unset($this->sot['plural_name']);
        $this->assertFalse(isset($this->sot['plural_name']));
        $this->sot['plural_name'] = $v;
        $this->assertEquals($v, $this->sot['plural_name']);
        $this->assertTrue(isset($this->sot['plural_name']));
    }

    /**
     * Test attribute "fields"
     *
     * @covers ::__construct
     * @covers ::getFields
     * @covers ::setFields
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyFields(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['fields'],
            $this->allowedValues['fields'] ?? null
        );
        $this->sot->setFields($v);
        $this->assertEquals($v, $this->sot->getFields());

        $this->assertEquals($v, $this->sot['fields']);
        $v = $this->getFakeValue(
            $this->types['fields'],
            $this->allowedValues['fields'] ?? null
        );
        $this->sot['fields'] = $v;
        $this->assertEquals($v, $this->sot['fields']);
        $this->assertTrue(isset($this->sot['fields']));
        unset($this->sot['fields']);
        $this->assertFalse(isset($this->sot['fields']));
        $this->sot['fields'] = $v;
        $this->assertEquals($v, $this->sot['fields']);
        $this->assertTrue(isset($this->sot['fields']));
    }

    /**
     * Test attribute "id_field"
     *
     * @covers ::__construct
     * @covers ::getIdField
     * @covers ::setIdField
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyIdField(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['id_field'],
            $this->allowedValues['id_field'] ?? null
        );
        $this->sot->setIdField($v);
        $this->assertEquals($v, $this->sot->getIdField());

        $this->assertEquals($v, $this->sot['id_field']);
        $v = $this->getFakeValue(
            $this->types['id_field'],
            $this->allowedValues['id_field'] ?? null
        );
        $this->sot['id_field'] = $v;
        $this->assertEquals($v, $this->sot['id_field']);
        $this->assertTrue(isset($this->sot['id_field']));
        unset($this->sot['id_field']);
        $this->assertFalse(isset($this->sot['id_field']));
        $this->sot['id_field'] = $v;
        $this->assertEquals($v, $this->sot['id_field']);
        $this->assertTrue(isset($this->sot['id_field']));
    }

    /**
     * Test attribute "api_name"
     *
     * @covers ::__construct
     * @covers ::getApiName
     * @covers ::setApiName
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyApiName(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['api_name'],
            $this->allowedValues['api_name'] ?? null
        );
        $this->sot->setApiName($v);
        $this->assertEquals($v, $this->sot->getApiName());

        $this->assertEquals($v, $this->sot['api_name']);
        $v = $this->getFakeValue(
            $this->types['api_name'],
            $this->allowedValues['api_name'] ?? null
        );
        $this->sot['api_name'] = $v;
        $this->assertEquals($v, $this->sot['api_name']);
        $this->assertTrue(isset($this->sot['api_name']));
        unset($this->sot['api_name']);
        $this->assertFalse(isset($this->sot['api_name']));
        $this->sot['api_name'] = $v;
        $this->assertEquals($v, $this->sot['api_name']);
        $this->assertTrue(isset($this->sot['api_name']));
    }

    /**
     * Test attribute "relationships"
     *
     * @covers ::__construct
     * @covers ::getRelationships
     * @covers ::setRelationships
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyRelationships(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['relationships'],
            $this->allowedValues['relationships'] ?? null
        );
        $this->sot->setRelationships($v);
        $this->assertEquals($v, $this->sot->getRelationships());

        $this->assertEquals($v, $this->sot['relationships']);
        $v = $this->getFakeValue(
            $this->types['relationships'],
            $this->allowedValues['relationships'] ?? null
        );
        $this->sot['relationships'] = $v;
        $this->assertEquals($v, $this->sot['relationships']);
        $this->assertTrue(isset($this->sot['relationships']));
        unset($this->sot['relationships']);
        $this->assertFalse(isset($this->sot['relationships']));
        $this->sot['relationships'] = $v;
        $this->assertEquals($v, $this->sot['relationships']);
        $this->assertTrue(isset($this->sot['relationships']));
    }

    /**
     * Test attribute "searchable_fields"
     *
     * @covers ::__construct
     * @covers ::getSearchableFields
     * @covers ::setSearchableFields
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertySearchableFields(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['searchable_fields'],
            $this->allowedValues['searchable_fields'] ?? null
        );
        $this->sot->setSearchableFields($v);
        $this->assertEquals($v, $this->sot->getSearchableFields());

        $this->assertEquals($v, $this->sot['searchable_fields']);
        $v = $this->getFakeValue(
            $this->types['searchable_fields'],
            $this->allowedValues['searchable_fields'] ?? null
        );
        $this->sot['searchable_fields'] = $v;
        $this->assertEquals($v, $this->sot['searchable_fields']);
        $this->assertTrue(isset($this->sot['searchable_fields']));
        unset($this->sot['searchable_fields']);
        $this->assertFalse(isset($this->sot['searchable_fields']));
        $this->sot['searchable_fields'] = $v;
        $this->assertEquals($v, $this->sot['searchable_fields']);
        $this->assertTrue(isset($this->sot['searchable_fields']));
    }

    /**
     * Test attribute "updated_at"
     *
     * @covers ::__construct
     * @covers ::getUpdatedAt
     * @covers ::setUpdatedAt
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyUpdatedAt(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['updated_at'],
            $this->allowedValues['updated_at'] ?? null
        );
        $this->sot->setUpdatedAt($v);
        $this->assertEquals($v, $this->sot->getUpdatedAt());

        $this->assertEquals($v, $this->sot['updated_at']);
        $v = $this->getFakeValue(
            $this->types['updated_at'],
            $this->allowedValues['updated_at'] ?? null
        );
        $this->sot['updated_at'] = $v;
        $this->assertEquals($v, $this->sot['updated_at']);
        $this->assertTrue(isset($this->sot['updated_at']));
        unset($this->sot['updated_at']);
        $this->assertFalse(isset($this->sot['updated_at']));
        $this->sot['updated_at'] = $v;
        $this->assertEquals($v, $this->sot['updated_at']);
        $this->assertTrue(isset($this->sot['updated_at']));
    }

    /**
     * Test attribute "state"
     *
     * @covers ::__construct
     * @covers ::getState
     * @covers ::setState
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyState(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['state'],
            $this->allowedValues['state'] ?? null
        );
        $this->sot->setState($v);
        $this->assertEquals($v, $this->sot->getState());
        $this->sot->setState(null);
        $this->assertNull($this->sot->getState());
        $this->sot->setState($v);

        $this->assertEquals($v, $this->sot['state']);
        $v = $this->getFakeValue(
            $this->types['state'],
            $this->allowedValues['state'] ?? null
        );
        $this->sot['state'] = $v;
        $this->assertEquals($v, $this->sot['state']);
        $this->assertTrue(isset($this->sot['state']));
        unset($this->sot['state']);
        $this->assertFalse(isset($this->sot['state']));
        $this->sot['state'] = $v;
        $this->assertEquals($v, $this->sot['state']);
        $this->assertTrue(isset($this->sot['state']));
    }

    /**
     * Test attribute "version"
     *
     * @covers ::__construct
     * @covers ::getVersion
     * @covers ::setVersion
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyVersion(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['version'],
            $this->allowedValues['version'] ?? null
        );
        $this->sot->setVersion($v);
        $this->assertEquals($v, $this->sot->getVersion());

        $this->assertEquals($v, $this->sot['version']);
        $v = $this->getFakeValue(
            $this->types['version'],
            $this->allowedValues['version'] ?? null
        );
        $this->sot['version'] = $v;
        $this->assertEquals($v, $this->sot['version']);
        $this->assertTrue(isset($this->sot['version']));
        unset($this->sot['version']);
        $this->assertFalse(isset($this->sot['version']));
        $this->sot['version'] = $v;
        $this->assertEquals($v, $this->sot['version']);
        $this->assertTrue(isset($this->sot['version']));
    }
}
