<?php
/**
 * LeadAttribute2SearchableFieldsTest
 *
 * Marketo Rest API
 *
 * Marketo Rest API
 *
 * OpenAPI spec version: 1.0
 * Contact: developerfeedback@marketo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.26
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Lead
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the model.
 */

namespace NecLimDul\MarketoRest\Lead\Test\Model;

use Faker\Factory;
use NecLimDul\MarketoRest\Lead\Model\ModelInterface;
use NecLimDul\MarketoRest\Lead\Model\LeadAttribute2SearchableFields;
use PHPUnit\Framework\TestCase;

/**
 * LeadAttribute2SearchableFieldsTest Class Doc Comment
 *
 * @category    Class
 * @description List of searchable fields
 * @package     NecLimDul\MarketoRest\Lead
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 *
 * @coversDefaultClass \NecLimDul\MarketoRest\Lead\Model\LeadAttribute2SearchableFields
 */
class LeadAttribute2SearchableFieldsTest extends TestCase
{

    /**
     * @var \NecLimDul\MarketoRest\Lead\Model\LeadAttribute2SearchableFields
     */
    private $sot;

    /**
     * @var string[]
     */
    private $types = [
];


    public function setUp(): void
    {
        parent::setUp();
        $this->sot = new LeadAttribute2SearchableFields();
    }


    /**
     * Test "LeadAttribute2SearchableFields"
     *
     * @covers ::__construct
     */
    public function testLeadAttribute2SearchableFields(): void
    {
        $this->assertInstanceOf(LeadAttribute2SearchableFields::class, $this->sot);
    }

    /**
     * @covers ::swaggerTypes
     */
    public function testSwaggerTypes(): void
    {
        $this->assertEquals($this->types, LeadAttribute2SearchableFields::swaggerTypes());
    }

    /**
     * @covers ::swaggerFormats
     */
    public function testSwaggerFormats(): void
    {
        $this->assertEmpty($this->sot->swaggerFormats());
    }

    /**
     * @covers ::attributeMap
     */
    public function testAttributeMap(): void
    {
        $this->assertEmpty($this->sot->attributeMap());
    }

    /**
     * @covers ::getters
     * @covers ::setters
     */
    public function testGettersSetters(): void
    {
        $getters = $this->sot->getters();
        $setters = $this->sot->setters();
            $this->assertEmpty($setters);
            $this->assertEmpty($getters);
    }

    /**
     * @covers ::getModelName
     */
    public function testGetModelName(): void
    {
        $this->assertEquals('LeadAttribute2SearchableFields', $this->sot->getModelName());
    }

    /**
     * @covers ::listInvalidProperties
     * @covers ::valid
     */
    public function testValid(): void
    {
        $this->markTestIncomplete('TODO');
    }

    /**
     * @covers ::setAdditionalProperties
     * @covers ::setAdditionalProperty
     * @covers ::getAdditionalProperties
     */
    public function testAdditionalProperties(): void
    {
        $this->markTestIncomplete('TODO');
    }

    /**
     * @covers ::jsonSerialize
     * @covers ::__toString
     */
    public function testJson(): void
    {
        // Some minimal tests that json generates well.
        $json = json_encode($this->sot);
        $this->assertIsString($json, 'Json encoded');
        $json = json_decode($json);
        $string = json_decode((string) $this->sot);
        $this->assertEquals(
            $json,
            $string
        );
        $this->assertInstanceOf(\stdClass::class, $json);
        $this->assertInstanceOf(\stdClass::class, $string);
    }
}
