<?php
/**
 * SyncCustomObjectTypeRequestTest
 *
 * Marketo Rest API
 *
 * Marketo Rest API
 *
 * OpenAPI spec version: 1.0
 * Contact: developerfeedback@marketo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.26
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Lead
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the model.
 */

namespace NecLimDul\MarketoRest\Lead\Test\Model;

use Faker\Factory;
use NecLimDul\MarketoRest\Lead\Model\ModelInterface;
use NecLimDul\MarketoRest\Lead\Model\SyncCustomObjectTypeRequest;
use PHPUnit\Framework\TestCase;

/**
 * SyncCustomObjectTypeRequestTest Class Doc Comment
 *
 * @category    Class
 * @description SyncCustomObjectTypeRequest
 * @package     NecLimDul\MarketoRest\Lead
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 *
 * @coversDefault \NecLimDul\MarketoRest\Lead\Model\SyncCustomObjectTypeRequest
 */
class SyncCustomObjectTypeRequestTest extends TestCase
{

    /**
     * @var \NecLimDul\MarketoRest\Lead\Model\SyncCustomObjectTypeRequest
     */
    private $sot;

    /**
     * @var \Faker\Generator
     */
    private $faker;

    /**
     * @var string[]
     */
    private $types = [
        'action' => 'string',
        'display_name' => 'string',
        'api_name' => 'string',
        'plural_name' => 'string',
        'description' => 'string',
        'show_in_lead_detail' => 'bool',
    ];
    /**
     * @var scalar[][]
     */
    private $allowedValues = [
        'action' => [
            'CREATE_ONLY' => 'createOnly',
            'UPDATE_ONLY' => 'updateOnly',
            'CREATE_OR_UPDATE' => 'createOrUpdate',
        ],
    ];

    public function setUp(): void
    {
        parent::setUp();
        $this->faker = \Faker\Factory::create();
        $data = [];
        foreach ($this->types as $field => $type) {
            $data[$field] = $this->getFakeValue($type, $this->allowedValues[$field] ?? null);
        }
        $this->sot = new SyncCustomObjectTypeRequest($data);
    }

    /**
     * @param string $type
     * @param scalar[]|null $values
     * @return mixed
     */
    private function getFakeValue(string $type, ?array $values) {
        if (isset($values)) {
            // @todo random.
            return array_pop($values);
        }

        // @todo look for container hints.
        if (strcasecmp(substr($type, -2), '[]') === 0) {
            $return = [];
            $subType = substr($type, 0, -2);
            for ($i = 0; $i <= rand(0, 9); $i++) {
                $return[] = $this->getFakeValue($subType, $values);
            }
            return $return;
        }
        switch ($type) {
            case 'string':
                return $this->faker->word();
            case 'float':
                return $this->faker->randomFloat();
            case 'int':
                return $this->faker->randomNumber();
            case 'bool':
                return $this->faker->boolean();
            case '\DateTime':
                return $this->faker->dateTimeAD();
            case 'object':
                return new \stdClass();
        }
        if (class_exists($type) && is_subclass_of($type, ModelInterface::class)) {
            return new $type();
        }
        $this->markTestSkipped('This type is not mocked yet: ' . $type);
    }

    /**
     * Test "SyncCustomObjectTypeRequest"
     *
     * @covers ::__construct
     */
    public function testSyncCustomObjectTypeRequest(): void
    {
        $this->assertInstanceOf(\NecLimDul\MarketoRest\Lead\Model\SyncCustomObjectTypeRequest::class, $this->sot);
    }

    /**
     * Test attribute "action"
     *
     * @covers ::__construct
     * @covers ::getAction
     * @covers ::setAction
     */
    public function testPropertyAction(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['action'],
            $this->allowedValues['action'] ?? null
        );
        $this->sot->setAction($v);
        $this->assertEquals($v, $this->sot->getAction());
        // $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "display_name"
     *
     * @covers ::__construct
     * @covers ::getDisplayName
     * @covers ::setDisplayName
     */
    public function testPropertyDisplayName(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['display_name'],
            $this->allowedValues['display_name'] ?? null
        );
        $this->sot->setDisplayName($v);
        $this->assertEquals($v, $this->sot->getDisplayName());
        // $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "api_name"
     *
     * @covers ::__construct
     * @covers ::getApiName
     * @covers ::setApiName
     */
    public function testPropertyApiName(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['api_name'],
            $this->allowedValues['api_name'] ?? null
        );
        $this->sot->setApiName($v);
        $this->assertEquals($v, $this->sot->getApiName());
        // $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "plural_name"
     *
     * @covers ::__construct
     * @covers ::getPluralName
     * @covers ::setPluralName
     */
    public function testPropertyPluralName(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['plural_name'],
            $this->allowedValues['plural_name'] ?? null
        );
        $this->sot->setPluralName($v);
        $this->assertEquals($v, $this->sot->getPluralName());
        // $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "description"
     *
     * @covers ::__construct
     * @covers ::getDescription
     * @covers ::setDescription
     */
    public function testPropertyDescription(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['description'],
            $this->allowedValues['description'] ?? null
        );
        $this->sot->setDescription($v);
        $this->assertEquals($v, $this->sot->getDescription());
        // $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "show_in_lead_detail"
     *
     * @covers ::__construct
     * @covers ::getShowInLeadDetail
     * @covers ::setShowInLeadDetail
     */
    public function testPropertyShowInLeadDetail(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['show_in_lead_detail'],
            $this->allowedValues['show_in_lead_detail'] ?? null
        );
        $this->sot->setShowInLeadDetail($v);
        $this->assertEquals($v, $this->sot->getShowInLeadDetail());
        // $this->markTestIncomplete('Not implemented');
    }
}
