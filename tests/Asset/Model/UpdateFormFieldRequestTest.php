<?php
/**
 * UpdateFormFieldRequestTest
 *
 * Marketo Rest API
 *
 * Marketo Rest API
 *
 * OpenAPI spec version: 1.0
 * Contact: developerfeedback@marketo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.26
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Asset
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the model.
 */

namespace NecLimDul\MarketoRest\Asset\Test\Model;

use Faker\Factory;
use NecLimDul\MarketoRest\Asset\Model\ModelInterface;
use NecLimDul\MarketoRest\Asset\Model\UpdateFormFieldRequest;
use PHPUnit\Framework\TestCase;

/**
 * UpdateFormFieldRequestTest Class Doc Comment
 *
 * @category    Class
 * @description UpdateFormFieldRequest
 * @package     NecLimDul\MarketoRest\Asset
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 *
 * @coversDefaultClass \NecLimDul\MarketoRest\Asset\Model\UpdateFormFieldRequest
 */
class UpdateFormFieldRequestTest extends TestCase
{

    /**
     * @var \NecLimDul\MarketoRest\Asset\Model\UpdateFormFieldRequest
     */
    private $sot;

    /**
     * @var string[]
     */
    private $types = [
        'blank_fields' => 'int',
        'default_value' => 'string',
        'field_type' => 'string',
        'field_width' => 'int',
        'form_prefill' => 'bool',
        'is_sensitive' => 'bool',
        'hint_text' => 'string',
        'initially_checked' => 'bool',
        'instructions' => 'string',
        'label' => 'string',
        'label_to_right' => 'bool',
        'label_width' => 'int',
        'mask_input' => 'string',
        'max_length' => 'int',
        'max_value' => 'float',
        'min_value' => 'float',
        'multi_select' => 'bool',
        'required' => 'bool',
        'validation_message' => 'string',
        'values' => 'string',
        'visible_lines' => 'int',
];

    /**
     * @var \Faker\Generator
     */
    private $faker;

    /**
     * @var scalar[][]
     */
    private $allowedValues = [
    ];

    public function setUp(): void
    {
        parent::setUp();
        $this->faker = \Faker\Factory::create();
        $data = [];
        foreach ($this->types as $field => $type) {
            $data[$field] = $this->getFakeValue($type, $this->allowedValues[$field] ?? null);
        }
        $this->sot = new UpdateFormFieldRequest($data);
    }

    /**
     * @param string $type
     * @param scalar[]|null $values
     * @return mixed
     */
    private function getFakeValue(string $type, ?array $values) {
        if (isset($values)) {
            // @todo random.
            return array_pop($values);
        }

        // @todo look for container hints.
        if (strcasecmp(substr($type, -2), '[]') === 0) {
            $return = [];
            $subType = substr($type, 0, -2);
            for ($i = 0; $i <= rand(0, 9); $i++) {
                $return[] = $this->getFakeValue($subType, $values);
            }
            return $return;
        }
        switch ($type) {
            case 'string':
                return $this->faker->word();
            case 'float':
                return $this->faker->randomFloat();
            case 'int':
                return $this->faker->randomNumber();
            case 'bool':
                return $this->faker->boolean();
            case '\DateTime':
                return $this->faker->dateTimeAD();
            case 'object':
                return new \stdClass();
        }
        if (class_exists($type) && is_subclass_of($type, ModelInterface::class)) {
            $model = new $type();
            $types = $type::swaggerTypes();
            foreach ($model->listInvalidProperties() as $field => $reason) {
                // @todo get allowed values? ((getter))AllowedValues
                // @phpstan-ignore-next-line
                $model[$field] = $this->getFakeValue($types[$field], null);
            }
            return $model;
        }
        $this->markTestSkipped('This type is not mocked yet: ' . $type);
    }

    /**
     * Test "UpdateFormFieldRequest"
     *
     * @covers ::__construct
     */
    public function testUpdateFormFieldRequest(): void
    {
        $this->assertInstanceOf(UpdateFormFieldRequest::class, $this->sot);
    }

    /**
     * @covers ::swaggerTypes
     */
    public function testSwaggerTypes(): void
    {
        $this->assertEquals($this->types, UpdateFormFieldRequest::swaggerTypes());
    }

    /**
     * @covers ::swaggerFormats
     */
    public function testSwaggerFormats(): void
    {
        $formats = $this->sot->swaggerFormats();
        $this->assertEquals('int32', $formats['blank_fields']);
        $this->assertEquals(null, $formats['default_value']);
        $this->assertEquals(null, $formats['field_type']);
        $this->assertEquals('int32', $formats['field_width']);
        $this->assertEquals(null, $formats['form_prefill']);
        $this->assertEquals(null, $formats['is_sensitive']);
        $this->assertEquals(null, $formats['hint_text']);
        $this->assertEquals(null, $formats['initially_checked']);
        $this->assertEquals(null, $formats['instructions']);
        $this->assertEquals(null, $formats['label']);
        $this->assertEquals(null, $formats['label_to_right']);
        $this->assertEquals('int32', $formats['label_width']);
        $this->assertEquals(null, $formats['mask_input']);
        $this->assertEquals('int32', $formats['max_length']);
        $this->assertEquals('float', $formats['max_value']);
        $this->assertEquals('float', $formats['min_value']);
        $this->assertEquals(null, $formats['multi_select']);
        $this->assertEquals(null, $formats['required']);
        $this->assertEquals(null, $formats['validation_message']);
        $this->assertEquals(null, $formats['values']);
        $this->assertEquals('int32', $formats['visible_lines']);
    }

    /**
     * @covers ::attributeMap
     */
    public function testAttributeMap(): void
    {
        $formats = $this->sot->attributeMap();
        $this->assertEquals('blankFields', $formats['blank_fields']);
        $this->assertEquals('defaultValue', $formats['default_value']);
        $this->assertEquals('fieldType', $formats['field_type']);
        $this->assertEquals('fieldWidth', $formats['field_width']);
        $this->assertEquals('formPrefill', $formats['form_prefill']);
        $this->assertEquals('isSensitive', $formats['is_sensitive']);
        $this->assertEquals('hintText', $formats['hint_text']);
        $this->assertEquals('initiallyChecked', $formats['initially_checked']);
        $this->assertEquals('instructions', $formats['instructions']);
        $this->assertEquals('label', $formats['label']);
        $this->assertEquals('labelToRight', $formats['label_to_right']);
        $this->assertEquals('labelWidth', $formats['label_width']);
        $this->assertEquals('maskInput', $formats['mask_input']);
        $this->assertEquals('maxLength', $formats['max_length']);
        $this->assertEquals('maxValue', $formats['max_value']);
        $this->assertEquals('minValue', $formats['min_value']);
        $this->assertEquals('multiSelect', $formats['multi_select']);
        $this->assertEquals('required', $formats['required']);
        $this->assertEquals('validationMessage', $formats['validation_message']);
        $this->assertEquals('values', $formats['values']);
        $this->assertEquals('visibleLines', $formats['visible_lines']);
    }

    /**
     * @covers ::getters
     * @covers ::setters
     */
    public function testGettersSetters(): void
    {
        $getters = $this->sot->getters();
        $setters = $this->sot->setters();
        foreach (array_keys($this->types) as $field) {
            $this->assertTrue(isset($setters[$field]));
            $this->assertTrue(isset($getters[$field]));
            $this->assertTrue(
                method_exists($this->sot, $getters[$field]),
                'Getter exists on model.'
            );
            $this->assertTrue(
                method_exists($this->sot, $setters[$field]),
                'Setter exists on model.'
            );
        }
    }

    /**
     * @covers ::getModelName
     */
    public function testGetModelName(): void
    {
        $this->assertEquals('UpdateFormFieldRequest', $this->sot->getModelName());
    }

    /**
     * @covers ::listInvalidProperties
     * @covers ::valid
     */
    public function testValid(): void
    {
        $this->markTestIncomplete('TODO');
    }

    /**
     * @covers ::setAdditionalProperties
     * @covers ::setAdditionalProperty
     * @covers ::getAdditionalProperties
     */
    public function testAdditionalProperties(): void
    {
        $this->markTestIncomplete('TODO');
    }

    /**
     * @covers ::jsonSerialize
     * @covers ::__toString
     */
    public function testJson(): void
    {
        // Some minimal tests that json generates well.
        $json = json_encode($this->sot);
        $this->assertIsString($json, 'Json encoded');
        $json = json_decode($json);
        $string = json_decode((string) $this->sot);
        $this->assertEquals(
            $json,
            $string
        );
        $this->assertInstanceOf(\stdClass::class, $json);
        $this->assertInstanceOf(\stdClass::class, $string);
    }

    /**
     * Test attribute "blank_fields"
     *
     * @covers ::__construct
     * @covers ::getBlankFields
     * @covers ::setBlankFields
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyBlankFields(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['blank_fields'],
            $this->allowedValues['blank_fields'] ?? null
        );
        $this->sot->setBlankFields($v);
        $this->assertEquals($v, $this->sot->getBlankFields());
        $this->sot->setBlankFields(null);
        $this->assertNull($this->sot->getBlankFields());
        $this->sot->setBlankFields($v);

        $this->assertEquals($v, $this->sot['blank_fields']);
        $v = $this->getFakeValue(
            $this->types['blank_fields'],
            $this->allowedValues['blank_fields'] ?? null
        );
        $this->sot['blank_fields'] = $v;
        $this->assertEquals($v, $this->sot['blank_fields']);
        $this->assertTrue(isset($this->sot['blank_fields']));
        unset($this->sot['blank_fields']);
        $this->assertFalse(isset($this->sot['blank_fields']));
        $this->sot['blank_fields'] = $v;
        $this->assertEquals($v, $this->sot['blank_fields']);
        $this->assertTrue(isset($this->sot['blank_fields']));
    }

    /**
     * Test attribute "default_value"
     *
     * @covers ::__construct
     * @covers ::getDefaultValue
     * @covers ::setDefaultValue
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyDefaultValue(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['default_value'],
            $this->allowedValues['default_value'] ?? null
        );
        $this->sot->setDefaultValue($v);
        $this->assertEquals($v, $this->sot->getDefaultValue());
        $this->sot->setDefaultValue(null);
        $this->assertNull($this->sot->getDefaultValue());
        $this->sot->setDefaultValue($v);

        $this->assertEquals($v, $this->sot['default_value']);
        $v = $this->getFakeValue(
            $this->types['default_value'],
            $this->allowedValues['default_value'] ?? null
        );
        $this->sot['default_value'] = $v;
        $this->assertEquals($v, $this->sot['default_value']);
        $this->assertTrue(isset($this->sot['default_value']));
        unset($this->sot['default_value']);
        $this->assertFalse(isset($this->sot['default_value']));
        $this->sot['default_value'] = $v;
        $this->assertEquals($v, $this->sot['default_value']);
        $this->assertTrue(isset($this->sot['default_value']));
    }

    /**
     * Test attribute "field_type"
     *
     * @covers ::__construct
     * @covers ::getFieldType
     * @covers ::setFieldType
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyFieldType(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['field_type'],
            $this->allowedValues['field_type'] ?? null
        );
        $this->sot->setFieldType($v);
        $this->assertEquals($v, $this->sot->getFieldType());
        $this->sot->setFieldType(null);
        $this->assertNull($this->sot->getFieldType());
        $this->sot->setFieldType($v);

        $this->assertEquals($v, $this->sot['field_type']);
        $v = $this->getFakeValue(
            $this->types['field_type'],
            $this->allowedValues['field_type'] ?? null
        );
        $this->sot['field_type'] = $v;
        $this->assertEquals($v, $this->sot['field_type']);
        $this->assertTrue(isset($this->sot['field_type']));
        unset($this->sot['field_type']);
        $this->assertFalse(isset($this->sot['field_type']));
        $this->sot['field_type'] = $v;
        $this->assertEquals($v, $this->sot['field_type']);
        $this->assertTrue(isset($this->sot['field_type']));
    }

    /**
     * Test attribute "field_width"
     *
     * @covers ::__construct
     * @covers ::getFieldWidth
     * @covers ::setFieldWidth
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyFieldWidth(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['field_width'],
            $this->allowedValues['field_width'] ?? null
        );
        $this->sot->setFieldWidth($v);
        $this->assertEquals($v, $this->sot->getFieldWidth());
        $this->sot->setFieldWidth(null);
        $this->assertNull($this->sot->getFieldWidth());
        $this->sot->setFieldWidth($v);

        $this->assertEquals($v, $this->sot['field_width']);
        $v = $this->getFakeValue(
            $this->types['field_width'],
            $this->allowedValues['field_width'] ?? null
        );
        $this->sot['field_width'] = $v;
        $this->assertEquals($v, $this->sot['field_width']);
        $this->assertTrue(isset($this->sot['field_width']));
        unset($this->sot['field_width']);
        $this->assertFalse(isset($this->sot['field_width']));
        $this->sot['field_width'] = $v;
        $this->assertEquals($v, $this->sot['field_width']);
        $this->assertTrue(isset($this->sot['field_width']));
    }

    /**
     * Test attribute "form_prefill"
     *
     * @covers ::__construct
     * @covers ::getFormPrefill
     * @covers ::setFormPrefill
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyFormPrefill(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['form_prefill'],
            $this->allowedValues['form_prefill'] ?? null
        );
        $this->sot->setFormPrefill($v);
        $this->assertEquals($v, $this->sot->getFormPrefill());
        $this->sot->setFormPrefill(null);
        $this->assertNull($this->sot->getFormPrefill());
        $this->sot->setFormPrefill($v);

        $this->assertEquals($v, $this->sot['form_prefill']);
        $v = $this->getFakeValue(
            $this->types['form_prefill'],
            $this->allowedValues['form_prefill'] ?? null
        );
        $this->sot['form_prefill'] = $v;
        $this->assertEquals($v, $this->sot['form_prefill']);
        $this->assertTrue(isset($this->sot['form_prefill']));
        unset($this->sot['form_prefill']);
        $this->assertFalse(isset($this->sot['form_prefill']));
        $this->sot['form_prefill'] = $v;
        $this->assertEquals($v, $this->sot['form_prefill']);
        $this->assertTrue(isset($this->sot['form_prefill']));
    }

    /**
     * Test attribute "is_sensitive"
     *
     * @covers ::__construct
     * @covers ::getIsSensitive
     * @covers ::setIsSensitive
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyIsSensitive(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['is_sensitive'],
            $this->allowedValues['is_sensitive'] ?? null
        );
        $this->sot->setIsSensitive($v);
        $this->assertEquals($v, $this->sot->getIsSensitive());
        $this->sot->setIsSensitive(null);
        $this->assertNull($this->sot->getIsSensitive());
        $this->sot->setIsSensitive($v);

        $this->assertEquals($v, $this->sot['is_sensitive']);
        $v = $this->getFakeValue(
            $this->types['is_sensitive'],
            $this->allowedValues['is_sensitive'] ?? null
        );
        $this->sot['is_sensitive'] = $v;
        $this->assertEquals($v, $this->sot['is_sensitive']);
        $this->assertTrue(isset($this->sot['is_sensitive']));
        unset($this->sot['is_sensitive']);
        $this->assertFalse(isset($this->sot['is_sensitive']));
        $this->sot['is_sensitive'] = $v;
        $this->assertEquals($v, $this->sot['is_sensitive']);
        $this->assertTrue(isset($this->sot['is_sensitive']));
    }

    /**
     * Test attribute "hint_text"
     *
     * @covers ::__construct
     * @covers ::getHintText
     * @covers ::setHintText
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyHintText(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['hint_text'],
            $this->allowedValues['hint_text'] ?? null
        );
        $this->sot->setHintText($v);
        $this->assertEquals($v, $this->sot->getHintText());
        $this->sot->setHintText(null);
        $this->assertNull($this->sot->getHintText());
        $this->sot->setHintText($v);

        $this->assertEquals($v, $this->sot['hint_text']);
        $v = $this->getFakeValue(
            $this->types['hint_text'],
            $this->allowedValues['hint_text'] ?? null
        );
        $this->sot['hint_text'] = $v;
        $this->assertEquals($v, $this->sot['hint_text']);
        $this->assertTrue(isset($this->sot['hint_text']));
        unset($this->sot['hint_text']);
        $this->assertFalse(isset($this->sot['hint_text']));
        $this->sot['hint_text'] = $v;
        $this->assertEquals($v, $this->sot['hint_text']);
        $this->assertTrue(isset($this->sot['hint_text']));
    }

    /**
     * Test attribute "initially_checked"
     *
     * @covers ::__construct
     * @covers ::getInitiallyChecked
     * @covers ::setInitiallyChecked
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyInitiallyChecked(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['initially_checked'],
            $this->allowedValues['initially_checked'] ?? null
        );
        $this->sot->setInitiallyChecked($v);
        $this->assertEquals($v, $this->sot->getInitiallyChecked());
        $this->sot->setInitiallyChecked(null);
        $this->assertNull($this->sot->getInitiallyChecked());
        $this->sot->setInitiallyChecked($v);

        $this->assertEquals($v, $this->sot['initially_checked']);
        $v = $this->getFakeValue(
            $this->types['initially_checked'],
            $this->allowedValues['initially_checked'] ?? null
        );
        $this->sot['initially_checked'] = $v;
        $this->assertEquals($v, $this->sot['initially_checked']);
        $this->assertTrue(isset($this->sot['initially_checked']));
        unset($this->sot['initially_checked']);
        $this->assertFalse(isset($this->sot['initially_checked']));
        $this->sot['initially_checked'] = $v;
        $this->assertEquals($v, $this->sot['initially_checked']);
        $this->assertTrue(isset($this->sot['initially_checked']));
    }

    /**
     * Test attribute "instructions"
     *
     * @covers ::__construct
     * @covers ::getInstructions
     * @covers ::setInstructions
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyInstructions(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['instructions'],
            $this->allowedValues['instructions'] ?? null
        );
        $this->sot->setInstructions($v);
        $this->assertEquals($v, $this->sot->getInstructions());
        $this->sot->setInstructions(null);
        $this->assertNull($this->sot->getInstructions());
        $this->sot->setInstructions($v);

        $this->assertEquals($v, $this->sot['instructions']);
        $v = $this->getFakeValue(
            $this->types['instructions'],
            $this->allowedValues['instructions'] ?? null
        );
        $this->sot['instructions'] = $v;
        $this->assertEquals($v, $this->sot['instructions']);
        $this->assertTrue(isset($this->sot['instructions']));
        unset($this->sot['instructions']);
        $this->assertFalse(isset($this->sot['instructions']));
        $this->sot['instructions'] = $v;
        $this->assertEquals($v, $this->sot['instructions']);
        $this->assertTrue(isset($this->sot['instructions']));
    }

    /**
     * Test attribute "label"
     *
     * @covers ::__construct
     * @covers ::getLabel
     * @covers ::setLabel
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyLabel(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['label'],
            $this->allowedValues['label'] ?? null
        );
        $this->sot->setLabel($v);
        $this->assertEquals($v, $this->sot->getLabel());
        $this->sot->setLabel(null);
        $this->assertNull($this->sot->getLabel());
        $this->sot->setLabel($v);

        $this->assertEquals($v, $this->sot['label']);
        $v = $this->getFakeValue(
            $this->types['label'],
            $this->allowedValues['label'] ?? null
        );
        $this->sot['label'] = $v;
        $this->assertEquals($v, $this->sot['label']);
        $this->assertTrue(isset($this->sot['label']));
        unset($this->sot['label']);
        $this->assertFalse(isset($this->sot['label']));
        $this->sot['label'] = $v;
        $this->assertEquals($v, $this->sot['label']);
        $this->assertTrue(isset($this->sot['label']));
    }

    /**
     * Test attribute "label_to_right"
     *
     * @covers ::__construct
     * @covers ::getLabelToRight
     * @covers ::setLabelToRight
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyLabelToRight(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['label_to_right'],
            $this->allowedValues['label_to_right'] ?? null
        );
        $this->sot->setLabelToRight($v);
        $this->assertEquals($v, $this->sot->getLabelToRight());
        $this->sot->setLabelToRight(null);
        $this->assertNull($this->sot->getLabelToRight());
        $this->sot->setLabelToRight($v);

        $this->assertEquals($v, $this->sot['label_to_right']);
        $v = $this->getFakeValue(
            $this->types['label_to_right'],
            $this->allowedValues['label_to_right'] ?? null
        );
        $this->sot['label_to_right'] = $v;
        $this->assertEquals($v, $this->sot['label_to_right']);
        $this->assertTrue(isset($this->sot['label_to_right']));
        unset($this->sot['label_to_right']);
        $this->assertFalse(isset($this->sot['label_to_right']));
        $this->sot['label_to_right'] = $v;
        $this->assertEquals($v, $this->sot['label_to_right']);
        $this->assertTrue(isset($this->sot['label_to_right']));
    }

    /**
     * Test attribute "label_width"
     *
     * @covers ::__construct
     * @covers ::getLabelWidth
     * @covers ::setLabelWidth
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyLabelWidth(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['label_width'],
            $this->allowedValues['label_width'] ?? null
        );
        $this->sot->setLabelWidth($v);
        $this->assertEquals($v, $this->sot->getLabelWidth());
        $this->sot->setLabelWidth(null);
        $this->assertNull($this->sot->getLabelWidth());
        $this->sot->setLabelWidth($v);

        $this->assertEquals($v, $this->sot['label_width']);
        $v = $this->getFakeValue(
            $this->types['label_width'],
            $this->allowedValues['label_width'] ?? null
        );
        $this->sot['label_width'] = $v;
        $this->assertEquals($v, $this->sot['label_width']);
        $this->assertTrue(isset($this->sot['label_width']));
        unset($this->sot['label_width']);
        $this->assertFalse(isset($this->sot['label_width']));
        $this->sot['label_width'] = $v;
        $this->assertEquals($v, $this->sot['label_width']);
        $this->assertTrue(isset($this->sot['label_width']));
    }

    /**
     * Test attribute "mask_input"
     *
     * @covers ::__construct
     * @covers ::getMaskInput
     * @covers ::setMaskInput
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyMaskInput(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['mask_input'],
            $this->allowedValues['mask_input'] ?? null
        );
        $this->sot->setMaskInput($v);
        $this->assertEquals($v, $this->sot->getMaskInput());
        $this->sot->setMaskInput(null);
        $this->assertNull($this->sot->getMaskInput());
        $this->sot->setMaskInput($v);

        $this->assertEquals($v, $this->sot['mask_input']);
        $v = $this->getFakeValue(
            $this->types['mask_input'],
            $this->allowedValues['mask_input'] ?? null
        );
        $this->sot['mask_input'] = $v;
        $this->assertEquals($v, $this->sot['mask_input']);
        $this->assertTrue(isset($this->sot['mask_input']));
        unset($this->sot['mask_input']);
        $this->assertFalse(isset($this->sot['mask_input']));
        $this->sot['mask_input'] = $v;
        $this->assertEquals($v, $this->sot['mask_input']);
        $this->assertTrue(isset($this->sot['mask_input']));
    }

    /**
     * Test attribute "max_length"
     *
     * @covers ::__construct
     * @covers ::getMaxLength
     * @covers ::setMaxLength
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyMaxLength(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['max_length'],
            $this->allowedValues['max_length'] ?? null
        );
        $this->sot->setMaxLength($v);
        $this->assertEquals($v, $this->sot->getMaxLength());
        $this->sot->setMaxLength(null);
        $this->assertNull($this->sot->getMaxLength());
        $this->sot->setMaxLength($v);

        $this->assertEquals($v, $this->sot['max_length']);
        $v = $this->getFakeValue(
            $this->types['max_length'],
            $this->allowedValues['max_length'] ?? null
        );
        $this->sot['max_length'] = $v;
        $this->assertEquals($v, $this->sot['max_length']);
        $this->assertTrue(isset($this->sot['max_length']));
        unset($this->sot['max_length']);
        $this->assertFalse(isset($this->sot['max_length']));
        $this->sot['max_length'] = $v;
        $this->assertEquals($v, $this->sot['max_length']);
        $this->assertTrue(isset($this->sot['max_length']));
    }

    /**
     * Test attribute "max_value"
     *
     * @covers ::__construct
     * @covers ::getMaxValue
     * @covers ::setMaxValue
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyMaxValue(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['max_value'],
            $this->allowedValues['max_value'] ?? null
        );
        $this->sot->setMaxValue($v);
        $this->assertEquals($v, $this->sot->getMaxValue());
        $this->sot->setMaxValue(null);
        $this->assertNull($this->sot->getMaxValue());
        $this->sot->setMaxValue($v);

        $this->assertEquals($v, $this->sot['max_value']);
        $v = $this->getFakeValue(
            $this->types['max_value'],
            $this->allowedValues['max_value'] ?? null
        );
        $this->sot['max_value'] = $v;
        $this->assertEquals($v, $this->sot['max_value']);
        $this->assertTrue(isset($this->sot['max_value']));
        unset($this->sot['max_value']);
        $this->assertFalse(isset($this->sot['max_value']));
        $this->sot['max_value'] = $v;
        $this->assertEquals($v, $this->sot['max_value']);
        $this->assertTrue(isset($this->sot['max_value']));
    }

    /**
     * Test attribute "min_value"
     *
     * @covers ::__construct
     * @covers ::getMinValue
     * @covers ::setMinValue
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyMinValue(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['min_value'],
            $this->allowedValues['min_value'] ?? null
        );
        $this->sot->setMinValue($v);
        $this->assertEquals($v, $this->sot->getMinValue());
        $this->sot->setMinValue(null);
        $this->assertNull($this->sot->getMinValue());
        $this->sot->setMinValue($v);

        $this->assertEquals($v, $this->sot['min_value']);
        $v = $this->getFakeValue(
            $this->types['min_value'],
            $this->allowedValues['min_value'] ?? null
        );
        $this->sot['min_value'] = $v;
        $this->assertEquals($v, $this->sot['min_value']);
        $this->assertTrue(isset($this->sot['min_value']));
        unset($this->sot['min_value']);
        $this->assertFalse(isset($this->sot['min_value']));
        $this->sot['min_value'] = $v;
        $this->assertEquals($v, $this->sot['min_value']);
        $this->assertTrue(isset($this->sot['min_value']));
    }

    /**
     * Test attribute "multi_select"
     *
     * @covers ::__construct
     * @covers ::getMultiSelect
     * @covers ::setMultiSelect
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyMultiSelect(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['multi_select'],
            $this->allowedValues['multi_select'] ?? null
        );
        $this->sot->setMultiSelect($v);
        $this->assertEquals($v, $this->sot->getMultiSelect());
        $this->sot->setMultiSelect(null);
        $this->assertNull($this->sot->getMultiSelect());
        $this->sot->setMultiSelect($v);

        $this->assertEquals($v, $this->sot['multi_select']);
        $v = $this->getFakeValue(
            $this->types['multi_select'],
            $this->allowedValues['multi_select'] ?? null
        );
        $this->sot['multi_select'] = $v;
        $this->assertEquals($v, $this->sot['multi_select']);
        $this->assertTrue(isset($this->sot['multi_select']));
        unset($this->sot['multi_select']);
        $this->assertFalse(isset($this->sot['multi_select']));
        $this->sot['multi_select'] = $v;
        $this->assertEquals($v, $this->sot['multi_select']);
        $this->assertTrue(isset($this->sot['multi_select']));
    }

    /**
     * Test attribute "required"
     *
     * @covers ::__construct
     * @covers ::getRequired
     * @covers ::setRequired
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyRequired(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['required'],
            $this->allowedValues['required'] ?? null
        );
        $this->sot->setRequired($v);
        $this->assertEquals($v, $this->sot->getRequired());
        $this->sot->setRequired(null);
        $this->assertNull($this->sot->getRequired());
        $this->sot->setRequired($v);

        $this->assertEquals($v, $this->sot['required']);
        $v = $this->getFakeValue(
            $this->types['required'],
            $this->allowedValues['required'] ?? null
        );
        $this->sot['required'] = $v;
        $this->assertEquals($v, $this->sot['required']);
        $this->assertTrue(isset($this->sot['required']));
        unset($this->sot['required']);
        $this->assertFalse(isset($this->sot['required']));
        $this->sot['required'] = $v;
        $this->assertEquals($v, $this->sot['required']);
        $this->assertTrue(isset($this->sot['required']));
    }

    /**
     * Test attribute "validation_message"
     *
     * @covers ::__construct
     * @covers ::getValidationMessage
     * @covers ::setValidationMessage
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyValidationMessage(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['validation_message'],
            $this->allowedValues['validation_message'] ?? null
        );
        $this->sot->setValidationMessage($v);
        $this->assertEquals($v, $this->sot->getValidationMessage());
        $this->sot->setValidationMessage(null);
        $this->assertNull($this->sot->getValidationMessage());
        $this->sot->setValidationMessage($v);

        $this->assertEquals($v, $this->sot['validation_message']);
        $v = $this->getFakeValue(
            $this->types['validation_message'],
            $this->allowedValues['validation_message'] ?? null
        );
        $this->sot['validation_message'] = $v;
        $this->assertEquals($v, $this->sot['validation_message']);
        $this->assertTrue(isset($this->sot['validation_message']));
        unset($this->sot['validation_message']);
        $this->assertFalse(isset($this->sot['validation_message']));
        $this->sot['validation_message'] = $v;
        $this->assertEquals($v, $this->sot['validation_message']);
        $this->assertTrue(isset($this->sot['validation_message']));
    }

    /**
     * Test attribute "values"
     *
     * @covers ::__construct
     * @covers ::getValues
     * @covers ::setValues
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyValues(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['values'],
            $this->allowedValues['values'] ?? null
        );
        $this->sot->setValues($v);
        $this->assertEquals($v, $this->sot->getValues());
        $this->sot->setValues(null);
        $this->assertNull($this->sot->getValues());
        $this->sot->setValues($v);

        $this->assertEquals($v, $this->sot['values']);
        $v = $this->getFakeValue(
            $this->types['values'],
            $this->allowedValues['values'] ?? null
        );
        $this->sot['values'] = $v;
        $this->assertEquals($v, $this->sot['values']);
        $this->assertTrue(isset($this->sot['values']));
        unset($this->sot['values']);
        $this->assertFalse(isset($this->sot['values']));
        $this->sot['values'] = $v;
        $this->assertEquals($v, $this->sot['values']);
        $this->assertTrue(isset($this->sot['values']));
    }

    /**
     * Test attribute "visible_lines"
     *
     * @covers ::__construct
     * @covers ::getVisibleLines
     * @covers ::setVisibleLines
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyVisibleLines(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['visible_lines'],
            $this->allowedValues['visible_lines'] ?? null
        );
        $this->sot->setVisibleLines($v);
        $this->assertEquals($v, $this->sot->getVisibleLines());
        $this->sot->setVisibleLines(null);
        $this->assertNull($this->sot->getVisibleLines());
        $this->sot->setVisibleLines($v);

        $this->assertEquals($v, $this->sot['visible_lines']);
        $v = $this->getFakeValue(
            $this->types['visible_lines'],
            $this->allowedValues['visible_lines'] ?? null
        );
        $this->sot['visible_lines'] = $v;
        $this->assertEquals($v, $this->sot['visible_lines']);
        $this->assertTrue(isset($this->sot['visible_lines']));
        unset($this->sot['visible_lines']);
        $this->assertFalse(isset($this->sot['visible_lines']));
        $this->sot['visible_lines'] = $v;
        $this->assertEquals($v, $this->sot['visible_lines']);
        $this->assertTrue(isset($this->sot['visible_lines']));
    }
}
