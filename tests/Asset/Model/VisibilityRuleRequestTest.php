<?php
/**
 * VisibilityRuleRequestTest
 *
 * Marketo Rest API
 *
 * Marketo Rest API
 *
 * OpenAPI spec version: 1.0
 * Contact: developerfeedback@marketo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.26
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Asset
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the model.
 */

namespace NecLimDul\MarketoRest\Asset\Test\Model;

use Faker\Factory;
use NecLimDul\MarketoRest\Asset\Model\ModelInterface;
use NecLimDul\MarketoRest\Asset\Model\VisibilityRuleRequest;
use PHPUnit\Framework\TestCase;

/**
 * VisibilityRuleRequestTest Class Doc Comment
 *
 * @category    Class
 * @description VisibilityRuleRequest
 * @package     NecLimDul\MarketoRest\Asset
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 *
 * @coversDefaultClass \NecLimDul\MarketoRest\Asset\Model\VisibilityRuleRequest
 */
class VisibilityRuleRequestTest extends TestCase
{

    /**
     * @var \NecLimDul\MarketoRest\Asset\Model\VisibilityRuleRequest
     */
    private $sot;

    /**
     * @var string[]
     */
    private $types = [
        'alt_label' => 'string',
        'operator' => 'string',
        'pick_list_values' => '\NecLimDul\MarketoRest\Asset\Model\PickListDTO[]',
        'subject_field' => 'string',
        'values' => 'string[]',
];

    /**
     * @var \Faker\Generator
     */
    private $faker;

    /**
     * @var scalar[][]
     */
    private $allowedValues = [
        'operator' => [
            'IS' => 'is',
            'IS_NOT' => 'isNot',
            'IS_EMPTY' => 'isEmpty',
            'IS_NOT_EMPTY' => 'isNotEmpty',
            'STARTS_WITH' => 'startsWith',
            'NOT_STARTS_WITH' => 'notStartsWith',
            'ENDS_WITH' => 'endsWith',
            'NOT_ENDS_WITH' => 'notEndsWith',
            'CONTAINS' => 'contains',
            'NOT_CONTAINS' => 'notContains',
            'GREATER_THAN' => 'greaterThan',
            'LESS_THAN' => 'lessThan',
            'AT_LEAST' => 'atLeast',
            'AT_MOST' => 'atMost',
            'BETWEEN' => 'between',
            'NOT_BETWEEN' => 'notBetween',
            'NOT_IN_TIME_FRAME' => 'notInTimeFrame',
            'IN_PAST' => 'inPast',
            'NOT_IN_PAST' => 'notInPast',
            'AFTER' => 'after',
            'BEFORE' => 'before',
            'IN_TIME_FRAME' => 'inTimeFrame',
            'ON_OR_AFTER' => 'onOrAfter',
            'ON_OR_BEFORE' => 'onOrBefore',
        ],
    ];

    public function setUp(): void
    {
        parent::setUp();
        $this->faker = \Faker\Factory::create();
        $data = [];
        foreach ($this->types as $field => $type) {
            $data[$field] = $this->getFakeValue($type, $this->allowedValues[$field] ?? null);
        }
        $this->sot = new VisibilityRuleRequest($data);
    }

    /**
     * @param string $type
     * @param scalar[]|null $values
     * @return mixed
     */
    private function getFakeValue(string $type, ?array $values) {
        if (isset($values)) {
            // @todo random.
            return array_pop($values);
        }

        // @todo look for container hints.
        if (strcasecmp(substr($type, -2), '[]') === 0) {
            $return = [];
            $subType = substr($type, 0, -2);
            for ($i = 0; $i <= rand(0, 9); $i++) {
                $return[] = $this->getFakeValue($subType, $values);
            }
            return $return;
        }
        switch ($type) {
            case 'string':
                return $this->faker->word();
            case 'float':
                return $this->faker->randomFloat();
            case 'int':
                return $this->faker->randomNumber();
            case 'bool':
                return $this->faker->boolean();
            case '\DateTime':
                return $this->faker->dateTimeAD();
            case 'object':
                return new \stdClass();
        }
        if (class_exists($type) && is_subclass_of($type, ModelInterface::class)) {
            $model = new $type();
            $types = $type::swaggerTypes();
            foreach ($model->listInvalidProperties() as $field => $reason) {
                // @todo get allowed values? ((getter))AllowedValues
                // @phpstan-ignore-next-line
                $model[$field] = $this->getFakeValue($types[$field], null);
            }
            return $model;
        }
        $this->markTestSkipped('This type is not mocked yet: ' . $type);
    }

    /**
     * Test "VisibilityRuleRequest"
     *
     * @covers ::__construct
     */
    public function testVisibilityRuleRequest(): void
    {
        $this->assertInstanceOf(VisibilityRuleRequest::class, $this->sot);
    }

    /**
     * @covers ::swaggerTypes
     */
    public function testSwaggerTypes(): void
    {
        $this->assertEquals($this->types, VisibilityRuleRequest::swaggerTypes());
    }

    /**
     * @covers ::swaggerFormats
     */
    public function testSwaggerFormats(): void
    {
        $formats = $this->sot->swaggerFormats();
        $this->assertEquals(null, $formats['alt_label']);
        $this->assertEquals(null, $formats['operator']);
        $this->assertEquals(null, $formats['pick_list_values']);
        $this->assertEquals(null, $formats['subject_field']);
        $this->assertEquals(null, $formats['values']);
    }

    /**
     * @covers ::attributeMap
     */
    public function testAttributeMap(): void
    {
        $formats = $this->sot->attributeMap();
        $this->assertEquals('altLabel', $formats['alt_label']);
        $this->assertEquals('operator', $formats['operator']);
        $this->assertEquals('pickListValues', $formats['pick_list_values']);
        $this->assertEquals('subjectField', $formats['subject_field']);
        $this->assertEquals('values', $formats['values']);
    }

    /**
     * @covers ::getters
     * @covers ::setters
     */
    public function testGettersSetters(): void
    {
        $getters = $this->sot->getters();
        $setters = $this->sot->setters();
        foreach (array_keys($this->types) as $field) {
            $this->assertTrue(isset($setters[$field]));
            $this->assertTrue(isset($getters[$field]));
            $this->assertTrue(
                method_exists($this->sot, $getters[$field]),
                'Getter exists on model.'
            );
            $this->assertTrue(
                method_exists($this->sot, $setters[$field]),
                'Setter exists on model.'
            );
        }
    }

    /**
     * @covers ::getModelName
     */
    public function testGetModelName(): void
    {
        $this->assertEquals('VisibilityRuleRequest', $this->sot->getModelName());
    }

    /**
     * @covers ::listInvalidProperties
     * @covers ::valid
     */
    public function testValid(): void
    {
        $this->markTestIncomplete('TODO');
    }

    /**
     * @covers ::setAdditionalProperties
     * @covers ::setAdditionalProperty
     * @covers ::getAdditionalProperties
     */
    public function testAdditionalProperties(): void
    {
        $this->markTestIncomplete('TODO');
    }

    /**
     * @covers ::jsonSerialize
     * @covers ::__toString
     */
    public function testJson(): void
    {
        // Some minimal tests that json generates well.
        $json = json_encode($this->sot);
        $this->assertIsString($json, 'Json encoded');
        $json = json_decode($json);
        $string = json_decode((string) $this->sot);
        $this->assertEquals(
            $json,
            $string
        );
        $this->assertInstanceOf(\stdClass::class, $json);
        $this->assertInstanceOf(\stdClass::class, $string);
    }

    /**
     * Test attribute "alt_label"
     *
     * @covers ::__construct
     * @covers ::getAltLabel
     * @covers ::setAltLabel
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyAltLabel(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['alt_label'],
            $this->allowedValues['alt_label'] ?? null
        );
        $this->sot->setAltLabel($v);
        $this->assertEquals($v, $this->sot->getAltLabel());
        $this->sot->setAltLabel(null);
        $this->assertNull($this->sot->getAltLabel());
        $this->sot->setAltLabel($v);

        $this->assertEquals($v, $this->sot['alt_label']);
        $v = $this->getFakeValue(
            $this->types['alt_label'],
            $this->allowedValues['alt_label'] ?? null
        );
        $this->sot['alt_label'] = $v;
        $this->assertEquals($v, $this->sot['alt_label']);
        $this->assertTrue(isset($this->sot['alt_label']));
        unset($this->sot['alt_label']);
        $this->assertFalse(isset($this->sot['alt_label']));
        $this->sot['alt_label'] = $v;
        $this->assertEquals($v, $this->sot['alt_label']);
        $this->assertTrue(isset($this->sot['alt_label']));
    }

    /**
     * Test attribute "operator"
     *
     * @covers ::__construct
     * @covers ::getOperator
     * @covers ::setOperator
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyOperator(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['operator'],
            $this->allowedValues['operator'] ?? null
        );
        $this->sot->setOperator($v);
        $this->assertEquals($v, $this->sot->getOperator());

        $this->assertEquals($v, $this->sot['operator']);
        $v = $this->getFakeValue(
            $this->types['operator'],
            $this->allowedValues['operator'] ?? null
        );
        $this->sot['operator'] = $v;
        $this->assertEquals($v, $this->sot['operator']);
        $this->assertTrue(isset($this->sot['operator']));
        unset($this->sot['operator']);
        $this->assertFalse(isset($this->sot['operator']));
        $this->sot['operator'] = $v;
        $this->assertEquals($v, $this->sot['operator']);
        $this->assertTrue(isset($this->sot['operator']));
    }

    /**
     * Test attribute "pick_list_values"
     *
     * @covers ::__construct
     * @covers ::getPickListValues
     * @covers ::setPickListValues
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyPickListValues(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['pick_list_values'],
            $this->allowedValues['pick_list_values'] ?? null
        );
        $this->sot->setPickListValues($v);
        $this->assertEquals($v, $this->sot->getPickListValues());
        $this->sot->setPickListValues(null);
        $this->assertNull($this->sot->getPickListValues());
        $this->sot->setPickListValues($v);

        $this->assertEquals($v, $this->sot['pick_list_values']);
        $v = $this->getFakeValue(
            $this->types['pick_list_values'],
            $this->allowedValues['pick_list_values'] ?? null
        );
        $this->sot['pick_list_values'] = $v;
        $this->assertEquals($v, $this->sot['pick_list_values']);
        $this->assertTrue(isset($this->sot['pick_list_values']));
        unset($this->sot['pick_list_values']);
        $this->assertFalse(isset($this->sot['pick_list_values']));
        $this->sot['pick_list_values'] = $v;
        $this->assertEquals($v, $this->sot['pick_list_values']);
        $this->assertTrue(isset($this->sot['pick_list_values']));
    }

    /**
     * Test attribute "subject_field"
     *
     * @covers ::__construct
     * @covers ::getSubjectField
     * @covers ::setSubjectField
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertySubjectField(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['subject_field'],
            $this->allowedValues['subject_field'] ?? null
        );
        $this->sot->setSubjectField($v);
        $this->assertEquals($v, $this->sot->getSubjectField());

        $this->assertEquals($v, $this->sot['subject_field']);
        $v = $this->getFakeValue(
            $this->types['subject_field'],
            $this->allowedValues['subject_field'] ?? null
        );
        $this->sot['subject_field'] = $v;
        $this->assertEquals($v, $this->sot['subject_field']);
        $this->assertTrue(isset($this->sot['subject_field']));
        unset($this->sot['subject_field']);
        $this->assertFalse(isset($this->sot['subject_field']));
        $this->sot['subject_field'] = $v;
        $this->assertEquals($v, $this->sot['subject_field']);
        $this->assertTrue(isset($this->sot['subject_field']));
    }

    /**
     * Test attribute "values"
     *
     * @covers ::__construct
     * @covers ::getValues
     * @covers ::setValues
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyValues(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['values'],
            $this->allowedValues['values'] ?? null
        );
        $this->sot->setValues($v);
        $this->assertEquals($v, $this->sot->getValues());

        $this->assertEquals($v, $this->sot['values']);
        $v = $this->getFakeValue(
            $this->types['values'],
            $this->allowedValues['values'] ?? null
        );
        $this->sot['values'] = $v;
        $this->assertEquals($v, $this->sot['values']);
        $this->assertTrue(isset($this->sot['values']));
        unset($this->sot['values']);
        $this->assertFalse(isset($this->sot['values']));
        $this->sot['values'] = $v;
        $this->assertEquals($v, $this->sot['values']);
        $this->assertTrue(isset($this->sot['values']));
    }
}
