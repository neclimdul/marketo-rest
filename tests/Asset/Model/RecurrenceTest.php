<?php
/**
 * RecurrenceTest
 *
 * Marketo Rest API
 *
 * Marketo Rest API
 *
 * OpenAPI spec version: 1.0
 * Contact: developerfeedback@marketo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.26
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Asset
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the model.
 */

namespace NecLimDul\MarketoRest\Asset\Test\Model;

use Faker\Factory;
use NecLimDul\MarketoRest\Asset\Model\ModelInterface;
use NecLimDul\MarketoRest\Asset\Model\Recurrence;
use PHPUnit\Framework\TestCase;

/**
 * RecurrenceTest Class Doc Comment
 *
 * @category    Class
 * @description Recurrence
 * @package     NecLimDul\MarketoRest\Asset
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 *
 * @coversDefaultClass \NecLimDul\MarketoRest\Asset\Model\Recurrence
 */
class RecurrenceTest extends TestCase
{

    /**
     * @var \NecLimDul\MarketoRest\Asset\Model\Recurrence
     */
    private $sot;

    /**
     * @var string[]
     */
    private $types = [
        'start_at' => '\DateTime',
        'end_at' => '\DateTime',
        'interval_type' => 'string',
        'interval' => 'int',
        'weekday_only' => 'bool',
        'weekday_mask' => 'string[]',
        'day_of_month' => 'int',
        'day_of_week' => 'string',
        'week_of_month' => 'int',
];

    /**
     * @var \Faker\Generator
     */
    private $faker;

    /**
     * @var scalar[][]
     */
    private $allowedValues = [
        'interval_type' => [
            'DAILY' => 'Daily',
            'WEEKLY' => 'Weekly',
            'MONTHLY' => 'Monthly',
        ],
        'day_of_week' => [
            'MONDAY' => 'Monday',
            'TUESDAY' => 'Tuesday',
            'WEDNESDAY' => 'Wednesday',
            'THURSDAY' => 'Thursday',
            'FRIDAY' => 'Friday',
            'SATURDAY' => 'Saturday',
            'SUNDAY' => 'Sunday',
        ],
    ];

    public function setUp(): void
    {
        parent::setUp();
        $this->faker = \Faker\Factory::create();
        $data = [];
        foreach ($this->types as $field => $type) {
            $data[$field] = $this->getFakeValue($type, $this->allowedValues[$field] ?? null);
        }
        $this->sot = new Recurrence($data);
    }

    /**
     * @param string $type
     * @param scalar[]|null $values
     * @return mixed
     */
    private function getFakeValue(string $type, ?array $values) {
        if (isset($values)) {
            // @todo random.
            return array_pop($values);
        }

        // @todo look for container hints.
        if (strcasecmp(substr($type, -2), '[]') === 0) {
            $return = [];
            $subType = substr($type, 0, -2);
            for ($i = 0; $i <= rand(0, 9); $i++) {
                $return[] = $this->getFakeValue($subType, $values);
            }
            return $return;
        }
        switch ($type) {
            case 'string':
                return $this->faker->word();
            case 'float':
                return $this->faker->randomFloat();
            case 'int':
                return $this->faker->randomNumber();
            case 'bool':
                return $this->faker->boolean();
            case '\DateTime':
                return $this->faker->dateTimeAD();
            case 'object':
                return new \stdClass();
        }
        if (class_exists($type) && is_subclass_of($type, ModelInterface::class)) {
            $model = new $type();
            $types = $type::swaggerTypes();
            foreach ($model->listInvalidProperties() as $field => $reason) {
                // @todo get allowed values? ((getter))AllowedValues
                // @phpstan-ignore-next-line
                $model[$field] = $this->getFakeValue($types[$field], null);
            }
            return $model;
        }
        $this->markTestSkipped('This type is not mocked yet: ' . $type);
    }

    /**
     * Test "Recurrence"
     *
     * @covers ::__construct
     */
    public function testRecurrence(): void
    {
        $this->assertInstanceOf(Recurrence::class, $this->sot);
    }

    /**
     * @covers ::swaggerTypes
     */
    public function testSwaggerTypes(): void
    {
        $this->assertEquals($this->types, Recurrence::swaggerTypes());
    }

    /**
     * @covers ::swaggerFormats
     */
    public function testSwaggerFormats(): void
    {
        $formats = $this->sot->swaggerFormats();
        $this->assertEquals('date-time', $formats['start_at']);
        $this->assertEquals('date-time', $formats['end_at']);
        $this->assertEquals(null, $formats['interval_type']);
        $this->assertEquals('int32', $formats['interval']);
        $this->assertEquals(null, $formats['weekday_only']);
        $this->assertEquals(null, $formats['weekday_mask']);
        $this->assertEquals('int32', $formats['day_of_month']);
        $this->assertEquals('int32', $formats['day_of_week']);
        $this->assertEquals('int32', $formats['week_of_month']);
    }

    /**
     * @covers ::attributeMap
     */
    public function testAttributeMap(): void
    {
        $formats = $this->sot->attributeMap();
        $this->assertEquals('startAt', $formats['start_at']);
        $this->assertEquals('endAt', $formats['end_at']);
        $this->assertEquals('intervalType', $formats['interval_type']);
        $this->assertEquals('interval', $formats['interval']);
        $this->assertEquals('weekdayOnly', $formats['weekday_only']);
        $this->assertEquals('weekdayMask', $formats['weekday_mask']);
        $this->assertEquals('dayOfMonth', $formats['day_of_month']);
        $this->assertEquals('dayOfWeek', $formats['day_of_week']);
        $this->assertEquals('weekOfMonth', $formats['week_of_month']);
    }

    /**
     * @covers ::getters
     * @covers ::setters
     */
    public function testGettersSetters(): void
    {
        $getters = $this->sot->getters();
        $setters = $this->sot->setters();
        foreach (array_keys($this->types) as $field) {
            $this->assertTrue(isset($setters[$field]));
            $this->assertTrue(isset($getters[$field]));
            $this->assertTrue(
                method_exists($this->sot, $getters[$field]),
                'Getter exists on model.'
            );
            $this->assertTrue(
                method_exists($this->sot, $setters[$field]),
                'Setter exists on model.'
            );
        }
    }

    /**
     * @covers ::getModelName
     */
    public function testGetModelName(): void
    {
        $this->assertEquals('Recurrence', $this->sot->getModelName());
    }

    /**
     * @covers ::listInvalidProperties
     * @covers ::valid
     */
    public function testValid(): void
    {
        $this->markTestIncomplete('TODO');
    }

    /**
     * @covers ::setAdditionalProperties
     * @covers ::setAdditionalProperty
     * @covers ::getAdditionalProperties
     */
    public function testAdditionalProperties(): void
    {
        $this->markTestIncomplete('TODO');
    }

    /**
     * @covers ::jsonSerialize
     * @covers ::__toString
     */
    public function testJson(): void
    {
        // Some minimal tests that json generates well.
        $json = json_encode($this->sot);
        $this->assertIsString($json, 'Json encoded');
        $json = json_decode($json);
        $string = json_decode((string) $this->sot);
        $this->assertEquals(
            $json,
            $string
        );
        $this->assertInstanceOf(\stdClass::class, $json);
        $this->assertInstanceOf(\stdClass::class, $string);
    }

    /**
     * Test attribute "start_at"
     *
     * @covers ::__construct
     * @covers ::getStartAt
     * @covers ::setStartAt
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyStartAt(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['start_at'],
            $this->allowedValues['start_at'] ?? null
        );
        $this->sot->setStartAt($v);
        $this->assertEquals($v, $this->sot->getStartAt());

        $this->assertEquals($v, $this->sot['start_at']);
        $v = $this->getFakeValue(
            $this->types['start_at'],
            $this->allowedValues['start_at'] ?? null
        );
        $this->sot['start_at'] = $v;
        $this->assertEquals($v, $this->sot['start_at']);
        $this->assertTrue(isset($this->sot['start_at']));
        unset($this->sot['start_at']);
        $this->assertFalse(isset($this->sot['start_at']));
        $this->sot['start_at'] = $v;
        $this->assertEquals($v, $this->sot['start_at']);
        $this->assertTrue(isset($this->sot['start_at']));
    }

    /**
     * Test attribute "end_at"
     *
     * @covers ::__construct
     * @covers ::getEndAt
     * @covers ::setEndAt
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyEndAt(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['end_at'],
            $this->allowedValues['end_at'] ?? null
        );
        $this->sot->setEndAt($v);
        $this->assertEquals($v, $this->sot->getEndAt());

        $this->assertEquals($v, $this->sot['end_at']);
        $v = $this->getFakeValue(
            $this->types['end_at'],
            $this->allowedValues['end_at'] ?? null
        );
        $this->sot['end_at'] = $v;
        $this->assertEquals($v, $this->sot['end_at']);
        $this->assertTrue(isset($this->sot['end_at']));
        unset($this->sot['end_at']);
        $this->assertFalse(isset($this->sot['end_at']));
        $this->sot['end_at'] = $v;
        $this->assertEquals($v, $this->sot['end_at']);
        $this->assertTrue(isset($this->sot['end_at']));
    }

    /**
     * Test attribute "interval_type"
     *
     * @covers ::__construct
     * @covers ::getIntervalType
     * @covers ::setIntervalType
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyIntervalType(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['interval_type'],
            $this->allowedValues['interval_type'] ?? null
        );
        $this->sot->setIntervalType($v);
        $this->assertEquals($v, $this->sot->getIntervalType());

        $this->assertEquals($v, $this->sot['interval_type']);
        $v = $this->getFakeValue(
            $this->types['interval_type'],
            $this->allowedValues['interval_type'] ?? null
        );
        $this->sot['interval_type'] = $v;
        $this->assertEquals($v, $this->sot['interval_type']);
        $this->assertTrue(isset($this->sot['interval_type']));
        unset($this->sot['interval_type']);
        $this->assertFalse(isset($this->sot['interval_type']));
        $this->sot['interval_type'] = $v;
        $this->assertEquals($v, $this->sot['interval_type']);
        $this->assertTrue(isset($this->sot['interval_type']));
    }

    /**
     * Test attribute "interval"
     *
     * @covers ::__construct
     * @covers ::getInterval
     * @covers ::setInterval
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyInterval(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['interval'],
            $this->allowedValues['interval'] ?? null
        );
        $this->sot->setInterval($v);
        $this->assertEquals($v, $this->sot->getInterval());

        $this->assertEquals($v, $this->sot['interval']);
        $v = $this->getFakeValue(
            $this->types['interval'],
            $this->allowedValues['interval'] ?? null
        );
        $this->sot['interval'] = $v;
        $this->assertEquals($v, $this->sot['interval']);
        $this->assertTrue(isset($this->sot['interval']));
        unset($this->sot['interval']);
        $this->assertFalse(isset($this->sot['interval']));
        $this->sot['interval'] = $v;
        $this->assertEquals($v, $this->sot['interval']);
        $this->assertTrue(isset($this->sot['interval']));
    }

    /**
     * Test attribute "weekday_only"
     *
     * @covers ::__construct
     * @covers ::getWeekdayOnly
     * @covers ::setWeekdayOnly
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyWeekdayOnly(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['weekday_only'],
            $this->allowedValues['weekday_only'] ?? null
        );
        $this->sot->setWeekdayOnly($v);
        $this->assertEquals($v, $this->sot->getWeekdayOnly());

        $this->assertEquals($v, $this->sot['weekday_only']);
        $v = $this->getFakeValue(
            $this->types['weekday_only'],
            $this->allowedValues['weekday_only'] ?? null
        );
        $this->sot['weekday_only'] = $v;
        $this->assertEquals($v, $this->sot['weekday_only']);
        $this->assertTrue(isset($this->sot['weekday_only']));
        unset($this->sot['weekday_only']);
        $this->assertFalse(isset($this->sot['weekday_only']));
        $this->sot['weekday_only'] = $v;
        $this->assertEquals($v, $this->sot['weekday_only']);
        $this->assertTrue(isset($this->sot['weekday_only']));
    }

    /**
     * Test attribute "weekday_mask"
     *
     * @covers ::__construct
     * @covers ::getWeekdayMask
     * @covers ::setWeekdayMask
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyWeekdayMask(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['weekday_mask'],
            $this->allowedValues['weekday_mask'] ?? null
        );
        $this->sot->setWeekdayMask($v);
        $this->assertEquals($v, $this->sot->getWeekdayMask());

        $this->assertEquals($v, $this->sot['weekday_mask']);
        $v = $this->getFakeValue(
            $this->types['weekday_mask'],
            $this->allowedValues['weekday_mask'] ?? null
        );
        $this->sot['weekday_mask'] = $v;
        $this->assertEquals($v, $this->sot['weekday_mask']);
        $this->assertTrue(isset($this->sot['weekday_mask']));
        unset($this->sot['weekday_mask']);
        $this->assertFalse(isset($this->sot['weekday_mask']));
        $this->sot['weekday_mask'] = $v;
        $this->assertEquals($v, $this->sot['weekday_mask']);
        $this->assertTrue(isset($this->sot['weekday_mask']));
    }

    /**
     * Test attribute "day_of_month"
     *
     * @covers ::__construct
     * @covers ::getDayOfMonth
     * @covers ::setDayOfMonth
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyDayOfMonth(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['day_of_month'],
            $this->allowedValues['day_of_month'] ?? null
        );
        $this->sot->setDayOfMonth($v);
        $this->assertEquals($v, $this->sot->getDayOfMonth());

        $this->assertEquals($v, $this->sot['day_of_month']);
        $v = $this->getFakeValue(
            $this->types['day_of_month'],
            $this->allowedValues['day_of_month'] ?? null
        );
        $this->sot['day_of_month'] = $v;
        $this->assertEquals($v, $this->sot['day_of_month']);
        $this->assertTrue(isset($this->sot['day_of_month']));
        unset($this->sot['day_of_month']);
        $this->assertFalse(isset($this->sot['day_of_month']));
        $this->sot['day_of_month'] = $v;
        $this->assertEquals($v, $this->sot['day_of_month']);
        $this->assertTrue(isset($this->sot['day_of_month']));
    }

    /**
     * Test attribute "day_of_week"
     *
     * @covers ::__construct
     * @covers ::getDayOfWeek
     * @covers ::setDayOfWeek
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyDayOfWeek(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['day_of_week'],
            $this->allowedValues['day_of_week'] ?? null
        );
        $this->sot->setDayOfWeek($v);
        $this->assertEquals($v, $this->sot->getDayOfWeek());

        $this->assertEquals($v, $this->sot['day_of_week']);
        $v = $this->getFakeValue(
            $this->types['day_of_week'],
            $this->allowedValues['day_of_week'] ?? null
        );
        $this->sot['day_of_week'] = $v;
        $this->assertEquals($v, $this->sot['day_of_week']);
        $this->assertTrue(isset($this->sot['day_of_week']));
        unset($this->sot['day_of_week']);
        $this->assertFalse(isset($this->sot['day_of_week']));
        $this->sot['day_of_week'] = $v;
        $this->assertEquals($v, $this->sot['day_of_week']);
        $this->assertTrue(isset($this->sot['day_of_week']));
    }

    /**
     * Test attribute "week_of_month"
     *
     * @covers ::__construct
     * @covers ::getWeekOfMonth
     * @covers ::setWeekOfMonth
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyWeekOfMonth(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['week_of_month'],
            $this->allowedValues['week_of_month'] ?? null
        );
        $this->sot->setWeekOfMonth($v);
        $this->assertEquals($v, $this->sot->getWeekOfMonth());

        $this->assertEquals($v, $this->sot['week_of_month']);
        $v = $this->getFakeValue(
            $this->types['week_of_month'],
            $this->allowedValues['week_of_month'] ?? null
        );
        $this->sot['week_of_month'] = $v;
        $this->assertEquals($v, $this->sot['week_of_month']);
        $this->assertTrue(isset($this->sot['week_of_month']));
        unset($this->sot['week_of_month']);
        $this->assertFalse(isset($this->sot['week_of_month']));
        $this->sot['week_of_month'] = $v;
        $this->assertEquals($v, $this->sot['week_of_month']);
        $this->assertTrue(isset($this->sot['week_of_month']));
    }
}
