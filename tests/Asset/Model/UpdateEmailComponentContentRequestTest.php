<?php
/**
 * UpdateEmailComponentContentRequestTest
 *
 * Marketo Rest API
 *
 * Marketo Rest API
 *
 * OpenAPI spec version: 1.0
 * Contact: developerfeedback@marketo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.26
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Asset
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the model.
 */

namespace NecLimDul\MarketoRest\Asset\Test\Model;

use Faker\Factory;
use NecLimDul\MarketoRest\Asset\Model\ModelInterface;
use NecLimDul\MarketoRest\Asset\Model\UpdateEmailComponentContentRequest;
use PHPUnit\Framework\TestCase;

/**
 * UpdateEmailComponentContentRequestTest Class Doc Comment
 *
 * @category    Class
 * @description UpdateEmailComponentContentRequest
 * @package     NecLimDul\MarketoRest\Asset
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 *
 * @coversDefaultClass \NecLimDul\MarketoRest\Asset\Model\UpdateEmailComponentContentRequest
 */
class UpdateEmailComponentContentRequestTest extends TestCase
{

    /**
     * @var \NecLimDul\MarketoRest\Asset\Model\UpdateEmailComponentContentRequest
     */
    private $sot;

    /**
     * @var string[]
     */
    private $types = [
        'alt_text' => 'string',
        'external_url' => 'string',
        'height' => 'int',
        'image' => 'string',
        'link_url' => 'string',
        'over_write' => 'bool',
        'style' => 'string',
        'text_value' => 'string',
        'type' => 'string',
        'value' => 'string',
        'video_url' => 'string',
        'width' => 'int',
];

    /**
     * @var \Faker\Generator
     */
    private $faker;

    /**
     * @var scalar[][]
     */
    private $allowedValues = [
        'type' => [
            'TEXT' => 'Text',
            'DYNAMIC_CONTENT' => 'DynamicContent',
            'SNIPPET' => 'Snippet',
        ],
    ];

    public function setUp(): void
    {
        parent::setUp();
        $this->faker = \Faker\Factory::create();
        $data = [];
        foreach ($this->types as $field => $type) {
            $data[$field] = $this->getFakeValue($type, $this->allowedValues[$field] ?? null);
        }
        $this->sot = new UpdateEmailComponentContentRequest($data);
    }

    /**
     * @param string $type
     * @param scalar[]|null $values
     * @return mixed
     */
    private function getFakeValue(string $type, ?array $values) {
        if (isset($values)) {
            // @todo random.
            return array_pop($values);
        }

        // @todo look for container hints.
        if (strcasecmp(substr($type, -2), '[]') === 0) {
            $return = [];
            $subType = substr($type, 0, -2);
            for ($i = 0; $i <= rand(0, 9); $i++) {
                $return[] = $this->getFakeValue($subType, $values);
            }
            return $return;
        }
        switch ($type) {
            case 'string':
                return $this->faker->word();
            case 'float':
                return $this->faker->randomFloat();
            case 'int':
                return $this->faker->randomNumber();
            case 'bool':
                return $this->faker->boolean();
            case '\DateTime':
                return $this->faker->dateTimeAD();
            case 'object':
                return new \stdClass();
        }
        if (class_exists($type) && is_subclass_of($type, ModelInterface::class)) {
            $model = new $type();
            $types = $type::swaggerTypes();
            foreach ($model->listInvalidProperties() as $field => $reason) {
                // @todo get allowed values? ((getter))AllowedValues
                // @phpstan-ignore-next-line
                $model[$field] = $this->getFakeValue($types[$field], null);
            }
            return $model;
        }
        $this->markTestSkipped('This type is not mocked yet: ' . $type);
    }

    /**
     * Test "UpdateEmailComponentContentRequest"
     *
     * @covers ::__construct
     */
    public function testUpdateEmailComponentContentRequest(): void
    {
        $this->assertInstanceOf(UpdateEmailComponentContentRequest::class, $this->sot);
    }

    /**
     * @covers ::swaggerTypes
     */
    public function testSwaggerTypes(): void
    {
        $this->assertEquals($this->types, UpdateEmailComponentContentRequest::swaggerTypes());
    }

    /**
     * @covers ::swaggerFormats
     */
    public function testSwaggerFormats(): void
    {
        $formats = $this->sot->swaggerFormats();
        $this->assertEquals(null, $formats['alt_text']);
        $this->assertEquals(null, $formats['external_url']);
        $this->assertEquals('int32', $formats['height']);
        $this->assertEquals(null, $formats['image']);
        $this->assertEquals(null, $formats['link_url']);
        $this->assertEquals(null, $formats['over_write']);
        $this->assertEquals(null, $formats['style']);
        $this->assertEquals(null, $formats['text_value']);
        $this->assertEquals(null, $formats['type']);
        $this->assertEquals(null, $formats['value']);
        $this->assertEquals(null, $formats['video_url']);
        $this->assertEquals('int32', $formats['width']);
    }

    /**
     * @covers ::attributeMap
     */
    public function testAttributeMap(): void
    {
        $formats = $this->sot->attributeMap();
        $this->assertEquals('altText', $formats['alt_text']);
        $this->assertEquals('externalUrl', $formats['external_url']);
        $this->assertEquals('height', $formats['height']);
        $this->assertEquals('image', $formats['image']);
        $this->assertEquals('linkUrl', $formats['link_url']);
        $this->assertEquals('overWrite', $formats['over_write']);
        $this->assertEquals('style', $formats['style']);
        $this->assertEquals('textValue', $formats['text_value']);
        $this->assertEquals('type', $formats['type']);
        $this->assertEquals('value', $formats['value']);
        $this->assertEquals('videoUrl', $formats['video_url']);
        $this->assertEquals('width', $formats['width']);
    }

    /**
     * @covers ::getters
     * @covers ::setters
     */
    public function testGettersSetters(): void
    {
        $getters = $this->sot->getters();
        $setters = $this->sot->setters();
        foreach (array_keys($this->types) as $field) {
            $this->assertTrue(isset($setters[$field]));
            $this->assertTrue(isset($getters[$field]));
            $this->assertTrue(
                method_exists($this->sot, $getters[$field]),
                'Getter exists on model.'
            );
            $this->assertTrue(
                method_exists($this->sot, $setters[$field]),
                'Setter exists on model.'
            );
        }
    }

    /**
     * @covers ::getModelName
     */
    public function testGetModelName(): void
    {
        $this->assertEquals('UpdateEmailComponentContentRequest', $this->sot->getModelName());
    }

    /**
     * @covers ::listInvalidProperties
     * @covers ::valid
     */
    public function testValid(): void
    {
        $this->markTestIncomplete('TODO');
    }

    /**
     * @covers ::setAdditionalProperties
     * @covers ::setAdditionalProperty
     * @covers ::getAdditionalProperties
     */
    public function testAdditionalProperties(): void
    {
        $this->markTestIncomplete('TODO');
    }

    /**
     * @covers ::jsonSerialize
     * @covers ::__toString
     */
    public function testJson(): void
    {
        // Some minimal tests that json generates well.
        $json = json_encode($this->sot);
        $this->assertIsString($json, 'Json encoded');
        $json = json_decode($json);
        $string = json_decode((string) $this->sot);
        $this->assertEquals(
            $json,
            $string
        );
        $this->assertInstanceOf(\stdClass::class, $json);
        $this->assertInstanceOf(\stdClass::class, $string);
    }

    /**
     * Test attribute "alt_text"
     *
     * @covers ::__construct
     * @covers ::getAltText
     * @covers ::setAltText
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyAltText(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['alt_text'],
            $this->allowedValues['alt_text'] ?? null
        );
        $this->sot->setAltText($v);
        $this->assertEquals($v, $this->sot->getAltText());
        $this->sot->setAltText(null);
        $this->assertNull($this->sot->getAltText());
        $this->sot->setAltText($v);

        $this->assertEquals($v, $this->sot['alt_text']);
        $v = $this->getFakeValue(
            $this->types['alt_text'],
            $this->allowedValues['alt_text'] ?? null
        );
        $this->sot['alt_text'] = $v;
        $this->assertEquals($v, $this->sot['alt_text']);
        $this->assertTrue(isset($this->sot['alt_text']));
        unset($this->sot['alt_text']);
        $this->assertFalse(isset($this->sot['alt_text']));
        $this->sot['alt_text'] = $v;
        $this->assertEquals($v, $this->sot['alt_text']);
        $this->assertTrue(isset($this->sot['alt_text']));
    }

    /**
     * Test attribute "external_url"
     *
     * @covers ::__construct
     * @covers ::getExternalUrl
     * @covers ::setExternalUrl
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyExternalUrl(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['external_url'],
            $this->allowedValues['external_url'] ?? null
        );
        $this->sot->setExternalUrl($v);
        $this->assertEquals($v, $this->sot->getExternalUrl());
        $this->sot->setExternalUrl(null);
        $this->assertNull($this->sot->getExternalUrl());
        $this->sot->setExternalUrl($v);

        $this->assertEquals($v, $this->sot['external_url']);
        $v = $this->getFakeValue(
            $this->types['external_url'],
            $this->allowedValues['external_url'] ?? null
        );
        $this->sot['external_url'] = $v;
        $this->assertEquals($v, $this->sot['external_url']);
        $this->assertTrue(isset($this->sot['external_url']));
        unset($this->sot['external_url']);
        $this->assertFalse(isset($this->sot['external_url']));
        $this->sot['external_url'] = $v;
        $this->assertEquals($v, $this->sot['external_url']);
        $this->assertTrue(isset($this->sot['external_url']));
    }

    /**
     * Test attribute "height"
     *
     * @covers ::__construct
     * @covers ::getHeight
     * @covers ::setHeight
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyHeight(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['height'],
            $this->allowedValues['height'] ?? null
        );
        $this->sot->setHeight($v);
        $this->assertEquals($v, $this->sot->getHeight());
        $this->sot->setHeight(null);
        $this->assertNull($this->sot->getHeight());
        $this->sot->setHeight($v);

        $this->assertEquals($v, $this->sot['height']);
        $v = $this->getFakeValue(
            $this->types['height'],
            $this->allowedValues['height'] ?? null
        );
        $this->sot['height'] = $v;
        $this->assertEquals($v, $this->sot['height']);
        $this->assertTrue(isset($this->sot['height']));
        unset($this->sot['height']);
        $this->assertFalse(isset($this->sot['height']));
        $this->sot['height'] = $v;
        $this->assertEquals($v, $this->sot['height']);
        $this->assertTrue(isset($this->sot['height']));
    }

    /**
     * Test attribute "image"
     *
     * @covers ::__construct
     * @covers ::getImage
     * @covers ::setImage
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyImage(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['image'],
            $this->allowedValues['image'] ?? null
        );
        $this->sot->setImage($v);
        $this->assertEquals($v, $this->sot->getImage());
        $this->sot->setImage(null);
        $this->assertNull($this->sot->getImage());
        $this->sot->setImage($v);

        $this->assertEquals($v, $this->sot['image']);
        $v = $this->getFakeValue(
            $this->types['image'],
            $this->allowedValues['image'] ?? null
        );
        $this->sot['image'] = $v;
        $this->assertEquals($v, $this->sot['image']);
        $this->assertTrue(isset($this->sot['image']));
        unset($this->sot['image']);
        $this->assertFalse(isset($this->sot['image']));
        $this->sot['image'] = $v;
        $this->assertEquals($v, $this->sot['image']);
        $this->assertTrue(isset($this->sot['image']));
    }

    /**
     * Test attribute "link_url"
     *
     * @covers ::__construct
     * @covers ::getLinkUrl
     * @covers ::setLinkUrl
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyLinkUrl(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['link_url'],
            $this->allowedValues['link_url'] ?? null
        );
        $this->sot->setLinkUrl($v);
        $this->assertEquals($v, $this->sot->getLinkUrl());
        $this->sot->setLinkUrl(null);
        $this->assertNull($this->sot->getLinkUrl());
        $this->sot->setLinkUrl($v);

        $this->assertEquals($v, $this->sot['link_url']);
        $v = $this->getFakeValue(
            $this->types['link_url'],
            $this->allowedValues['link_url'] ?? null
        );
        $this->sot['link_url'] = $v;
        $this->assertEquals($v, $this->sot['link_url']);
        $this->assertTrue(isset($this->sot['link_url']));
        unset($this->sot['link_url']);
        $this->assertFalse(isset($this->sot['link_url']));
        $this->sot['link_url'] = $v;
        $this->assertEquals($v, $this->sot['link_url']);
        $this->assertTrue(isset($this->sot['link_url']));
    }

    /**
     * Test attribute "over_write"
     *
     * @covers ::__construct
     * @covers ::getOverWrite
     * @covers ::setOverWrite
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyOverWrite(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['over_write'],
            $this->allowedValues['over_write'] ?? null
        );
        $this->sot->setOverWrite($v);
        $this->assertEquals($v, $this->sot->getOverWrite());
        $this->sot->setOverWrite(null);
        $this->assertNull($this->sot->getOverWrite());
        $this->sot->setOverWrite($v);

        $this->assertEquals($v, $this->sot['over_write']);
        $v = $this->getFakeValue(
            $this->types['over_write'],
            $this->allowedValues['over_write'] ?? null
        );
        $this->sot['over_write'] = $v;
        $this->assertEquals($v, $this->sot['over_write']);
        $this->assertTrue(isset($this->sot['over_write']));
        unset($this->sot['over_write']);
        $this->assertFalse(isset($this->sot['over_write']));
        $this->sot['over_write'] = $v;
        $this->assertEquals($v, $this->sot['over_write']);
        $this->assertTrue(isset($this->sot['over_write']));
    }

    /**
     * Test attribute "style"
     *
     * @covers ::__construct
     * @covers ::getStyle
     * @covers ::setStyle
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyStyle(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['style'],
            $this->allowedValues['style'] ?? null
        );
        $this->sot->setStyle($v);
        $this->assertEquals($v, $this->sot->getStyle());
        $this->sot->setStyle(null);
        $this->assertNull($this->sot->getStyle());
        $this->sot->setStyle($v);

        $this->assertEquals($v, $this->sot['style']);
        $v = $this->getFakeValue(
            $this->types['style'],
            $this->allowedValues['style'] ?? null
        );
        $this->sot['style'] = $v;
        $this->assertEquals($v, $this->sot['style']);
        $this->assertTrue(isset($this->sot['style']));
        unset($this->sot['style']);
        $this->assertFalse(isset($this->sot['style']));
        $this->sot['style'] = $v;
        $this->assertEquals($v, $this->sot['style']);
        $this->assertTrue(isset($this->sot['style']));
    }

    /**
     * Test attribute "text_value"
     *
     * @covers ::__construct
     * @covers ::getTextValue
     * @covers ::setTextValue
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyTextValue(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['text_value'],
            $this->allowedValues['text_value'] ?? null
        );
        $this->sot->setTextValue($v);
        $this->assertEquals($v, $this->sot->getTextValue());
        $this->sot->setTextValue(null);
        $this->assertNull($this->sot->getTextValue());
        $this->sot->setTextValue($v);

        $this->assertEquals($v, $this->sot['text_value']);
        $v = $this->getFakeValue(
            $this->types['text_value'],
            $this->allowedValues['text_value'] ?? null
        );
        $this->sot['text_value'] = $v;
        $this->assertEquals($v, $this->sot['text_value']);
        $this->assertTrue(isset($this->sot['text_value']));
        unset($this->sot['text_value']);
        $this->assertFalse(isset($this->sot['text_value']));
        $this->sot['text_value'] = $v;
        $this->assertEquals($v, $this->sot['text_value']);
        $this->assertTrue(isset($this->sot['text_value']));
    }

    /**
     * Test attribute "type"
     *
     * @covers ::__construct
     * @covers ::getType
     * @covers ::setType
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyType(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['type'],
            $this->allowedValues['type'] ?? null
        );
        $this->sot->setType($v);
        $this->assertEquals($v, $this->sot->getType());

        $this->assertEquals($v, $this->sot['type']);
        $v = $this->getFakeValue(
            $this->types['type'],
            $this->allowedValues['type'] ?? null
        );
        $this->sot['type'] = $v;
        $this->assertEquals($v, $this->sot['type']);
        $this->assertTrue(isset($this->sot['type']));
        unset($this->sot['type']);
        $this->assertFalse(isset($this->sot['type']));
        $this->sot['type'] = $v;
        $this->assertEquals($v, $this->sot['type']);
        $this->assertTrue(isset($this->sot['type']));
    }

    /**
     * Test attribute "value"
     *
     * @covers ::__construct
     * @covers ::getValue
     * @covers ::setValue
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyValue(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['value'],
            $this->allowedValues['value'] ?? null
        );
        $this->sot->setValue($v);
        $this->assertEquals($v, $this->sot->getValue());

        $this->assertEquals($v, $this->sot['value']);
        $v = $this->getFakeValue(
            $this->types['value'],
            $this->allowedValues['value'] ?? null
        );
        $this->sot['value'] = $v;
        $this->assertEquals($v, $this->sot['value']);
        $this->assertTrue(isset($this->sot['value']));
        unset($this->sot['value']);
        $this->assertFalse(isset($this->sot['value']));
        $this->sot['value'] = $v;
        $this->assertEquals($v, $this->sot['value']);
        $this->assertTrue(isset($this->sot['value']));
    }

    /**
     * Test attribute "video_url"
     *
     * @covers ::__construct
     * @covers ::getVideoUrl
     * @covers ::setVideoUrl
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyVideoUrl(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['video_url'],
            $this->allowedValues['video_url'] ?? null
        );
        $this->sot->setVideoUrl($v);
        $this->assertEquals($v, $this->sot->getVideoUrl());
        $this->sot->setVideoUrl(null);
        $this->assertNull($this->sot->getVideoUrl());
        $this->sot->setVideoUrl($v);

        $this->assertEquals($v, $this->sot['video_url']);
        $v = $this->getFakeValue(
            $this->types['video_url'],
            $this->allowedValues['video_url'] ?? null
        );
        $this->sot['video_url'] = $v;
        $this->assertEquals($v, $this->sot['video_url']);
        $this->assertTrue(isset($this->sot['video_url']));
        unset($this->sot['video_url']);
        $this->assertFalse(isset($this->sot['video_url']));
        $this->sot['video_url'] = $v;
        $this->assertEquals($v, $this->sot['video_url']);
        $this->assertTrue(isset($this->sot['video_url']));
    }

    /**
     * Test attribute "width"
     *
     * @covers ::__construct
     * @covers ::getWidth
     * @covers ::setWidth
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyWidth(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['width'],
            $this->allowedValues['width'] ?? null
        );
        $this->sot->setWidth($v);
        $this->assertEquals($v, $this->sot->getWidth());
        $this->sot->setWidth(null);
        $this->assertNull($this->sot->getWidth());
        $this->sot->setWidth($v);

        $this->assertEquals($v, $this->sot['width']);
        $v = $this->getFakeValue(
            $this->types['width'],
            $this->allowedValues['width'] ?? null
        );
        $this->sot['width'] = $v;
        $this->assertEquals($v, $this->sot['width']);
        $this->assertTrue(isset($this->sot['width']));
        unset($this->sot['width']);
        $this->assertFalse(isset($this->sot['width']));
        $this->sot['width'] = $v;
        $this->assertEquals($v, $this->sot['width']);
        $this->assertTrue(isset($this->sot['width']));
    }
}
