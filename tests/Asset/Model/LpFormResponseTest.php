<?php
/**
 * LpFormResponseTest
 *
 * Marketo Rest API
 *
 * Marketo Rest API
 *
 * OpenAPI spec version: 1.0
 * Contact: developerfeedback@marketo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.26
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Asset
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the model.
 */

namespace NecLimDul\MarketoRest\Asset\Test\Model;

use Faker\Factory;
use NecLimDul\MarketoRest\Asset\Model\ModelInterface;
use NecLimDul\MarketoRest\Asset\Model\LpFormResponse;
use PHPUnit\Framework\TestCase;

/**
 * LpFormResponseTest Class Doc Comment
 *
 * @category    Class
 * @description LpFormResponse
 * @package     NecLimDul\MarketoRest\Asset
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 *
 * @coversDefaultClass \NecLimDul\MarketoRest\Asset\Model\LpFormResponse
 */
class LpFormResponseTest extends TestCase
{

    /**
     * @var \NecLimDul\MarketoRest\Asset\Model\LpFormResponse
     */
    private $sot;

    /**
     * @var string[]
     */
    private $types = [
        'button_label' => 'string',
        'button_location' => 'int',
        'created_at' => '\DateTime',
        'description' => 'string',
        'folder' => '\NecLimDul\MarketoRest\Asset\Model\Folder',
        'font_family' => 'string',
        'font_size' => 'string',
        'id' => 'int',
        'known_visitor' => '\NecLimDul\MarketoRest\Asset\Model\FormKnownVisitorDTO',
        'label_position' => 'string',
        'language' => 'string',
        'locale' => 'string',
        'name' => 'string',
        'progressive_profiling' => 'bool',
        'status' => 'string',
        'thank_you_list' => '\NecLimDul\MarketoRest\Asset\Model\FormThankYouPageDTO[]',
        'theme' => 'string',
        'updated_at' => '\DateTime',
        'url' => 'string',
        'waiting_label' => 'string',
];

    /**
     * @var \Faker\Generator
     */
    private $faker;

    /**
     * @var scalar[][]
     */
    private $allowedValues = [
        'status' => [
            'APPROVED' => 'approved',
            'DRAFT' => 'draft',
        ],
    ];

    public function setUp(): void
    {
        parent::setUp();
        $this->faker = \Faker\Factory::create();
        $data = [];
        foreach ($this->types as $field => $type) {
            $data[$field] = $this->getFakeValue($type, $this->allowedValues[$field] ?? null);
        }
        $this->sot = new LpFormResponse($data);
    }

    /**
     * @param string $type
     * @param scalar[]|null $values
     * @return mixed
     */
    private function getFakeValue(string $type, ?array $values) {
        if (isset($values)) {
            // @todo random.
            return array_pop($values);
        }

        // @todo look for container hints.
        if (strcasecmp(substr($type, -2), '[]') === 0) {
            $return = [];
            $subType = substr($type, 0, -2);
            for ($i = 0; $i <= rand(0, 9); $i++) {
                $return[] = $this->getFakeValue($subType, $values);
            }
            return $return;
        }
        switch ($type) {
            case 'string':
                return $this->faker->word();
            case 'float':
                return $this->faker->randomFloat();
            case 'int':
                return $this->faker->randomNumber();
            case 'bool':
                return $this->faker->boolean();
            case '\DateTime':
                return $this->faker->dateTimeAD();
            case 'object':
                return new \stdClass();
        }
        if (class_exists($type) && is_subclass_of($type, ModelInterface::class)) {
            $model = new $type();
            $types = $type::swaggerTypes();
            foreach ($model->listInvalidProperties() as $field => $reason) {
                // @todo get allowed values? ((getter))AllowedValues
                // @phpstan-ignore-next-line
                $model[$field] = $this->getFakeValue($types[$field], null);
            }
            return $model;
        }
        $this->markTestSkipped('This type is not mocked yet: ' . $type);
    }

    /**
     * Test "LpFormResponse"
     *
     * @covers ::__construct
     */
    public function testLpFormResponse(): void
    {
        $this->assertInstanceOf(LpFormResponse::class, $this->sot);
    }

    /**
     * @covers ::swaggerTypes
     */
    public function testSwaggerTypes(): void
    {
        $this->assertEquals($this->types, LpFormResponse::swaggerTypes());
    }

    /**
     * @covers ::swaggerFormats
     */
    public function testSwaggerFormats(): void
    {
        $formats = $this->sot->swaggerFormats();
        $this->assertEquals(null, $formats['button_label']);
        $this->assertEquals('int32', $formats['button_location']);
        $this->assertEquals('date-time', $formats['created_at']);
        $this->assertEquals(null, $formats['description']);
        $this->assertEquals(null, $formats['folder']);
        $this->assertEquals(null, $formats['font_family']);
        $this->assertEquals(null, $formats['font_size']);
        $this->assertEquals('int64', $formats['id']);
        $this->assertEquals(null, $formats['known_visitor']);
        $this->assertEquals(null, $formats['label_position']);
        $this->assertEquals(null, $formats['language']);
        $this->assertEquals(null, $formats['locale']);
        $this->assertEquals(null, $formats['name']);
        $this->assertEquals(null, $formats['progressive_profiling']);
        $this->assertEquals(null, $formats['status']);
        $this->assertEquals(null, $formats['thank_you_list']);
        $this->assertEquals(null, $formats['theme']);
        $this->assertEquals('date-time', $formats['updated_at']);
        $this->assertEquals(null, $formats['url']);
        $this->assertEquals(null, $formats['waiting_label']);
    }

    /**
     * @covers ::attributeMap
     */
    public function testAttributeMap(): void
    {
        $formats = $this->sot->attributeMap();
        $this->assertEquals('buttonLabel', $formats['button_label']);
        $this->assertEquals('buttonLocation', $formats['button_location']);
        $this->assertEquals('createdAt', $formats['created_at']);
        $this->assertEquals('description', $formats['description']);
        $this->assertEquals('folder', $formats['folder']);
        $this->assertEquals('fontFamily', $formats['font_family']);
        $this->assertEquals('fontSize', $formats['font_size']);
        $this->assertEquals('id', $formats['id']);
        $this->assertEquals('knownVisitor', $formats['known_visitor']);
        $this->assertEquals('labelPosition', $formats['label_position']);
        $this->assertEquals('language', $formats['language']);
        $this->assertEquals('locale', $formats['locale']);
        $this->assertEquals('name', $formats['name']);
        $this->assertEquals('progressiveProfiling', $formats['progressive_profiling']);
        $this->assertEquals('status', $formats['status']);
        $this->assertEquals('thankYouList', $formats['thank_you_list']);
        $this->assertEquals('theme', $formats['theme']);
        $this->assertEquals('updatedAt', $formats['updated_at']);
        $this->assertEquals('url', $formats['url']);
        $this->assertEquals('waitingLabel', $formats['waiting_label']);
    }

    /**
     * @covers ::getters
     * @covers ::setters
     */
    public function testGettersSetters(): void
    {
        $getters = $this->sot->getters();
        $setters = $this->sot->setters();
        foreach (array_keys($this->types) as $field) {
            $this->assertTrue(isset($setters[$field]));
            $this->assertTrue(isset($getters[$field]));
            $this->assertTrue(
                method_exists($this->sot, $getters[$field]),
                'Getter exists on model.'
            );
            $this->assertTrue(
                method_exists($this->sot, $setters[$field]),
                'Setter exists on model.'
            );
        }
    }

    /**
     * @covers ::getModelName
     */
    public function testGetModelName(): void
    {
        $this->assertEquals('LpFormResponse', $this->sot->getModelName());
    }

    /**
     * @covers ::listInvalidProperties
     * @covers ::valid
     */
    public function testValid(): void
    {
        $this->markTestIncomplete('TODO');
    }

    /**
     * @covers ::setAdditionalProperties
     * @covers ::setAdditionalProperty
     * @covers ::getAdditionalProperties
     */
    public function testAdditionalProperties(): void
    {
        $this->markTestIncomplete('TODO');
    }

    /**
     * @covers ::jsonSerialize
     * @covers ::__toString
     */
    public function testJson(): void
    {
        // Some minimal tests that json generates well.
        $json = json_encode($this->sot);
        $this->assertIsString($json, 'Json encoded');
        $json = json_decode($json);
        $string = json_decode((string) $this->sot);
        $this->assertEquals(
            $json,
            $string
        );
        $this->assertInstanceOf(\stdClass::class, $json);
        $this->assertInstanceOf(\stdClass::class, $string);
    }

    /**
     * Test attribute "button_label"
     *
     * @covers ::__construct
     * @covers ::getButtonLabel
     * @covers ::setButtonLabel
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyButtonLabel(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['button_label'],
            $this->allowedValues['button_label'] ?? null
        );
        $this->sot->setButtonLabel($v);
        $this->assertEquals($v, $this->sot->getButtonLabel());

        $this->assertEquals($v, $this->sot['button_label']);
        $v = $this->getFakeValue(
            $this->types['button_label'],
            $this->allowedValues['button_label'] ?? null
        );
        $this->sot['button_label'] = $v;
        $this->assertEquals($v, $this->sot['button_label']);
        $this->assertTrue(isset($this->sot['button_label']));
        unset($this->sot['button_label']);
        $this->assertFalse(isset($this->sot['button_label']));
        $this->sot['button_label'] = $v;
        $this->assertEquals($v, $this->sot['button_label']);
        $this->assertTrue(isset($this->sot['button_label']));
    }

    /**
     * Test attribute "button_location"
     *
     * @covers ::__construct
     * @covers ::getButtonLocation
     * @covers ::setButtonLocation
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyButtonLocation(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['button_location'],
            $this->allowedValues['button_location'] ?? null
        );
        $this->sot->setButtonLocation($v);
        $this->assertEquals($v, $this->sot->getButtonLocation());

        $this->assertEquals($v, $this->sot['button_location']);
        $v = $this->getFakeValue(
            $this->types['button_location'],
            $this->allowedValues['button_location'] ?? null
        );
        $this->sot['button_location'] = $v;
        $this->assertEquals($v, $this->sot['button_location']);
        $this->assertTrue(isset($this->sot['button_location']));
        unset($this->sot['button_location']);
        $this->assertFalse(isset($this->sot['button_location']));
        $this->sot['button_location'] = $v;
        $this->assertEquals($v, $this->sot['button_location']);
        $this->assertTrue(isset($this->sot['button_location']));
    }

    /**
     * Test attribute "created_at"
     *
     * @covers ::__construct
     * @covers ::getCreatedAt
     * @covers ::setCreatedAt
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyCreatedAt(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['created_at'],
            $this->allowedValues['created_at'] ?? null
        );
        $this->sot->setCreatedAt($v);
        $this->assertEquals($v, $this->sot->getCreatedAt());
        $this->sot->setCreatedAt(null);
        $this->assertNull($this->sot->getCreatedAt());
        $this->sot->setCreatedAt($v);

        $this->assertEquals($v, $this->sot['created_at']);
        $v = $this->getFakeValue(
            $this->types['created_at'],
            $this->allowedValues['created_at'] ?? null
        );
        $this->sot['created_at'] = $v;
        $this->assertEquals($v, $this->sot['created_at']);
        $this->assertTrue(isset($this->sot['created_at']));
        unset($this->sot['created_at']);
        $this->assertFalse(isset($this->sot['created_at']));
        $this->sot['created_at'] = $v;
        $this->assertEquals($v, $this->sot['created_at']);
        $this->assertTrue(isset($this->sot['created_at']));
    }

    /**
     * Test attribute "description"
     *
     * @covers ::__construct
     * @covers ::getDescription
     * @covers ::setDescription
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyDescription(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['description'],
            $this->allowedValues['description'] ?? null
        );
        $this->sot->setDescription($v);
        $this->assertEquals($v, $this->sot->getDescription());
        $this->sot->setDescription(null);
        $this->assertNull($this->sot->getDescription());
        $this->sot->setDescription($v);

        $this->assertEquals($v, $this->sot['description']);
        $v = $this->getFakeValue(
            $this->types['description'],
            $this->allowedValues['description'] ?? null
        );
        $this->sot['description'] = $v;
        $this->assertEquals($v, $this->sot['description']);
        $this->assertTrue(isset($this->sot['description']));
        unset($this->sot['description']);
        $this->assertFalse(isset($this->sot['description']));
        $this->sot['description'] = $v;
        $this->assertEquals($v, $this->sot['description']);
        $this->assertTrue(isset($this->sot['description']));
    }

    /**
     * Test attribute "folder"
     *
     * @covers ::__construct
     * @covers ::getFolder
     * @covers ::setFolder
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyFolder(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['folder'],
            $this->allowedValues['folder'] ?? null
        );
        $this->sot->setFolder($v);
        $this->assertEquals($v, $this->sot->getFolder());

        $this->assertEquals($v, $this->sot['folder']);
        $v = $this->getFakeValue(
            $this->types['folder'],
            $this->allowedValues['folder'] ?? null
        );
        $this->sot['folder'] = $v;
        $this->assertEquals($v, $this->sot['folder']);
        $this->assertTrue(isset($this->sot['folder']));
        unset($this->sot['folder']);
        $this->assertFalse(isset($this->sot['folder']));
        $this->sot['folder'] = $v;
        $this->assertEquals($v, $this->sot['folder']);
        $this->assertTrue(isset($this->sot['folder']));
    }

    /**
     * Test attribute "font_family"
     *
     * @covers ::__construct
     * @covers ::getFontFamily
     * @covers ::setFontFamily
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyFontFamily(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['font_family'],
            $this->allowedValues['font_family'] ?? null
        );
        $this->sot->setFontFamily($v);
        $this->assertEquals($v, $this->sot->getFontFamily());

        $this->assertEquals($v, $this->sot['font_family']);
        $v = $this->getFakeValue(
            $this->types['font_family'],
            $this->allowedValues['font_family'] ?? null
        );
        $this->sot['font_family'] = $v;
        $this->assertEquals($v, $this->sot['font_family']);
        $this->assertTrue(isset($this->sot['font_family']));
        unset($this->sot['font_family']);
        $this->assertFalse(isset($this->sot['font_family']));
        $this->sot['font_family'] = $v;
        $this->assertEquals($v, $this->sot['font_family']);
        $this->assertTrue(isset($this->sot['font_family']));
    }

    /**
     * Test attribute "font_size"
     *
     * @covers ::__construct
     * @covers ::getFontSize
     * @covers ::setFontSize
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyFontSize(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['font_size'],
            $this->allowedValues['font_size'] ?? null
        );
        $this->sot->setFontSize($v);
        $this->assertEquals($v, $this->sot->getFontSize());

        $this->assertEquals($v, $this->sot['font_size']);
        $v = $this->getFakeValue(
            $this->types['font_size'],
            $this->allowedValues['font_size'] ?? null
        );
        $this->sot['font_size'] = $v;
        $this->assertEquals($v, $this->sot['font_size']);
        $this->assertTrue(isset($this->sot['font_size']));
        unset($this->sot['font_size']);
        $this->assertFalse(isset($this->sot['font_size']));
        $this->sot['font_size'] = $v;
        $this->assertEquals($v, $this->sot['font_size']);
        $this->assertTrue(isset($this->sot['font_size']));
    }

    /**
     * Test attribute "id"
     *
     * @covers ::__construct
     * @covers ::getId
     * @covers ::setId
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyId(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['id'],
            $this->allowedValues['id'] ?? null
        );
        $this->sot->setId($v);
        $this->assertEquals($v, $this->sot->getId());
        $this->sot->setId(null);
        $this->assertNull($this->sot->getId());
        $this->sot->setId($v);

        $this->assertEquals($v, $this->sot['id']);
        $v = $this->getFakeValue(
            $this->types['id'],
            $this->allowedValues['id'] ?? null
        );
        $this->sot['id'] = $v;
        $this->assertEquals($v, $this->sot['id']);
        $this->assertTrue(isset($this->sot['id']));
        unset($this->sot['id']);
        $this->assertFalse(isset($this->sot['id']));
        $this->sot['id'] = $v;
        $this->assertEquals($v, $this->sot['id']);
        $this->assertTrue(isset($this->sot['id']));
    }

    /**
     * Test attribute "known_visitor"
     *
     * @covers ::__construct
     * @covers ::getKnownVisitor
     * @covers ::setKnownVisitor
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyKnownVisitor(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['known_visitor'],
            $this->allowedValues['known_visitor'] ?? null
        );
        $this->sot->setKnownVisitor($v);
        $this->assertEquals($v, $this->sot->getKnownVisitor());

        $this->assertEquals($v, $this->sot['known_visitor']);
        $v = $this->getFakeValue(
            $this->types['known_visitor'],
            $this->allowedValues['known_visitor'] ?? null
        );
        $this->sot['known_visitor'] = $v;
        $this->assertEquals($v, $this->sot['known_visitor']);
        $this->assertTrue(isset($this->sot['known_visitor']));
        unset($this->sot['known_visitor']);
        $this->assertFalse(isset($this->sot['known_visitor']));
        $this->sot['known_visitor'] = $v;
        $this->assertEquals($v, $this->sot['known_visitor']);
        $this->assertTrue(isset($this->sot['known_visitor']));
    }

    /**
     * Test attribute "label_position"
     *
     * @covers ::__construct
     * @covers ::getLabelPosition
     * @covers ::setLabelPosition
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyLabelPosition(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['label_position'],
            $this->allowedValues['label_position'] ?? null
        );
        $this->sot->setLabelPosition($v);
        $this->assertEquals($v, $this->sot->getLabelPosition());

        $this->assertEquals($v, $this->sot['label_position']);
        $v = $this->getFakeValue(
            $this->types['label_position'],
            $this->allowedValues['label_position'] ?? null
        );
        $this->sot['label_position'] = $v;
        $this->assertEquals($v, $this->sot['label_position']);
        $this->assertTrue(isset($this->sot['label_position']));
        unset($this->sot['label_position']);
        $this->assertFalse(isset($this->sot['label_position']));
        $this->sot['label_position'] = $v;
        $this->assertEquals($v, $this->sot['label_position']);
        $this->assertTrue(isset($this->sot['label_position']));
    }

    /**
     * Test attribute "language"
     *
     * @covers ::__construct
     * @covers ::getLanguage
     * @covers ::setLanguage
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyLanguage(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['language'],
            $this->allowedValues['language'] ?? null
        );
        $this->sot->setLanguage($v);
        $this->assertEquals($v, $this->sot->getLanguage());

        $this->assertEquals($v, $this->sot['language']);
        $v = $this->getFakeValue(
            $this->types['language'],
            $this->allowedValues['language'] ?? null
        );
        $this->sot['language'] = $v;
        $this->assertEquals($v, $this->sot['language']);
        $this->assertTrue(isset($this->sot['language']));
        unset($this->sot['language']);
        $this->assertFalse(isset($this->sot['language']));
        $this->sot['language'] = $v;
        $this->assertEquals($v, $this->sot['language']);
        $this->assertTrue(isset($this->sot['language']));
    }

    /**
     * Test attribute "locale"
     *
     * @covers ::__construct
     * @covers ::getLocale
     * @covers ::setLocale
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyLocale(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['locale'],
            $this->allowedValues['locale'] ?? null
        );
        $this->sot->setLocale($v);
        $this->assertEquals($v, $this->sot->getLocale());

        $this->assertEquals($v, $this->sot['locale']);
        $v = $this->getFakeValue(
            $this->types['locale'],
            $this->allowedValues['locale'] ?? null
        );
        $this->sot['locale'] = $v;
        $this->assertEquals($v, $this->sot['locale']);
        $this->assertTrue(isset($this->sot['locale']));
        unset($this->sot['locale']);
        $this->assertFalse(isset($this->sot['locale']));
        $this->sot['locale'] = $v;
        $this->assertEquals($v, $this->sot['locale']);
        $this->assertTrue(isset($this->sot['locale']));
    }

    /**
     * Test attribute "name"
     *
     * @covers ::__construct
     * @covers ::getName
     * @covers ::setName
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyName(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['name'],
            $this->allowedValues['name'] ?? null
        );
        $this->sot->setName($v);
        $this->assertEquals($v, $this->sot->getName());
        $this->sot->setName(null);
        $this->assertNull($this->sot->getName());
        $this->sot->setName($v);

        $this->assertEquals($v, $this->sot['name']);
        $v = $this->getFakeValue(
            $this->types['name'],
            $this->allowedValues['name'] ?? null
        );
        $this->sot['name'] = $v;
        $this->assertEquals($v, $this->sot['name']);
        $this->assertTrue(isset($this->sot['name']));
        unset($this->sot['name']);
        $this->assertFalse(isset($this->sot['name']));
        $this->sot['name'] = $v;
        $this->assertEquals($v, $this->sot['name']);
        $this->assertTrue(isset($this->sot['name']));
    }

    /**
     * Test attribute "progressive_profiling"
     *
     * @covers ::__construct
     * @covers ::getProgressiveProfiling
     * @covers ::setProgressiveProfiling
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyProgressiveProfiling(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['progressive_profiling'],
            $this->allowedValues['progressive_profiling'] ?? null
        );
        $this->sot->setProgressiveProfiling($v);
        $this->assertEquals($v, $this->sot->getProgressiveProfiling());

        $this->assertEquals($v, $this->sot['progressive_profiling']);
        $v = $this->getFakeValue(
            $this->types['progressive_profiling'],
            $this->allowedValues['progressive_profiling'] ?? null
        );
        $this->sot['progressive_profiling'] = $v;
        $this->assertEquals($v, $this->sot['progressive_profiling']);
        $this->assertTrue(isset($this->sot['progressive_profiling']));
        unset($this->sot['progressive_profiling']);
        $this->assertFalse(isset($this->sot['progressive_profiling']));
        $this->sot['progressive_profiling'] = $v;
        $this->assertEquals($v, $this->sot['progressive_profiling']);
        $this->assertTrue(isset($this->sot['progressive_profiling']));
    }

    /**
     * Test attribute "status"
     *
     * @covers ::__construct
     * @covers ::getStatus
     * @covers ::setStatus
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyStatus(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['status'],
            $this->allowedValues['status'] ?? null
        );
        $this->sot->setStatus($v);
        $this->assertEquals($v, $this->sot->getStatus());

        $this->assertEquals($v, $this->sot['status']);
        $v = $this->getFakeValue(
            $this->types['status'],
            $this->allowedValues['status'] ?? null
        );
        $this->sot['status'] = $v;
        $this->assertEquals($v, $this->sot['status']);
        $this->assertTrue(isset($this->sot['status']));
        unset($this->sot['status']);
        $this->assertFalse(isset($this->sot['status']));
        $this->sot['status'] = $v;
        $this->assertEquals($v, $this->sot['status']);
        $this->assertTrue(isset($this->sot['status']));
    }

    /**
     * Test attribute "thank_you_list"
     *
     * @covers ::__construct
     * @covers ::getThankYouList
     * @covers ::setThankYouList
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyThankYouList(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['thank_you_list'],
            $this->allowedValues['thank_you_list'] ?? null
        );
        $this->sot->setThankYouList($v);
        $this->assertEquals($v, $this->sot->getThankYouList());

        $this->assertEquals($v, $this->sot['thank_you_list']);
        $v = $this->getFakeValue(
            $this->types['thank_you_list'],
            $this->allowedValues['thank_you_list'] ?? null
        );
        $this->sot['thank_you_list'] = $v;
        $this->assertEquals($v, $this->sot['thank_you_list']);
        $this->assertTrue(isset($this->sot['thank_you_list']));
        unset($this->sot['thank_you_list']);
        $this->assertFalse(isset($this->sot['thank_you_list']));
        $this->sot['thank_you_list'] = $v;
        $this->assertEquals($v, $this->sot['thank_you_list']);
        $this->assertTrue(isset($this->sot['thank_you_list']));
    }

    /**
     * Test attribute "theme"
     *
     * @covers ::__construct
     * @covers ::getTheme
     * @covers ::setTheme
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyTheme(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['theme'],
            $this->allowedValues['theme'] ?? null
        );
        $this->sot->setTheme($v);
        $this->assertEquals($v, $this->sot->getTheme());

        $this->assertEquals($v, $this->sot['theme']);
        $v = $this->getFakeValue(
            $this->types['theme'],
            $this->allowedValues['theme'] ?? null
        );
        $this->sot['theme'] = $v;
        $this->assertEquals($v, $this->sot['theme']);
        $this->assertTrue(isset($this->sot['theme']));
        unset($this->sot['theme']);
        $this->assertFalse(isset($this->sot['theme']));
        $this->sot['theme'] = $v;
        $this->assertEquals($v, $this->sot['theme']);
        $this->assertTrue(isset($this->sot['theme']));
    }

    /**
     * Test attribute "updated_at"
     *
     * @covers ::__construct
     * @covers ::getUpdatedAt
     * @covers ::setUpdatedAt
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyUpdatedAt(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['updated_at'],
            $this->allowedValues['updated_at'] ?? null
        );
        $this->sot->setUpdatedAt($v);
        $this->assertEquals($v, $this->sot->getUpdatedAt());
        $this->sot->setUpdatedAt(null);
        $this->assertNull($this->sot->getUpdatedAt());
        $this->sot->setUpdatedAt($v);

        $this->assertEquals($v, $this->sot['updated_at']);
        $v = $this->getFakeValue(
            $this->types['updated_at'],
            $this->allowedValues['updated_at'] ?? null
        );
        $this->sot['updated_at'] = $v;
        $this->assertEquals($v, $this->sot['updated_at']);
        $this->assertTrue(isset($this->sot['updated_at']));
        unset($this->sot['updated_at']);
        $this->assertFalse(isset($this->sot['updated_at']));
        $this->sot['updated_at'] = $v;
        $this->assertEquals($v, $this->sot['updated_at']);
        $this->assertTrue(isset($this->sot['updated_at']));
    }

    /**
     * Test attribute "url"
     *
     * @covers ::__construct
     * @covers ::getUrl
     * @covers ::setUrl
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyUrl(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['url'],
            $this->allowedValues['url'] ?? null
        );
        $this->sot->setUrl($v);
        $this->assertEquals($v, $this->sot->getUrl());
        $this->sot->setUrl(null);
        $this->assertNull($this->sot->getUrl());
        $this->sot->setUrl($v);

        $this->assertEquals($v, $this->sot['url']);
        $v = $this->getFakeValue(
            $this->types['url'],
            $this->allowedValues['url'] ?? null
        );
        $this->sot['url'] = $v;
        $this->assertEquals($v, $this->sot['url']);
        $this->assertTrue(isset($this->sot['url']));
        unset($this->sot['url']);
        $this->assertFalse(isset($this->sot['url']));
        $this->sot['url'] = $v;
        $this->assertEquals($v, $this->sot['url']);
        $this->assertTrue(isset($this->sot['url']));
    }

    /**
     * Test attribute "waiting_label"
     *
     * @covers ::__construct
     * @covers ::getWaitingLabel
     * @covers ::setWaitingLabel
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyWaitingLabel(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['waiting_label'],
            $this->allowedValues['waiting_label'] ?? null
        );
        $this->sot->setWaitingLabel($v);
        $this->assertEquals($v, $this->sot->getWaitingLabel());

        $this->assertEquals($v, $this->sot['waiting_label']);
        $v = $this->getFakeValue(
            $this->types['waiting_label'],
            $this->allowedValues['waiting_label'] ?? null
        );
        $this->sot['waiting_label'] = $v;
        $this->assertEquals($v, $this->sot['waiting_label']);
        $this->assertTrue(isset($this->sot['waiting_label']));
        unset($this->sot['waiting_label']);
        $this->assertFalse(isset($this->sot['waiting_label']));
        $this->sot['waiting_label'] = $v;
        $this->assertEquals($v, $this->sot['waiting_label']);
        $this->assertTrue(isset($this->sot['waiting_label']));
    }
}
