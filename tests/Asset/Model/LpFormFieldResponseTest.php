<?php
/**
 * LpFormFieldResponseTest
 *
 * Marketo Rest API
 *
 * Marketo Rest API
 *
 * OpenAPI spec version: 1.0
 * Contact: developerfeedback@marketo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.26
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Asset
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the model.
 */

namespace NecLimDul\MarketoRest\Asset\Test\Model;

use Faker\Factory;
use NecLimDul\MarketoRest\Asset\Model\ModelInterface;
use NecLimDul\MarketoRest\Asset\Model\LpFormFieldResponse;
use PHPUnit\Framework\TestCase;

/**
 * LpFormFieldResponseTest Class Doc Comment
 *
 * @category    Class
 * @description LpFormFieldResponse
 * @package     NecLimDul\MarketoRest\Asset
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 *
 * @coversDefaultClass \NecLimDul\MarketoRest\Asset\Model\LpFormFieldResponse
 */
class LpFormFieldResponseTest extends TestCase
{

    /**
     * @var \NecLimDul\MarketoRest\Asset\Model\LpFormFieldResponse
     */
    private $sot;

    /**
     * @var string[]
     */
    private $types = [
        'blank_fields' => 'int',
        'column_number' => 'int',
        'data_type' => 'string',
        'default_value' => 'string',
        'field_meta_data' => 'object',
        'field_width' => 'int',
        'fields' => 'string[]',
        'form_prefill' => 'bool',
        'is_sensitive' => 'bool',
        'hint_text' => 'string',
        'id' => 'string',
        'instructions' => 'string',
        'label' => 'string',
        'label_width' => 'int',
        'max_length' => 'int',
        'required' => 'bool',
        'row_number' => 'int',
        'text' => 'string',
        'validation_message' => 'object',
        'visibility_rules' => '\NecLimDul\MarketoRest\Asset\Model\FormFieldVisibilityRuleResponse',
];

    /**
     * @var \Faker\Generator
     */
    private $faker;

    /**
     * @var scalar[][]
     */
    private $allowedValues = [
    ];

    public function setUp(): void
    {
        parent::setUp();
        $this->faker = \Faker\Factory::create();
        $data = [];
        foreach ($this->types as $field => $type) {
            $data[$field] = $this->getFakeValue($type, $this->allowedValues[$field] ?? null);
        }
        $this->sot = new LpFormFieldResponse($data);
    }

    /**
     * @param string $type
     * @param scalar[]|null $values
     * @return mixed
     */
    private function getFakeValue(string $type, ?array $values) {
        if (isset($values)) {
            // @todo random.
            return array_pop($values);
        }

        // @todo look for container hints.
        if (strcasecmp(substr($type, -2), '[]') === 0) {
            $return = [];
            $subType = substr($type, 0, -2);
            for ($i = 0; $i <= rand(0, 9); $i++) {
                $return[] = $this->getFakeValue($subType, $values);
            }
            return $return;
        }
        switch ($type) {
            case 'string':
                return $this->faker->word();
            case 'float':
                return $this->faker->randomFloat();
            case 'int':
                return $this->faker->randomNumber();
            case 'bool':
                return $this->faker->boolean();
            case '\DateTime':
                return $this->faker->dateTimeAD();
            case 'object':
                return new \stdClass();
        }
        if (class_exists($type) && is_subclass_of($type, ModelInterface::class)) {
            $model = new $type();
            $types = $type::swaggerTypes();
            foreach ($model->listInvalidProperties() as $field => $reason) {
                // @todo get allowed values? ((getter))AllowedValues
                // @phpstan-ignore-next-line
                $model[$field] = $this->getFakeValue($types[$field], null);
            }
            return $model;
        }
        $this->markTestSkipped('This type is not mocked yet: ' . $type);
    }

    /**
     * Test "LpFormFieldResponse"
     *
     * @covers ::__construct
     */
    public function testLpFormFieldResponse(): void
    {
        $this->assertInstanceOf(LpFormFieldResponse::class, $this->sot);
    }

    /**
     * @covers ::swaggerTypes
     */
    public function testSwaggerTypes(): void
    {
        $this->assertEquals($this->types, LpFormFieldResponse::swaggerTypes());
    }

    /**
     * @covers ::swaggerFormats
     */
    public function testSwaggerFormats(): void
    {
        $formats = $this->sot->swaggerFormats();
        $this->assertEquals('int32', $formats['blank_fields']);
        $this->assertEquals('int32', $formats['column_number']);
        $this->assertEquals(null, $formats['data_type']);
        $this->assertEquals(null, $formats['default_value']);
        $this->assertEquals(null, $formats['field_meta_data']);
        $this->assertEquals('int32', $formats['field_width']);
        $this->assertEquals(null, $formats['fields']);
        $this->assertEquals(null, $formats['form_prefill']);
        $this->assertEquals(null, $formats['is_sensitive']);
        $this->assertEquals(null, $formats['hint_text']);
        $this->assertEquals(null, $formats['id']);
        $this->assertEquals(null, $formats['instructions']);
        $this->assertEquals(null, $formats['label']);
        $this->assertEquals('int32', $formats['label_width']);
        $this->assertEquals('int32', $formats['max_length']);
        $this->assertEquals(null, $formats['required']);
        $this->assertEquals('int32', $formats['row_number']);
        $this->assertEquals(null, $formats['text']);
        $this->assertEquals(null, $formats['validation_message']);
        $this->assertEquals(null, $formats['visibility_rules']);
    }

    /**
     * @covers ::attributeMap
     */
    public function testAttributeMap(): void
    {
        $formats = $this->sot->attributeMap();
        $this->assertEquals('blankFields', $formats['blank_fields']);
        $this->assertEquals('columnNumber', $formats['column_number']);
        $this->assertEquals('dataType', $formats['data_type']);
        $this->assertEquals('defaultValue', $formats['default_value']);
        $this->assertEquals('fieldMetaData', $formats['field_meta_data']);
        $this->assertEquals('fieldWidth', $formats['field_width']);
        $this->assertEquals('fields', $formats['fields']);
        $this->assertEquals('formPrefill', $formats['form_prefill']);
        $this->assertEquals('isSensitive', $formats['is_sensitive']);
        $this->assertEquals('hintText', $formats['hint_text']);
        $this->assertEquals('id', $formats['id']);
        $this->assertEquals('instructions', $formats['instructions']);
        $this->assertEquals('label', $formats['label']);
        $this->assertEquals('labelWidth', $formats['label_width']);
        $this->assertEquals('maxLength', $formats['max_length']);
        $this->assertEquals('required', $formats['required']);
        $this->assertEquals('rowNumber', $formats['row_number']);
        $this->assertEquals('text', $formats['text']);
        $this->assertEquals('validationMessage', $formats['validation_message']);
        $this->assertEquals('visibilityRules', $formats['visibility_rules']);
    }

    /**
     * @covers ::getters
     * @covers ::setters
     */
    public function testGettersSetters(): void
    {
        $getters = $this->sot->getters();
        $setters = $this->sot->setters();
        foreach (array_keys($this->types) as $field) {
            $this->assertTrue(isset($setters[$field]));
            $this->assertTrue(isset($getters[$field]));
            $this->assertTrue(
                method_exists($this->sot, $getters[$field]),
                'Getter exists on model.'
            );
            $this->assertTrue(
                method_exists($this->sot, $setters[$field]),
                'Setter exists on model.'
            );
        }
    }

    /**
     * @covers ::getModelName
     */
    public function testGetModelName(): void
    {
        $this->assertEquals('LpFormFieldResponse', $this->sot->getModelName());
    }

    /**
     * @covers ::listInvalidProperties
     * @covers ::valid
     */
    public function testValid(): void
    {
        $this->markTestIncomplete('TODO');
    }

    /**
     * @covers ::setAdditionalProperties
     * @covers ::setAdditionalProperty
     * @covers ::getAdditionalProperties
     */
    public function testAdditionalProperties(): void
    {
        $this->markTestIncomplete('TODO');
    }

    /**
     * @covers ::jsonSerialize
     * @covers ::__toString
     */
    public function testJson(): void
    {
        // Some minimal tests that json generates well.
        $json = json_encode($this->sot);
        $this->assertIsString($json, 'Json encoded');
        $json = json_decode($json);
        $string = json_decode((string) $this->sot);
        $this->assertEquals(
            $json,
            $string
        );
        $this->assertInstanceOf(\stdClass::class, $json);
        $this->assertInstanceOf(\stdClass::class, $string);
    }

    /**
     * Test attribute "blank_fields"
     *
     * @covers ::__construct
     * @covers ::getBlankFields
     * @covers ::setBlankFields
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyBlankFields(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['blank_fields'],
            $this->allowedValues['blank_fields'] ?? null
        );
        $this->sot->setBlankFields($v);
        $this->assertEquals($v, $this->sot->getBlankFields());
        $this->sot->setBlankFields(null);
        $this->assertNull($this->sot->getBlankFields());
        $this->sot->setBlankFields($v);

        $this->assertEquals($v, $this->sot['blank_fields']);
        $v = $this->getFakeValue(
            $this->types['blank_fields'],
            $this->allowedValues['blank_fields'] ?? null
        );
        $this->sot['blank_fields'] = $v;
        $this->assertEquals($v, $this->sot['blank_fields']);
        $this->assertTrue(isset($this->sot['blank_fields']));
        unset($this->sot['blank_fields']);
        $this->assertFalse(isset($this->sot['blank_fields']));
        $this->sot['blank_fields'] = $v;
        $this->assertEquals($v, $this->sot['blank_fields']);
        $this->assertTrue(isset($this->sot['blank_fields']));
    }

    /**
     * Test attribute "column_number"
     *
     * @covers ::__construct
     * @covers ::getColumnNumber
     * @covers ::setColumnNumber
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyColumnNumber(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['column_number'],
            $this->allowedValues['column_number'] ?? null
        );
        $this->sot->setColumnNumber($v);
        $this->assertEquals($v, $this->sot->getColumnNumber());
        $this->sot->setColumnNumber(null);
        $this->assertNull($this->sot->getColumnNumber());
        $this->sot->setColumnNumber($v);

        $this->assertEquals($v, $this->sot['column_number']);
        $v = $this->getFakeValue(
            $this->types['column_number'],
            $this->allowedValues['column_number'] ?? null
        );
        $this->sot['column_number'] = $v;
        $this->assertEquals($v, $this->sot['column_number']);
        $this->assertTrue(isset($this->sot['column_number']));
        unset($this->sot['column_number']);
        $this->assertFalse(isset($this->sot['column_number']));
        $this->sot['column_number'] = $v;
        $this->assertEquals($v, $this->sot['column_number']);
        $this->assertTrue(isset($this->sot['column_number']));
    }

    /**
     * Test attribute "data_type"
     *
     * @covers ::__construct
     * @covers ::getDataType
     * @covers ::setDataType
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyDataType(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['data_type'],
            $this->allowedValues['data_type'] ?? null
        );
        $this->sot->setDataType($v);
        $this->assertEquals($v, $this->sot->getDataType());
        $this->sot->setDataType(null);
        $this->assertNull($this->sot->getDataType());
        $this->sot->setDataType($v);

        $this->assertEquals($v, $this->sot['data_type']);
        $v = $this->getFakeValue(
            $this->types['data_type'],
            $this->allowedValues['data_type'] ?? null
        );
        $this->sot['data_type'] = $v;
        $this->assertEquals($v, $this->sot['data_type']);
        $this->assertTrue(isset($this->sot['data_type']));
        unset($this->sot['data_type']);
        $this->assertFalse(isset($this->sot['data_type']));
        $this->sot['data_type'] = $v;
        $this->assertEquals($v, $this->sot['data_type']);
        $this->assertTrue(isset($this->sot['data_type']));
    }

    /**
     * Test attribute "default_value"
     *
     * @covers ::__construct
     * @covers ::getDefaultValue
     * @covers ::setDefaultValue
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyDefaultValue(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['default_value'],
            $this->allowedValues['default_value'] ?? null
        );
        $this->sot->setDefaultValue($v);
        $this->assertEquals($v, $this->sot->getDefaultValue());
        $this->sot->setDefaultValue(null);
        $this->assertNull($this->sot->getDefaultValue());
        $this->sot->setDefaultValue($v);

        $this->assertEquals($v, $this->sot['default_value']);
        $v = $this->getFakeValue(
            $this->types['default_value'],
            $this->allowedValues['default_value'] ?? null
        );
        $this->sot['default_value'] = $v;
        $this->assertEquals($v, $this->sot['default_value']);
        $this->assertTrue(isset($this->sot['default_value']));
        unset($this->sot['default_value']);
        $this->assertFalse(isset($this->sot['default_value']));
        $this->sot['default_value'] = $v;
        $this->assertEquals($v, $this->sot['default_value']);
        $this->assertTrue(isset($this->sot['default_value']));
    }

    /**
     * Test attribute "field_meta_data"
     *
     * @covers ::__construct
     * @covers ::getFieldMetaData
     * @covers ::setFieldMetaData
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyFieldMetaData(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['field_meta_data'],
            $this->allowedValues['field_meta_data'] ?? null
        );
        $this->sot->setFieldMetaData($v);
        $this->assertEquals($v, $this->sot->getFieldMetaData());
        $this->sot->setFieldMetaData(null);
        $this->assertNull($this->sot->getFieldMetaData());
        $this->sot->setFieldMetaData($v);

        $this->assertEquals($v, $this->sot['field_meta_data']);
        $v = $this->getFakeValue(
            $this->types['field_meta_data'],
            $this->allowedValues['field_meta_data'] ?? null
        );
        $this->sot['field_meta_data'] = $v;
        $this->assertEquals($v, $this->sot['field_meta_data']);
        $this->assertTrue(isset($this->sot['field_meta_data']));
        unset($this->sot['field_meta_data']);
        $this->assertFalse(isset($this->sot['field_meta_data']));
        $this->sot['field_meta_data'] = $v;
        $this->assertEquals($v, $this->sot['field_meta_data']);
        $this->assertTrue(isset($this->sot['field_meta_data']));
    }

    /**
     * Test attribute "field_width"
     *
     * @covers ::__construct
     * @covers ::getFieldWidth
     * @covers ::setFieldWidth
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyFieldWidth(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['field_width'],
            $this->allowedValues['field_width'] ?? null
        );
        $this->sot->setFieldWidth($v);
        $this->assertEquals($v, $this->sot->getFieldWidth());
        $this->sot->setFieldWidth(null);
        $this->assertNull($this->sot->getFieldWidth());
        $this->sot->setFieldWidth($v);

        $this->assertEquals($v, $this->sot['field_width']);
        $v = $this->getFakeValue(
            $this->types['field_width'],
            $this->allowedValues['field_width'] ?? null
        );
        $this->sot['field_width'] = $v;
        $this->assertEquals($v, $this->sot['field_width']);
        $this->assertTrue(isset($this->sot['field_width']));
        unset($this->sot['field_width']);
        $this->assertFalse(isset($this->sot['field_width']));
        $this->sot['field_width'] = $v;
        $this->assertEquals($v, $this->sot['field_width']);
        $this->assertTrue(isset($this->sot['field_width']));
    }

    /**
     * Test attribute "fields"
     *
     * @covers ::__construct
     * @covers ::getFields
     * @covers ::setFields
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyFields(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['fields'],
            $this->allowedValues['fields'] ?? null
        );
        $this->sot->setFields($v);
        $this->assertEquals($v, $this->sot->getFields());
        $this->sot->setFields(null);
        $this->assertNull($this->sot->getFields());
        $this->sot->setFields($v);

        $this->assertEquals($v, $this->sot['fields']);
        $v = $this->getFakeValue(
            $this->types['fields'],
            $this->allowedValues['fields'] ?? null
        );
        $this->sot['fields'] = $v;
        $this->assertEquals($v, $this->sot['fields']);
        $this->assertTrue(isset($this->sot['fields']));
        unset($this->sot['fields']);
        $this->assertFalse(isset($this->sot['fields']));
        $this->sot['fields'] = $v;
        $this->assertEquals($v, $this->sot['fields']);
        $this->assertTrue(isset($this->sot['fields']));
    }

    /**
     * Test attribute "form_prefill"
     *
     * @covers ::__construct
     * @covers ::getFormPrefill
     * @covers ::setFormPrefill
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyFormPrefill(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['form_prefill'],
            $this->allowedValues['form_prefill'] ?? null
        );
        $this->sot->setFormPrefill($v);
        $this->assertEquals($v, $this->sot->getFormPrefill());
        $this->sot->setFormPrefill(null);
        $this->assertNull($this->sot->getFormPrefill());
        $this->sot->setFormPrefill($v);

        $this->assertEquals($v, $this->sot['form_prefill']);
        $v = $this->getFakeValue(
            $this->types['form_prefill'],
            $this->allowedValues['form_prefill'] ?? null
        );
        $this->sot['form_prefill'] = $v;
        $this->assertEquals($v, $this->sot['form_prefill']);
        $this->assertTrue(isset($this->sot['form_prefill']));
        unset($this->sot['form_prefill']);
        $this->assertFalse(isset($this->sot['form_prefill']));
        $this->sot['form_prefill'] = $v;
        $this->assertEquals($v, $this->sot['form_prefill']);
        $this->assertTrue(isset($this->sot['form_prefill']));
    }

    /**
     * Test attribute "is_sensitive"
     *
     * @covers ::__construct
     * @covers ::getIsSensitive
     * @covers ::setIsSensitive
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyIsSensitive(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['is_sensitive'],
            $this->allowedValues['is_sensitive'] ?? null
        );
        $this->sot->setIsSensitive($v);
        $this->assertEquals($v, $this->sot->getIsSensitive());
        $this->sot->setIsSensitive(null);
        $this->assertNull($this->sot->getIsSensitive());
        $this->sot->setIsSensitive($v);

        $this->assertEquals($v, $this->sot['is_sensitive']);
        $v = $this->getFakeValue(
            $this->types['is_sensitive'],
            $this->allowedValues['is_sensitive'] ?? null
        );
        $this->sot['is_sensitive'] = $v;
        $this->assertEquals($v, $this->sot['is_sensitive']);
        $this->assertTrue(isset($this->sot['is_sensitive']));
        unset($this->sot['is_sensitive']);
        $this->assertFalse(isset($this->sot['is_sensitive']));
        $this->sot['is_sensitive'] = $v;
        $this->assertEquals($v, $this->sot['is_sensitive']);
        $this->assertTrue(isset($this->sot['is_sensitive']));
    }

    /**
     * Test attribute "hint_text"
     *
     * @covers ::__construct
     * @covers ::getHintText
     * @covers ::setHintText
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyHintText(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['hint_text'],
            $this->allowedValues['hint_text'] ?? null
        );
        $this->sot->setHintText($v);
        $this->assertEquals($v, $this->sot->getHintText());
        $this->sot->setHintText(null);
        $this->assertNull($this->sot->getHintText());
        $this->sot->setHintText($v);

        $this->assertEquals($v, $this->sot['hint_text']);
        $v = $this->getFakeValue(
            $this->types['hint_text'],
            $this->allowedValues['hint_text'] ?? null
        );
        $this->sot['hint_text'] = $v;
        $this->assertEquals($v, $this->sot['hint_text']);
        $this->assertTrue(isset($this->sot['hint_text']));
        unset($this->sot['hint_text']);
        $this->assertFalse(isset($this->sot['hint_text']));
        $this->sot['hint_text'] = $v;
        $this->assertEquals($v, $this->sot['hint_text']);
        $this->assertTrue(isset($this->sot['hint_text']));
    }

    /**
     * Test attribute "id"
     *
     * @covers ::__construct
     * @covers ::getId
     * @covers ::setId
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyId(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['id'],
            $this->allowedValues['id'] ?? null
        );
        $this->sot->setId($v);
        $this->assertEquals($v, $this->sot->getId());
        $this->sot->setId(null);
        $this->assertNull($this->sot->getId());
        $this->sot->setId($v);

        $this->assertEquals($v, $this->sot['id']);
        $v = $this->getFakeValue(
            $this->types['id'],
            $this->allowedValues['id'] ?? null
        );
        $this->sot['id'] = $v;
        $this->assertEquals($v, $this->sot['id']);
        $this->assertTrue(isset($this->sot['id']));
        unset($this->sot['id']);
        $this->assertFalse(isset($this->sot['id']));
        $this->sot['id'] = $v;
        $this->assertEquals($v, $this->sot['id']);
        $this->assertTrue(isset($this->sot['id']));
    }

    /**
     * Test attribute "instructions"
     *
     * @covers ::__construct
     * @covers ::getInstructions
     * @covers ::setInstructions
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyInstructions(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['instructions'],
            $this->allowedValues['instructions'] ?? null
        );
        $this->sot->setInstructions($v);
        $this->assertEquals($v, $this->sot->getInstructions());
        $this->sot->setInstructions(null);
        $this->assertNull($this->sot->getInstructions());
        $this->sot->setInstructions($v);

        $this->assertEquals($v, $this->sot['instructions']);
        $v = $this->getFakeValue(
            $this->types['instructions'],
            $this->allowedValues['instructions'] ?? null
        );
        $this->sot['instructions'] = $v;
        $this->assertEquals($v, $this->sot['instructions']);
        $this->assertTrue(isset($this->sot['instructions']));
        unset($this->sot['instructions']);
        $this->assertFalse(isset($this->sot['instructions']));
        $this->sot['instructions'] = $v;
        $this->assertEquals($v, $this->sot['instructions']);
        $this->assertTrue(isset($this->sot['instructions']));
    }

    /**
     * Test attribute "label"
     *
     * @covers ::__construct
     * @covers ::getLabel
     * @covers ::setLabel
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyLabel(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['label'],
            $this->allowedValues['label'] ?? null
        );
        $this->sot->setLabel($v);
        $this->assertEquals($v, $this->sot->getLabel());
        $this->sot->setLabel(null);
        $this->assertNull($this->sot->getLabel());
        $this->sot->setLabel($v);

        $this->assertEquals($v, $this->sot['label']);
        $v = $this->getFakeValue(
            $this->types['label'],
            $this->allowedValues['label'] ?? null
        );
        $this->sot['label'] = $v;
        $this->assertEquals($v, $this->sot['label']);
        $this->assertTrue(isset($this->sot['label']));
        unset($this->sot['label']);
        $this->assertFalse(isset($this->sot['label']));
        $this->sot['label'] = $v;
        $this->assertEquals($v, $this->sot['label']);
        $this->assertTrue(isset($this->sot['label']));
    }

    /**
     * Test attribute "label_width"
     *
     * @covers ::__construct
     * @covers ::getLabelWidth
     * @covers ::setLabelWidth
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyLabelWidth(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['label_width'],
            $this->allowedValues['label_width'] ?? null
        );
        $this->sot->setLabelWidth($v);
        $this->assertEquals($v, $this->sot->getLabelWidth());
        $this->sot->setLabelWidth(null);
        $this->assertNull($this->sot->getLabelWidth());
        $this->sot->setLabelWidth($v);

        $this->assertEquals($v, $this->sot['label_width']);
        $v = $this->getFakeValue(
            $this->types['label_width'],
            $this->allowedValues['label_width'] ?? null
        );
        $this->sot['label_width'] = $v;
        $this->assertEquals($v, $this->sot['label_width']);
        $this->assertTrue(isset($this->sot['label_width']));
        unset($this->sot['label_width']);
        $this->assertFalse(isset($this->sot['label_width']));
        $this->sot['label_width'] = $v;
        $this->assertEquals($v, $this->sot['label_width']);
        $this->assertTrue(isset($this->sot['label_width']));
    }

    /**
     * Test attribute "max_length"
     *
     * @covers ::__construct
     * @covers ::getMaxLength
     * @covers ::setMaxLength
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyMaxLength(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['max_length'],
            $this->allowedValues['max_length'] ?? null
        );
        $this->sot->setMaxLength($v);
        $this->assertEquals($v, $this->sot->getMaxLength());
        $this->sot->setMaxLength(null);
        $this->assertNull($this->sot->getMaxLength());
        $this->sot->setMaxLength($v);

        $this->assertEquals($v, $this->sot['max_length']);
        $v = $this->getFakeValue(
            $this->types['max_length'],
            $this->allowedValues['max_length'] ?? null
        );
        $this->sot['max_length'] = $v;
        $this->assertEquals($v, $this->sot['max_length']);
        $this->assertTrue(isset($this->sot['max_length']));
        unset($this->sot['max_length']);
        $this->assertFalse(isset($this->sot['max_length']));
        $this->sot['max_length'] = $v;
        $this->assertEquals($v, $this->sot['max_length']);
        $this->assertTrue(isset($this->sot['max_length']));
    }

    /**
     * Test attribute "required"
     *
     * @covers ::__construct
     * @covers ::getRequired
     * @covers ::setRequired
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyRequired(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['required'],
            $this->allowedValues['required'] ?? null
        );
        $this->sot->setRequired($v);
        $this->assertEquals($v, $this->sot->getRequired());
        $this->sot->setRequired(null);
        $this->assertNull($this->sot->getRequired());
        $this->sot->setRequired($v);

        $this->assertEquals($v, $this->sot['required']);
        $v = $this->getFakeValue(
            $this->types['required'],
            $this->allowedValues['required'] ?? null
        );
        $this->sot['required'] = $v;
        $this->assertEquals($v, $this->sot['required']);
        $this->assertTrue(isset($this->sot['required']));
        unset($this->sot['required']);
        $this->assertFalse(isset($this->sot['required']));
        $this->sot['required'] = $v;
        $this->assertEquals($v, $this->sot['required']);
        $this->assertTrue(isset($this->sot['required']));
    }

    /**
     * Test attribute "row_number"
     *
     * @covers ::__construct
     * @covers ::getRowNumber
     * @covers ::setRowNumber
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyRowNumber(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['row_number'],
            $this->allowedValues['row_number'] ?? null
        );
        $this->sot->setRowNumber($v);
        $this->assertEquals($v, $this->sot->getRowNumber());
        $this->sot->setRowNumber(null);
        $this->assertNull($this->sot->getRowNumber());
        $this->sot->setRowNumber($v);

        $this->assertEquals($v, $this->sot['row_number']);
        $v = $this->getFakeValue(
            $this->types['row_number'],
            $this->allowedValues['row_number'] ?? null
        );
        $this->sot['row_number'] = $v;
        $this->assertEquals($v, $this->sot['row_number']);
        $this->assertTrue(isset($this->sot['row_number']));
        unset($this->sot['row_number']);
        $this->assertFalse(isset($this->sot['row_number']));
        $this->sot['row_number'] = $v;
        $this->assertEquals($v, $this->sot['row_number']);
        $this->assertTrue(isset($this->sot['row_number']));
    }

    /**
     * Test attribute "text"
     *
     * @covers ::__construct
     * @covers ::getText
     * @covers ::setText
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyText(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['text'],
            $this->allowedValues['text'] ?? null
        );
        $this->sot->setText($v);
        $this->assertEquals($v, $this->sot->getText());
        $this->sot->setText(null);
        $this->assertNull($this->sot->getText());
        $this->sot->setText($v);

        $this->assertEquals($v, $this->sot['text']);
        $v = $this->getFakeValue(
            $this->types['text'],
            $this->allowedValues['text'] ?? null
        );
        $this->sot['text'] = $v;
        $this->assertEquals($v, $this->sot['text']);
        $this->assertTrue(isset($this->sot['text']));
        unset($this->sot['text']);
        $this->assertFalse(isset($this->sot['text']));
        $this->sot['text'] = $v;
        $this->assertEquals($v, $this->sot['text']);
        $this->assertTrue(isset($this->sot['text']));
    }

    /**
     * Test attribute "validation_message"
     *
     * @covers ::__construct
     * @covers ::getValidationMessage
     * @covers ::setValidationMessage
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyValidationMessage(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['validation_message'],
            $this->allowedValues['validation_message'] ?? null
        );
        $this->sot->setValidationMessage($v);
        $this->assertEquals($v, $this->sot->getValidationMessage());
        $this->sot->setValidationMessage(null);
        $this->assertNull($this->sot->getValidationMessage());
        $this->sot->setValidationMessage($v);

        $this->assertEquals($v, $this->sot['validation_message']);
        $v = $this->getFakeValue(
            $this->types['validation_message'],
            $this->allowedValues['validation_message'] ?? null
        );
        $this->sot['validation_message'] = $v;
        $this->assertEquals($v, $this->sot['validation_message']);
        $this->assertTrue(isset($this->sot['validation_message']));
        unset($this->sot['validation_message']);
        $this->assertFalse(isset($this->sot['validation_message']));
        $this->sot['validation_message'] = $v;
        $this->assertEquals($v, $this->sot['validation_message']);
        $this->assertTrue(isset($this->sot['validation_message']));
    }

    /**
     * Test attribute "visibility_rules"
     *
     * @covers ::__construct
     * @covers ::getVisibilityRules
     * @covers ::setVisibilityRules
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testPropertyVisibilityRules(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['visibility_rules'],
            $this->allowedValues['visibility_rules'] ?? null
        );
        $this->sot->setVisibilityRules($v);
        $this->assertEquals($v, $this->sot->getVisibilityRules());
        $this->sot->setVisibilityRules(null);
        $this->assertNull($this->sot->getVisibilityRules());
        $this->sot->setVisibilityRules($v);

        $this->assertEquals($v, $this->sot['visibility_rules']);
        $v = $this->getFakeValue(
            $this->types['visibility_rules'],
            $this->allowedValues['visibility_rules'] ?? null
        );
        $this->sot['visibility_rules'] = $v;
        $this->assertEquals($v, $this->sot['visibility_rules']);
        $this->assertTrue(isset($this->sot['visibility_rules']));
        unset($this->sot['visibility_rules']);
        $this->assertFalse(isset($this->sot['visibility_rules']));
        $this->sot['visibility_rules'] = $v;
        $this->assertEquals($v, $this->sot['visibility_rules']);
        $this->assertTrue(isset($this->sot['visibility_rules']));
    }
}
