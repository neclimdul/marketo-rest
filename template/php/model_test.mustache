<?php
{{#models}}
{{#model}}
/**
 * {{classname}}Test
 *
{{>partial_header}}
 *
 * @category Class
 * @package  {{invokerPackage}}
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the model.
 */

namespace {{invokerPackage}}\Test\Model;

use Faker\Factory;
use {{modelPackage}}\ModelInterface;
use {{modelPackage}}\{{classname}};
use PHPUnit\Framework\TestCase;

/**
 * {{classname}}Test Class Doc Comment
 *
 * @category    Class
 * @description {{#description}}{{description}}{{/description}}{{^description}}{{classname}}{{/description}}
 * @package     {{invokerPackage}}
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 *
 * @coversDefaultClass \{{modelPackage}}\{{classname}}
 */
class {{classname}}Test extends TestCase
{

    /**
     * @var \{{modelPackage}}\{{classname}}
     */
    private $sot;

    /**
     * @var string[]
     */
    private $types = [
{{#vars}}
        '{{name}}' => '{{datatype}}',
{{/vars}}
];

{{#hasVars}}
    /**
     * @var \Faker\Generator
     */
    private $faker;

    /**
     * @var scalar[][]
     */
    private $allowedValues = [
{{#vars}}
        {{#isEnum}}
        '{{name}}' => [
            {{#allowableValues}}
            {{#enumVars}}
            '{{{name}}}' => {{{value}}},
            {{/enumVars}}
            {{/allowableValues}}
        ],
        {{/isEnum}}
{{/vars}}
    ];
{{/hasVars}}

    public function setUp(): void
    {
        parent::setUp();
        {{#hasVars}}
        $this->faker = \Faker\Factory::create();
        $data = [];
        foreach ($this->types as $field => $type) {
            $data[$field] = $this->getFakeValue($type, $this->allowedValues[$field] ?? null);
        }
        $this->sot = new {{classname}}($data);
        {{/hasVars}}
        {{^hasVars}}
        $this->sot = new {{classname}}();
        {{/hasVars}}
    }

{{#hasVars}}
    /**
     * @param string $type
     * @param scalar[]|null $values
     * @return mixed
     */
    private function getFakeValue(string $type, ?array $values) {
        if (isset($values)) {
            // @todo random.
            return array_pop($values);
        }

        // @todo look for container hints.
        if (strcasecmp(substr($type, -2), '[]') === 0) {
            $return = [];
            $subType = substr($type, 0, -2);
            for ($i = 0; $i <= rand(0, 9); $i++) {
                $return[] = $this->getFakeValue($subType, $values);
            }
            return $return;
        }
        switch ($type) {
            case 'string':
                return $this->faker->word();
            case 'float':
                return $this->faker->randomFloat();
            case 'int':
                return $this->faker->randomNumber();
            case 'bool':
                return $this->faker->boolean();
            case '\DateTime':
                return $this->faker->dateTimeAD();
            case 'object':
                return new \stdClass();
        }
        if (class_exists($type) && is_subclass_of($type, ModelInterface::class)) {
            $model = new $type();
            $types = $type::swaggerTypes();
            foreach ($model->listInvalidProperties() as $field => $reason) {
                // @todo get allowed values? ((getter))AllowedValues
                // @phpstan-ignore-next-line
                $model[$field] = $this->getFakeValue($types[$field], null);
            }
            return $model;
        }
        $this->markTestSkipped('This type is not mocked yet: ' . $type);
    }
{{/hasVars}}

    /**
     * Test "{{classname}}"
     *
     * @covers ::__construct
     */
    public function test{{classname}}(): void
    {
        $this->assertInstanceOf({{classname}}::class, $this->sot);
    }

    /**
     * @covers ::swaggerTypes
     */
    public function testSwaggerTypes(): void
    {
        $this->assertEquals($this->types, {{classname}}::swaggerTypes());
    }

    /**
     * @covers ::swaggerFormats
     */
    public function testSwaggerFormats(): void
    {
        {{#hasVars}}
        $formats = $this->sot->swaggerFormats();
        {{#vars}}
        $this->assertEquals({{#dataFormat}}'{{{.}}}'{{/dataFormat}}{{^dataFormat}}null{{/dataFormat}}, $formats['{{name}}']);
        {{/vars}}
        {{/hasVars}}
        {{^hasVars}}
        $this->assertEmpty($this->sot->swaggerFormats());
        {{/hasVars}}
    }

    /**
     * @covers ::attributeMap
     */
    public function testAttributeMap(): void
    {
        {{#hasVars}}
        $formats = $this->sot->attributeMap();
        {{#vars}}
        $this->assertEquals('{{baseName}}', $formats['{{name}}']);
        {{/vars}}
        {{/hasVars}}
        {{^hasVars}}
        $this->assertEmpty($this->sot->attributeMap());
        {{/hasVars}}
    }

    /**
     * @covers ::getters
     * @covers ::setters
     */
    public function testGettersSetters(): void
    {
        $getters = $this->sot->getters();
        $setters = $this->sot->setters();
        {{^hasVars}}
            $this->assertEmpty($setters);
            $this->assertEmpty($getters);
        {{/hasVars}}
        {{#hasVars}}
        foreach (array_keys($this->types) as $field) {
            $this->assertTrue(isset($setters[$field]));
            $this->assertTrue(isset($getters[$field]));
            $this->assertTrue(
                method_exists($this->sot, $getters[$field]),
                'Getter exists on model.'
            );
            $this->assertTrue(
                method_exists($this->sot, $setters[$field]),
                'Setter exists on model.'
            );
        }
        {{/hasVars}}
    }

    /**
     * @covers ::getModelName
     */
    public function testGetModelName(): void
    {
        $this->assertEquals('{{name}}', $this->sot->getModelName());
    }

    /**
     * @covers ::listInvalidProperties
     * @covers ::valid
     */
    public function testValid(): void
    {
        $this->markTestIncomplete('TODO');
    }

    /**
     * @covers ::setAdditionalProperties
     * @covers ::setAdditionalProperty
     * @covers ::getAdditionalProperties
     */
    public function testAdditionalProperties(): void
    {
        $this->markTestIncomplete('TODO');
    }

    /**
     * @covers ::jsonSerialize
     * @covers ::__toString
     */
    public function testJson(): void
    {
        // Some minimal tests that json generates well.
        $json = json_encode($this->sot);
        $this->assertIsString($json, 'Json encoded');
        $json = json_decode($json);
        $string = json_decode((string) $this->sot);
        $this->assertEquals(
            $json,
            $string
        );
        $this->assertInstanceOf(\stdClass::class, $json);
        $this->assertInstanceOf(\stdClass::class, $string);
    }
{{#vars}}

    /**
     * Test attribute "{{name}}"
     *
     * @covers ::__construct
     * @covers ::{{getter}}
     * @covers ::{{setter}}
     * @covers ::offsetExists
     * @covers ::offsetGet
     * @covers ::offsetSet
     * @covers ::offsetUnset
     */
    public function testProperty{{nameInCamelCase}}(): void
    {
        // @todo can we assert anything useful about the default?
        $v = $this->getFakeValue(
            $this->types['{{name}}'],
            $this->allowedValues['{{name}}'] ?? null
        );
        $this->sot->{{setter}}($v);
        $this->assertEquals($v, $this->sot->{{getter}}());
        {{^required}}
        $this->sot->{{setter}}(null);
        $this->assertNull($this->sot->{{getter}}());
        $this->sot->{{setter}}($v);
        {{/required}}

        $this->assertEquals($v, $this->sot['{{name}}']);
        $v = $this->getFakeValue(
            $this->types['{{name}}'],
            $this->allowedValues['{{name}}'] ?? null
        );
        $this->sot['{{name}}'] = $v;
        $this->assertEquals($v, $this->sot['{{name}}']);
        $this->assertTrue(isset($this->sot['{{name}}']));
        unset($this->sot['{{name}}']);
        $this->assertFalse(isset($this->sot['{{name}}']));
        $this->sot['{{name}}'] = $v;
        $this->assertEquals($v, $this->sot['{{name}}']);
        $this->assertTrue(isset($this->sot['{{name}}']));
    }
{{/vars}}
}
{{/model}}
{{/models}}
