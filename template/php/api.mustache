<?php

/**
 * {{classname}}
 *
{{>partial_header}}
 *
 * @category Class
 * @package  {{invokerPackage}}
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace {{apiPackage}};

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\Promise\PromiseInterface;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\ResponseInterface;
use {{invokerPackage}}\ApiException;
use {{invokerPackage}}\Configuration;
use {{invokerPackage}}\HeaderSelector;
use {{invokerPackage}}\ObjectSerializer;

/**
 * {{classname}} Class Doc Comment
 *
 * @category Class
 * @package  {{invokerPackage}}
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
{{#operations}}class {{classname}}
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the spec.
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

{{#operation}}
    /**
     * Exception handler for {{{operationId}}}.
     *
     * @param \{{invokerPackage}}\ApiException $e Unprocessed exception.
     *
     * @return \{{invokerPackage}}\ApiException Processed exception.
     */
    protected function {{operationId}}HandleException(ApiException $e): ApiException
    {
        {{#returnType}}
        {{#responses}}
        {{#-first}}
        switch ($e->getCode()) {
        {{/-first}}
        {{#dataType}}
            {{^isWildcard}}case {{code}}:{{/isWildcard}}{{#isWildcard}}default:{{/isWildcard}}
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        {{^isContainer}}{{dataType}}::class{{/isContainer}}{{#isContainer}}'{{dataType}}'{{/isContainer}},
                        $e->getResponseHeaders()
                    )
                );
                break;
        {{/dataType}}
        {{#-last}}
        }
        {{/-last}}
        {{/responses}}
        {{/returnType}}
        return $e;
    }

    /**
{{#summary}}
     * {{{summary}}}
{{/summary}}
{{^summary}}
     * Operation {{{operationId}}}
{{/summary}}
{{#description}}
     *
     * {{.}}
{{/description}}
{{#vendorExtensions.x-group-parameters}}
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
{{/vendorExtensions.x-group-parameters}}
{{#servers}}
{{#-first}}
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
{{/-first}}
     * URL: {{{url}}}
{{/servers}}
{{#allParams}}
{{#-first}}
     *
{{/-first}}
     * @param {{dataType}}{{^required}}|{{#defaultValue}}'{{{.}}}'{{/defaultValue}}{{^defaultValue}}null{{/defaultValue}}{{/required}} ${{paramName}}
     *   {{#description}}{{.}}{{/description}}
{{/allParams}}
     *
     * @throws \{{invokerPackage}}\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return {{#returnType}}{{.}}{{/returnType}}{{^returnType}}void{{/returnType}}
     */
    public function {{operationId}}({{#hasParams}}
    {{^vendorExtensions.x-group-parameters}}
    {{#allParams}}
        {{^isContainer}}{{dataType}}{{/isContainer}}{{#isContainer}}array{{/isContainer}} ${{paramName}}{{^required}} = {{#defaultValue}}'{{{.}}}'{{/defaultValue}}{{^defaultValue}}null{{/defaultValue}}{{/required}}{{^-last}},{{/-last}}
    {{/allParams}}
    {{/vendorExtensions.x-group-parameters}}
    {{#vendorExtensions.x-group-parameters}}$associative_array{{/vendorExtensions.x-group-parameters}}{{/hasParams}}): {{returnType}}{{#hasParams}} {{=<% %>=}}{<%={{ }}=%>{{/hasParams}}
    {{^hasParams}}
    {
    {{/hasParams}}
        {{#returnType}}list($response) = {{/returnType}}$this->{{operationId}}WithHttpInfo({{^vendorExtensions.x-group-parameters}}{{#allParams}}${{paramName}}{{^-last}}, {{/-last}}{{/allParams}}{{/vendorExtensions.x-group-parameters}}{{#vendorExtensions.x-group-parameters}}$associative_array{{/vendorExtensions.x-group-parameters}});
        {{#returnType}}
        return $response;
        {{/returnType}}
    }

    /**
{{#summary}}
     * {{{summary}}}
{{/summary}}
{{^summary}}
     * Operation {{{operationId}}}WithHttpInfo
{{/summary}}
{{#description}}
     *
     * {{.}}
{{/description}}
{{#vendorExtensions.x-group-parameters}}
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
{{/vendorExtensions.x-group-parameters}}
{{#servers}}
{{#-first}}
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
{{/-first}}
     * URL: {{{url}}}
{{/servers}}
{{#allParams}}
{{#-first}}
     *
{{/-first}}
     * @param {{dataType}}{{^required}}|{{#defaultValue}}'{{{.}}}'{{/defaultValue}}{{^defaultValue}}null{{/defaultValue}}{{/required}} ${{paramName}}
     *   {{#description}}{{.}}{{/description}}
{{/allParams}}
     *
     * @throws \{{invokerPackage}}\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     {{#returnType}}{{.}}{{/returnType}}{{^returnType}}null{{/returnType}},
     *     int,
     *     array<array<string>>
     * }
     */
    public function {{operationId}}WithHttpInfo({{#hasParams}}
    {{^vendorExtensions.x-group-parameters}}
    {{#allParams}}
        {{^isContainer}}{{dataType}}{{/isContainer}}{{#isContainer}}array{{/isContainer}} ${{paramName}}{{^required}} = {{#defaultValue}}'{{{.}}}'{{/defaultValue}}{{^defaultValue}}null{{/defaultValue}}{{/required}}{{^-last}},{{/-last}}
    {{/allParams}}
    {{/vendorExtensions.x-group-parameters}}
    {{#vendorExtensions.x-group-parameters}}$associative_array{{/vendorExtensions.x-group-parameters}}{{/hasParams}}): array{{#hasParams}} {{=<% %>=}}{<%={{ }}=%>{{/hasParams}}
    {{^hasParams}}
    {
    {{/hasParams}}
        $request = $this->{{operationId}}Request({{^vendorExtensions.x-group-parameters}}{{#allParams}}${{paramName}}{{^-last}}, {{/-last}}{{/allParams}}{{/vendorExtensions.x-group-parameters}}{{#vendorExtensions.x-group-parameters}}$associative_array{{/vendorExtensions.x-group-parameters}});
        try {
            $response = $this->makeRequest($request);
            {{#returnType}}
            return $this->responseToReturn(
                $response,
                {{^isContainer}}{{returnType}}::class{{/isContainer}}{{#isContainer}}'{{returnType}}'{{/isContainer}}
            );
            {{/returnType}}
            {{^returnType}}
            return [null, $response->getStatusCode(), $response->getHeaders()];
            {{/returnType}}
        } catch (ApiException $e) {
            throw $this->{{operationId}}HandleException($e);
        }
    }

    /**
{{#summary}}
     * {{{summary}}}
{{/summary}}
{{^summary}}
     * Operation {{{operationId}}}Async
{{/summary}}
{{#description}}
     *
     * {{.}}
{{/description}}
{{#vendorExtensions.x-group-parameters}}
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
{{/vendorExtensions.x-group-parameters}}
{{#servers}}
{{#-first}}
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
{{/-first}}
     * URL: {{{url}}}
{{/servers}}
{{#allParams}}
{{#-first}}
     *
{{/-first}}
     * @param {{dataType}}{{^required}}|{{#defaultValue}}'{{{.}}}'{{/defaultValue}}{{^defaultValue}}null{{/defaultValue}}{{/required}} ${{paramName}}
     *   {{#description}}{{.}}{{/description}}
{{/allParams}}
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function {{operationId}}Async({{#hasParams}}
    {{^vendorExtensions.x-group-parameters}}
    {{#allParams}}
        {{^isContainer}}{{dataType}}{{/isContainer}}{{#isContainer}}array{{/isContainer}} ${{paramName}}{{^required}} = {{#defaultValue}}'{{{.}}}'{{/defaultValue}}{{^defaultValue}}null{{/defaultValue}}{{/required}}{{^-last}},{{/-last}}
    {{/allParams}}
    {{/vendorExtensions.x-group-parameters}}
    {{#vendorExtensions.x-group-parameters}}$associative_array{{/vendorExtensions.x-group-parameters}}{{/hasParams}}): PromiseInterface{{#hasParams}} {{=<% %>=}}{<%={{ }}=%>{{/hasParams}}
    {{^hasParams}}
    {
    {{/hasParams}}
        return $this->{{operationId}}AsyncWithHttpInfo({{^vendorExtensions.x-group-parameters}}{{#allParams}}${{paramName}}{{^-last}}, {{/-last}}{{/allParams}}{{/vendorExtensions.x-group-parameters}}{{#vendorExtensions.x-group-parameters}}$associative_array{{/vendorExtensions.x-group-parameters}})
            ->then(
                function (array $response): {{#returnType}}{{.}}{{/returnType}}{{^returnType}}null{{/returnType}} {
                    return $response[0];
                }
            );
    }

    /**
{{#summary}}
     * {{{summary}}}
{{/summary}}
{{^summary}}
     * Operation {{{operationId}}}AsyncWithHttpInfo
{{/summary}}
{{#description}}
     *
     * {{.}}
{{/description}}
{{#vendorExtensions.x-group-parameters}}
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
{{/vendorExtensions.x-group-parameters}}
{{#servers}}
{{#-first}}
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
{{/-first}}
     * URL: {{{url}}}
{{/servers}}
{{#allParams}}
{{#-first}}
     *
{{/-first}}
     * @param {{dataType}}{{^required}}|{{#defaultValue}}'{{{.}}}'{{/defaultValue}}{{^defaultValue}}null{{/defaultValue}}{{/required}} ${{paramName}}
     *   {{#description}}{{.}}{{/description}}
{{/allParams}}
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function {{operationId}}AsyncWithHttpInfo({{#hasParams}}
    {{^vendorExtensions.x-group-parameters}}
    {{#allParams}}
        {{^isContainer}}{{dataType}}{{/isContainer}}{{#isContainer}}array{{/isContainer}} ${{paramName}}{{^required}} = {{#defaultValue}}'{{{.}}}'{{/defaultValue}}{{^defaultValue}}null{{/defaultValue}}{{/required}}{{^-last}},{{/-last}}
    {{/allParams}}
    {{/vendorExtensions.x-group-parameters}}
    {{#vendorExtensions.x-group-parameters}}$associative_array{{/vendorExtensions.x-group-parameters}}{{/hasParams}}): PromiseInterface{{#hasParams}} {{=<% %>=}}{<%={{ }}=%>{{/hasParams}}
    {{^hasParams}}
    {
    {{/hasParams}}
        $request = $this->{{operationId}}Request({{^vendorExtensions.x-group-parameters}}{{#allParams}}${{paramName}}{{^-last}}, {{/-last}}{{/allParams}}{{/vendorExtensions.x-group-parameters}}{{#vendorExtensions.x-group-parameters}}$associative_array{{/vendorExtensions.x-group-parameters}});
        return $this->makeAsyncRequest(
            $request,
            {{^isContainer}}{{returnType}}::class{{/isContainer}}{{#isContainer}}'{{returnType}}'{{/isContainer}},
            [$this, '{{operationId}}HandleException']
        );
    }

    /**
     * Create request for operation '{{{operationId}}}'
{{#vendorExtensions.x-group-parameters}}
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
{{/vendorExtensions.x-group-parameters}}
{{#servers}}
{{#-first}}
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
{{/-first}}
     * URL: {{{url}}}
{{/servers}}
{{#allParams}}
{{#-first}}
     *
{{/-first}}
     * @param {{dataType}}{{^required}}|{{#defaultValue}}'{{{.}}}'{{/defaultValue}}{{^defaultValue}}null{{/defaultValue}}{{/required}} ${{paramName}}
     *   {{#description}}{{.}}{{/description}}
{{/allParams}}
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function {{operationId}}Request({{#hasParams}}
    {{^vendorExtensions.x-group-parameters}}
    {{#allParams}}
        {{^isContainer}}{{dataType}}{{/isContainer}}{{#isContainer}}array{{/isContainer}} ${{paramName}}{{^required}} = {{#defaultValue}}'{{{.}}}'{{/defaultValue}}{{^defaultValue}}null{{/defaultValue}}{{/required}}{{^-last}},{{/-last}}
    {{/allParams}}
    {{/vendorExtensions.x-group-parameters}}
    {{#vendorExtensions.x-group-parameters}}$associative_array{{/vendorExtensions.x-group-parameters}}{{/hasParams}}): Request{{#hasParams}} {{=<% %>=}}{<%={{ }}=%>{{/hasParams}}
    {{^hasParams}}
    {
    {{/hasParams}}
        {{#vendorExtensions.x-group-parameters}}
        // unbox the parameters from the associative array
        {{#allParams}}
        ${{paramName}} = array_key_exists('{{paramName}}', $associative_array) ? $associative_array['{{paramName}}'] : {{#defaultValue}}{{{.}}}{{/defaultValue}}{{^defaultValue}}null{{/defaultValue}};
        {{/allParams}}

        {{/vendorExtensions.x-group-parameters}}
        {{#allParams}}
        {{#required}}
        {{#isContainer}}
        // Verify the required parameter '{{paramName}}' is set.
        if (empty(${{paramName}})) {
            throw new \InvalidArgumentException(
                'Missing the required parameter ${{paramName}} when calling {{operationId}}'
            );
        }
        {{/isContainer}}
        {{/required}}
        {{#hasValidation}}
        {{#maxLength}}
        if ({{^required}}isset(${{paramName}}) && {{/required}}strlen(${{paramName}}) > {{maxLength}}) {
            throw new \InvalidArgumentException('invalid length for "${{paramName}}" when calling {{classname}}.{{operationId}}, must be smaller than or equal to {{maxLength}}.');
        }
        {{/maxLength}}
        {{#minLength}}
        if ({{^required}}isset(${{paramName}}) && {{/required}}strlen(${{paramName}}) < {{minLength}}) {
            throw new \InvalidArgumentException('invalid length for "${{paramName}}" when calling {{classname}}.{{operationId}}, must be bigger than or equal to {{minLength}}.');
        }
        {{/minLength}}
        {{#maximum}}
        if ({{^required}}isset(${{paramName}}) && {{/required}}${{paramName}} >{{#exclusiveMaximum}}={{/exclusiveMaximum}} {{maximum}}) {
            throw new \InvalidArgumentException('invalid value for "${{paramName}}" when calling {{classname}}.{{operationId}}, must be smaller than {{^exclusiveMaximum}}or equal to {{/exclusiveMaximum}}{{maximum}}.');
        }
        {{/maximum}}
        {{#minimum}}
        if ({{^required}}isset(${{paramName}}) && {{/required}}${{paramName}} <{{#exclusiveMinimum}}={{/exclusiveMinimum}} {{minimum}}) {
            throw new \InvalidArgumentException('invalid value for "${{paramName}}" when calling {{classname}}.{{operationId}}, must be bigger than {{^exclusiveMinimum}}or equal to {{/exclusiveMinimum}}{{minimum}}.');
        }
        {{/minimum}}
        {{#pattern}}
        if ({{^required}}isset(${{paramName}}) && {{/required}}!preg_match("{{{pattern}}}", ${{paramName}})) {
            throw new \InvalidArgumentException("invalid value for \"{{paramName}}\" when calling {{classname}}.{{operationId}}, must conform to the pattern {{{pattern}}}.");
        }
        {{/pattern}}
        {{#maxItems}}
        if ({{^required}}isset(${{paramName}}) && {{/required}}count(${{paramName}}) > {{maxItems}}) {
            throw new \InvalidArgumentException('invalid value for "${{paramName}}" when calling {{classname}}.{{operationId}}, number of items must be less than or equal to {{maxItems}}.');
        }
        {{/maxItems}}
        {{#minItems}}
        if ({{^required}}isset(${{paramName}}) && {{/required}}count(${{paramName}}) < {{minItems}}) {
            throw new \InvalidArgumentException('invalid value for "${{paramName}}" when calling {{classname}}.{{operationId}}, number of items must be greater than or equal to {{minItems}}.');
        }
        {{/minItems}}

        {{/hasValidation}}
        {{/allParams}}

        $resourcePath = '{{{path}}}';
        {{#pathParams}}
        {{#collectionFormat}}
        if (is_array(${{paramName}})) {
            ${{paramName}} = ObjectSerializer::serializeCollection(${{paramName}}, '{{collectionFormat}}');
        }
        {{/collectionFormat}}
        $resourcePath = str_replace(
            '{' . '{{baseName}}' . '}',
            ObjectSerializer::toPathValue(${{paramName}}),
            $resourcePath
        );
        {{/pathParams}}

        {{! Header handling }}
        $headers = [];
        {{#authMethods}}
        {{#isApiKey}}
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('{{keyParamName}}');
        if (isset($apiKey)) {
            {{#isKeyInHeader}}$headers['{{keyParamName}}'] = $apiKey;{{/isKeyInHeader}}{{#isKeyInQuery}}$queryParams['{{keyParamName}}'] = $apiKey;{{/isKeyInQuery}}
        }
        {{/isApiKey}}
        {{#isBasic}}
        {{#isBasicBasic}}
        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        {{/isBasicBasic}}
        {{#isBasicBearer}}
        // this endpoint requires Bearer{{#bearerFormat}} ({{{.}}}){{/bearerFormat}} authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        {{/isBasicBearer}}
        {{/isBasic}}
        {{#isOAuth}}
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        {{/isOAuth}}
        {{/authMethods}}
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        {{#isMultipart}}
        $headers = array_merge($headers, $this->headerSelector->selectHeadersForMultipart(
            [{{#produces}}'{{{mediaType}}}'{{^-last}}, {{/-last}}{{/produces}}]
        ));
        {{/isMultipart}}
        {{^isMultipart}}
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            [{{#produces}}'{{{mediaType}}}'{{^-last}}, {{/-last}}{{/produces}}],
            [{{#consumes}}'{{{mediaType}}}'{{^-last}}, {{/-last}}{{/consumes}}]
        ));
        {{/isMultipart}}
        {{#servers.0}}
        $operationHosts = [{{#servers}}"{{{url}}}"{{^-last}}, {{/-last}}{{/servers}}];
        if ($this->hostIndex < 0 || $this->hostIndex >= sizeof($operationHosts)) {
            throw new \InvalidArgumentException("Invalid index {$this->hostIndex} when selecting the host. Must be less than ".sizeof($operationHosts));
        }
        $operationHost = $operationHosts[$this->hostIndex];
        {{/servers.0}}
        {{^servers.0}}
        $operationHost = $this->config->getHost();
        {{/servers.0}}

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            '{{httpMethod}}',
            $operationHost . $resourcePath,
            // Query.
            [
            {{#queryParams}}
            {{#required}}
            {{#collectionFormat}}
                '{{baseName}}' => ObjectSerializer::serializeCollection(${{paramName}}, '{{collectionFormat}}'),
            {{/collectionFormat}}
            {{^collectionFormat}}
                '{{baseName}}' => ObjectSerializer::toQueryValue(${{paramName}}),
            {{/collectionFormat}}
            {{/required}}
            {{^required}}
            {{#defaultValue}}
            {{! non-required fields with a default value shouldn't be nullable. }}
            {{#collectionFormat}}
                '{{baseName}}' => ObjectSerializer::serializeCollection(${{paramName}}, '{{collectionFormat}}'),
            {{/collectionFormat}}
            {{^collectionFormat}}
                '{{baseName}}' => ObjectSerializer::toQueryValue(${{paramName}}),
            {{/collectionFormat}}
            {{/defaultValue}}
            {{^defaultValue}}
            {{#collectionFormat}}
                '{{baseName}}' => isset(${{paramName}}) ? ObjectSerializer::serializeCollection(${{paramName}}, '{{collectionFormat}}') : null,
            {{/collectionFormat}}
            {{^collectionFormat}}
                '{{baseName}}' => isset(${{paramName}}) ? ObjectSerializer::toQueryValue(${{paramName}}) : null,
            {{/collectionFormat}}
            {{/defaultValue}}
            {{/required}}
            {{/queryParams}}
            ],
            // Headers.
            array_merge(
                [
                {{#headerParams}}
                {{#collectionFormat}}
                    '{{baseName}}' => ObjectSerializer::serializeCollection(${{paramName}}, '{{collectionFormat}}');
                {{/collectionFormat}}
                {{^required}}
                    '{{baseName}}' => isset(${{paramName}}) ? ObjectSerializer::toHeaderValue(${{paramName}}) : null,
                {{/required}}
                {{#required}}
                    '{{baseName}}' => ObjectSerializer::toHeaderValue(${{paramName}}),
                {{/required}}
                {{/headerParams}}
                ],
                $headers
            ),
            // Form Params
            [
            {{#formParams}}
                {{#isFile}}
                '{{baseName}}' => ObjectSerializer::fileToFormValue(${{paramName}}),
                {{/isFile}}
                {{^isFile}}
                '{{baseName}}' => ObjectSerializer::toFormValue(${{paramName}}),
                {{/isFile}}
            {{/formParams}}
            ],
            {{#bodyParams}}${{paramName}}{{/bodyParams}}{{^bodyParams}}''{{/bodyParams}}
        );
    }

    {{/operation}}
    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array<string, mixed> of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    /**
     * Make a request.
     *
     * @param \GuzzleHttp\Psr7\Request $request An initialized request object.
     *
     * @throws \{{invokerPackage}}\ApiException on non-2xx response
     * @return \Psr\Http\Message\ResponseInterface
     */
    private function makeRequest(Request $request)
    {
        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            $response = $e->getResponse();
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                (int) $e->getCode(),
                $response ? $response->getHeaders() : [],
                $response ? (string) $response->getBody() : null
            );
        }

        $statusCode = $response->getStatusCode();
        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    (string) $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                (string) $response->getBody()
            );
        }
        return $response;
    }

    /**
     * Make an async request.
     *
     * @param \GuzzleHttp\Psr7\Request $request An initialized request object.
     * @param class-string $returnType The return type.
     * @param callable $exceptionHandler A callback to process HTTP errors.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @return \GuzzleHttp\Promise\PromiseInterface A promise that will return a processed response.
     */
    private function makeAsyncRequest(Request $request, string $returnType, callable $exceptionHandler)
    {
        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function (ResponseInterface $response) use ($returnType) {
                    return $this->responseToReturn($response, $returnType);
                },
                function (RequestException $exception) use ($exceptionHandler) {
                    $response = $exception->getResponse();
                    $e = new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : [],
                        $response ? (string) $response->getBody() : null
                    );
                    throw $exceptionHandler($e);
                }
            );
    }

    /**
     * Convert a response to a return standard return array.
     *
     * @template T
     * @param \Psr\Http\Message\ResponseInterface $response A response from a request with a serialized body.
     * @param string $returnType The primary return type.
     * @phpstan-param class-string<T> $returnType
     *
     * @return array structured array or response and http info.
     * @phpstan-return array{T, int, array<array<string>>}
     */
    private function responseToReturn(ResponseInterface $response, string $returnType)
    {
        return [
            $this->deserializeResponseBody($response->getBody(), $returnType),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    /**
     * Deserialize a response body.
     *
     * @template T
     * @param mixed $responseBody The response body.
     * @param string $returnType The return type.
     * @param array<string, string[]> $headers A list of headers from the response.
     * @phpstan-param class-string<T> $returnType
     *
     * @return mixed Either a string or a stream to be passed to a file object.
     * @phpstan-return T
     * @psalm-return T
     */
    private function deserializeResponseBody($responseBody, string $returnType, array $headers = [])
    {
        return ObjectSerializer::deserialize(
            $returnType === \SplFileObject::class ? $responseBody : (string) $responseBody,
            $returnType,
            $headers
        );
    }
}
{{/operations}}
