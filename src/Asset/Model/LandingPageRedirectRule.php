<?php
/**
 * LandingPageRedirectRule
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Asset
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Marketo Rest API
 *
 * Marketo Rest API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: developerfeedback@marketo.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace NecLimDul\MarketoRest\Asset\Model;

use \ArrayAccess;
use \NecLimDul\MarketoRest\Asset\ObjectSerializer;

/**
 * LandingPageRedirectRule Class Doc Comment
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Asset
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class LandingPageRedirectRule implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'LandingPageRedirectRule';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'redirect_from_url' => 'string',
        'redirect_to_url' => 'string',
        'hostname' => 'string',
        'redirect_from' => '\NecLimDul\MarketoRest\Asset\Model\RedirectFrom',
        'redirect_to' => '\NecLimDul\MarketoRest\Asset\Model\RedirectTo',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'redirect_from_url' => null,
        'redirect_to_url' => null,
        'hostname' => null,
        'redirect_from' => null,
        'redirect_to' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time'
    ];

    /**
      * Array of additional properties.
      *
      * @var mixed[]
      */
    protected $additionalProperties = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'redirect_from_url' => 'redirectFromUrl',
        'redirect_to_url' => 'redirectToUrl',
        'hostname' => 'hostname',
        'redirect_from' => 'redirectFrom',
        'redirect_to' => 'redirectTo',
        'created_at' => 'createdAt',
        'updated_at' => 'updatedAt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'redirect_from_url' => 'setRedirectFromUrl',
        'redirect_to_url' => 'setRedirectToUrl',
        'hostname' => 'setHostname',
        'redirect_from' => 'setRedirectFrom',
        'redirect_to' => 'setRedirectTo',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'redirect_from_url' => 'getRedirectFromUrl',
        'redirect_to_url' => 'getRedirectToUrl',
        'hostname' => 'getHostname',
        'redirect_from' => 'getRedirectFrom',
        'redirect_to' => 'getRedirectTo',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt'
    ];

    /**
     * {@inheritdoc}
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * {@inheritdoc}
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * {@inheritdoc}
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['redirect_from_url'] = $data['redirect_from_url'] ?? null;
        $this->container['redirect_to_url'] = $data['redirect_to_url'] ?? null;
        $this->container['hostname'] = $data['hostname'] ?? null;
        $this->container['redirect_from'] = $data['redirect_from'] ?? null;
        $this->container['redirect_to'] = $data['redirect_to'] ?? null;
        $this->container['created_at'] = $data['created_at'] ?? null;
        $this->container['updated_at'] = $data['updated_at'] ?? null;
    }

    /**
     * {@inheritdoc}
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['redirect_from_url'] === null) {
            $invalidProperties[] = "'redirect_from_url' can't be null";
        }
        if ($this->container['redirect_to_url'] === null) {
            $invalidProperties[] = "'redirect_to_url' can't be null";
        }
        if ($this->container['hostname'] === null) {
            $invalidProperties[] = "'hostname' can't be null";
        }
        if ($this->container['redirect_from'] === null) {
            $invalidProperties[] = "'redirect_from' can't be null";
        }
        if ($this->container['redirect_to'] === null) {
            $invalidProperties[] = "'redirect_to' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['updated_at'] === null) {
            $invalidProperties[] = "'updated_at' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * {@inheritdoc}
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Internal id for landing page redirect rule
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets redirect_from_url
     *
     * @return string
     */
    public function getRedirectFromUrl()
    {
        return $this->container['redirect_from_url'];
    }

    /**
     * Sets redirect_from_url
     *
     * @param string $redirect_from_url Redirect 'from' URL of the Landing Page.  Combination of the hostname and redirectFrom landing page or path
     *
     * @return self
     */
    public function setRedirectFromUrl($redirect_from_url)
    {
        $this->container['redirect_from_url'] = $redirect_from_url;

        return $this;
    }

    /**
     * Gets redirect_to_url
     *
     * @return string
     */
    public function getRedirectToUrl()
    {
        return $this->container['redirect_to_url'];
    }

    /**
     * Sets redirect_to_url
     *
     * @param string $redirect_to_url Redirect 'to' URL of the Landing Page.  Could be a Marketo landing page or non-Marketo URL.
     *
     * @return self
     */
    public function setRedirectToUrl($redirect_to_url)
    {
        $this->container['redirect_to_url'] = $redirect_to_url;

        return $this;
    }

    /**
     * Gets hostname
     *
     * @return string
     */
    public function getHostname()
    {
        return $this->container['hostname'];
    }

    /**
     * Sets hostname
     *
     * @param string $hostname The hostname for the landing pages.  Branding domain or alias.  Max 255 characters.
     *
     * @return self
     */
    public function setHostname($hostname)
    {
        $this->container['hostname'] = $hostname;

        return $this;
    }

    /**
     * Gets redirect_from
     *
     * @return \NecLimDul\MarketoRest\Asset\Model\RedirectFrom
     */
    public function getRedirectFrom()
    {
        return $this->container['redirect_from'];
    }

    /**
     * Sets redirect_from
     *
     * @param \NecLimDul\MarketoRest\Asset\Model\RedirectFrom $redirect_from redirect_from
     *
     * @return self
     */
    public function setRedirectFrom($redirect_from)
    {
        $this->container['redirect_from'] = $redirect_from;

        return $this;
    }

    /**
     * Gets redirect_to
     *
     * @return \NecLimDul\MarketoRest\Asset\Model\RedirectTo
     */
    public function getRedirectTo()
    {
        return $this->container['redirect_to'];
    }

    /**
     * Sets redirect_to
     *
     * @param \NecLimDul\MarketoRest\Asset\Model\RedirectTo $redirect_to redirect_to
     *
     * @return self
     */
    public function setRedirectTo($redirect_to)
    {
        $this->container['redirect_to'] = $redirect_to;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at Datetime the landing page redirect rule was created
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at Datetime the landing page redirect rule was most recently updated
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * {@inheritdoc}
     */
    public function setAdditionalProperties(array $fields)
    {
        $fields = array_diff_key($fields, static::$attributeMap);
        foreach ($this->additionalProperties as $additional_properties) {
            unset($this->container[$additional_properties]);
        }
        $this->container += $fields;
        $this->additionalProperties = array_keys($fields);
    }

    /**
     * {@inheritdoc}
     */
    public function setAdditionalProperty($property, $value)
    {
        if (isset(static::$attributeMap[$property])) {
            throw new \InvalidArgumentException();
        }
        $this->additionalProperties[$property] = $property;
        $this->container[$property] = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function getAdditionalProperties()
    {
        $container = $this->container;
        return array_map(function($key) use ($container) {
            return $container[$key];
        }, $this->additionalProperties);
    }

    /**
     * {@inheritdoc}
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * {@inheritdoc}
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * {@inheritdoc}
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * {@inheritdoc}
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


