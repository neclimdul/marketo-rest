<?php

/**
 * SmartListFilters
 *
 * Marketo Rest API
 *
 * Marketo Rest API
 *
 * OpenAPI spec version: 1.0
 * Contact: developerfeedback@marketo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.26
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Asset
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace NecLimDul\MarketoRest\Asset\Model;

use ArrayAccess;
use NecLimDul\MarketoRest\Asset\ObjectSerializer;

/**
 * SmartListFilters Class Doc Comment
 *
 * @category Class
 * @description JSON representation of smart list filters
 * @package  NecLimDul\MarketoRest\Asset
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class SmartListFilters implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SmartListFilters';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array
      * @phpstan-var array<string, string|class-string>
      * @psalm-var array<string, string|class-string>
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'name' => 'string',
        'rule_type_id' => 'int',
        'rule_type' => 'string',
        'operator' => 'string',
        'conditions' => '\NecLimDul\MarketoRest\Asset\Model\SmartListConditions[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'name' => null,
        'rule_type_id' => 'int32',
        'rule_type' => null,
        'operator' => null,
        'conditions' => null
    ];

    /**
      * Array of additional properties.
      *
      * @var mixed[]
      */
    protected $additionalProperties = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'rule_type_id' => 'ruleTypeId',
        'rule_type' => 'ruleType',
        'operator' => 'operator',
        'conditions' => 'conditions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'rule_type_id' => 'setRuleTypeId',
        'rule_type' => 'setRuleType',
        'operator' => 'setOperator',
        'conditions' => 'setConditions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'rule_type_id' => 'getRuleTypeId',
        'rule_type' => 'getRuleType',
        'operator' => 'getOperator',
        'conditions' => 'getConditions'
    ];

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['rule_type_id'] = $data['rule_type_id'] ?? null;
        $this->container['rule_type'] = $data['rule_type'] ?? null;
        $this->container['operator'] = $data['operator'] ?? null;
        $this->container['conditions'] = $data['conditions'] ?? null;
    }

    /**
     * {@inheritDoc}
     */
    public static function swaggerTypes(): array
    {
        return self::$swaggerTypes;
    }

    /**
     * {@inheritDoc}
     */
    public static function swaggerFormats(): array
    {
        return self::$swaggerFormats;
    }

    /**
     * {@inheritdoc}
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * {@inheritdoc}
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * {@inheritdoc}
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * {@inheritdoc}
     */
    public function getModelName(): string
    {
        return self::$swaggerModelName;
    }

    /**
     * {@inheritdoc}
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties['id'] = "'id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties['name'] = "'name' can't be null";
        }
        if ($this->container['rule_type_id'] === null) {
            $invalidProperties['rule_type_id'] = "'rule_type_id' can't be null";
        }
        if ($this->container['rule_type'] === null) {
            $invalidProperties['rule_type'] = "'rule_type' can't be null";
        }
        if ($this->container['operator'] === null) {
            $invalidProperties['operator'] = "'operator' can't be null";
        }
        if ($this->container['conditions'] === null) {
            $invalidProperties['conditions'] = "'conditions' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * {@inheritdoc}
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId(): int
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Id of the filter
     *
     * @return self<TKey, TValue>
     */
    public function setId(int $id): SmartListFilters
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName(): string
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of filter
     *
     * @return self<TKey, TValue>
     */
    public function setName(string $name): SmartListFilters
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets rule_type_id
     *
     * @return int
     */
    public function getRuleTypeId(): int
    {
        return $this->container['rule_type_id'];
    }

    /**
     * Sets rule_type_id
     *
     * @param int $rule_type_id Id of the rule type
     *
     * @return self<TKey, TValue>
     */
    public function setRuleTypeId(int $rule_type_id): SmartListFilters
    {
        $this->container['rule_type_id'] = $rule_type_id;

        return $this;
    }

    /**
     * Gets rule_type
     *
     * @return string
     */
    public function getRuleType(): string
    {
        return $this->container['rule_type'];
    }

    /**
     * Sets rule_type
     *
     * @param string $rule_type Name of rule type
     *
     * @return self<TKey, TValue>
     */
    public function setRuleType(string $rule_type): SmartListFilters
    {
        $this->container['rule_type'] = $rule_type;

        return $this;
    }

    /**
     * Gets operator
     *
     * @return string
     */
    public function getOperator(): string
    {
        return $this->container['operator'];
    }

    /**
     * Sets operator
     *
     * @param string $operator Name of operator
     *
     * @return self<TKey, TValue>
     */
    public function setOperator(string $operator): SmartListFilters
    {
        $this->container['operator'] = $operator;

        return $this;
    }

    /**
     * Gets conditions
     *
     * @return \NecLimDul\MarketoRest\Asset\Model\SmartListConditions[]
     */
    public function getConditions(): array
    {
        return $this->container['conditions'];
    }

    /**
     * Sets conditions
     *
     * @param \NecLimDul\MarketoRest\Asset\Model\SmartListConditions[] $conditions List of smart list conditions
     *
     * @return self<TKey, TValue>
     */
    public function setConditions(array $conditions): SmartListFilters
    {
        $this->container['conditions'] = $conditions;

        return $this;
    }

    /**
     * {@inheritdoc}
     */
    public function setAdditionalProperties(array $fields): void
    {
        $fields = array_diff_key($fields, static::$attributeMap);
        foreach ($this->additionalProperties as $additional_properties) {
            unset($this->container[$additional_properties]);
        }
        $this->container += $fields;
        $keys = array_keys($fields);
        $this->additionalProperties = array_combine($keys, $keys);
    }

    /**
     * {@inheritdoc}
     */
    public function setAdditionalProperty($property, $value): void
    {
        if (isset(static::$attributeMap[$property])) {
            throw new \InvalidArgumentException();
        }
        $this->additionalProperties[$property] = $property;
        $this->container[$property] = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function getAdditionalProperties()
    {
        $container = $this->container;
        $map =
            /**
             * @param array-key $key
             * @return mixed
             */
            function ($key) use ($container) {
                return $container[$key];
            };
        return array_map($map, $this->additionalProperties);
    }

    /**
     * {@inheritdoc}
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * {@inheritdoc}
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * {@inheritdoc}
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * {@inheritdoc}
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     * @throws \JsonException
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT | JSON_THROW_ON_ERROR
        );
    }
}
