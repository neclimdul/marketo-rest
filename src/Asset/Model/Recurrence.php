<?php

/**
 * Recurrence
 *
 * Marketo Rest API
 *
 * Marketo Rest API
 *
 * OpenAPI spec version: 1.0
 * Contact: developerfeedback@marketo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.26
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Asset
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace NecLimDul\MarketoRest\Asset\Model;

use ArrayAccess;
use NecLimDul\MarketoRest\Asset\ObjectSerializer;

/**
 * Recurrence Class Doc Comment
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Asset
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Recurrence implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;
    public const INTERVAL_TYPE_DAILY = 'Daily';
    public const INTERVAL_TYPE_WEEKLY = 'Weekly';
    public const INTERVAL_TYPE_MONTHLY = 'Monthly';
    public const DAY_OF_WEEK_MONDAY = 'Monday';
    public const DAY_OF_WEEK_TUESDAY = 'Tuesday';
    public const DAY_OF_WEEK_WEDNESDAY = 'Wednesday';
    public const DAY_OF_WEEK_THURSDAY = 'Thursday';
    public const DAY_OF_WEEK_FRIDAY = 'Friday';
    public const DAY_OF_WEEK_SATURDAY = 'Saturday';
    public const DAY_OF_WEEK_SUNDAY = 'Sunday';

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Recurrence';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array
      * @phpstan-var array<string, string|class-string>
      * @psalm-var array<string, string|class-string>
      */
    protected static $swaggerTypes = [
        'start_at' => '\DateTime',
        'end_at' => '\DateTime',
        'interval_type' => 'string',
        'interval' => 'int',
        'weekday_only' => 'bool',
        'weekday_mask' => 'string[]',
        'day_of_month' => 'int',
        'day_of_week' => 'string',
        'week_of_month' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $swaggerFormats = [
        'start_at' => 'date-time',
        'end_at' => 'date-time',
        'interval_type' => null,
        'interval' => 'int32',
        'weekday_only' => null,
        'weekday_mask' => null,
        'day_of_month' => 'int32',
        'day_of_week' => 'int32',
        'week_of_month' => 'int32'
    ];

    /**
      * Array of additional properties.
      *
      * @var string[]
      */
    protected $additionalProperties = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'start_at' => 'startAt',
        'end_at' => 'endAt',
        'interval_type' => 'intervalType',
        'interval' => 'interval',
        'weekday_only' => 'weekdayOnly',
        'weekday_mask' => 'weekdayMask',
        'day_of_month' => 'dayOfMonth',
        'day_of_week' => 'dayOfWeek',
        'week_of_month' => 'weekOfMonth'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'start_at' => 'setStartAt',
        'end_at' => 'setEndAt',
        'interval_type' => 'setIntervalType',
        'interval' => 'setInterval',
        'weekday_only' => 'setWeekdayOnly',
        'weekday_mask' => 'setWeekdayMask',
        'day_of_month' => 'setDayOfMonth',
        'day_of_week' => 'setDayOfWeek',
        'week_of_month' => 'setWeekOfMonth'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'start_at' => 'getStartAt',
        'end_at' => 'getEndAt',
        'interval_type' => 'getIntervalType',
        'interval' => 'getInterval',
        'weekday_only' => 'getWeekdayOnly',
        'weekday_mask' => 'getWeekdayMask',
        'day_of_month' => 'getDayOfMonth',
        'day_of_week' => 'getDayOfWeek',
        'week_of_month' => 'getWeekOfMonth'
    ];

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['start_at'] = $data['start_at'] ?? null;
        $this->container['end_at'] = $data['end_at'] ?? null;
        $this->container['interval_type'] = $data['interval_type'] ?? null;
        $this->container['interval'] = $data['interval'] ?? null;
        $this->container['weekday_only'] = $data['weekday_only'] ?? null;
        $this->container['weekday_mask'] = $data['weekday_mask'] ?? null;
        $this->container['day_of_month'] = $data['day_of_month'] ?? null;
        $this->container['day_of_week'] = $data['day_of_week'] ?? null;
        $this->container['week_of_month'] = $data['week_of_month'] ?? null;
    }

    /**
     * {@inheritDoc}
     */
    public static function swaggerTypes(): array
    {
        return self::$swaggerTypes;
    }

    /**
     * {@inheritDoc}
     */
    public static function swaggerFormats(): array
    {
        return self::$swaggerFormats;
    }

    /**
     * {@inheritdoc}
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * {@inheritdoc}
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * {@inheritdoc}
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * {@inheritdoc}
     */
    public function getModelName(): string
    {
        return self::$swaggerModelName;
    }

    /**
     * {@inheritdoc}
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['start_at'] === null) {
            $invalidProperties['start_at'] = "'start_at' can't be null";
        }
        if ($this->container['end_at'] === null) {
            $invalidProperties['end_at'] = "'end_at' can't be null";
        }
        if ($this->container['interval_type'] === null) {
            $invalidProperties['interval_type'] = "'interval_type' can't be null";
        }
        $allowedValues = $this->getIntervalTypeAllowableValues();
        if (!is_null($this->container['interval_type']) && !in_array($this->container['interval_type'], $allowedValues, true)) {
            $invalidProperties['interval_type'] = sprintf(
                "invalid value '%s' for 'interval_type', must be one of '%s'",
                $this->container['interval_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['interval'] === null) {
            $invalidProperties['interval'] = "'interval' can't be null";
        }
        if ($this->container['weekday_only'] === null) {
            $invalidProperties['weekday_only'] = "'weekday_only' can't be null";
        }
        if ($this->container['weekday_mask'] === null) {
            $invalidProperties['weekday_mask'] = "'weekday_mask' can't be null";
        }
        if ($this->container['day_of_month'] === null) {
            $invalidProperties['day_of_month'] = "'day_of_month' can't be null";
        }
        if ($this->container['day_of_week'] === null) {
            $invalidProperties['day_of_week'] = "'day_of_week' can't be null";
        }
        $allowedValues = $this->getDayOfWeekAllowableValues();
        if (!is_null($this->container['day_of_week']) && !in_array($this->container['day_of_week'], $allowedValues, true)) {
            $invalidProperties['day_of_week'] = sprintf(
                "invalid value '%s' for 'day_of_week', must be one of '%s'",
                $this->container['day_of_week'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['week_of_month'] === null) {
            $invalidProperties['week_of_month'] = "'week_of_month' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * {@inheritdoc}
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }
    /**
     * Gets allowable values of the enum.
     *
     * @return scalar[]
     */
    public function getIntervalTypeAllowableValues(): array
    {
        return [
            self::INTERVAL_TYPE_DAILY,
            self::INTERVAL_TYPE_WEEKLY,
            self::INTERVAL_TYPE_MONTHLY,
        ];
    }
    /**
     * Gets allowable values of the enum.
     *
     * @return scalar[]
     */
    public function getDayOfWeekAllowableValues(): array
    {
        return [
            self::DAY_OF_WEEK_MONDAY,
            self::DAY_OF_WEEK_TUESDAY,
            self::DAY_OF_WEEK_WEDNESDAY,
            self::DAY_OF_WEEK_THURSDAY,
            self::DAY_OF_WEEK_FRIDAY,
            self::DAY_OF_WEEK_SATURDAY,
            self::DAY_OF_WEEK_SUNDAY,
        ];
    }

    /**
     * Gets start_at
     *
     * @return \DateTime
     */
    public function getStartAt(): \DateTime
    {
        return $this->container['start_at'];
    }

    /**
     * Sets start_at
     *
     * @param \DateTime $start_at Datetime of the first scheduled campaign to run. Required if setting recurrence. Not required to create a smart campaign that has no recurrence
     *
     * @return self<TKey, TValue>
     */
    public function setStartAt(\DateTime $start_at): Recurrence
    {
        $this->container['start_at'] = $start_at;

        return $this;
    }

    /**
     * Gets end_at
     *
     * @return \DateTime
     */
    public function getEndAt(): \DateTime
    {
        return $this->container['end_at'];
    }

    /**
     * Sets end_at
     *
     * @param \DateTime $end_at Datetime after which no further runs will be automatically scheduled
     *
     * @return self<TKey, TValue>
     */
    public function setEndAt(\DateTime $end_at): Recurrence
    {
        $this->container['end_at'] = $end_at;

        return $this;
    }

    /**
     * Gets interval_type
     *
     * @return string
     */
    public function getIntervalType(): string
    {
        return $this->container['interval_type'];
    }

    /**
     * Sets interval_type
     *
     * @param string $interval_type Recurrence interval. Not required to create a smart campaign that has no recurrence
     *
     * @return self<TKey, TValue>
     */
    public function setIntervalType(string $interval_type): Recurrence
    {
        $allowedValues = $this->getIntervalTypeAllowableValues();
        if (!in_array($interval_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'interval_type', must be one of '%s'",
                    $interval_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['interval_type'] = $interval_type;

        return $this;
    }

    /**
     * Gets interval
     *
     * @return int
     */
    public function getInterval(): int
    {
        return $this->container['interval'];
    }

    /**
     * Sets interval
     *
     * @param int $interval Number of interval units between recurrences
     *
     * @return self<TKey, TValue>
     */
    public function setInterval(int $interval): Recurrence
    {
        $this->container['interval'] = $interval;

        return $this;
    }

    /**
     * Gets weekday_only
     *
     * @return bool
     */
    public function getWeekdayOnly(): bool
    {
        return $this->container['weekday_only'];
    }

    /**
     * Sets weekday_only
     *
     * @param bool $weekday_only Only run smart campaign on weekdays. May only be set if intervalType is 'Daily'.  Defaults to false
     *
     * @return self<TKey, TValue>
     */
    public function setWeekdayOnly(bool $weekday_only): Recurrence
    {
        $this->container['weekday_only'] = $weekday_only;

        return $this;
    }

    /**
     * Gets weekday_mask
     *
     * @return string[]
     */
    public function getWeekdayMask(): array
    {
        return $this->container['weekday_mask'];
    }

    /**
     * Sets weekday_mask
     *
     * @param string[] $weekday_mask String array of empty or one or more of 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'. May only be set if intervalType is 'Weekly'
     *
     * @return self<TKey, TValue>
     */
    public function setWeekdayMask(array $weekday_mask): Recurrence
    {
        $this->container['weekday_mask'] = $weekday_mask;

        return $this;
    }

    /**
     * Gets day_of_month
     *
     * @return int
     */
    public function getDayOfMonth(): int
    {
        return $this->container['day_of_month'];
    }

    /**
     * Sets day_of_month
     *
     * @param int $day_of_month Day of the month to recur. Permissible range 1-31. May only be set if intervalType is 'Monthly' and dayOfWeek and weekOfMonth are unset.
     *
     * @return self<TKey, TValue>
     */
    public function setDayOfMonth(int $day_of_month): Recurrence
    {
        $this->container['day_of_month'] = $day_of_month;

        return $this;
    }

    /**
     * Gets day_of_week
     *
     * @return string
     */
    public function getDayOfWeek(): string
    {
        return $this->container['day_of_week'];
    }

    /**
     * Sets day_of_week
     *
     * @param string $day_of_week Day of the week to recur. May only be set if dayOfMonth is not set, and weekOfMonth is set
     *
     * @return self<TKey, TValue>
     */
    public function setDayOfWeek(string $day_of_week): Recurrence
    {
        $allowedValues = $this->getDayOfWeekAllowableValues();
        if (!in_array($day_of_week, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'day_of_week', must be one of '%s'",
                    $day_of_week,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['day_of_week'] = $day_of_week;

        return $this;
    }

    /**
     * Gets week_of_month
     *
     * @return int
     */
    public function getWeekOfMonth(): int
    {
        return $this->container['week_of_month'];
    }

    /**
     * Sets week_of_month
     *
     * @param int $week_of_month Week of the month to recur. Permissible range 1-4. May only be set if dayOfMonth is not set, and dayOfWeek is set
     *
     * @return self<TKey, TValue>
     */
    public function setWeekOfMonth(int $week_of_month): Recurrence
    {
        $this->container['week_of_month'] = $week_of_month;

        return $this;
    }

    /**
     * {@inheritdoc}
     */
    public function setAdditionalProperties(array $fields): void
    {
        $fields = array_diff_key($fields, static::$attributeMap);
        foreach ($this->additionalProperties as $additional_properties) {
            unset($this->container[$additional_properties]);
        }
        $this->container += $fields;
        $keys = array_keys($fields);
        $this->additionalProperties = array_combine($keys, $keys);
    }

    /**
     * {@inheritdoc}
     */
    public function setAdditionalProperty($property, $value): void
    {
        if (isset(static::$attributeMap[$property])) {
            throw new \InvalidArgumentException();
        }
        $this->additionalProperties[$property] = $property;
        $this->container[$property] = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function getAdditionalProperties(): array
    {
        $container = $this->container;
        $map =
            /**
             * @param array-key $key
             * @return mixed
             */
            function ($key) use ($container) {
                return $container[$key];
            };
        return array_map($map, $this->additionalProperties);
    }

    /**
     * {@inheritdoc}
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * {@inheritdoc}
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * {@inheritdoc}
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * {@inheritdoc}
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     * @throws \JsonException
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT | JSON_THROW_ON_ERROR
        );
    }
}
