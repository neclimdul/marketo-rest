<?php

/**
 * SnippetsApi
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Asset
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketo Rest API
 *
 * Marketo Rest API
 *
 * OpenAPI spec version: 1.0
 * Contact: developerfeedback@marketo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.26
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace NecLimDul\MarketoRest\Asset\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\Promise\PromiseInterface;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\ResponseInterface;
use NecLimDul\MarketoRest\Asset\ApiException;
use NecLimDul\MarketoRest\Asset\Configuration;
use NecLimDul\MarketoRest\Asset\HeaderSelector;
use NecLimDul\MarketoRest\Asset\ObjectSerializer;

/**
 * SnippetsApi Class Doc Comment
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Asset
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SnippetsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the spec.
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Exception handler for approveSnippetUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function approveSnippetUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfSnippetResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Approve Snippet Draft
     *
     * @param int $id
     *   id
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfSnippetResponse
     */
    public function approveSnippetUsingPOST(
        int $id
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfSnippetResponse {
        list($response) = $this->approveSnippetUsingPOSTWithHttpInfo($id);
        return $response;
    }

    /**
     * Approve Snippet Draft
     *
     * @param int $id
     *   id
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfSnippetResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function approveSnippetUsingPOSTWithHttpInfo(
        int $id
    ): array {
        $request = $this->approveSnippetUsingPOSTRequest($id);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfSnippetResponse::class
            );
        } catch (ApiException $e) {
            throw $this->approveSnippetUsingPOSTHandleException($e);
        }
    }

    /**
     * Approve Snippet Draft
     *
     * @param int $id
     *   id
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function approveSnippetUsingPOSTAsync(
        int $id
    ): PromiseInterface {
        return $this->approveSnippetUsingPOSTAsyncWithHttpInfo($id)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfSnippetResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Approve Snippet Draft
     *
     * @param int $id
     *   id
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function approveSnippetUsingPOSTAsyncWithHttpInfo(
        int $id
    ): PromiseInterface {
        $request = $this->approveSnippetUsingPOSTRequest($id);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfSnippetResponse::class,
            [$this, 'approveSnippetUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'approveSnippetUsingPOST'
     *
     * @param int $id
     *   id
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function approveSnippetUsingPOSTRequest(
        int $id
    ): Request {

        $resourcePath = '/rest/asset/v1/snippet/{id}/approveDraft.json';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for cloneSnippetUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function cloneSnippetUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfSnippetResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Clone Snippet
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\CloneSnippetRequest|null $clone_snippet_request
     *   cloneSnippetRequest
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfSnippetResponse
     */
    public function cloneSnippetUsingPOST(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\CloneSnippetRequest $clone_snippet_request = null
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfSnippetResponse {
        list($response) = $this->cloneSnippetUsingPOSTWithHttpInfo($id, $clone_snippet_request);
        return $response;
    }

    /**
     * Clone Snippet
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\CloneSnippetRequest|null $clone_snippet_request
     *   cloneSnippetRequest
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfSnippetResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function cloneSnippetUsingPOSTWithHttpInfo(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\CloneSnippetRequest $clone_snippet_request = null
    ): array {
        $request = $this->cloneSnippetUsingPOSTRequest($id, $clone_snippet_request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfSnippetResponse::class
            );
        } catch (ApiException $e) {
            throw $this->cloneSnippetUsingPOSTHandleException($e);
        }
    }

    /**
     * Clone Snippet
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\CloneSnippetRequest|null $clone_snippet_request
     *   cloneSnippetRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cloneSnippetUsingPOSTAsync(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\CloneSnippetRequest $clone_snippet_request = null
    ): PromiseInterface {
        return $this->cloneSnippetUsingPOSTAsyncWithHttpInfo($id, $clone_snippet_request)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfSnippetResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Clone Snippet
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\CloneSnippetRequest|null $clone_snippet_request
     *   cloneSnippetRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cloneSnippetUsingPOSTAsyncWithHttpInfo(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\CloneSnippetRequest $clone_snippet_request = null
    ): PromiseInterface {
        $request = $this->cloneSnippetUsingPOSTRequest($id, $clone_snippet_request);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfSnippetResponse::class,
            [$this, 'cloneSnippetUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'cloneSnippetUsingPOST'
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\CloneSnippetRequest|null $clone_snippet_request
     *   cloneSnippetRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function cloneSnippetUsingPOSTRequest(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\CloneSnippetRequest $clone_snippet_request = null
    ): Request {

        $resourcePath = '/rest/asset/v1/snippet/{id}/clone.json';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            $clone_snippet_request
        );
    }

    /**
     * Exception handler for createSnippetUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function createSnippetUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfSnippetResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Create Snippet
     *
     * @param \NecLimDul\MarketoRest\Asset\Model\CreateSnippetRequest $create_snippet_request
     *   createSnippetRequest
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfSnippetResponse
     */
    public function createSnippetUsingPOST(
        \NecLimDul\MarketoRest\Asset\Model\CreateSnippetRequest $create_snippet_request
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfSnippetResponse {
        list($response) = $this->createSnippetUsingPOSTWithHttpInfo($create_snippet_request);
        return $response;
    }

    /**
     * Create Snippet
     *
     * @param \NecLimDul\MarketoRest\Asset\Model\CreateSnippetRequest $create_snippet_request
     *   createSnippetRequest
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfSnippetResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function createSnippetUsingPOSTWithHttpInfo(
        \NecLimDul\MarketoRest\Asset\Model\CreateSnippetRequest $create_snippet_request
    ): array {
        $request = $this->createSnippetUsingPOSTRequest($create_snippet_request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfSnippetResponse::class
            );
        } catch (ApiException $e) {
            throw $this->createSnippetUsingPOSTHandleException($e);
        }
    }

    /**
     * Create Snippet
     *
     * @param \NecLimDul\MarketoRest\Asset\Model\CreateSnippetRequest $create_snippet_request
     *   createSnippetRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSnippetUsingPOSTAsync(
        \NecLimDul\MarketoRest\Asset\Model\CreateSnippetRequest $create_snippet_request
    ): PromiseInterface {
        return $this->createSnippetUsingPOSTAsyncWithHttpInfo($create_snippet_request)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfSnippetResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Create Snippet
     *
     * @param \NecLimDul\MarketoRest\Asset\Model\CreateSnippetRequest $create_snippet_request
     *   createSnippetRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSnippetUsingPOSTAsyncWithHttpInfo(
        \NecLimDul\MarketoRest\Asset\Model\CreateSnippetRequest $create_snippet_request
    ): PromiseInterface {
        $request = $this->createSnippetUsingPOSTRequest($create_snippet_request);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfSnippetResponse::class,
            [$this, 'createSnippetUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'createSnippetUsingPOST'
     *
     * @param \NecLimDul\MarketoRest\Asset\Model\CreateSnippetRequest $create_snippet_request
     *   createSnippetRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createSnippetUsingPOSTRequest(
        \NecLimDul\MarketoRest\Asset\Model\CreateSnippetRequest $create_snippet_request
    ): Request {

        $resourcePath = '/rest/asset/v1/snippets.json';

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            $create_snippet_request
        );
    }

    /**
     * Exception handler for deleteSnippetUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function deleteSnippetUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Delete Snippet
     *
     * @param int $id
     *   id
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse
     */
    public function deleteSnippetUsingPOST(
        int $id
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse {
        list($response) = $this->deleteSnippetUsingPOSTWithHttpInfo($id);
        return $response;
    }

    /**
     * Delete Snippet
     *
     * @param int $id
     *   id
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function deleteSnippetUsingPOSTWithHttpInfo(
        int $id
    ): array {
        $request = $this->deleteSnippetUsingPOSTRequest($id);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class
            );
        } catch (ApiException $e) {
            throw $this->deleteSnippetUsingPOSTHandleException($e);
        }
    }

    /**
     * Delete Snippet
     *
     * @param int $id
     *   id
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSnippetUsingPOSTAsync(
        int $id
    ): PromiseInterface {
        return $this->deleteSnippetUsingPOSTAsyncWithHttpInfo($id)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Delete Snippet
     *
     * @param int $id
     *   id
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSnippetUsingPOSTAsyncWithHttpInfo(
        int $id
    ): PromiseInterface {
        $request = $this->deleteSnippetUsingPOSTRequest($id);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class,
            [$this, 'deleteSnippetUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'deleteSnippetUsingPOST'
     *
     * @param int $id
     *   id
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteSnippetUsingPOSTRequest(
        int $id
    ): Request {

        $resourcePath = '/rest/asset/v1/snippet/{id}/delete.json';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for discardSnippetUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function discardSnippetUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Discard Snippet Draft
     *
     * @param int $id
     *   id
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse
     */
    public function discardSnippetUsingPOST(
        int $id
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse {
        list($response) = $this->discardSnippetUsingPOSTWithHttpInfo($id);
        return $response;
    }

    /**
     * Discard Snippet Draft
     *
     * @param int $id
     *   id
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function discardSnippetUsingPOSTWithHttpInfo(
        int $id
    ): array {
        $request = $this->discardSnippetUsingPOSTRequest($id);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class
            );
        } catch (ApiException $e) {
            throw $this->discardSnippetUsingPOSTHandleException($e);
        }
    }

    /**
     * Discard Snippet Draft
     *
     * @param int $id
     *   id
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function discardSnippetUsingPOSTAsync(
        int $id
    ): PromiseInterface {
        return $this->discardSnippetUsingPOSTAsyncWithHttpInfo($id)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Discard Snippet Draft
     *
     * @param int $id
     *   id
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function discardSnippetUsingPOSTAsyncWithHttpInfo(
        int $id
    ): PromiseInterface {
        $request = $this->discardSnippetUsingPOSTRequest($id);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class,
            [$this, 'discardSnippetUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'discardSnippetUsingPOST'
     *
     * @param int $id
     *   id
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function discardSnippetUsingPOSTRequest(
        int $id
    ): Request {

        $resourcePath = '/rest/asset/v1/snippet/{id}/discardDraft.json';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for getDynamicContentUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function getDynamicContentUsingGETHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ModelResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Dynamic Content
     *
     * @param int $id
     *   id
     * @param string|null $status
     *   Status filter for draft or approved versions
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ModelResponse
     */
    public function getDynamicContentUsingGET(
        int $id,
        string $status = null
    ): \NecLimDul\MarketoRest\Asset\Model\ModelResponse {
        list($response) = $this->getDynamicContentUsingGETWithHttpInfo($id, $status);
        return $response;
    }

    /**
     * Get Dynamic Content
     *
     * @param int $id
     *   id
     * @param string|null $status
     *   Status filter for draft or approved versions
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ModelResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function getDynamicContentUsingGETWithHttpInfo(
        int $id,
        string $status = null
    ): array {
        $request = $this->getDynamicContentUsingGETRequest($id, $status);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ModelResponse::class
            );
        } catch (ApiException $e) {
            throw $this->getDynamicContentUsingGETHandleException($e);
        }
    }

    /**
     * Get Dynamic Content
     *
     * @param int $id
     *   id
     * @param string|null $status
     *   Status filter for draft or approved versions
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDynamicContentUsingGETAsync(
        int $id,
        string $status = null
    ): PromiseInterface {
        return $this->getDynamicContentUsingGETAsyncWithHttpInfo($id, $status)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ModelResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Get Dynamic Content
     *
     * @param int $id
     *   id
     * @param string|null $status
     *   Status filter for draft or approved versions
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDynamicContentUsingGETAsyncWithHttpInfo(
        int $id,
        string $status = null
    ): PromiseInterface {
        $request = $this->getDynamicContentUsingGETRequest($id, $status);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ModelResponse::class,
            [$this, 'getDynamicContentUsingGETHandleException']
        );
    }

    /**
     * Create request for operation 'getDynamicContentUsingGET'
     *
     * @param int $id
     *   id
     * @param string|null $status
     *   Status filter for draft or approved versions
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDynamicContentUsingGETRequest(
        int $id,
        string $status = null
    ): Request {

        $resourcePath = '/rest/asset/v1/snippet/{id}/dynamicContent.json';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'GET',
            $operationHost . $resourcePath,
            // Query.
            [
                'status' => ObjectSerializer::toQueryValue($status),
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for getSnippetByIdUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function getSnippetByIdUsingGETHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfSnippetResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Snippet by Id
     *
     * @param int $id
     *   id
     * @param string|null $status
     *   Status filter for draft or approved versions
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfSnippetResponse
     */
    public function getSnippetByIdUsingGET(
        int $id,
        string $status = null
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfSnippetResponse {
        list($response) = $this->getSnippetByIdUsingGETWithHttpInfo($id, $status);
        return $response;
    }

    /**
     * Get Snippet by Id
     *
     * @param int $id
     *   id
     * @param string|null $status
     *   Status filter for draft or approved versions
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfSnippetResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function getSnippetByIdUsingGETWithHttpInfo(
        int $id,
        string $status = null
    ): array {
        $request = $this->getSnippetByIdUsingGETRequest($id, $status);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfSnippetResponse::class
            );
        } catch (ApiException $e) {
            throw $this->getSnippetByIdUsingGETHandleException($e);
        }
    }

    /**
     * Get Snippet by Id
     *
     * @param int $id
     *   id
     * @param string|null $status
     *   Status filter for draft or approved versions
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSnippetByIdUsingGETAsync(
        int $id,
        string $status = null
    ): PromiseInterface {
        return $this->getSnippetByIdUsingGETAsyncWithHttpInfo($id, $status)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfSnippetResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Get Snippet by Id
     *
     * @param int $id
     *   id
     * @param string|null $status
     *   Status filter for draft or approved versions
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSnippetByIdUsingGETAsyncWithHttpInfo(
        int $id,
        string $status = null
    ): PromiseInterface {
        $request = $this->getSnippetByIdUsingGETRequest($id, $status);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfSnippetResponse::class,
            [$this, 'getSnippetByIdUsingGETHandleException']
        );
    }

    /**
     * Create request for operation 'getSnippetByIdUsingGET'
     *
     * @param int $id
     *   id
     * @param string|null $status
     *   Status filter for draft or approved versions
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSnippetByIdUsingGETRequest(
        int $id,
        string $status = null
    ): Request {

        $resourcePath = '/rest/asset/v1/snippet/{id}.json';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'GET',
            $operationHost . $resourcePath,
            // Query.
            [
                'status' => ObjectSerializer::toQueryValue($status),
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for getSnippetContentByIdUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function getSnippetContentByIdUsingGETHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfSnippetContentResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Snippet Content
     *
     * @param int $id
     *   id
     * @param string|null $status
     *   Status filter for draft or approved versions
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfSnippetContentResponse
     */
    public function getSnippetContentByIdUsingGET(
        int $id,
        string $status = null
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfSnippetContentResponse {
        list($response) = $this->getSnippetContentByIdUsingGETWithHttpInfo($id, $status);
        return $response;
    }

    /**
     * Get Snippet Content
     *
     * @param int $id
     *   id
     * @param string|null $status
     *   Status filter for draft or approved versions
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfSnippetContentResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function getSnippetContentByIdUsingGETWithHttpInfo(
        int $id,
        string $status = null
    ): array {
        $request = $this->getSnippetContentByIdUsingGETRequest($id, $status);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfSnippetContentResponse::class
            );
        } catch (ApiException $e) {
            throw $this->getSnippetContentByIdUsingGETHandleException($e);
        }
    }

    /**
     * Get Snippet Content
     *
     * @param int $id
     *   id
     * @param string|null $status
     *   Status filter for draft or approved versions
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSnippetContentByIdUsingGETAsync(
        int $id,
        string $status = null
    ): PromiseInterface {
        return $this->getSnippetContentByIdUsingGETAsyncWithHttpInfo($id, $status)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfSnippetContentResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Get Snippet Content
     *
     * @param int $id
     *   id
     * @param string|null $status
     *   Status filter for draft or approved versions
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSnippetContentByIdUsingGETAsyncWithHttpInfo(
        int $id,
        string $status = null
    ): PromiseInterface {
        $request = $this->getSnippetContentByIdUsingGETRequest($id, $status);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfSnippetContentResponse::class,
            [$this, 'getSnippetContentByIdUsingGETHandleException']
        );
    }

    /**
     * Create request for operation 'getSnippetContentByIdUsingGET'
     *
     * @param int $id
     *   id
     * @param string|null $status
     *   Status filter for draft or approved versions
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSnippetContentByIdUsingGETRequest(
        int $id,
        string $status = null
    ): Request {

        $resourcePath = '/rest/asset/v1/snippet/{id}/content.json';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'GET',
            $operationHost . $resourcePath,
            // Query.
            [
                'status' => ObjectSerializer::toQueryValue($status),
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for getSnippetUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function getSnippetUsingGETHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfSnippetResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Snippets
     *
     * @param string|null $status
     *   Status filter for draft or approved versions
     * @param int|null $max_return
     *   Maximum number of channels to return.  Max 200, default 20
     * @param int|null $offset
     *   Integer offset for paging
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfSnippetResponse
     */
    public function getSnippetUsingGET(
        string $status = null,
        int $max_return = null,
        int $offset = null
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfSnippetResponse {
        list($response) = $this->getSnippetUsingGETWithHttpInfo($status, $max_return, $offset);
        return $response;
    }

    /**
     * Get Snippets
     *
     * @param string|null $status
     *   Status filter for draft or approved versions
     * @param int|null $max_return
     *   Maximum number of channels to return.  Max 200, default 20
     * @param int|null $offset
     *   Integer offset for paging
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfSnippetResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function getSnippetUsingGETWithHttpInfo(
        string $status = null,
        int $max_return = null,
        int $offset = null
    ): array {
        $request = $this->getSnippetUsingGETRequest($status, $max_return, $offset);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfSnippetResponse::class
            );
        } catch (ApiException $e) {
            throw $this->getSnippetUsingGETHandleException($e);
        }
    }

    /**
     * Get Snippets
     *
     * @param string|null $status
     *   Status filter for draft or approved versions
     * @param int|null $max_return
     *   Maximum number of channels to return.  Max 200, default 20
     * @param int|null $offset
     *   Integer offset for paging
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSnippetUsingGETAsync(
        string $status = null,
        int $max_return = null,
        int $offset = null
    ): PromiseInterface {
        return $this->getSnippetUsingGETAsyncWithHttpInfo($status, $max_return, $offset)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfSnippetResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Get Snippets
     *
     * @param string|null $status
     *   Status filter for draft or approved versions
     * @param int|null $max_return
     *   Maximum number of channels to return.  Max 200, default 20
     * @param int|null $offset
     *   Integer offset for paging
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSnippetUsingGETAsyncWithHttpInfo(
        string $status = null,
        int $max_return = null,
        int $offset = null
    ): PromiseInterface {
        $request = $this->getSnippetUsingGETRequest($status, $max_return, $offset);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfSnippetResponse::class,
            [$this, 'getSnippetUsingGETHandleException']
        );
    }

    /**
     * Create request for operation 'getSnippetUsingGET'
     *
     * @param string|null $status
     *   Status filter for draft or approved versions
     * @param int|null $max_return
     *   Maximum number of channels to return.  Max 200, default 20
     * @param int|null $offset
     *   Integer offset for paging
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSnippetUsingGETRequest(
        string $status = null,
        int $max_return = null,
        int $offset = null
    ): Request {

        $resourcePath = '/rest/asset/v1/snippets.json';

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'GET',
            $operationHost . $resourcePath,
            // Query.
            [
                'status' => ObjectSerializer::toQueryValue($status),
                'maxReturn' => ObjectSerializer::toQueryValue($max_return),
                'offset' => ObjectSerializer::toQueryValue($offset),
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for unapproveSnippetUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function unapproveSnippetUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfSnippetResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Unapprove Snippet
     *
     * @param int $id
     *   id
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfSnippetResponse
     */
    public function unapproveSnippetUsingPOST(
        int $id
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfSnippetResponse {
        list($response) = $this->unapproveSnippetUsingPOSTWithHttpInfo($id);
        return $response;
    }

    /**
     * Unapprove Snippet
     *
     * @param int $id
     *   id
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfSnippetResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function unapproveSnippetUsingPOSTWithHttpInfo(
        int $id
    ): array {
        $request = $this->unapproveSnippetUsingPOSTRequest($id);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfSnippetResponse::class
            );
        } catch (ApiException $e) {
            throw $this->unapproveSnippetUsingPOSTHandleException($e);
        }
    }

    /**
     * Unapprove Snippet
     *
     * @param int $id
     *   id
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function unapproveSnippetUsingPOSTAsync(
        int $id
    ): PromiseInterface {
        return $this->unapproveSnippetUsingPOSTAsyncWithHttpInfo($id)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfSnippetResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Unapprove Snippet
     *
     * @param int $id
     *   id
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function unapproveSnippetUsingPOSTAsyncWithHttpInfo(
        int $id
    ): PromiseInterface {
        $request = $this->unapproveSnippetUsingPOSTRequest($id);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfSnippetResponse::class,
            [$this, 'unapproveSnippetUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'unapproveSnippetUsingPOST'
     *
     * @param int $id
     *   id
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function unapproveSnippetUsingPOSTRequest(
        int $id
    ): Request {

        $resourcePath = '/rest/asset/v1/snippet/{id}/unapprove.json';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for updateContentUsingPOST1.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function updateContentUsingPOST1HandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Update Snippet Content
     *
     * @param int $id
     *   id
     * @param string $content
     *   Content of the snippet
     * @param string $type
     *   Type of snippet content
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse
     */
    public function updateContentUsingPOST1(
        int $id,
        string $content,
        string $type
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse {
        list($response) = $this->updateContentUsingPOST1WithHttpInfo($id, $content, $type);
        return $response;
    }

    /**
     * Update Snippet Content
     *
     * @param int $id
     *   id
     * @param string $content
     *   Content of the snippet
     * @param string $type
     *   Type of snippet content
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function updateContentUsingPOST1WithHttpInfo(
        int $id,
        string $content,
        string $type
    ): array {
        $request = $this->updateContentUsingPOST1Request($id, $content, $type);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class
            );
        } catch (ApiException $e) {
            throw $this->updateContentUsingPOST1HandleException($e);
        }
    }

    /**
     * Update Snippet Content
     *
     * @param int $id
     *   id
     * @param string $content
     *   Content of the snippet
     * @param string $type
     *   Type of snippet content
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateContentUsingPOST1Async(
        int $id,
        string $content,
        string $type
    ): PromiseInterface {
        return $this->updateContentUsingPOST1AsyncWithHttpInfo($id, $content, $type)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Update Snippet Content
     *
     * @param int $id
     *   id
     * @param string $content
     *   Content of the snippet
     * @param string $type
     *   Type of snippet content
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateContentUsingPOST1AsyncWithHttpInfo(
        int $id,
        string $content,
        string $type
    ): PromiseInterface {
        $request = $this->updateContentUsingPOST1Request($id, $content, $type);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class,
            [$this, 'updateContentUsingPOST1HandleException']
        );
    }

    /**
     * Create request for operation 'updateContentUsingPOST1'
     *
     * @param int $id
     *   id
     * @param string $content
     *   Content of the snippet
     * @param string $type
     *   Type of snippet content
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateContentUsingPOST1Request(
        int $id,
        string $content,
        string $type
    ): Request {

        $resourcePath = '/rest/asset/v1/snippet/{id}/content.json';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
                'content' => ObjectSerializer::toQueryValue($content),
                'type' => ObjectSerializer::toQueryValue($type),
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for updateDynamicContentUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function updateDynamicContentUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Update Snippet Dynamic Content
     *
     * @param int $id
     *   id
     * @param int $segment_id
     *   segmentId
     * @param \NecLimDul\MarketoRest\Asset\Model\UpdateSnippetDynamicContentRequest $request
     *   request
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse
     */
    public function updateDynamicContentUsingPOST(
        int $id,
        int $segment_id,
        \NecLimDul\MarketoRest\Asset\Model\UpdateSnippetDynamicContentRequest $request
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse {
        list($response) = $this->updateDynamicContentUsingPOSTWithHttpInfo($id, $segment_id, $request);
        return $response;
    }

    /**
     * Update Snippet Dynamic Content
     *
     * @param int $id
     *   id
     * @param int $segment_id
     *   segmentId
     * @param \NecLimDul\MarketoRest\Asset\Model\UpdateSnippetDynamicContentRequest $request
     *   request
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function updateDynamicContentUsingPOSTWithHttpInfo(
        int $id,
        int $segment_id,
        \NecLimDul\MarketoRest\Asset\Model\UpdateSnippetDynamicContentRequest $request
    ): array {
        $request = $this->updateDynamicContentUsingPOSTRequest($id, $segment_id, $request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class
            );
        } catch (ApiException $e) {
            throw $this->updateDynamicContentUsingPOSTHandleException($e);
        }
    }

    /**
     * Update Snippet Dynamic Content
     *
     * @param int $id
     *   id
     * @param int $segment_id
     *   segmentId
     * @param \NecLimDul\MarketoRest\Asset\Model\UpdateSnippetDynamicContentRequest $request
     *   request
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateDynamicContentUsingPOSTAsync(
        int $id,
        int $segment_id,
        \NecLimDul\MarketoRest\Asset\Model\UpdateSnippetDynamicContentRequest $request
    ): PromiseInterface {
        return $this->updateDynamicContentUsingPOSTAsyncWithHttpInfo($id, $segment_id, $request)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Update Snippet Dynamic Content
     *
     * @param int $id
     *   id
     * @param int $segment_id
     *   segmentId
     * @param \NecLimDul\MarketoRest\Asset\Model\UpdateSnippetDynamicContentRequest $request
     *   request
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateDynamicContentUsingPOSTAsyncWithHttpInfo(
        int $id,
        int $segment_id,
        \NecLimDul\MarketoRest\Asset\Model\UpdateSnippetDynamicContentRequest $request
    ): PromiseInterface {
        $request = $this->updateDynamicContentUsingPOSTRequest($id, $segment_id, $request);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class,
            [$this, 'updateDynamicContentUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'updateDynamicContentUsingPOST'
     *
     * @param int $id
     *   id
     * @param int $segment_id
     *   segmentId
     * @param \NecLimDul\MarketoRest\Asset\Model\UpdateSnippetDynamicContentRequest $request
     *   request
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateDynamicContentUsingPOSTRequest(
        int $id,
        int $segment_id,
        \NecLimDul\MarketoRest\Asset\Model\UpdateSnippetDynamicContentRequest $request
    ): Request {

        $resourcePath = '/rest/asset/v1/snippet/{id}/dynamicContent/{segmentId}.json';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $resourcePath = str_replace(
            '{' . 'segmentId' . '}',
            ObjectSerializer::toPathValue($segment_id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            $request
        );
    }

    /**
     * Exception handler for updateSnippetUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function updateSnippetUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfSnippetResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Update Snippet Metadata
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\UpdateSnippetRequest $update_snippet_request
     *   updateSnippetRequest
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfSnippetResponse
     */
    public function updateSnippetUsingPOST(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\UpdateSnippetRequest $update_snippet_request
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfSnippetResponse {
        list($response) = $this->updateSnippetUsingPOSTWithHttpInfo($id, $update_snippet_request);
        return $response;
    }

    /**
     * Update Snippet Metadata
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\UpdateSnippetRequest $update_snippet_request
     *   updateSnippetRequest
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfSnippetResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function updateSnippetUsingPOSTWithHttpInfo(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\UpdateSnippetRequest $update_snippet_request
    ): array {
        $request = $this->updateSnippetUsingPOSTRequest($id, $update_snippet_request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfSnippetResponse::class
            );
        } catch (ApiException $e) {
            throw $this->updateSnippetUsingPOSTHandleException($e);
        }
    }

    /**
     * Update Snippet Metadata
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\UpdateSnippetRequest $update_snippet_request
     *   updateSnippetRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSnippetUsingPOSTAsync(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\UpdateSnippetRequest $update_snippet_request
    ): PromiseInterface {
        return $this->updateSnippetUsingPOSTAsyncWithHttpInfo($id, $update_snippet_request)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfSnippetResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Update Snippet Metadata
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\UpdateSnippetRequest $update_snippet_request
     *   updateSnippetRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSnippetUsingPOSTAsyncWithHttpInfo(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\UpdateSnippetRequest $update_snippet_request
    ): PromiseInterface {
        $request = $this->updateSnippetUsingPOSTRequest($id, $update_snippet_request);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfSnippetResponse::class,
            [$this, 'updateSnippetUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'updateSnippetUsingPOST'
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\UpdateSnippetRequest $update_snippet_request
     *   updateSnippetRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateSnippetUsingPOSTRequest(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\UpdateSnippetRequest $update_snippet_request
    ): Request {

        $resourcePath = '/rest/asset/v1/snippet/{id}.json';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            $update_snippet_request
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array<string, mixed> of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    /**
     * Make a request.
     *
     * @param \GuzzleHttp\Psr7\Request $request An initialized request object.
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @return \Psr\Http\Message\ResponseInterface
     */
    private function makeRequest(Request $request)
    {
        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            $response = $e->getResponse();
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                (int) $e->getCode(),
                $response ? $response->getHeaders() : [],
                $response ? (string) $response->getBody() : null
            );
        }

        $statusCode = $response->getStatusCode();
        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    (string) $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                (string) $response->getBody()
            );
        }
        return $response;
    }

    /**
     * Make an async request.
     *
     * @param \GuzzleHttp\Psr7\Request $request An initialized request object.
     * @param class-string $returnType The return type.
     * @param callable $exceptionHandler A callback to process HTTP errors.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @return \GuzzleHttp\Promise\PromiseInterface A promise that will return a processed response.
     */
    private function makeAsyncRequest(Request $request, string $returnType, callable $exceptionHandler)
    {
        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function (ResponseInterface $response) use ($returnType) {
                    return $this->responseToReturn($response, $returnType);
                },
                function (RequestException $exception) use ($exceptionHandler) {
                    $response = $exception->getResponse();
                    $e = new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : [],
                        $response ? (string) $response->getBody() : null
                    );
                    throw $exceptionHandler($e);
                }
            );
    }

    /**
     * Convert a response to a return standard return array.
     *
     * @template T
     * @param \Psr\Http\Message\ResponseInterface $response A response from a request with a serialized body.
     * @param string $returnType The primary return type.
     * @phpstan-param class-string<T> $returnType
     *
     * @return array structured array or response and http info.
     * @phpstan-return array{T, int, array<array<string>>}
     */
    private function responseToReturn(ResponseInterface $response, string $returnType)
    {
        return [
            $this->deserializeResponseBody($response->getBody(), $returnType),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    /**
     * Deserialize a response body.
     *
     * @template T
     * @param mixed $responseBody The response body.
     * @param string $returnType The return type.
     * @param array<string, string[]> $headers A list of headers from the response.
     * @phpstan-param class-string<T> $returnType
     *
     * @return mixed Either a string or a stream to be passed to a file object.
     * @phpstan-return T
     * @psalm-return T
     */
    private function deserializeResponseBody($responseBody, string $returnType, array $headers = [])
    {
        return ObjectSerializer::deserialize(
            $returnType === \SplFileObject::class ? $responseBody : (string) $responseBody,
            $returnType,
            $headers
        );
    }
}
