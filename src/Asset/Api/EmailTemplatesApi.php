<?php

/**
 * EmailTemplatesApi
 *
 * Marketo Rest API
 *
 * Marketo Rest API
 *
 * OpenAPI spec version: 1.0
 * Contact: developerfeedback@marketo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.26
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Asset
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace NecLimDul\MarketoRest\Asset\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\Promise\PromiseInterface;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\ResponseInterface;
use NecLimDul\MarketoRest\Asset\ApiException;
use NecLimDul\MarketoRest\Asset\Configuration;
use NecLimDul\MarketoRest\Asset\HeaderSelector;
use NecLimDul\MarketoRest\Asset\ObjectSerializer;

/**
 * EmailTemplatesApi Class Doc Comment
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Asset
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EmailTemplatesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the spec.
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Exception handler for approveDraftUsingPOST1.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function approveDraftUsingPOST1HandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailTemplateResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Approve Email Template Draft
     *
     * @param int $id
     *   id
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailTemplateResponse
     */
    public function approveDraftUsingPOST1(
        int $id
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailTemplateResponse {
        list($response) = $this->approveDraftUsingPOST1WithHttpInfo($id);
        return $response;
    }

    /**
     * Approve Email Template Draft
     *
     * @param int $id
     *   id
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailTemplateResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function approveDraftUsingPOST1WithHttpInfo(
        int $id
    ): array {
        $request = $this->approveDraftUsingPOST1Request($id);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailTemplateResponse::class
            );
        } catch (ApiException $e) {
            throw $this->approveDraftUsingPOST1HandleException($e);
        }
    }

    /**
     * Approve Email Template Draft
     *
     * @param int $id
     *   id
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function approveDraftUsingPOST1Async(
        int $id
    ): PromiseInterface {
        return $this->approveDraftUsingPOST1AsyncWithHttpInfo($id)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailTemplateResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Approve Email Template Draft
     *
     * @param int $id
     *   id
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function approveDraftUsingPOST1AsyncWithHttpInfo(
        int $id
    ): PromiseInterface {
        $request = $this->approveDraftUsingPOST1Request($id);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailTemplateResponse::class,
            [$this, 'approveDraftUsingPOST1HandleException']
        );
    }

    /**
     * Create request for operation 'approveDraftUsingPOST1'
     *
     * @param int $id
     *   id
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function approveDraftUsingPOST1Request(
        int $id
    ): Request {

        $resourcePath = '/rest/asset/v1/emailTemplate/{id}/approveDraft.json';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for cloneTemplateUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function cloneTemplateUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailTemplateResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Clone Email Template
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\CloneEmailTemplateRequest $clone_email_template_request
     *   cloneEmailTemplateRequest
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailTemplateResponse
     */
    public function cloneTemplateUsingPOST(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\CloneEmailTemplateRequest $clone_email_template_request
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailTemplateResponse {
        list($response) = $this->cloneTemplateUsingPOSTWithHttpInfo($id, $clone_email_template_request);
        return $response;
    }

    /**
     * Clone Email Template
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\CloneEmailTemplateRequest $clone_email_template_request
     *   cloneEmailTemplateRequest
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailTemplateResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function cloneTemplateUsingPOSTWithHttpInfo(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\CloneEmailTemplateRequest $clone_email_template_request
    ): array {
        $request = $this->cloneTemplateUsingPOSTRequest($id, $clone_email_template_request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailTemplateResponse::class
            );
        } catch (ApiException $e) {
            throw $this->cloneTemplateUsingPOSTHandleException($e);
        }
    }

    /**
     * Clone Email Template
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\CloneEmailTemplateRequest $clone_email_template_request
     *   cloneEmailTemplateRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cloneTemplateUsingPOSTAsync(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\CloneEmailTemplateRequest $clone_email_template_request
    ): PromiseInterface {
        return $this->cloneTemplateUsingPOSTAsyncWithHttpInfo($id, $clone_email_template_request)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailTemplateResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Clone Email Template
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\CloneEmailTemplateRequest $clone_email_template_request
     *   cloneEmailTemplateRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cloneTemplateUsingPOSTAsyncWithHttpInfo(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\CloneEmailTemplateRequest $clone_email_template_request
    ): PromiseInterface {
        $request = $this->cloneTemplateUsingPOSTRequest($id, $clone_email_template_request);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailTemplateResponse::class,
            [$this, 'cloneTemplateUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'cloneTemplateUsingPOST'
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\CloneEmailTemplateRequest $clone_email_template_request
     *   cloneEmailTemplateRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function cloneTemplateUsingPOSTRequest(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\CloneEmailTemplateRequest $clone_email_template_request
    ): Request {

        $resourcePath = '/rest/asset/v1/emailTemplate/{id}/clone.json';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            $clone_email_template_request
        );
    }

    /**
     * Exception handler for createEmailTemplateUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function createEmailTemplateUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailTemplateResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Create Email Template
     *
     * @param \NecLimDul\MarketoRest\Asset\Model\CreateEmailTemplateRequest $create_email_template_request
     *   createEmailTemplateRequest
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailTemplateResponse
     */
    public function createEmailTemplateUsingPOST(
        \NecLimDul\MarketoRest\Asset\Model\CreateEmailTemplateRequest $create_email_template_request
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailTemplateResponse {
        list($response) = $this->createEmailTemplateUsingPOSTWithHttpInfo($create_email_template_request);
        return $response;
    }

    /**
     * Create Email Template
     *
     * @param \NecLimDul\MarketoRest\Asset\Model\CreateEmailTemplateRequest $create_email_template_request
     *   createEmailTemplateRequest
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailTemplateResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function createEmailTemplateUsingPOSTWithHttpInfo(
        \NecLimDul\MarketoRest\Asset\Model\CreateEmailTemplateRequest $create_email_template_request
    ): array {
        $request = $this->createEmailTemplateUsingPOSTRequest($create_email_template_request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailTemplateResponse::class
            );
        } catch (ApiException $e) {
            throw $this->createEmailTemplateUsingPOSTHandleException($e);
        }
    }

    /**
     * Create Email Template
     *
     * @param \NecLimDul\MarketoRest\Asset\Model\CreateEmailTemplateRequest $create_email_template_request
     *   createEmailTemplateRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createEmailTemplateUsingPOSTAsync(
        \NecLimDul\MarketoRest\Asset\Model\CreateEmailTemplateRequest $create_email_template_request
    ): PromiseInterface {
        return $this->createEmailTemplateUsingPOSTAsyncWithHttpInfo($create_email_template_request)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailTemplateResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Create Email Template
     *
     * @param \NecLimDul\MarketoRest\Asset\Model\CreateEmailTemplateRequest $create_email_template_request
     *   createEmailTemplateRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createEmailTemplateUsingPOSTAsyncWithHttpInfo(
        \NecLimDul\MarketoRest\Asset\Model\CreateEmailTemplateRequest $create_email_template_request
    ): PromiseInterface {
        $request = $this->createEmailTemplateUsingPOSTRequest($create_email_template_request);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailTemplateResponse::class,
            [$this, 'createEmailTemplateUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'createEmailTemplateUsingPOST'
     *
     * @param \NecLimDul\MarketoRest\Asset\Model\CreateEmailTemplateRequest $create_email_template_request
     *   createEmailTemplateRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createEmailTemplateUsingPOSTRequest(
        \NecLimDul\MarketoRest\Asset\Model\CreateEmailTemplateRequest $create_email_template_request
    ): Request {

        $resourcePath = '/rest/asset/v1/emailTemplates.json';

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['multipart/form-data']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            $create_email_template_request
        );
    }

    /**
     * Exception handler for deleteTemplateUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function deleteTemplateUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Delete Email Template
     *
     * @param int $id
     *   id
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse
     */
    public function deleteTemplateUsingPOST(
        int $id
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse {
        list($response) = $this->deleteTemplateUsingPOSTWithHttpInfo($id);
        return $response;
    }

    /**
     * Delete Email Template
     *
     * @param int $id
     *   id
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function deleteTemplateUsingPOSTWithHttpInfo(
        int $id
    ): array {
        $request = $this->deleteTemplateUsingPOSTRequest($id);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class
            );
        } catch (ApiException $e) {
            throw $this->deleteTemplateUsingPOSTHandleException($e);
        }
    }

    /**
     * Delete Email Template
     *
     * @param int $id
     *   id
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteTemplateUsingPOSTAsync(
        int $id
    ): PromiseInterface {
        return $this->deleteTemplateUsingPOSTAsyncWithHttpInfo($id)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Delete Email Template
     *
     * @param int $id
     *   id
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteTemplateUsingPOSTAsyncWithHttpInfo(
        int $id
    ): PromiseInterface {
        $request = $this->deleteTemplateUsingPOSTRequest($id);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class,
            [$this, 'deleteTemplateUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'deleteTemplateUsingPOST'
     *
     * @param int $id
     *   id
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteTemplateUsingPOSTRequest(
        int $id
    ): Request {

        $resourcePath = '/rest/asset/v1/emailTemplate/{id}/delete.json';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for discardDraftUsingPOST1.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function discardDraftUsingPOST1HandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Discard Email Template Draft
     *
     * @param int $id
     *   id
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse
     */
    public function discardDraftUsingPOST1(
        int $id
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse {
        list($response) = $this->discardDraftUsingPOST1WithHttpInfo($id);
        return $response;
    }

    /**
     * Discard Email Template Draft
     *
     * @param int $id
     *   id
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function discardDraftUsingPOST1WithHttpInfo(
        int $id
    ): array {
        $request = $this->discardDraftUsingPOST1Request($id);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class
            );
        } catch (ApiException $e) {
            throw $this->discardDraftUsingPOST1HandleException($e);
        }
    }

    /**
     * Discard Email Template Draft
     *
     * @param int $id
     *   id
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function discardDraftUsingPOST1Async(
        int $id
    ): PromiseInterface {
        return $this->discardDraftUsingPOST1AsyncWithHttpInfo($id)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Discard Email Template Draft
     *
     * @param int $id
     *   id
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function discardDraftUsingPOST1AsyncWithHttpInfo(
        int $id
    ): PromiseInterface {
        $request = $this->discardDraftUsingPOST1Request($id);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class,
            [$this, 'discardDraftUsingPOST1HandleException']
        );
    }

    /**
     * Create request for operation 'discardDraftUsingPOST1'
     *
     * @param int $id
     *   id
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function discardDraftUsingPOST1Request(
        int $id
    ): Request {

        $resourcePath = '/rest/asset/v1/emailTemplate/{id}/discardDraft.json';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for getEmailTemplateUsedByUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function getEmailTemplateUsedByUsingGETHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailTemplateUsedByResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Email Template Used By
     *
     * @param int $id
     *   Id of the email template
     * @param int|null $offset
     *   Integer offset for paging
     * @param int|null $max_return
     *   Maximum number of channels to return.  Max 200, default 20
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailTemplateUsedByResponse
     */
    public function getEmailTemplateUsedByUsingGET(
        int $id,
        int $offset = null,
        int $max_return = null
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailTemplateUsedByResponse {
        list($response) = $this->getEmailTemplateUsedByUsingGETWithHttpInfo($id, $offset, $max_return);
        return $response;
    }

    /**
     * Get Email Template Used By
     *
     * @param int $id
     *   Id of the email template
     * @param int|null $offset
     *   Integer offset for paging
     * @param int|null $max_return
     *   Maximum number of channels to return.  Max 200, default 20
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailTemplateUsedByResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function getEmailTemplateUsedByUsingGETWithHttpInfo(
        int $id,
        int $offset = null,
        int $max_return = null
    ): array {
        $request = $this->getEmailTemplateUsedByUsingGETRequest($id, $offset, $max_return);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailTemplateUsedByResponse::class
            );
        } catch (ApiException $e) {
            throw $this->getEmailTemplateUsedByUsingGETHandleException($e);
        }
    }

    /**
     * Get Email Template Used By
     *
     * @param int $id
     *   Id of the email template
     * @param int|null $offset
     *   Integer offset for paging
     * @param int|null $max_return
     *   Maximum number of channels to return.  Max 200, default 20
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailTemplateUsedByUsingGETAsync(
        int $id,
        int $offset = null,
        int $max_return = null
    ): PromiseInterface {
        return $this->getEmailTemplateUsedByUsingGETAsyncWithHttpInfo($id, $offset, $max_return)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailTemplateUsedByResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Get Email Template Used By
     *
     * @param int $id
     *   Id of the email template
     * @param int|null $offset
     *   Integer offset for paging
     * @param int|null $max_return
     *   Maximum number of channels to return.  Max 200, default 20
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailTemplateUsedByUsingGETAsyncWithHttpInfo(
        int $id,
        int $offset = null,
        int $max_return = null
    ): PromiseInterface {
        $request = $this->getEmailTemplateUsedByUsingGETRequest($id, $offset, $max_return);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailTemplateUsedByResponse::class,
            [$this, 'getEmailTemplateUsedByUsingGETHandleException']
        );
    }

    /**
     * Create request for operation 'getEmailTemplateUsedByUsingGET'
     *
     * @param int $id
     *   Id of the email template
     * @param int|null $offset
     *   Integer offset for paging
     * @param int|null $max_return
     *   Maximum number of channels to return.  Max 200, default 20
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEmailTemplateUsedByUsingGETRequest(
        int $id,
        int $offset = null,
        int $max_return = null
    ): Request {

        $resourcePath = '/rest/asset/v1/emailTemplates/{id}/usedBy.json';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'GET',
            $operationHost . $resourcePath,
            // Query.
            [
                'offset' => ObjectSerializer::toQueryValue($offset),
                'maxReturn' => ObjectSerializer::toQueryValue($max_return),
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for getEmailTemplatesUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function getEmailTemplatesUsingGETHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailTemplateResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Email Templates
     *
     * @param int|null $offset
     *   Integer offset for paging
     * @param int|null $max_return
     *   Maximum number of channels to return.  Max 200, default 20
     * @param string|null $status
     *   Status filter for draft or approved versions
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailTemplateResponse
     */
    public function getEmailTemplatesUsingGET(
        int $offset = null,
        int $max_return = null,
        string $status = null
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailTemplateResponse {
        list($response) = $this->getEmailTemplatesUsingGETWithHttpInfo($offset, $max_return, $status);
        return $response;
    }

    /**
     * Get Email Templates
     *
     * @param int|null $offset
     *   Integer offset for paging
     * @param int|null $max_return
     *   Maximum number of channels to return.  Max 200, default 20
     * @param string|null $status
     *   Status filter for draft or approved versions
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailTemplateResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function getEmailTemplatesUsingGETWithHttpInfo(
        int $offset = null,
        int $max_return = null,
        string $status = null
    ): array {
        $request = $this->getEmailTemplatesUsingGETRequest($offset, $max_return, $status);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailTemplateResponse::class
            );
        } catch (ApiException $e) {
            throw $this->getEmailTemplatesUsingGETHandleException($e);
        }
    }

    /**
     * Get Email Templates
     *
     * @param int|null $offset
     *   Integer offset for paging
     * @param int|null $max_return
     *   Maximum number of channels to return.  Max 200, default 20
     * @param string|null $status
     *   Status filter for draft or approved versions
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailTemplatesUsingGETAsync(
        int $offset = null,
        int $max_return = null,
        string $status = null
    ): PromiseInterface {
        return $this->getEmailTemplatesUsingGETAsyncWithHttpInfo($offset, $max_return, $status)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailTemplateResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Get Email Templates
     *
     * @param int|null $offset
     *   Integer offset for paging
     * @param int|null $max_return
     *   Maximum number of channels to return.  Max 200, default 20
     * @param string|null $status
     *   Status filter for draft or approved versions
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailTemplatesUsingGETAsyncWithHttpInfo(
        int $offset = null,
        int $max_return = null,
        string $status = null
    ): PromiseInterface {
        $request = $this->getEmailTemplatesUsingGETRequest($offset, $max_return, $status);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailTemplateResponse::class,
            [$this, 'getEmailTemplatesUsingGETHandleException']
        );
    }

    /**
     * Create request for operation 'getEmailTemplatesUsingGET'
     *
     * @param int|null $offset
     *   Integer offset for paging
     * @param int|null $max_return
     *   Maximum number of channels to return.  Max 200, default 20
     * @param string|null $status
     *   Status filter for draft or approved versions
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEmailTemplatesUsingGETRequest(
        int $offset = null,
        int $max_return = null,
        string $status = null
    ): Request {

        $resourcePath = '/rest/asset/v1/emailTemplates.json';

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'GET',
            $operationHost . $resourcePath,
            // Query.
            [
                'offset' => ObjectSerializer::toQueryValue($offset),
                'maxReturn' => ObjectSerializer::toQueryValue($max_return),
                'status' => ObjectSerializer::toQueryValue($status),
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for getTemplateByIdUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function getTemplateByIdUsingGETHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailTemplateResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Email Template by Id
     *
     * @param int $id
     *   id
     * @param string|null $status
     *   Status filter for draft or approved versions
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailTemplateResponse
     */
    public function getTemplateByIdUsingGET(
        int $id,
        string $status = null
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailTemplateResponse {
        list($response) = $this->getTemplateByIdUsingGETWithHttpInfo($id, $status);
        return $response;
    }

    /**
     * Get Email Template by Id
     *
     * @param int $id
     *   id
     * @param string|null $status
     *   Status filter for draft or approved versions
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailTemplateResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function getTemplateByIdUsingGETWithHttpInfo(
        int $id,
        string $status = null
    ): array {
        $request = $this->getTemplateByIdUsingGETRequest($id, $status);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailTemplateResponse::class
            );
        } catch (ApiException $e) {
            throw $this->getTemplateByIdUsingGETHandleException($e);
        }
    }

    /**
     * Get Email Template by Id
     *
     * @param int $id
     *   id
     * @param string|null $status
     *   Status filter for draft or approved versions
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTemplateByIdUsingGETAsync(
        int $id,
        string $status = null
    ): PromiseInterface {
        return $this->getTemplateByIdUsingGETAsyncWithHttpInfo($id, $status)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailTemplateResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Get Email Template by Id
     *
     * @param int $id
     *   id
     * @param string|null $status
     *   Status filter for draft or approved versions
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTemplateByIdUsingGETAsyncWithHttpInfo(
        int $id,
        string $status = null
    ): PromiseInterface {
        $request = $this->getTemplateByIdUsingGETRequest($id, $status);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailTemplateResponse::class,
            [$this, 'getTemplateByIdUsingGETHandleException']
        );
    }

    /**
     * Create request for operation 'getTemplateByIdUsingGET'
     *
     * @param int $id
     *   id
     * @param string|null $status
     *   Status filter for draft or approved versions
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getTemplateByIdUsingGETRequest(
        int $id,
        string $status = null
    ): Request {

        $resourcePath = '/rest/asset/v1/emailTemplate/{id}.json';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'GET',
            $operationHost . $resourcePath,
            // Query.
            [
                'status' => ObjectSerializer::toQueryValue($status),
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for getTemplateByNameUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function getTemplateByNameUsingGETHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailTemplateResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Email Template by Name
     *
     * @param string $name
     *   name
     * @param string|null $status
     *   Status filter for draft or approved versions
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailTemplateResponse
     */
    public function getTemplateByNameUsingGET(
        string $name,
        string $status = null
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailTemplateResponse {
        list($response) = $this->getTemplateByNameUsingGETWithHttpInfo($name, $status);
        return $response;
    }

    /**
     * Get Email Template by Name
     *
     * @param string $name
     *   name
     * @param string|null $status
     *   Status filter for draft or approved versions
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailTemplateResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function getTemplateByNameUsingGETWithHttpInfo(
        string $name,
        string $status = null
    ): array {
        $request = $this->getTemplateByNameUsingGETRequest($name, $status);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailTemplateResponse::class
            );
        } catch (ApiException $e) {
            throw $this->getTemplateByNameUsingGETHandleException($e);
        }
    }

    /**
     * Get Email Template by Name
     *
     * @param string $name
     *   name
     * @param string|null $status
     *   Status filter for draft or approved versions
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTemplateByNameUsingGETAsync(
        string $name,
        string $status = null
    ): PromiseInterface {
        return $this->getTemplateByNameUsingGETAsyncWithHttpInfo($name, $status)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailTemplateResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Get Email Template by Name
     *
     * @param string $name
     *   name
     * @param string|null $status
     *   Status filter for draft or approved versions
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTemplateByNameUsingGETAsyncWithHttpInfo(
        string $name,
        string $status = null
    ): PromiseInterface {
        $request = $this->getTemplateByNameUsingGETRequest($name, $status);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailTemplateResponse::class,
            [$this, 'getTemplateByNameUsingGETHandleException']
        );
    }

    /**
     * Create request for operation 'getTemplateByNameUsingGET'
     *
     * @param string $name
     *   name
     * @param string|null $status
     *   Status filter for draft or approved versions
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getTemplateByNameUsingGETRequest(
        string $name,
        string $status = null
    ): Request {

        $resourcePath = '/rest/asset/v1/emailTemplate/byName.json';

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'GET',
            $operationHost . $resourcePath,
            // Query.
            [
                'name' => ObjectSerializer::toQueryValue($name),
                'status' => ObjectSerializer::toQueryValue($status),
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for getTemplateContentByIdUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function getTemplateContentByIdUsingGETHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailTemplateContentResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Email Template Content by Id
     *
     * @param int $id
     *   id
     * @param string|null $status
     *   Status filter for draft or approved versions
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailTemplateContentResponse
     */
    public function getTemplateContentByIdUsingGET(
        int $id,
        string $status = null
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailTemplateContentResponse {
        list($response) = $this->getTemplateContentByIdUsingGETWithHttpInfo($id, $status);
        return $response;
    }

    /**
     * Get Email Template Content by Id
     *
     * @param int $id
     *   id
     * @param string|null $status
     *   Status filter for draft or approved versions
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailTemplateContentResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function getTemplateContentByIdUsingGETWithHttpInfo(
        int $id,
        string $status = null
    ): array {
        $request = $this->getTemplateContentByIdUsingGETRequest($id, $status);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailTemplateContentResponse::class
            );
        } catch (ApiException $e) {
            throw $this->getTemplateContentByIdUsingGETHandleException($e);
        }
    }

    /**
     * Get Email Template Content by Id
     *
     * @param int $id
     *   id
     * @param string|null $status
     *   Status filter for draft or approved versions
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTemplateContentByIdUsingGETAsync(
        int $id,
        string $status = null
    ): PromiseInterface {
        return $this->getTemplateContentByIdUsingGETAsyncWithHttpInfo($id, $status)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailTemplateContentResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Get Email Template Content by Id
     *
     * @param int $id
     *   id
     * @param string|null $status
     *   Status filter for draft or approved versions
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTemplateContentByIdUsingGETAsyncWithHttpInfo(
        int $id,
        string $status = null
    ): PromiseInterface {
        $request = $this->getTemplateContentByIdUsingGETRequest($id, $status);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailTemplateContentResponse::class,
            [$this, 'getTemplateContentByIdUsingGETHandleException']
        );
    }

    /**
     * Create request for operation 'getTemplateContentByIdUsingGET'
     *
     * @param int $id
     *   id
     * @param string|null $status
     *   Status filter for draft or approved versions
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getTemplateContentByIdUsingGETRequest(
        int $id,
        string $status = null
    ): Request {

        $resourcePath = '/rest/asset/v1/emailTemplate/{id}/content';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'GET',
            $operationHost . $resourcePath,
            // Query.
            [
                'status' => ObjectSerializer::toQueryValue($status),
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for unapproveDraftUsingPOST1.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function unapproveDraftUsingPOST1HandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailTemplateResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Unapprove Email Template Draft
     *
     * @param int $id
     *   id
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailTemplateResponse
     */
    public function unapproveDraftUsingPOST1(
        int $id
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailTemplateResponse {
        list($response) = $this->unapproveDraftUsingPOST1WithHttpInfo($id);
        return $response;
    }

    /**
     * Unapprove Email Template Draft
     *
     * @param int $id
     *   id
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailTemplateResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function unapproveDraftUsingPOST1WithHttpInfo(
        int $id
    ): array {
        $request = $this->unapproveDraftUsingPOST1Request($id);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailTemplateResponse::class
            );
        } catch (ApiException $e) {
            throw $this->unapproveDraftUsingPOST1HandleException($e);
        }
    }

    /**
     * Unapprove Email Template Draft
     *
     * @param int $id
     *   id
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function unapproveDraftUsingPOST1Async(
        int $id
    ): PromiseInterface {
        return $this->unapproveDraftUsingPOST1AsyncWithHttpInfo($id)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailTemplateResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Unapprove Email Template Draft
     *
     * @param int $id
     *   id
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function unapproveDraftUsingPOST1AsyncWithHttpInfo(
        int $id
    ): PromiseInterface {
        $request = $this->unapproveDraftUsingPOST1Request($id);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailTemplateResponse::class,
            [$this, 'unapproveDraftUsingPOST1HandleException']
        );
    }

    /**
     * Create request for operation 'unapproveDraftUsingPOST1'
     *
     * @param int $id
     *   id
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function unapproveDraftUsingPOST1Request(
        int $id
    ): Request {

        $resourcePath = '/rest/asset/v1/emailTemplate/{id}/unapprove.json';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for updateEmailTemplateContentUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function updateEmailTemplateContentUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Update Email Template Content
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\UpdateEmailTemplateContentRequest|null $update_email_template_content_request
     *   updateEmailTemplateContentRequest
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse
     */
    public function updateEmailTemplateContentUsingPOST(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\UpdateEmailTemplateContentRequest $update_email_template_content_request = null
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse {
        list($response) = $this->updateEmailTemplateContentUsingPOSTWithHttpInfo($id, $update_email_template_content_request);
        return $response;
    }

    /**
     * Update Email Template Content
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\UpdateEmailTemplateContentRequest|null $update_email_template_content_request
     *   updateEmailTemplateContentRequest
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function updateEmailTemplateContentUsingPOSTWithHttpInfo(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\UpdateEmailTemplateContentRequest $update_email_template_content_request = null
    ): array {
        $request = $this->updateEmailTemplateContentUsingPOSTRequest($id, $update_email_template_content_request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class
            );
        } catch (ApiException $e) {
            throw $this->updateEmailTemplateContentUsingPOSTHandleException($e);
        }
    }

    /**
     * Update Email Template Content
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\UpdateEmailTemplateContentRequest|null $update_email_template_content_request
     *   updateEmailTemplateContentRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEmailTemplateContentUsingPOSTAsync(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\UpdateEmailTemplateContentRequest $update_email_template_content_request = null
    ): PromiseInterface {
        return $this->updateEmailTemplateContentUsingPOSTAsyncWithHttpInfo($id, $update_email_template_content_request)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Update Email Template Content
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\UpdateEmailTemplateContentRequest|null $update_email_template_content_request
     *   updateEmailTemplateContentRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEmailTemplateContentUsingPOSTAsyncWithHttpInfo(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\UpdateEmailTemplateContentRequest $update_email_template_content_request = null
    ): PromiseInterface {
        $request = $this->updateEmailTemplateContentUsingPOSTRequest($id, $update_email_template_content_request);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class,
            [$this, 'updateEmailTemplateContentUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'updateEmailTemplateContentUsingPOST'
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\UpdateEmailTemplateContentRequest|null $update_email_template_content_request
     *   updateEmailTemplateContentRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateEmailTemplateContentUsingPOSTRequest(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\UpdateEmailTemplateContentRequest $update_email_template_content_request = null
    ): Request {

        $resourcePath = '/rest/asset/v1/emailTemplate/{id}/content.json';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['multipart/form-data']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            $update_email_template_content_request
        );
    }

    /**
     * Exception handler for updateEmailTemplateUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function updateEmailTemplateUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailTemplateResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Update Email Template Metadata
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\UpdateEmailTemplateMetaDataRequest $update_email_meta_data_request
     *   updateEmailMetaDataRequest
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailTemplateResponse
     */
    public function updateEmailTemplateUsingPOST(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\UpdateEmailTemplateMetaDataRequest $update_email_meta_data_request
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailTemplateResponse {
        list($response) = $this->updateEmailTemplateUsingPOSTWithHttpInfo($id, $update_email_meta_data_request);
        return $response;
    }

    /**
     * Update Email Template Metadata
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\UpdateEmailTemplateMetaDataRequest $update_email_meta_data_request
     *   updateEmailMetaDataRequest
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailTemplateResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function updateEmailTemplateUsingPOSTWithHttpInfo(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\UpdateEmailTemplateMetaDataRequest $update_email_meta_data_request
    ): array {
        $request = $this->updateEmailTemplateUsingPOSTRequest($id, $update_email_meta_data_request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailTemplateResponse::class
            );
        } catch (ApiException $e) {
            throw $this->updateEmailTemplateUsingPOSTHandleException($e);
        }
    }

    /**
     * Update Email Template Metadata
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\UpdateEmailTemplateMetaDataRequest $update_email_meta_data_request
     *   updateEmailMetaDataRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEmailTemplateUsingPOSTAsync(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\UpdateEmailTemplateMetaDataRequest $update_email_meta_data_request
    ): PromiseInterface {
        return $this->updateEmailTemplateUsingPOSTAsyncWithHttpInfo($id, $update_email_meta_data_request)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailTemplateResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Update Email Template Metadata
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\UpdateEmailTemplateMetaDataRequest $update_email_meta_data_request
     *   updateEmailMetaDataRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEmailTemplateUsingPOSTAsyncWithHttpInfo(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\UpdateEmailTemplateMetaDataRequest $update_email_meta_data_request
    ): PromiseInterface {
        $request = $this->updateEmailTemplateUsingPOSTRequest($id, $update_email_meta_data_request);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailTemplateResponse::class,
            [$this, 'updateEmailTemplateUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'updateEmailTemplateUsingPOST'
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\UpdateEmailTemplateMetaDataRequest $update_email_meta_data_request
     *   updateEmailMetaDataRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateEmailTemplateUsingPOSTRequest(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\UpdateEmailTemplateMetaDataRequest $update_email_meta_data_request
    ): Request {

        $resourcePath = '/rest/asset/v1/emailTemplate/{id}.json';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            $update_email_meta_data_request
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array<string, mixed> of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    /**
     * Make a request.
     *
     * @param \GuzzleHttp\Psr7\Request $request An initialized request object.
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @return \Psr\Http\Message\ResponseInterface
     */
    private function makeRequest(Request $request)
    {
        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            $response = $e->getResponse();
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                (int) $e->getCode(),
                $response ? $response->getHeaders() : [],
                $response ? (string) $response->getBody() : null
            );
        }

        $statusCode = $response->getStatusCode();
        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    (string) $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                (string) $response->getBody()
            );
        }
        return $response;
    }

    /**
     * Make an async request.
     *
     * @param \GuzzleHttp\Psr7\Request $request An initialized request object.
     * @param class-string $returnType The return type.
     * @param callable $exceptionHandler A callback to process HTTP errors.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @return \GuzzleHttp\Promise\PromiseInterface A promise that will return a processed response.
     */
    private function makeAsyncRequest(Request $request, string $returnType, callable $exceptionHandler)
    {
        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function (ResponseInterface $response) use ($returnType) {
                    return $this->responseToReturn($response, $returnType);
                },
                function (RequestException $exception) use ($exceptionHandler) {
                    $response = $exception->getResponse();
                    $e = new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : [],
                        $response ? (string) $response->getBody() : null
                    );
                    throw $exceptionHandler($e);
                }
            );
    }

    /**
     * Convert a response to a return standard return array.
     *
     * @template T
     * @param \Psr\Http\Message\ResponseInterface $response A response from a request with a serialized body.
     * @param string $returnType The primary return type.
     * @phpstan-param class-string<T> $returnType
     *
     * @return array structured array or response and http info.
     * @phpstan-return array{T, int, array<array<string>>}
     */
    private function responseToReturn(ResponseInterface $response, string $returnType)
    {
        return [
            $this->deserializeResponseBody($response->getBody(), $returnType),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    /**
     * Deserialize a response body.
     *
     * @template T
     * @param mixed $responseBody The response body.
     * @param string $returnType The return type.
     * @param array<string, string[]> $headers A list of headers from the response.
     * @phpstan-param class-string<T> $returnType
     *
     * @return mixed Either a string or a stream to be passed to a file object.
     * @phpstan-return T
     * @psalm-return T
     */
    private function deserializeResponseBody($responseBody, string $returnType, array $headers = [])
    {
        return ObjectSerializer::deserialize(
            $returnType === \SplFileObject::class ? $responseBody : (string) $responseBody,
            $returnType,
            $headers
        );
    }
}
