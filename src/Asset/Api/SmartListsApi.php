<?php
/**
 * SmartListsApi
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Asset
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketo Rest API
 *
 * Marketo Rest API
 *
 * OpenAPI spec version: 1.0
 * Contact: developerfeedback@marketo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.26
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace NecLimDul\MarketoRest\Asset\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Query;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\ResponseInterface;
use NecLimDul\MarketoRest\Asset\ApiException;
use NecLimDul\MarketoRest\Asset\Configuration;
use NecLimDul\MarketoRest\Asset\HeaderSelector;
use NecLimDul\MarketoRest\Asset\ObjectSerializer;

/**
 * SmartListsApi Class Doc Comment
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Asset
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SmartListsApi
{

    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Exception handler for cloneSmartListUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function cloneSmartListUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartListResponse',
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Clone Smart List
     *
     * @param  int $id Id of smart list to clone (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\CloneSmartListRequest $clone_smart_list_request cloneSmartListRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartListResponse
     */
    public function cloneSmartListUsingPOST($id, $clone_smart_list_request)
    {
        list($response) = $this->cloneSmartListUsingPOSTWithHttpInfo($id, $clone_smart_list_request);
        return $response;
    }

    /**
     * Clone Smart List
     *
     * @param  int $id Id of smart list to clone (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\CloneSmartListRequest $clone_smart_list_request cloneSmartListRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cloneSmartListUsingPOSTWithHttpInfo($id, $clone_smart_list_request)
    {
        $request = $this->cloneSmartListUsingPOSTRequest($id, $clone_smart_list_request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartListResponse');
        } catch (ApiException $e) {
            throw $this->cloneSmartListUsingPOSTHandleException($e);
        }
    }

    /**
     * Clone Smart List
     *
     * @param  int $id Id of smart list to clone (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\CloneSmartListRequest $clone_smart_list_request cloneSmartListRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cloneSmartListUsingPOSTAsync($id, $clone_smart_list_request)
    {
        return $this->cloneSmartListUsingPOSTAsyncWithHttpInfo($id, $clone_smart_list_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Clone Smart List
     *
     * @param  int $id Id of smart list to clone (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\CloneSmartListRequest $clone_smart_list_request cloneSmartListRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cloneSmartListUsingPOSTAsyncWithHttpInfo($id, $clone_smart_list_request)
    {
        $request = $this->cloneSmartListUsingPOSTRequest($id, $clone_smart_list_request);
        return $this->makeAsyncRequest($request, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartListResponse', [$this, 'cloneSmartListUsingPOSTHandleException']);
    }

    /**
     * Create request for operation 'cloneSmartListUsingPOST'
     *
     * @param  int $id Id of smart list to clone (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\CloneSmartListRequest $clone_smart_list_request cloneSmartListRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function cloneSmartListUsingPOSTRequest($id, $clone_smart_list_request)
    {
        // Verify the required parameter 'id' is set.
        if (!isset($id)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling cloneSmartListUsingPOST'
            );
        }
        // Verify the required parameter 'clone_smart_list_request' is set.
        if (!isset($clone_smart_list_request)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $clone_smart_list_request when calling cloneSmartListUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/smartList/{id}/clone.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );
        $httpBody = ObjectSerializer::toBodyValue($clone_smart_list_request, $headers['Content-Type'] === 'application/json');


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Exception handler for deleteSmartListByIdUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function deleteSmartListByIdUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse',
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Delete Smart List
     *
     * @param  int $id Id of the smart list to delete (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse
     */
    public function deleteSmartListByIdUsingPOST($id)
    {
        list($response) = $this->deleteSmartListByIdUsingPOSTWithHttpInfo($id);
        return $response;
    }

    /**
     * Delete Smart List
     *
     * @param  int $id Id of the smart list to delete (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteSmartListByIdUsingPOSTWithHttpInfo($id)
    {
        $request = $this->deleteSmartListByIdUsingPOSTRequest($id);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse');
        } catch (ApiException $e) {
            throw $this->deleteSmartListByIdUsingPOSTHandleException($e);
        }
    }

    /**
     * Delete Smart List
     *
     * @param  int $id Id of the smart list to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSmartListByIdUsingPOSTAsync($id)
    {
        return $this->deleteSmartListByIdUsingPOSTAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Delete Smart List
     *
     * @param  int $id Id of the smart list to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSmartListByIdUsingPOSTAsyncWithHttpInfo($id)
    {
        $request = $this->deleteSmartListByIdUsingPOSTRequest($id);
        return $this->makeAsyncRequest($request, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse', [$this, 'deleteSmartListByIdUsingPOSTHandleException']);
    }

    /**
     * Create request for operation 'deleteSmartListByIdUsingPOST'
     *
     * @param  int $id Id of the smart list to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteSmartListByIdUsingPOSTRequest($id)
    {
        // Verify the required parameter 'id' is set.
        if (!isset($id)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteSmartListByIdUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/smartList/{id}/delete.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Exception handler for getSmartListByIdUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function getSmartListByIdUsingGETHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartListResponseWithRules',
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Smart List by Id
     *
     * @param  int $id Id of the smart list to retrieve (required)
     * @param  bool $include_rules Set true to populate smart list rules.  Default false (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartListResponseWithRules
     */
    public function getSmartListByIdUsingGET($id, $include_rules = null)
    {
        list($response) = $this->getSmartListByIdUsingGETWithHttpInfo($id, $include_rules);
        return $response;
    }

    /**
     * Get Smart List by Id
     *
     * @param  int $id Id of the smart list to retrieve (required)
     * @param  bool $include_rules Set true to populate smart list rules.  Default false (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartListResponseWithRules, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSmartListByIdUsingGETWithHttpInfo($id, $include_rules = null)
    {
        $request = $this->getSmartListByIdUsingGETRequest($id, $include_rules);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartListResponseWithRules');
        } catch (ApiException $e) {
            throw $this->getSmartListByIdUsingGETHandleException($e);
        }
    }

    /**
     * Get Smart List by Id
     *
     * @param  int $id Id of the smart list to retrieve (required)
     * @param  bool $include_rules Set true to populate smart list rules.  Default false (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSmartListByIdUsingGETAsync($id, $include_rules = null)
    {
        return $this->getSmartListByIdUsingGETAsyncWithHttpInfo($id, $include_rules)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Get Smart List by Id
     *
     * @param  int $id Id of the smart list to retrieve (required)
     * @param  bool $include_rules Set true to populate smart list rules.  Default false (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSmartListByIdUsingGETAsyncWithHttpInfo($id, $include_rules = null)
    {
        $request = $this->getSmartListByIdUsingGETRequest($id, $include_rules);
        return $this->makeAsyncRequest($request, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartListResponseWithRules', [$this, 'getSmartListByIdUsingGETHandleException']);
    }

    /**
     * Create request for operation 'getSmartListByIdUsingGET'
     *
     * @param  int $id Id of the smart list to retrieve (required)
     * @param  bool $include_rules Set true to populate smart list rules.  Default false (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSmartListByIdUsingGETRequest($id, $include_rules = null)
    {
        // Verify the required parameter 'id' is set.
        if (!isset($id)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getSmartListByIdUsingGET'
            );
        }

        $resourcePath = '/rest/asset/v1/smartList/{id}.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Query parameters.
        $queryParams['includeRules'] = ObjectSerializer::toQueryValue($include_rules);
        // Remove any null (optional values).
        $queryParams = array_filter($queryParams, function($v) { return $v !== null; });

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Exception handler for getSmartListByNameUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function getSmartListByNameUsingGETHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartListResponse',
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Smart List by Name
     *
     * @param  string $name Name of smart list to retrieve (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartListResponse
     */
    public function getSmartListByNameUsingGET($name)
    {
        list($response) = $this->getSmartListByNameUsingGETWithHttpInfo($name);
        return $response;
    }

    /**
     * Get Smart List by Name
     *
     * @param  string $name Name of smart list to retrieve (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSmartListByNameUsingGETWithHttpInfo($name)
    {
        $request = $this->getSmartListByNameUsingGETRequest($name);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartListResponse');
        } catch (ApiException $e) {
            throw $this->getSmartListByNameUsingGETHandleException($e);
        }
    }

    /**
     * Get Smart List by Name
     *
     * @param  string $name Name of smart list to retrieve (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSmartListByNameUsingGETAsync($name)
    {
        return $this->getSmartListByNameUsingGETAsyncWithHttpInfo($name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Get Smart List by Name
     *
     * @param  string $name Name of smart list to retrieve (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSmartListByNameUsingGETAsyncWithHttpInfo($name)
    {
        $request = $this->getSmartListByNameUsingGETRequest($name);
        return $this->makeAsyncRequest($request, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartListResponse', [$this, 'getSmartListByNameUsingGETHandleException']);
    }

    /**
     * Create request for operation 'getSmartListByNameUsingGET'
     *
     * @param  string $name Name of smart list to retrieve (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSmartListByNameUsingGETRequest($name)
    {
        // Verify the required parameter 'name' is set.
        if (!isset($name)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling getSmartListByNameUsingGET'
            );
        }

        $resourcePath = '/rest/asset/v1/smartList/byName.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Query parameters.
        $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        // Remove any null (optional values).
        $queryParams = array_filter($queryParams, function($v) { return $v !== null; });
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Exception handler for getSmartListsUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function getSmartListsUsingGETHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartListResponse',
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Smart Lists
     *
     * @param  string $folder JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39; (optional)
     * @param  int $offset Integer offset for paging (optional)
     * @param  int $max_return Maximum number of smart lists to return.  Max 200, default 20. (optional)
     * @param  string $earliest_updated_at Exclude smart lists prior to this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description. (optional)
     * @param  string $latest_updated_at Exclude smart lists after this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description. (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartListResponse
     */
    public function getSmartListsUsingGET($folder = null, $offset = null, $max_return = null, $earliest_updated_at = null, $latest_updated_at = null)
    {
        list($response) = $this->getSmartListsUsingGETWithHttpInfo($folder, $offset, $max_return, $earliest_updated_at, $latest_updated_at);
        return $response;
    }

    /**
     * Get Smart Lists
     *
     * @param  string $folder JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39; (optional)
     * @param  int $offset Integer offset for paging (optional)
     * @param  int $max_return Maximum number of smart lists to return.  Max 200, default 20. (optional)
     * @param  string $earliest_updated_at Exclude smart lists prior to this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description. (optional)
     * @param  string $latest_updated_at Exclude smart lists after this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description. (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSmartListsUsingGETWithHttpInfo($folder = null, $offset = null, $max_return = null, $earliest_updated_at = null, $latest_updated_at = null)
    {
        $request = $this->getSmartListsUsingGETRequest($folder, $offset, $max_return, $earliest_updated_at, $latest_updated_at);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartListResponse');
        } catch (ApiException $e) {
            throw $this->getSmartListsUsingGETHandleException($e);
        }
    }

    /**
     * Get Smart Lists
     *
     * @param  string $folder JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39; (optional)
     * @param  int $offset Integer offset for paging (optional)
     * @param  int $max_return Maximum number of smart lists to return.  Max 200, default 20. (optional)
     * @param  string $earliest_updated_at Exclude smart lists prior to this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description. (optional)
     * @param  string $latest_updated_at Exclude smart lists after this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSmartListsUsingGETAsync($folder = null, $offset = null, $max_return = null, $earliest_updated_at = null, $latest_updated_at = null)
    {
        return $this->getSmartListsUsingGETAsyncWithHttpInfo($folder, $offset, $max_return, $earliest_updated_at, $latest_updated_at)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Get Smart Lists
     *
     * @param  string $folder JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39; (optional)
     * @param  int $offset Integer offset for paging (optional)
     * @param  int $max_return Maximum number of smart lists to return.  Max 200, default 20. (optional)
     * @param  string $earliest_updated_at Exclude smart lists prior to this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description. (optional)
     * @param  string $latest_updated_at Exclude smart lists after this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSmartListsUsingGETAsyncWithHttpInfo($folder = null, $offset = null, $max_return = null, $earliest_updated_at = null, $latest_updated_at = null)
    {
        $request = $this->getSmartListsUsingGETRequest($folder, $offset, $max_return, $earliest_updated_at, $latest_updated_at);
        return $this->makeAsyncRequest($request, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartListResponse', [$this, 'getSmartListsUsingGETHandleException']);
    }

    /**
     * Create request for operation 'getSmartListsUsingGET'
     *
     * @param  string $folder JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39; (optional)
     * @param  int $offset Integer offset for paging (optional)
     * @param  int $max_return Maximum number of smart lists to return.  Max 200, default 20. (optional)
     * @param  string $earliest_updated_at Exclude smart lists prior to this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description. (optional)
     * @param  string $latest_updated_at Exclude smart lists after this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSmartListsUsingGETRequest($folder = null, $offset = null, $max_return = null, $earliest_updated_at = null, $latest_updated_at = null)
    {

        $resourcePath = '/rest/asset/v1/smartLists.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Query parameters.
        $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        $queryParams['maxReturn'] = ObjectSerializer::toQueryValue($max_return);
        $queryParams['earliestUpdatedAt'] = ObjectSerializer::toQueryValue($earliest_updated_at);
        $queryParams['latestUpdatedAt'] = ObjectSerializer::toQueryValue($latest_updated_at);
        // Remove any null (optional values).
        $queryParams = array_filter($queryParams, function($v) { return $v !== null; });
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    /**
     * Make a request.
     *
     * @param \GuzzleHttp\Psr7\Request $request An initialized request object.
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @return \Psr\Http\Message\ResponseInterface
     */
    private function makeRequest(Request $request) {
        $options = $this->createHttpClientOption();
        try {
           $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            $response = $e->getResponse();
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                (int) $e->getCode(),
                $response ? $response->getHeaders() : null,
                $response ? (string) $response->getBody() : null
            );
        }

        $statusCode = $response->getStatusCode();
        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    (string) $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                (string) $response->getBody()
            );
        }
        return $response;
    }

    /**
     * Make an async request.
     *
     * @param \GuzzleHttp\Psr7\Request $request An initialized request object.
     * @param string $returnType The return type.
     * @param callable $exceptionHandler A callback to process HTTP errors.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @return \GuzzleHttp\Promise\PromiseInterface A promise that will return a processed response.
     */
    private function makeAsyncRequest(Request $request, string $returnType, callable $exceptionHandler)
    {
        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->responseToReturn($response, $returnType);
                },
                function (RequestException $exception) use ($exceptionHandler) {
                    $response = $exception->getResponse();
                    $e = new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                    throw $exceptionHandler($e);
                }
            );
    }

    /**
     * Convert a response to a return standard return array.
     *
     * @param \Psr\Http\Message\ResponseInterface $response A response from a request with a serialized body.
     * @param string $returnType The primary return type.
     *
     * @return array
     */
    private function responseToReturn(ResponseInterface $response, string $returnType) {
        return [
            $this->deserializeResponseBody($response->getBody(), $returnType),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    /**
     * Deserialize a response body.
     *
     * @param mixed $responseBody
     *   The response body.
     * @param string $returnType
     *   The return type.
     * @param array<string, string[]>|null $headers
     *   The a list of headers from the response.
     * @return mixed
     *   Either a string or a stream to be passed to a file object.
     */
    private function deserializeResponseBody($responseBody, string $returnType, ?array $headers = [])
    {
        return ObjectSerializer::deserialize(
            $returnType === '\SplFileObject' ? $responseBody : (string) $responseBody,
            $returnType,
            $headers
        );
    }

}
