<?php
/**
 * ProgramsApi
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Asset
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketo Rest API
 *
 * Marketo Rest API
 *
 * OpenAPI spec version: 1.0
 * Contact: developerfeedback@marketo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.28
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace NecLimDul\MarketoRest\Asset\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Query;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\ResponseInterface;
use NecLimDul\MarketoRest\Asset\ApiException;
use NecLimDul\MarketoRest\Asset\Configuration;
use NecLimDul\MarketoRest\Asset\HeaderSelector;
use NecLimDul\MarketoRest\Asset\ObjectSerializer;

/**
 * ProgramsApi Class Doc Comment
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Asset
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProgramsApi
{

    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation approveProgramUsingPOST
     *
     * Approve Program
     *
     * @param  int $id id (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse
     */
    public function approveProgramUsingPOST($id)
    {
        list($response) = $this->approveProgramUsingPOSTWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation approveProgramUsingPOSTWithHttpInfo
     *
     * Approve Program
     *
     * @param  int $id id (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function approveProgramUsingPOSTWithHttpInfo($id)
    {
        $request = $this->approveProgramUsingPOSTRequest($id);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation approveProgramUsingPOSTAsync
     *
     * Approve Program
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function approveProgramUsingPOSTAsync($id)
    {
        return $this->approveProgramUsingPOSTAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation approveProgramUsingPOSTAsyncWithHttpInfo
     *
     * Approve Program
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function approveProgramUsingPOSTAsyncWithHttpInfo($id)
    {
        $request = $this->approveProgramUsingPOSTRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'approveProgramUsingPOST'
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function approveProgramUsingPOSTRequest($id)
    {
        // Verify the required parameter 'id' is set.
        if ($id === null || (is_array($id) && empty($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling approveProgramUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/program/{id}/approve.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation browseProgramsUsingGET
     *
     * Get Programs
     *
     * @param  int $max_return Maximum number of channels to return.  Max 200, default 20 (optional)
     * @param  int $offset Integer offset for paging (optional)
     * @param  string $filter_type Optional filter.  Requires filterValues (optional)
     * @param  string $earliest_updated_at Exclude programs prior to this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description. (optional)
     * @param  string $latest_updated_at Exclude programs after this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description. (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfBrowseAllPrograms
     */
    public function browseProgramsUsingGET($max_return = null, $offset = null, $filter_type = null, $earliest_updated_at = null, $latest_updated_at = null)
    {
        list($response) = $this->browseProgramsUsingGETWithHttpInfo($max_return, $offset, $filter_type, $earliest_updated_at, $latest_updated_at);
        return $response;
    }

    /**
     * Operation browseProgramsUsingGETWithHttpInfo
     *
     * Get Programs
     *
     * @param  int $max_return Maximum number of channels to return.  Max 200, default 20 (optional)
     * @param  int $offset Integer offset for paging (optional)
     * @param  string $filter_type Optional filter.  Requires filterValues (optional)
     * @param  string $earliest_updated_at Exclude programs prior to this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description. (optional)
     * @param  string $latest_updated_at Exclude programs after this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description. (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfBrowseAllPrograms, HTTP status code, HTTP response headers (array of strings)
     */
    public function browseProgramsUsingGETWithHttpInfo($max_return = null, $offset = null, $filter_type = null, $earliest_updated_at = null, $latest_updated_at = null)
    {
        $request = $this->browseProgramsUsingGETRequest($max_return, $offset, $filter_type, $earliest_updated_at, $latest_updated_at);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfBrowseAllPrograms');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfBrowseAllPrograms');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Asset\Model\ResponseOfBrowseAllPrograms',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation browseProgramsUsingGETAsync
     *
     * Get Programs
     *
     * @param  int $max_return Maximum number of channels to return.  Max 200, default 20 (optional)
     * @param  int $offset Integer offset for paging (optional)
     * @param  string $filter_type Optional filter.  Requires filterValues (optional)
     * @param  string $earliest_updated_at Exclude programs prior to this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description. (optional)
     * @param  string $latest_updated_at Exclude programs after this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function browseProgramsUsingGETAsync($max_return = null, $offset = null, $filter_type = null, $earliest_updated_at = null, $latest_updated_at = null)
    {
        return $this->browseProgramsUsingGETAsyncWithHttpInfo($max_return, $offset, $filter_type, $earliest_updated_at, $latest_updated_at)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation browseProgramsUsingGETAsyncWithHttpInfo
     *
     * Get Programs
     *
     * @param  int $max_return Maximum number of channels to return.  Max 200, default 20 (optional)
     * @param  int $offset Integer offset for paging (optional)
     * @param  string $filter_type Optional filter.  Requires filterValues (optional)
     * @param  string $earliest_updated_at Exclude programs prior to this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description. (optional)
     * @param  string $latest_updated_at Exclude programs after this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function browseProgramsUsingGETAsyncWithHttpInfo($max_return = null, $offset = null, $filter_type = null, $earliest_updated_at = null, $latest_updated_at = null)
    {
        $request = $this->browseProgramsUsingGETRequest($max_return, $offset, $filter_type, $earliest_updated_at, $latest_updated_at);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfBrowseAllPrograms');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'browseProgramsUsingGET'
     *
     * @param  int $max_return Maximum number of channels to return.  Max 200, default 20 (optional)
     * @param  int $offset Integer offset for paging (optional)
     * @param  string $filter_type Optional filter.  Requires filterValues (optional)
     * @param  string $earliest_updated_at Exclude programs prior to this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description. (optional)
     * @param  string $latest_updated_at Exclude programs after this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function browseProgramsUsingGETRequest($max_return = null, $offset = null, $filter_type = null, $earliest_updated_at = null, $latest_updated_at = null)
    {

        $resourcePath = '/rest/asset/v1/programs.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Query parameters.
        $queryParams['maxReturn'] = $max_return;
        $queryParams['offset'] = $offset;
        $queryParams['filterType'] = $filter_type;
        $queryParams['earliestUpdatedAt'] = $earliest_updated_at;
        $queryParams['latestUpdatedAt'] = $latest_updated_at;
        // Remove any null (optional values).
        $queryParams = array_filter($queryParams, function($v) { return $v !== null; });
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cloneProgramUsingPOST
     *
     * Clone Program
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\CloneProgramRequest $clone_program_request cloneProgramRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse
     */
    public function cloneProgramUsingPOST($id, $clone_program_request)
    {
        list($response) = $this->cloneProgramUsingPOSTWithHttpInfo($id, $clone_program_request);
        return $response;
    }

    /**
     * Operation cloneProgramUsingPOSTWithHttpInfo
     *
     * Clone Program
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\CloneProgramRequest $clone_program_request cloneProgramRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cloneProgramUsingPOSTWithHttpInfo($id, $clone_program_request)
    {
        $request = $this->cloneProgramUsingPOSTRequest($id, $clone_program_request);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cloneProgramUsingPOSTAsync
     *
     * Clone Program
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\CloneProgramRequest $clone_program_request cloneProgramRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cloneProgramUsingPOSTAsync($id, $clone_program_request)
    {
        return $this->cloneProgramUsingPOSTAsyncWithHttpInfo($id, $clone_program_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cloneProgramUsingPOSTAsyncWithHttpInfo
     *
     * Clone Program
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\CloneProgramRequest $clone_program_request cloneProgramRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cloneProgramUsingPOSTAsyncWithHttpInfo($id, $clone_program_request)
    {
        $request = $this->cloneProgramUsingPOSTRequest($id, $clone_program_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'cloneProgramUsingPOST'
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\CloneProgramRequest $clone_program_request cloneProgramRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function cloneProgramUsingPOSTRequest($id, $clone_program_request)
    {
        // Verify the required parameter 'id' is set.
        if ($id === null || (is_array($id) && empty($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling cloneProgramUsingPOST'
            );
        }
        // Verify the required parameter 'clone_program_request' is set.
        if ($clone_program_request === null || (is_array($clone_program_request) && empty($clone_program_request))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $clone_program_request when calling cloneProgramUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/program/{id}/clone.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );
        if ($headers['Content-Type'] === 'application/json') {
          $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($clone_program_request));
        }
        else {
          $httpBody = (string) $clone_program_request;
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createProgramUsingPOST
     *
     * Create Program
     *
     * @param  \NecLimDul\MarketoRest\Asset\Model\CreateProgramRequest $create_program_request createProgramRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse
     */
    public function createProgramUsingPOST($create_program_request)
    {
        list($response) = $this->createProgramUsingPOSTWithHttpInfo($create_program_request);
        return $response;
    }

    /**
     * Operation createProgramUsingPOSTWithHttpInfo
     *
     * Create Program
     *
     * @param  \NecLimDul\MarketoRest\Asset\Model\CreateProgramRequest $create_program_request createProgramRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createProgramUsingPOSTWithHttpInfo($create_program_request)
    {
        $request = $this->createProgramUsingPOSTRequest($create_program_request);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createProgramUsingPOSTAsync
     *
     * Create Program
     *
     * @param  \NecLimDul\MarketoRest\Asset\Model\CreateProgramRequest $create_program_request createProgramRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createProgramUsingPOSTAsync($create_program_request)
    {
        return $this->createProgramUsingPOSTAsyncWithHttpInfo($create_program_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createProgramUsingPOSTAsyncWithHttpInfo
     *
     * Create Program
     *
     * @param  \NecLimDul\MarketoRest\Asset\Model\CreateProgramRequest $create_program_request createProgramRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createProgramUsingPOSTAsyncWithHttpInfo($create_program_request)
    {
        $request = $this->createProgramUsingPOSTRequest($create_program_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'createProgramUsingPOST'
     *
     * @param  \NecLimDul\MarketoRest\Asset\Model\CreateProgramRequest $create_program_request createProgramRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createProgramUsingPOSTRequest($create_program_request)
    {
        // Verify the required parameter 'create_program_request' is set.
        if ($create_program_request === null || (is_array($create_program_request) && empty($create_program_request))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_program_request when calling createProgramUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/programs.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );
        if ($headers['Content-Type'] === 'application/json') {
          $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($create_program_request));
        }
        else {
          $httpBody = (string) $create_program_request;
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteProgramTagUsingPOST
     *
     * Delete Program Tag
     *
     * @param  int $id id (required)
     * @param  string $tag_type Type of program tag (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse
     */
    public function deleteProgramTagUsingPOST($id, $tag_type)
    {
        list($response) = $this->deleteProgramTagUsingPOSTWithHttpInfo($id, $tag_type);
        return $response;
    }

    /**
     * Operation deleteProgramTagUsingPOSTWithHttpInfo
     *
     * Delete Program Tag
     *
     * @param  int $id id (required)
     * @param  string $tag_type Type of program tag (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteProgramTagUsingPOSTWithHttpInfo($id, $tag_type)
    {
        $request = $this->deleteProgramTagUsingPOSTRequest($id, $tag_type);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteProgramTagUsingPOSTAsync
     *
     * Delete Program Tag
     *
     * @param  int $id id (required)
     * @param  string $tag_type Type of program tag (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteProgramTagUsingPOSTAsync($id, $tag_type)
    {
        return $this->deleteProgramTagUsingPOSTAsyncWithHttpInfo($id, $tag_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteProgramTagUsingPOSTAsyncWithHttpInfo
     *
     * Delete Program Tag
     *
     * @param  int $id id (required)
     * @param  string $tag_type Type of program tag (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteProgramTagUsingPOSTAsyncWithHttpInfo($id, $tag_type)
    {
        $request = $this->deleteProgramTagUsingPOSTRequest($id, $tag_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteProgramTagUsingPOST'
     *
     * @param  int $id id (required)
     * @param  string $tag_type Type of program tag (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteProgramTagUsingPOSTRequest($id, $tag_type)
    {
        // Verify the required parameter 'id' is set.
        if ($id === null || (is_array($id) && empty($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteProgramTagUsingPOST'
            );
        }
        // Verify the required parameter 'tag_type' is set.
        if ($tag_type === null || (is_array($tag_type) && empty($tag_type))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tag_type when calling deleteProgramTagUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/program/{id}/tag/{tagType}/delete.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $resourcePath = str_replace(
            '{' . 'tagType' . '}',
            ObjectSerializer::toPathValue($tag_type),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteProgramUsingPOST
     *
     * Delete Program
     *
     * @param  int $id id (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse
     */
    public function deleteProgramUsingPOST($id)
    {
        list($response) = $this->deleteProgramUsingPOSTWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation deleteProgramUsingPOSTWithHttpInfo
     *
     * Delete Program
     *
     * @param  int $id id (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteProgramUsingPOSTWithHttpInfo($id)
    {
        $request = $this->deleteProgramUsingPOSTRequest($id);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteProgramUsingPOSTAsync
     *
     * Delete Program
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteProgramUsingPOSTAsync($id)
    {
        return $this->deleteProgramUsingPOSTAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteProgramUsingPOSTAsyncWithHttpInfo
     *
     * Delete Program
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteProgramUsingPOSTAsyncWithHttpInfo($id)
    {
        $request = $this->deleteProgramUsingPOSTRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteProgramUsingPOST'
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteProgramUsingPOSTRequest($id)
    {
        // Verify the required parameter 'id' is set.
        if ($id === null || (is_array($id) && empty($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteProgramUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/program/{id}/delete.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProgramByIdUsingGET
     *
     * Get Program by Id
     *
     * @param  int $id id (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse
     */
    public function getProgramByIdUsingGET($id)
    {
        list($response) = $this->getProgramByIdUsingGETWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getProgramByIdUsingGETWithHttpInfo
     *
     * Get Program by Id
     *
     * @param  int $id id (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProgramByIdUsingGETWithHttpInfo($id)
    {
        $request = $this->getProgramByIdUsingGETRequest($id);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProgramByIdUsingGETAsync
     *
     * Get Program by Id
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProgramByIdUsingGETAsync($id)
    {
        return $this->getProgramByIdUsingGETAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProgramByIdUsingGETAsyncWithHttpInfo
     *
     * Get Program by Id
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProgramByIdUsingGETAsyncWithHttpInfo($id)
    {
        $request = $this->getProgramByIdUsingGETRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProgramByIdUsingGET'
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getProgramByIdUsingGETRequest($id)
    {
        // Verify the required parameter 'id' is set.
        if ($id === null || (is_array($id) && empty($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getProgramByIdUsingGET'
            );
        }

        $resourcePath = '/rest/asset/v1/program/{id}.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProgramByNameUsingGET
     *
     * Get Program by Name
     *
     * @param  string $name Name of the program (required)
     * @param  bool $include_tags Set true to populate program tags (optional)
     * @param  bool $include_costs Set true to populate program costs (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse
     */
    public function getProgramByNameUsingGET($name, $include_tags = null, $include_costs = null)
    {
        list($response) = $this->getProgramByNameUsingGETWithHttpInfo($name, $include_tags, $include_costs);
        return $response;
    }

    /**
     * Operation getProgramByNameUsingGETWithHttpInfo
     *
     * Get Program by Name
     *
     * @param  string $name Name of the program (required)
     * @param  bool $include_tags Set true to populate program tags (optional)
     * @param  bool $include_costs Set true to populate program costs (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProgramByNameUsingGETWithHttpInfo($name, $include_tags = null, $include_costs = null)
    {
        $request = $this->getProgramByNameUsingGETRequest($name, $include_tags, $include_costs);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProgramByNameUsingGETAsync
     *
     * Get Program by Name
     *
     * @param  string $name Name of the program (required)
     * @param  bool $include_tags Set true to populate program tags (optional)
     * @param  bool $include_costs Set true to populate program costs (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProgramByNameUsingGETAsync($name, $include_tags = null, $include_costs = null)
    {
        return $this->getProgramByNameUsingGETAsyncWithHttpInfo($name, $include_tags, $include_costs)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProgramByNameUsingGETAsyncWithHttpInfo
     *
     * Get Program by Name
     *
     * @param  string $name Name of the program (required)
     * @param  bool $include_tags Set true to populate program tags (optional)
     * @param  bool $include_costs Set true to populate program costs (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProgramByNameUsingGETAsyncWithHttpInfo($name, $include_tags = null, $include_costs = null)
    {
        $request = $this->getProgramByNameUsingGETRequest($name, $include_tags, $include_costs);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProgramByNameUsingGET'
     *
     * @param  string $name Name of the program (required)
     * @param  bool $include_tags Set true to populate program tags (optional)
     * @param  bool $include_costs Set true to populate program costs (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getProgramByNameUsingGETRequest($name, $include_tags = null, $include_costs = null)
    {
        // Verify the required parameter 'name' is set.
        if ($name === null || (is_array($name) && empty($name))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling getProgramByNameUsingGET'
            );
        }

        $resourcePath = '/rest/asset/v1/program/byName.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Query parameters.
        $queryParams['name'] = $name;
        $queryParams['includeTags'] = $include_tags;
        $queryParams['includeCosts'] = $include_costs;
        // Remove any null (optional values).
        $queryParams = array_filter($queryParams, function($v) { return $v !== null; });
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProgramListByTagUsingGET
     *
     * Get Programs by Tag
     *
     * @param  string $tag_type Type of program tag (required)
     * @param  string $tag_value Value of the tag (required)
     * @param  int $max_return Maximum number of channels to return.  Max 200, default 20 (optional)
     * @param  int $offset Integer offset for paging (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse
     */
    public function getProgramListByTagUsingGET($tag_type, $tag_value, $max_return = null, $offset = null)
    {
        list($response) = $this->getProgramListByTagUsingGETWithHttpInfo($tag_type, $tag_value, $max_return, $offset);
        return $response;
    }

    /**
     * Operation getProgramListByTagUsingGETWithHttpInfo
     *
     * Get Programs by Tag
     *
     * @param  string $tag_type Type of program tag (required)
     * @param  string $tag_value Value of the tag (required)
     * @param  int $max_return Maximum number of channels to return.  Max 200, default 20 (optional)
     * @param  int $offset Integer offset for paging (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProgramListByTagUsingGETWithHttpInfo($tag_type, $tag_value, $max_return = null, $offset = null)
    {
        $request = $this->getProgramListByTagUsingGETRequest($tag_type, $tag_value, $max_return, $offset);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProgramListByTagUsingGETAsync
     *
     * Get Programs by Tag
     *
     * @param  string $tag_type Type of program tag (required)
     * @param  string $tag_value Value of the tag (required)
     * @param  int $max_return Maximum number of channels to return.  Max 200, default 20 (optional)
     * @param  int $offset Integer offset for paging (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProgramListByTagUsingGETAsync($tag_type, $tag_value, $max_return = null, $offset = null)
    {
        return $this->getProgramListByTagUsingGETAsyncWithHttpInfo($tag_type, $tag_value, $max_return, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProgramListByTagUsingGETAsyncWithHttpInfo
     *
     * Get Programs by Tag
     *
     * @param  string $tag_type Type of program tag (required)
     * @param  string $tag_value Value of the tag (required)
     * @param  int $max_return Maximum number of channels to return.  Max 200, default 20 (optional)
     * @param  int $offset Integer offset for paging (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProgramListByTagUsingGETAsyncWithHttpInfo($tag_type, $tag_value, $max_return = null, $offset = null)
    {
        $request = $this->getProgramListByTagUsingGETRequest($tag_type, $tag_value, $max_return, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProgramListByTagUsingGET'
     *
     * @param  string $tag_type Type of program tag (required)
     * @param  string $tag_value Value of the tag (required)
     * @param  int $max_return Maximum number of channels to return.  Max 200, default 20 (optional)
     * @param  int $offset Integer offset for paging (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getProgramListByTagUsingGETRequest($tag_type, $tag_value, $max_return = null, $offset = null)
    {
        // Verify the required parameter 'tag_type' is set.
        if ($tag_type === null || (is_array($tag_type) && empty($tag_type))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tag_type when calling getProgramListByTagUsingGET'
            );
        }
        // Verify the required parameter 'tag_value' is set.
        if ($tag_value === null || (is_array($tag_value) && empty($tag_value))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tag_value when calling getProgramListByTagUsingGET'
            );
        }

        $resourcePath = '/rest/asset/v1/program/byTag.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Query parameters.
        $queryParams['tagType'] = $tag_type;
        $queryParams['tagValue'] = $tag_value;
        $queryParams['maxReturn'] = $max_return;
        $queryParams['offset'] = $offset;
        // Remove any null (optional values).
        $queryParams = array_filter($queryParams, function($v) { return $v !== null; });
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSmartListByProgramIdUsingGET
     *
     * Get Smart List by Program Id
     *
     * @param  int $program_id Id for the email program containing smart list to retrieve (required)
     * @param  bool $include_rules Set true to populate smart list rules.  Default false (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartListResponseWithRules
     */
    public function getSmartListByProgramIdUsingGET($program_id, $include_rules = null)
    {
        list($response) = $this->getSmartListByProgramIdUsingGETWithHttpInfo($program_id, $include_rules);
        return $response;
    }

    /**
     * Operation getSmartListByProgramIdUsingGETWithHttpInfo
     *
     * Get Smart List by Program Id
     *
     * @param  int $program_id Id for the email program containing smart list to retrieve (required)
     * @param  bool $include_rules Set true to populate smart list rules.  Default false (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartListResponseWithRules, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSmartListByProgramIdUsingGETWithHttpInfo($program_id, $include_rules = null)
    {
        $request = $this->getSmartListByProgramIdUsingGETRequest($program_id, $include_rules);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartListResponseWithRules');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartListResponseWithRules');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartListResponseWithRules',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSmartListByProgramIdUsingGETAsync
     *
     * Get Smart List by Program Id
     *
     * @param  int $program_id Id for the email program containing smart list to retrieve (required)
     * @param  bool $include_rules Set true to populate smart list rules.  Default false (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSmartListByProgramIdUsingGETAsync($program_id, $include_rules = null)
    {
        return $this->getSmartListByProgramIdUsingGETAsyncWithHttpInfo($program_id, $include_rules)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSmartListByProgramIdUsingGETAsyncWithHttpInfo
     *
     * Get Smart List by Program Id
     *
     * @param  int $program_id Id for the email program containing smart list to retrieve (required)
     * @param  bool $include_rules Set true to populate smart list rules.  Default false (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSmartListByProgramIdUsingGETAsyncWithHttpInfo($program_id, $include_rules = null)
    {
        $request = $this->getSmartListByProgramIdUsingGETRequest($program_id, $include_rules);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartListResponseWithRules');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSmartListByProgramIdUsingGET'
     *
     * @param  int $program_id Id for the email program containing smart list to retrieve (required)
     * @param  bool $include_rules Set true to populate smart list rules.  Default false (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSmartListByProgramIdUsingGETRequest($program_id, $include_rules = null)
    {
        // Verify the required parameter 'program_id' is set.
        if ($program_id === null || (is_array($program_id) && empty($program_id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $program_id when calling getSmartListByProgramIdUsingGET'
            );
        }

        $resourcePath = '/rest/asset/v1/program/{programId}/smartList.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Query parameters.
        $queryParams['includeRules'] = $include_rules;
        // Remove any null (optional values).
        $queryParams = array_filter($queryParams, function($v) { return $v !== null; });

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'programId' . '}',
            ObjectSerializer::toPathValue($program_id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation unapproveProgramUsingPOST
     *
     * Unapprove Program
     *
     * @param  int $id id (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse
     */
    public function unapproveProgramUsingPOST($id)
    {
        list($response) = $this->unapproveProgramUsingPOSTWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation unapproveProgramUsingPOSTWithHttpInfo
     *
     * Unapprove Program
     *
     * @param  int $id id (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function unapproveProgramUsingPOSTWithHttpInfo($id)
    {
        $request = $this->unapproveProgramUsingPOSTRequest($id);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation unapproveProgramUsingPOSTAsync
     *
     * Unapprove Program
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function unapproveProgramUsingPOSTAsync($id)
    {
        return $this->unapproveProgramUsingPOSTAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation unapproveProgramUsingPOSTAsyncWithHttpInfo
     *
     * Unapprove Program
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function unapproveProgramUsingPOSTAsyncWithHttpInfo($id)
    {
        $request = $this->unapproveProgramUsingPOSTRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'unapproveProgramUsingPOST'
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function unapproveProgramUsingPOSTRequest($id)
    {
        // Verify the required parameter 'id' is set.
        if ($id === null || (is_array($id) && empty($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling unapproveProgramUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/program/{id}/unapprove.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateProgramTagUsingPOST
     *
     * Update Program Tag
     *
     * @param  int $id id (required)
     * @param  string $tag_type Type of program tag (required)
     * @param  string $tag_value Value of program tag (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse
     */
    public function updateProgramTagUsingPOST($id, $tag_type, $tag_value)
    {
        list($response) = $this->updateProgramTagUsingPOSTWithHttpInfo($id, $tag_type, $tag_value);
        return $response;
    }

    /**
     * Operation updateProgramTagUsingPOSTWithHttpInfo
     *
     * Update Program Tag
     *
     * @param  int $id id (required)
     * @param  string $tag_type Type of program tag (required)
     * @param  string $tag_value Value of program tag (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateProgramTagUsingPOSTWithHttpInfo($id, $tag_type, $tag_value)
    {
        $request = $this->updateProgramTagUsingPOSTRequest($id, $tag_type, $tag_value);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateProgramTagUsingPOSTAsync
     *
     * Update Program Tag
     *
     * @param  int $id id (required)
     * @param  string $tag_type Type of program tag (required)
     * @param  string $tag_value Value of program tag (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateProgramTagUsingPOSTAsync($id, $tag_type, $tag_value)
    {
        return $this->updateProgramTagUsingPOSTAsyncWithHttpInfo($id, $tag_type, $tag_value)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateProgramTagUsingPOSTAsyncWithHttpInfo
     *
     * Update Program Tag
     *
     * @param  int $id id (required)
     * @param  string $tag_type Type of program tag (required)
     * @param  string $tag_value Value of program tag (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateProgramTagUsingPOSTAsyncWithHttpInfo($id, $tag_type, $tag_value)
    {
        $request = $this->updateProgramTagUsingPOSTRequest($id, $tag_type, $tag_value);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateProgramTagUsingPOST'
     *
     * @param  int $id id (required)
     * @param  string $tag_type Type of program tag (required)
     * @param  string $tag_value Value of program tag (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateProgramTagUsingPOSTRequest($id, $tag_type, $tag_value)
    {
        // Verify the required parameter 'id' is set.
        if ($id === null || (is_array($id) && empty($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateProgramTagUsingPOST'
            );
        }
        // Verify the required parameter 'tag_type' is set.
        if ($tag_type === null || (is_array($tag_type) && empty($tag_type))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tag_type when calling updateProgramTagUsingPOST'
            );
        }
        // Verify the required parameter 'tag_value' is set.
        if ($tag_value === null || (is_array($tag_value) && empty($tag_value))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tag_value when calling updateProgramTagUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/program/{id}/tag/{tagType}.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Query parameters.
        $queryParams['tagValue'] = $tag_value;
        // Remove any null (optional values).
        $queryParams = array_filter($queryParams, function($v) { return $v !== null; });

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $resourcePath = str_replace(
            '{' . 'tagType' . '}',
            ObjectSerializer::toPathValue($tag_type),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateProgramUsingPOST
     *
     * Update Program Metadata
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\UpdateProgramRequest $update_program_request updateProgramRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse
     */
    public function updateProgramUsingPOST($id, $update_program_request)
    {
        list($response) = $this->updateProgramUsingPOSTWithHttpInfo($id, $update_program_request);
        return $response;
    }

    /**
     * Operation updateProgramUsingPOSTWithHttpInfo
     *
     * Update Program Metadata
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\UpdateProgramRequest $update_program_request updateProgramRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateProgramUsingPOSTWithHttpInfo($id, $update_program_request)
    {
        $request = $this->updateProgramUsingPOSTRequest($id, $update_program_request);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateProgramUsingPOSTAsync
     *
     * Update Program Metadata
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\UpdateProgramRequest $update_program_request updateProgramRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateProgramUsingPOSTAsync($id, $update_program_request)
    {
        return $this->updateProgramUsingPOSTAsyncWithHttpInfo($id, $update_program_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateProgramUsingPOSTAsyncWithHttpInfo
     *
     * Update Program Metadata
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\UpdateProgramRequest $update_program_request updateProgramRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateProgramUsingPOSTAsyncWithHttpInfo($id, $update_program_request)
    {
        $request = $this->updateProgramUsingPOSTRequest($id, $update_program_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateProgramUsingPOST'
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\UpdateProgramRequest $update_program_request updateProgramRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateProgramUsingPOSTRequest($id, $update_program_request)
    {
        // Verify the required parameter 'id' is set.
        if ($id === null || (is_array($id) && empty($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateProgramUsingPOST'
            );
        }
        // Verify the required parameter 'update_program_request' is set.
        if ($update_program_request === null || (is_array($update_program_request) && empty($update_program_request))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_program_request when calling updateProgramUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/program/{id}.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );
        if ($headers['Content-Type'] === 'application/json') {
          $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($update_program_request));
        }
        else {
          $httpBody = (string) $update_program_request;
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    /**
     * Make a request.
     *
     * @param \GuzzleHttp\Psr7\Request $request
     *   An initialized request object.
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @return \Psr\Http\Message\ResponseInterface
     */
    protected function makeRequest(Request $request) {
        $options = $this->createHttpClientOption();
        try {
           $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            $response = $e->getResponse();
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                (int) $e->getCode(),
                $response ? $response->getHeaders() : null,
                $response ? (string) $response->getBody() : null
            );
        }

        $statusCode = $response->getStatusCode();
        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    (string) $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                (string) $response->getBody()
            );
        }
        return $response;
    }

    /**
     * Convert a response to a return standard return array.
     *
     * @param \Psr\Http\Message\ResponseInterface $response
     *   A response from a request with a serialized body.
     * @param string $returnType
     *   The return type.
     *
     * @return array
     */
    protected function responseToReturn(ResponseInterface $response, string $returnType) {
        return [
            $this->deserializeResponseBody($response->getBody(), $returnType),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    /**
     * Deserialize a response body.
     *
     * @param mixed $responseBody
     *   The response body.
     * @param string $returnType
     *   The return type.
     * @param array|null $headers
     *   The a list of headers from the response.
     * @return mixed
     *   Either a string or a stream to be passed to a file object.
     */
    protected function deserializeResponseBody($responseBody, $returnType, $headers = [])
    {
        return ObjectSerializer::deserialize(
            $returnType === '\SplFileObject' ? $responseBody : (string) $responseBody,
            $returnType,
            $headers
        );
    }

}
