<?php

/**
 * ProgramsApi
 *
 * Marketo Rest API
 *
 * Marketo Rest API
 *
 * OpenAPI spec version: 1.0
 * Contact: developerfeedback@marketo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.26
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Asset
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace NecLimDul\MarketoRest\Asset\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\Promise\PromiseInterface;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\ResponseInterface;
use NecLimDul\MarketoRest\Asset\ApiException;
use NecLimDul\MarketoRest\Asset\Configuration;
use NecLimDul\MarketoRest\Asset\HeaderSelector;
use NecLimDul\MarketoRest\Asset\ObjectSerializer;

/**
 * ProgramsApi Class Doc Comment
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Asset
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProgramsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the spec.
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Exception handler for approveProgramUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function approveProgramUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Approve Program
     *
     * @param int $id
     *   id
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse
     */
    public function approveProgramUsingPOST(
        int $id
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse {
        list($response) = $this->approveProgramUsingPOSTWithHttpInfo($id);
        return $response;
    }

    /**
     * Approve Program
     *
     * @param int $id
     *   id
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function approveProgramUsingPOSTWithHttpInfo(
        int $id
    ): array {
        $request = $this->approveProgramUsingPOSTRequest($id);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class
            );
        } catch (ApiException $e) {
            throw $this->approveProgramUsingPOSTHandleException($e);
        }
    }

    /**
     * Approve Program
     *
     * @param int $id
     *   id
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function approveProgramUsingPOSTAsync(
        int $id
    ): PromiseInterface {
        return $this->approveProgramUsingPOSTAsyncWithHttpInfo($id)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Approve Program
     *
     * @param int $id
     *   id
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function approveProgramUsingPOSTAsyncWithHttpInfo(
        int $id
    ): PromiseInterface {
        $request = $this->approveProgramUsingPOSTRequest($id);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class,
            [$this, 'approveProgramUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'approveProgramUsingPOST'
     *
     * @param int $id
     *   id
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function approveProgramUsingPOSTRequest(
        int $id
    ): Request {

        $resourcePath = '/rest/asset/v1/program/{id}/approve.json';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for browseProgramsUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function browseProgramsUsingGETHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfBrowseAllPrograms::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Programs
     *
     * @param int|null $max_return
     *   Maximum number of channels to return.  Max 200, default 20
     * @param int|null $offset
     *   Integer offset for paging
     * @param string|null $filter_type
     *   Optional filter.  Requires filterValues
     * @param string|null $earliest_updated_at
     *   Exclude programs prior to this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description.
     * @param string|null $latest_updated_at
     *   Exclude programs after this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description.
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfBrowseAllPrograms
     */
    public function browseProgramsUsingGET(
        int $max_return = null,
        int $offset = null,
        string $filter_type = null,
        string $earliest_updated_at = null,
        string $latest_updated_at = null
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfBrowseAllPrograms {
        list($response) = $this->browseProgramsUsingGETWithHttpInfo($max_return, $offset, $filter_type, $earliest_updated_at, $latest_updated_at);
        return $response;
    }

    /**
     * Get Programs
     *
     * @param int|null $max_return
     *   Maximum number of channels to return.  Max 200, default 20
     * @param int|null $offset
     *   Integer offset for paging
     * @param string|null $filter_type
     *   Optional filter.  Requires filterValues
     * @param string|null $earliest_updated_at
     *   Exclude programs prior to this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description.
     * @param string|null $latest_updated_at
     *   Exclude programs after this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description.
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfBrowseAllPrograms,
     *     int,
     *     array<array<string>>
     * }
     */
    public function browseProgramsUsingGETWithHttpInfo(
        int $max_return = null,
        int $offset = null,
        string $filter_type = null,
        string $earliest_updated_at = null,
        string $latest_updated_at = null
    ): array {
        $request = $this->browseProgramsUsingGETRequest($max_return, $offset, $filter_type, $earliest_updated_at, $latest_updated_at);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfBrowseAllPrograms::class
            );
        } catch (ApiException $e) {
            throw $this->browseProgramsUsingGETHandleException($e);
        }
    }

    /**
     * Get Programs
     *
     * @param int|null $max_return
     *   Maximum number of channels to return.  Max 200, default 20
     * @param int|null $offset
     *   Integer offset for paging
     * @param string|null $filter_type
     *   Optional filter.  Requires filterValues
     * @param string|null $earliest_updated_at
     *   Exclude programs prior to this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description.
     * @param string|null $latest_updated_at
     *   Exclude programs after this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function browseProgramsUsingGETAsync(
        int $max_return = null,
        int $offset = null,
        string $filter_type = null,
        string $earliest_updated_at = null,
        string $latest_updated_at = null
    ): PromiseInterface {
        return $this->browseProgramsUsingGETAsyncWithHttpInfo($max_return, $offset, $filter_type, $earliest_updated_at, $latest_updated_at)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfBrowseAllPrograms {
                    return $response[0];
                }
            );
    }

    /**
     * Get Programs
     *
     * @param int|null $max_return
     *   Maximum number of channels to return.  Max 200, default 20
     * @param int|null $offset
     *   Integer offset for paging
     * @param string|null $filter_type
     *   Optional filter.  Requires filterValues
     * @param string|null $earliest_updated_at
     *   Exclude programs prior to this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description.
     * @param string|null $latest_updated_at
     *   Exclude programs after this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function browseProgramsUsingGETAsyncWithHttpInfo(
        int $max_return = null,
        int $offset = null,
        string $filter_type = null,
        string $earliest_updated_at = null,
        string $latest_updated_at = null
    ): PromiseInterface {
        $request = $this->browseProgramsUsingGETRequest($max_return, $offset, $filter_type, $earliest_updated_at, $latest_updated_at);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfBrowseAllPrograms::class,
            [$this, 'browseProgramsUsingGETHandleException']
        );
    }

    /**
     * Create request for operation 'browseProgramsUsingGET'
     *
     * @param int|null $max_return
     *   Maximum number of channels to return.  Max 200, default 20
     * @param int|null $offset
     *   Integer offset for paging
     * @param string|null $filter_type
     *   Optional filter.  Requires filterValues
     * @param string|null $earliest_updated_at
     *   Exclude programs prior to this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description.
     * @param string|null $latest_updated_at
     *   Exclude programs after this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function browseProgramsUsingGETRequest(
        int $max_return = null,
        int $offset = null,
        string $filter_type = null,
        string $earliest_updated_at = null,
        string $latest_updated_at = null
    ): Request {

        $resourcePath = '/rest/asset/v1/programs.json';

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'GET',
            $operationHost . $resourcePath,
            // Query.
            [
                'maxReturn' => ObjectSerializer::toQueryValue($max_return),
                'offset' => ObjectSerializer::toQueryValue($offset),
                'filterType' => ObjectSerializer::toQueryValue($filter_type),
                'earliestUpdatedAt' => ObjectSerializer::toQueryValue($earliest_updated_at),
                'latestUpdatedAt' => ObjectSerializer::toQueryValue($latest_updated_at),
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for cloneProgramUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function cloneProgramUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Clone Program
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\CloneProgramRequest $clone_program_request
     *   cloneProgramRequest
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse
     */
    public function cloneProgramUsingPOST(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\CloneProgramRequest $clone_program_request
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse {
        list($response) = $this->cloneProgramUsingPOSTWithHttpInfo($id, $clone_program_request);
        return $response;
    }

    /**
     * Clone Program
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\CloneProgramRequest $clone_program_request
     *   cloneProgramRequest
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function cloneProgramUsingPOSTWithHttpInfo(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\CloneProgramRequest $clone_program_request
    ): array {
        $request = $this->cloneProgramUsingPOSTRequest($id, $clone_program_request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse::class
            );
        } catch (ApiException $e) {
            throw $this->cloneProgramUsingPOSTHandleException($e);
        }
    }

    /**
     * Clone Program
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\CloneProgramRequest $clone_program_request
     *   cloneProgramRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cloneProgramUsingPOSTAsync(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\CloneProgramRequest $clone_program_request
    ): PromiseInterface {
        return $this->cloneProgramUsingPOSTAsyncWithHttpInfo($id, $clone_program_request)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Clone Program
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\CloneProgramRequest $clone_program_request
     *   cloneProgramRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cloneProgramUsingPOSTAsyncWithHttpInfo(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\CloneProgramRequest $clone_program_request
    ): PromiseInterface {
        $request = $this->cloneProgramUsingPOSTRequest($id, $clone_program_request);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse::class,
            [$this, 'cloneProgramUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'cloneProgramUsingPOST'
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\CloneProgramRequest $clone_program_request
     *   cloneProgramRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function cloneProgramUsingPOSTRequest(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\CloneProgramRequest $clone_program_request
    ): Request {

        $resourcePath = '/rest/asset/v1/program/{id}/clone.json';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            $clone_program_request
        );
    }

    /**
     * Exception handler for createProgramUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function createProgramUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Create Program
     *
     * @param \NecLimDul\MarketoRest\Asset\Model\CreateProgramRequest $create_program_request
     *   createProgramRequest
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse
     */
    public function createProgramUsingPOST(
        \NecLimDul\MarketoRest\Asset\Model\CreateProgramRequest $create_program_request
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse {
        list($response) = $this->createProgramUsingPOSTWithHttpInfo($create_program_request);
        return $response;
    }

    /**
     * Create Program
     *
     * @param \NecLimDul\MarketoRest\Asset\Model\CreateProgramRequest $create_program_request
     *   createProgramRequest
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function createProgramUsingPOSTWithHttpInfo(
        \NecLimDul\MarketoRest\Asset\Model\CreateProgramRequest $create_program_request
    ): array {
        $request = $this->createProgramUsingPOSTRequest($create_program_request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse::class
            );
        } catch (ApiException $e) {
            throw $this->createProgramUsingPOSTHandleException($e);
        }
    }

    /**
     * Create Program
     *
     * @param \NecLimDul\MarketoRest\Asset\Model\CreateProgramRequest $create_program_request
     *   createProgramRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createProgramUsingPOSTAsync(
        \NecLimDul\MarketoRest\Asset\Model\CreateProgramRequest $create_program_request
    ): PromiseInterface {
        return $this->createProgramUsingPOSTAsyncWithHttpInfo($create_program_request)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Create Program
     *
     * @param \NecLimDul\MarketoRest\Asset\Model\CreateProgramRequest $create_program_request
     *   createProgramRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createProgramUsingPOSTAsyncWithHttpInfo(
        \NecLimDul\MarketoRest\Asset\Model\CreateProgramRequest $create_program_request
    ): PromiseInterface {
        $request = $this->createProgramUsingPOSTRequest($create_program_request);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse::class,
            [$this, 'createProgramUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'createProgramUsingPOST'
     *
     * @param \NecLimDul\MarketoRest\Asset\Model\CreateProgramRequest $create_program_request
     *   createProgramRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createProgramUsingPOSTRequest(
        \NecLimDul\MarketoRest\Asset\Model\CreateProgramRequest $create_program_request
    ): Request {

        $resourcePath = '/rest/asset/v1/programs.json';

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            $create_program_request
        );
    }

    /**
     * Exception handler for deleteProgramTagUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function deleteProgramTagUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Delete Program Tag
     *
     * @param int $id
     *   id
     * @param string $tag_type
     *   Type of program tag
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse
     */
    public function deleteProgramTagUsingPOST(
        int $id,
        string $tag_type
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse {
        list($response) = $this->deleteProgramTagUsingPOSTWithHttpInfo($id, $tag_type);
        return $response;
    }

    /**
     * Delete Program Tag
     *
     * @param int $id
     *   id
     * @param string $tag_type
     *   Type of program tag
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function deleteProgramTagUsingPOSTWithHttpInfo(
        int $id,
        string $tag_type
    ): array {
        $request = $this->deleteProgramTagUsingPOSTRequest($id, $tag_type);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class
            );
        } catch (ApiException $e) {
            throw $this->deleteProgramTagUsingPOSTHandleException($e);
        }
    }

    /**
     * Delete Program Tag
     *
     * @param int $id
     *   id
     * @param string $tag_type
     *   Type of program tag
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteProgramTagUsingPOSTAsync(
        int $id,
        string $tag_type
    ): PromiseInterface {
        return $this->deleteProgramTagUsingPOSTAsyncWithHttpInfo($id, $tag_type)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Delete Program Tag
     *
     * @param int $id
     *   id
     * @param string $tag_type
     *   Type of program tag
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteProgramTagUsingPOSTAsyncWithHttpInfo(
        int $id,
        string $tag_type
    ): PromiseInterface {
        $request = $this->deleteProgramTagUsingPOSTRequest($id, $tag_type);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class,
            [$this, 'deleteProgramTagUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'deleteProgramTagUsingPOST'
     *
     * @param int $id
     *   id
     * @param string $tag_type
     *   Type of program tag
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteProgramTagUsingPOSTRequest(
        int $id,
        string $tag_type
    ): Request {

        $resourcePath = '/rest/asset/v1/program/{id}/tag/{tagType}/delete.json';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $resourcePath = str_replace(
            '{' . 'tagType' . '}',
            ObjectSerializer::toPathValue($tag_type),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for deleteProgramUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function deleteProgramUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Delete Program
     *
     * @param int $id
     *   id
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse
     */
    public function deleteProgramUsingPOST(
        int $id
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse {
        list($response) = $this->deleteProgramUsingPOSTWithHttpInfo($id);
        return $response;
    }

    /**
     * Delete Program
     *
     * @param int $id
     *   id
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function deleteProgramUsingPOSTWithHttpInfo(
        int $id
    ): array {
        $request = $this->deleteProgramUsingPOSTRequest($id);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class
            );
        } catch (ApiException $e) {
            throw $this->deleteProgramUsingPOSTHandleException($e);
        }
    }

    /**
     * Delete Program
     *
     * @param int $id
     *   id
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteProgramUsingPOSTAsync(
        int $id
    ): PromiseInterface {
        return $this->deleteProgramUsingPOSTAsyncWithHttpInfo($id)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Delete Program
     *
     * @param int $id
     *   id
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteProgramUsingPOSTAsyncWithHttpInfo(
        int $id
    ): PromiseInterface {
        $request = $this->deleteProgramUsingPOSTRequest($id);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class,
            [$this, 'deleteProgramUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'deleteProgramUsingPOST'
     *
     * @param int $id
     *   id
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteProgramUsingPOSTRequest(
        int $id
    ): Request {

        $resourcePath = '/rest/asset/v1/program/{id}/delete.json';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for getProgramByIdUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function getProgramByIdUsingGETHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Program by Id
     *
     * @param int $id
     *   id
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse
     */
    public function getProgramByIdUsingGET(
        int $id
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse {
        list($response) = $this->getProgramByIdUsingGETWithHttpInfo($id);
        return $response;
    }

    /**
     * Get Program by Id
     *
     * @param int $id
     *   id
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function getProgramByIdUsingGETWithHttpInfo(
        int $id
    ): array {
        $request = $this->getProgramByIdUsingGETRequest($id);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse::class
            );
        } catch (ApiException $e) {
            throw $this->getProgramByIdUsingGETHandleException($e);
        }
    }

    /**
     * Get Program by Id
     *
     * @param int $id
     *   id
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProgramByIdUsingGETAsync(
        int $id
    ): PromiseInterface {
        return $this->getProgramByIdUsingGETAsyncWithHttpInfo($id)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Get Program by Id
     *
     * @param int $id
     *   id
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProgramByIdUsingGETAsyncWithHttpInfo(
        int $id
    ): PromiseInterface {
        $request = $this->getProgramByIdUsingGETRequest($id);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse::class,
            [$this, 'getProgramByIdUsingGETHandleException']
        );
    }

    /**
     * Create request for operation 'getProgramByIdUsingGET'
     *
     * @param int $id
     *   id
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getProgramByIdUsingGETRequest(
        int $id
    ): Request {

        $resourcePath = '/rest/asset/v1/program/{id}.json';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'GET',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for getProgramByNameUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function getProgramByNameUsingGETHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Program by Name
     *
     * @param string $name
     *   Name of the program
     * @param bool|null $include_tags
     *   Set true to populate program tags
     * @param bool|null $include_costs
     *   Set true to populate program costs
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse
     */
    public function getProgramByNameUsingGET(
        string $name,
        bool $include_tags = null,
        bool $include_costs = null
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse {
        list($response) = $this->getProgramByNameUsingGETWithHttpInfo($name, $include_tags, $include_costs);
        return $response;
    }

    /**
     * Get Program by Name
     *
     * @param string $name
     *   Name of the program
     * @param bool|null $include_tags
     *   Set true to populate program tags
     * @param bool|null $include_costs
     *   Set true to populate program costs
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function getProgramByNameUsingGETWithHttpInfo(
        string $name,
        bool $include_tags = null,
        bool $include_costs = null
    ): array {
        $request = $this->getProgramByNameUsingGETRequest($name, $include_tags, $include_costs);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse::class
            );
        } catch (ApiException $e) {
            throw $this->getProgramByNameUsingGETHandleException($e);
        }
    }

    /**
     * Get Program by Name
     *
     * @param string $name
     *   Name of the program
     * @param bool|null $include_tags
     *   Set true to populate program tags
     * @param bool|null $include_costs
     *   Set true to populate program costs
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProgramByNameUsingGETAsync(
        string $name,
        bool $include_tags = null,
        bool $include_costs = null
    ): PromiseInterface {
        return $this->getProgramByNameUsingGETAsyncWithHttpInfo($name, $include_tags, $include_costs)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Get Program by Name
     *
     * @param string $name
     *   Name of the program
     * @param bool|null $include_tags
     *   Set true to populate program tags
     * @param bool|null $include_costs
     *   Set true to populate program costs
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProgramByNameUsingGETAsyncWithHttpInfo(
        string $name,
        bool $include_tags = null,
        bool $include_costs = null
    ): PromiseInterface {
        $request = $this->getProgramByNameUsingGETRequest($name, $include_tags, $include_costs);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse::class,
            [$this, 'getProgramByNameUsingGETHandleException']
        );
    }

    /**
     * Create request for operation 'getProgramByNameUsingGET'
     *
     * @param string $name
     *   Name of the program
     * @param bool|null $include_tags
     *   Set true to populate program tags
     * @param bool|null $include_costs
     *   Set true to populate program costs
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getProgramByNameUsingGETRequest(
        string $name,
        bool $include_tags = null,
        bool $include_costs = null
    ): Request {

        $resourcePath = '/rest/asset/v1/program/byName.json';

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'GET',
            $operationHost . $resourcePath,
            // Query.
            [
                'name' => ObjectSerializer::toQueryValue($name),
                'includeTags' => ObjectSerializer::toQueryValue($include_tags),
                'includeCosts' => ObjectSerializer::toQueryValue($include_costs),
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for getProgramListByTagUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function getProgramListByTagUsingGETHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Programs by Tag
     *
     * @param string $tag_type
     *   Type of program tag
     * @param string $tag_value
     *   Value of the tag
     * @param int|null $max_return
     *   Maximum number of channels to return.  Max 200, default 20
     * @param int|null $offset
     *   Integer offset for paging
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse
     */
    public function getProgramListByTagUsingGET(
        string $tag_type,
        string $tag_value,
        int $max_return = null,
        int $offset = null
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse {
        list($response) = $this->getProgramListByTagUsingGETWithHttpInfo($tag_type, $tag_value, $max_return, $offset);
        return $response;
    }

    /**
     * Get Programs by Tag
     *
     * @param string $tag_type
     *   Type of program tag
     * @param string $tag_value
     *   Value of the tag
     * @param int|null $max_return
     *   Maximum number of channels to return.  Max 200, default 20
     * @param int|null $offset
     *   Integer offset for paging
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function getProgramListByTagUsingGETWithHttpInfo(
        string $tag_type,
        string $tag_value,
        int $max_return = null,
        int $offset = null
    ): array {
        $request = $this->getProgramListByTagUsingGETRequest($tag_type, $tag_value, $max_return, $offset);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse::class
            );
        } catch (ApiException $e) {
            throw $this->getProgramListByTagUsingGETHandleException($e);
        }
    }

    /**
     * Get Programs by Tag
     *
     * @param string $tag_type
     *   Type of program tag
     * @param string $tag_value
     *   Value of the tag
     * @param int|null $max_return
     *   Maximum number of channels to return.  Max 200, default 20
     * @param int|null $offset
     *   Integer offset for paging
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProgramListByTagUsingGETAsync(
        string $tag_type,
        string $tag_value,
        int $max_return = null,
        int $offset = null
    ): PromiseInterface {
        return $this->getProgramListByTagUsingGETAsyncWithHttpInfo($tag_type, $tag_value, $max_return, $offset)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Get Programs by Tag
     *
     * @param string $tag_type
     *   Type of program tag
     * @param string $tag_value
     *   Value of the tag
     * @param int|null $max_return
     *   Maximum number of channels to return.  Max 200, default 20
     * @param int|null $offset
     *   Integer offset for paging
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProgramListByTagUsingGETAsyncWithHttpInfo(
        string $tag_type,
        string $tag_value,
        int $max_return = null,
        int $offset = null
    ): PromiseInterface {
        $request = $this->getProgramListByTagUsingGETRequest($tag_type, $tag_value, $max_return, $offset);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse::class,
            [$this, 'getProgramListByTagUsingGETHandleException']
        );
    }

    /**
     * Create request for operation 'getProgramListByTagUsingGET'
     *
     * @param string $tag_type
     *   Type of program tag
     * @param string $tag_value
     *   Value of the tag
     * @param int|null $max_return
     *   Maximum number of channels to return.  Max 200, default 20
     * @param int|null $offset
     *   Integer offset for paging
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getProgramListByTagUsingGETRequest(
        string $tag_type,
        string $tag_value,
        int $max_return = null,
        int $offset = null
    ): Request {

        $resourcePath = '/rest/asset/v1/program/byTag.json';

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'GET',
            $operationHost . $resourcePath,
            // Query.
            [
                'tagType' => ObjectSerializer::toQueryValue($tag_type),
                'tagValue' => ObjectSerializer::toQueryValue($tag_value),
                'maxReturn' => ObjectSerializer::toQueryValue($max_return),
                'offset' => ObjectSerializer::toQueryValue($offset),
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for getSmartListByProgramIdUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function getSmartListByProgramIdUsingGETHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartListResponseWithRules::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Smart List by Program Id
     *
     * @param int $program_id
     *   Id for the email program containing smart list to retrieve
     * @param bool|null $include_rules
     *   Set true to populate smart list rules.  Default false
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartListResponseWithRules
     */
    public function getSmartListByProgramIdUsingGET(
        int $program_id,
        bool $include_rules = null
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartListResponseWithRules {
        list($response) = $this->getSmartListByProgramIdUsingGETWithHttpInfo($program_id, $include_rules);
        return $response;
    }

    /**
     * Get Smart List by Program Id
     *
     * @param int $program_id
     *   Id for the email program containing smart list to retrieve
     * @param bool|null $include_rules
     *   Set true to populate smart list rules.  Default false
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartListResponseWithRules,
     *     int,
     *     array<array<string>>
     * }
     */
    public function getSmartListByProgramIdUsingGETWithHttpInfo(
        int $program_id,
        bool $include_rules = null
    ): array {
        $request = $this->getSmartListByProgramIdUsingGETRequest($program_id, $include_rules);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartListResponseWithRules::class
            );
        } catch (ApiException $e) {
            throw $this->getSmartListByProgramIdUsingGETHandleException($e);
        }
    }

    /**
     * Get Smart List by Program Id
     *
     * @param int $program_id
     *   Id for the email program containing smart list to retrieve
     * @param bool|null $include_rules
     *   Set true to populate smart list rules.  Default false
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSmartListByProgramIdUsingGETAsync(
        int $program_id,
        bool $include_rules = null
    ): PromiseInterface {
        return $this->getSmartListByProgramIdUsingGETAsyncWithHttpInfo($program_id, $include_rules)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartListResponseWithRules {
                    return $response[0];
                }
            );
    }

    /**
     * Get Smart List by Program Id
     *
     * @param int $program_id
     *   Id for the email program containing smart list to retrieve
     * @param bool|null $include_rules
     *   Set true to populate smart list rules.  Default false
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSmartListByProgramIdUsingGETAsyncWithHttpInfo(
        int $program_id,
        bool $include_rules = null
    ): PromiseInterface {
        $request = $this->getSmartListByProgramIdUsingGETRequest($program_id, $include_rules);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartListResponseWithRules::class,
            [$this, 'getSmartListByProgramIdUsingGETHandleException']
        );
    }

    /**
     * Create request for operation 'getSmartListByProgramIdUsingGET'
     *
     * @param int $program_id
     *   Id for the email program containing smart list to retrieve
     * @param bool|null $include_rules
     *   Set true to populate smart list rules.  Default false
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSmartListByProgramIdUsingGETRequest(
        int $program_id,
        bool $include_rules = null
    ): Request {

        $resourcePath = '/rest/asset/v1/program/{programId}/smartList.json';
        $resourcePath = str_replace(
            '{' . 'programId' . '}',
            ObjectSerializer::toPathValue($program_id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'GET',
            $operationHost . $resourcePath,
            // Query.
            [
                'includeRules' => ObjectSerializer::toQueryValue($include_rules),
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for unapproveProgramUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function unapproveProgramUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Unapprove Program
     *
     * @param int $id
     *   id
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse
     */
    public function unapproveProgramUsingPOST(
        int $id
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse {
        list($response) = $this->unapproveProgramUsingPOSTWithHttpInfo($id);
        return $response;
    }

    /**
     * Unapprove Program
     *
     * @param int $id
     *   id
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function unapproveProgramUsingPOSTWithHttpInfo(
        int $id
    ): array {
        $request = $this->unapproveProgramUsingPOSTRequest($id);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class
            );
        } catch (ApiException $e) {
            throw $this->unapproveProgramUsingPOSTHandleException($e);
        }
    }

    /**
     * Unapprove Program
     *
     * @param int $id
     *   id
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function unapproveProgramUsingPOSTAsync(
        int $id
    ): PromiseInterface {
        return $this->unapproveProgramUsingPOSTAsyncWithHttpInfo($id)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Unapprove Program
     *
     * @param int $id
     *   id
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function unapproveProgramUsingPOSTAsyncWithHttpInfo(
        int $id
    ): PromiseInterface {
        $request = $this->unapproveProgramUsingPOSTRequest($id);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class,
            [$this, 'unapproveProgramUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'unapproveProgramUsingPOST'
     *
     * @param int $id
     *   id
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function unapproveProgramUsingPOSTRequest(
        int $id
    ): Request {

        $resourcePath = '/rest/asset/v1/program/{id}/unapprove.json';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for updateProgramTagUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function updateProgramTagUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Update Program Tag
     *
     * @param int $id
     *   id
     * @param string $tag_type
     *   Type of program tag
     * @param string $tag_value
     *   Value of program tag
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse
     */
    public function updateProgramTagUsingPOST(
        int $id,
        string $tag_type,
        string $tag_value
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse {
        list($response) = $this->updateProgramTagUsingPOSTWithHttpInfo($id, $tag_type, $tag_value);
        return $response;
    }

    /**
     * Update Program Tag
     *
     * @param int $id
     *   id
     * @param string $tag_type
     *   Type of program tag
     * @param string $tag_value
     *   Value of program tag
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function updateProgramTagUsingPOSTWithHttpInfo(
        int $id,
        string $tag_type,
        string $tag_value
    ): array {
        $request = $this->updateProgramTagUsingPOSTRequest($id, $tag_type, $tag_value);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class
            );
        } catch (ApiException $e) {
            throw $this->updateProgramTagUsingPOSTHandleException($e);
        }
    }

    /**
     * Update Program Tag
     *
     * @param int $id
     *   id
     * @param string $tag_type
     *   Type of program tag
     * @param string $tag_value
     *   Value of program tag
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateProgramTagUsingPOSTAsync(
        int $id,
        string $tag_type,
        string $tag_value
    ): PromiseInterface {
        return $this->updateProgramTagUsingPOSTAsyncWithHttpInfo($id, $tag_type, $tag_value)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Update Program Tag
     *
     * @param int $id
     *   id
     * @param string $tag_type
     *   Type of program tag
     * @param string $tag_value
     *   Value of program tag
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateProgramTagUsingPOSTAsyncWithHttpInfo(
        int $id,
        string $tag_type,
        string $tag_value
    ): PromiseInterface {
        $request = $this->updateProgramTagUsingPOSTRequest($id, $tag_type, $tag_value);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class,
            [$this, 'updateProgramTagUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'updateProgramTagUsingPOST'
     *
     * @param int $id
     *   id
     * @param string $tag_type
     *   Type of program tag
     * @param string $tag_value
     *   Value of program tag
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateProgramTagUsingPOSTRequest(
        int $id,
        string $tag_type,
        string $tag_value
    ): Request {

        $resourcePath = '/rest/asset/v1/program/{id}/tag/{tagType}.json';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $resourcePath = str_replace(
            '{' . 'tagType' . '}',
            ObjectSerializer::toPathValue($tag_type),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
                'tagValue' => ObjectSerializer::toQueryValue($tag_value),
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for updateProgramUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function updateProgramUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Update Program Metadata
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\UpdateProgramRequest $update_program_request
     *   updateProgramRequest
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse
     */
    public function updateProgramUsingPOST(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\UpdateProgramRequest $update_program_request
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse {
        list($response) = $this->updateProgramUsingPOSTWithHttpInfo($id, $update_program_request);
        return $response;
    }

    /**
     * Update Program Metadata
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\UpdateProgramRequest $update_program_request
     *   updateProgramRequest
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function updateProgramUsingPOSTWithHttpInfo(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\UpdateProgramRequest $update_program_request
    ): array {
        $request = $this->updateProgramUsingPOSTRequest($id, $update_program_request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse::class
            );
        } catch (ApiException $e) {
            throw $this->updateProgramUsingPOSTHandleException($e);
        }
    }

    /**
     * Update Program Metadata
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\UpdateProgramRequest $update_program_request
     *   updateProgramRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateProgramUsingPOSTAsync(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\UpdateProgramRequest $update_program_request
    ): PromiseInterface {
        return $this->updateProgramUsingPOSTAsyncWithHttpInfo($id, $update_program_request)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Update Program Metadata
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\UpdateProgramRequest $update_program_request
     *   updateProgramRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateProgramUsingPOSTAsyncWithHttpInfo(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\UpdateProgramRequest $update_program_request
    ): PromiseInterface {
        $request = $this->updateProgramUsingPOSTRequest($id, $update_program_request);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfProgramResponse::class,
            [$this, 'updateProgramUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'updateProgramUsingPOST'
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\UpdateProgramRequest $update_program_request
     *   updateProgramRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateProgramUsingPOSTRequest(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\UpdateProgramRequest $update_program_request
    ): Request {

        $resourcePath = '/rest/asset/v1/program/{id}.json';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            $update_program_request
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array<string, mixed> of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    /**
     * Make a request.
     *
     * @param \GuzzleHttp\Psr7\Request $request An initialized request object.
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @return \Psr\Http\Message\ResponseInterface
     */
    private function makeRequest(Request $request)
    {
        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            $response = $e->getResponse();
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                (int) $e->getCode(),
                $response ? $response->getHeaders() : [],
                $response ? (string) $response->getBody() : null
            );
        }

        $statusCode = $response->getStatusCode();
        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    (string) $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                (string) $response->getBody()
            );
        }
        return $response;
    }

    /**
     * Make an async request.
     *
     * @param \GuzzleHttp\Psr7\Request $request An initialized request object.
     * @param class-string $returnType The return type.
     * @param callable $exceptionHandler A callback to process HTTP errors.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @return \GuzzleHttp\Promise\PromiseInterface A promise that will return a processed response.
     */
    private function makeAsyncRequest(Request $request, string $returnType, callable $exceptionHandler)
    {
        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function (ResponseInterface $response) use ($returnType) {
                    return $this->responseToReturn($response, $returnType);
                },
                function (RequestException $exception) use ($exceptionHandler) {
                    $response = $exception->getResponse();
                    $e = new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : [],
                        $response ? (string) $response->getBody() : null
                    );
                    throw $exceptionHandler($e);
                }
            );
    }

    /**
     * Convert a response to a return standard return array.
     *
     * @template T
     * @param \Psr\Http\Message\ResponseInterface $response A response from a request with a serialized body.
     * @param string $returnType The primary return type.
     * @phpstan-param class-string<T> $returnType
     *
     * @return array structured array or response and http info.
     * @phpstan-return array{T, int, array<array<string>>}
     */
    private function responseToReturn(ResponseInterface $response, string $returnType)
    {
        return [
            $this->deserializeResponseBody($response->getBody(), $returnType),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    /**
     * Deserialize a response body.
     *
     * @template T
     * @param mixed $responseBody The response body.
     * @param string $returnType The return type.
     * @param array<string, string[]> $headers A list of headers from the response.
     * @phpstan-param class-string<T> $returnType
     *
     * @return mixed Either a string or a stream to be passed to a file object.
     * @phpstan-return T
     * @psalm-return T
     */
    private function deserializeResponseBody($responseBody, string $returnType, array $headers = [])
    {
        return ObjectSerializer::deserialize(
            $returnType === \SplFileObject::class ? $responseBody : (string) $responseBody,
            $returnType,
            $headers
        );
    }
}
