<?php
/**
 * LandingPagesApi
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Asset
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketo Rest API
 *
 * Marketo Rest API
 *
 * OpenAPI spec version: 1.0
 * Contact: developerfeedback@marketo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.26
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace NecLimDul\MarketoRest\Asset\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Query;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\ResponseInterface;
use NecLimDul\MarketoRest\Asset\ApiException;
use NecLimDul\MarketoRest\Asset\Configuration;
use NecLimDul\MarketoRest\Asset\HeaderSelector;
use NecLimDul\MarketoRest\Asset\ObjectSerializer;

/**
 * LandingPagesApi Class Doc Comment
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Asset
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LandingPagesApi
{

    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Exception handler for approveLandingPageUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function approveLandingPageUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse',
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Approve Landing Page Draft
     *
     * @param  int $id id (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse
     */
    public function approveLandingPageUsingPOST($id)
    {
        list($response) = $this->approveLandingPageUsingPOSTWithHttpInfo($id);
        return $response;
    }

    /**
     * Approve Landing Page Draft
     *
     * @param  int $id id (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function approveLandingPageUsingPOSTWithHttpInfo($id)
    {
        $request = $this->approveLandingPageUsingPOSTRequest($id);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse');
        } catch (ApiException $e) {
            throw $this->approveLandingPageUsingPOSTHandleException($e);
        }
    }

    /**
     * Approve Landing Page Draft
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function approveLandingPageUsingPOSTAsync($id)
    {
        return $this->approveLandingPageUsingPOSTAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Approve Landing Page Draft
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function approveLandingPageUsingPOSTAsyncWithHttpInfo($id)
    {
        $request = $this->approveLandingPageUsingPOSTRequest($id);
        return $this->makeAsyncRequest($request, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse', [$this, 'approveLandingPageUsingPOSTHandleException']);
    }

    /**
     * Create request for operation 'approveLandingPageUsingPOST'
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function approveLandingPageUsingPOSTRequest($id)
    {
        // Verify the required parameter 'id' is set.
        if (!isset($id)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling approveLandingPageUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/landingPage/{id}/approveDraft.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Exception handler for browseLandingPagesUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function browseLandingPagesUsingGETHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse',
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Landing Pages
     *
     * @param  string $status Status filter for draft or approved versions (optional)
     * @param  int $max_return Maximum number of landing pages to return.  Max 200, default 20 (optional)
     * @param  int $offset Integer offset for paging (optional)
     * @param  string $folder JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39; (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse
     */
    public function browseLandingPagesUsingGET($status = null, $max_return = null, $offset = null, $folder = null)
    {
        list($response) = $this->browseLandingPagesUsingGETWithHttpInfo($status, $max_return, $offset, $folder);
        return $response;
    }

    /**
     * Get Landing Pages
     *
     * @param  string $status Status filter for draft or approved versions (optional)
     * @param  int $max_return Maximum number of landing pages to return.  Max 200, default 20 (optional)
     * @param  int $offset Integer offset for paging (optional)
     * @param  string $folder JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39; (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function browseLandingPagesUsingGETWithHttpInfo($status = null, $max_return = null, $offset = null, $folder = null)
    {
        $request = $this->browseLandingPagesUsingGETRequest($status, $max_return, $offset, $folder);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse');
        } catch (ApiException $e) {
            throw $this->browseLandingPagesUsingGETHandleException($e);
        }
    }

    /**
     * Get Landing Pages
     *
     * @param  string $status Status filter for draft or approved versions (optional)
     * @param  int $max_return Maximum number of landing pages to return.  Max 200, default 20 (optional)
     * @param  int $offset Integer offset for paging (optional)
     * @param  string $folder JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function browseLandingPagesUsingGETAsync($status = null, $max_return = null, $offset = null, $folder = null)
    {
        return $this->browseLandingPagesUsingGETAsyncWithHttpInfo($status, $max_return, $offset, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Get Landing Pages
     *
     * @param  string $status Status filter for draft or approved versions (optional)
     * @param  int $max_return Maximum number of landing pages to return.  Max 200, default 20 (optional)
     * @param  int $offset Integer offset for paging (optional)
     * @param  string $folder JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function browseLandingPagesUsingGETAsyncWithHttpInfo($status = null, $max_return = null, $offset = null, $folder = null)
    {
        $request = $this->browseLandingPagesUsingGETRequest($status, $max_return, $offset, $folder);
        return $this->makeAsyncRequest($request, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse', [$this, 'browseLandingPagesUsingGETHandleException']);
    }

    /**
     * Create request for operation 'browseLandingPagesUsingGET'
     *
     * @param  string $status Status filter for draft or approved versions (optional)
     * @param  int $max_return Maximum number of landing pages to return.  Max 200, default 20 (optional)
     * @param  int $offset Integer offset for paging (optional)
     * @param  string $folder JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function browseLandingPagesUsingGETRequest($status = null, $max_return = null, $offset = null, $folder = null)
    {

        $resourcePath = '/rest/asset/v1/landingPages.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Query parameters.
        $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        $queryParams['maxReturn'] = ObjectSerializer::toQueryValue($max_return);
        $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        // Remove any null (optional values).
        $queryParams = array_filter($queryParams, function($v) { return $v !== null; });
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Exception handler for cloneLandingPageUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function cloneLandingPageUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse',
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Clone Landing Page
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\CloneLandingPageRequest $clone_landing_page_request cloneLandingPageRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse
     */
    public function cloneLandingPageUsingPOST($id, $clone_landing_page_request)
    {
        list($response) = $this->cloneLandingPageUsingPOSTWithHttpInfo($id, $clone_landing_page_request);
        return $response;
    }

    /**
     * Clone Landing Page
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\CloneLandingPageRequest $clone_landing_page_request cloneLandingPageRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cloneLandingPageUsingPOSTWithHttpInfo($id, $clone_landing_page_request)
    {
        $request = $this->cloneLandingPageUsingPOSTRequest($id, $clone_landing_page_request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse');
        } catch (ApiException $e) {
            throw $this->cloneLandingPageUsingPOSTHandleException($e);
        }
    }

    /**
     * Clone Landing Page
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\CloneLandingPageRequest $clone_landing_page_request cloneLandingPageRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cloneLandingPageUsingPOSTAsync($id, $clone_landing_page_request)
    {
        return $this->cloneLandingPageUsingPOSTAsyncWithHttpInfo($id, $clone_landing_page_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Clone Landing Page
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\CloneLandingPageRequest $clone_landing_page_request cloneLandingPageRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cloneLandingPageUsingPOSTAsyncWithHttpInfo($id, $clone_landing_page_request)
    {
        $request = $this->cloneLandingPageUsingPOSTRequest($id, $clone_landing_page_request);
        return $this->makeAsyncRequest($request, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse', [$this, 'cloneLandingPageUsingPOSTHandleException']);
    }

    /**
     * Create request for operation 'cloneLandingPageUsingPOST'
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\CloneLandingPageRequest $clone_landing_page_request cloneLandingPageRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function cloneLandingPageUsingPOSTRequest($id, $clone_landing_page_request)
    {
        // Verify the required parameter 'id' is set.
        if (!isset($id)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling cloneLandingPageUsingPOST'
            );
        }
        // Verify the required parameter 'clone_landing_page_request' is set.
        if (!isset($clone_landing_page_request)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $clone_landing_page_request when calling cloneLandingPageUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/landingPage/{id}/clone.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );
        $httpBody = ObjectSerializer::handleBody($clone_landing_page_request, $headers['Content-Type'] === 'application/json');


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Exception handler for createLandingPageUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function createLandingPageUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse',
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Create Landing Page
     *
     * @param  \NecLimDul\MarketoRest\Asset\Model\CreateLandingPageRequest $create_landing_page_request createLandingPageRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse
     */
    public function createLandingPageUsingPOST($create_landing_page_request)
    {
        list($response) = $this->createLandingPageUsingPOSTWithHttpInfo($create_landing_page_request);
        return $response;
    }

    /**
     * Create Landing Page
     *
     * @param  \NecLimDul\MarketoRest\Asset\Model\CreateLandingPageRequest $create_landing_page_request createLandingPageRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createLandingPageUsingPOSTWithHttpInfo($create_landing_page_request)
    {
        $request = $this->createLandingPageUsingPOSTRequest($create_landing_page_request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse');
        } catch (ApiException $e) {
            throw $this->createLandingPageUsingPOSTHandleException($e);
        }
    }

    /**
     * Create Landing Page
     *
     * @param  \NecLimDul\MarketoRest\Asset\Model\CreateLandingPageRequest $create_landing_page_request createLandingPageRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createLandingPageUsingPOSTAsync($create_landing_page_request)
    {
        return $this->createLandingPageUsingPOSTAsyncWithHttpInfo($create_landing_page_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Create Landing Page
     *
     * @param  \NecLimDul\MarketoRest\Asset\Model\CreateLandingPageRequest $create_landing_page_request createLandingPageRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createLandingPageUsingPOSTAsyncWithHttpInfo($create_landing_page_request)
    {
        $request = $this->createLandingPageUsingPOSTRequest($create_landing_page_request);
        return $this->makeAsyncRequest($request, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse', [$this, 'createLandingPageUsingPOSTHandleException']);
    }

    /**
     * Create request for operation 'createLandingPageUsingPOST'
     *
     * @param  \NecLimDul\MarketoRest\Asset\Model\CreateLandingPageRequest $create_landing_page_request createLandingPageRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createLandingPageUsingPOSTRequest($create_landing_page_request)
    {
        // Verify the required parameter 'create_landing_page_request' is set.
        if (!isset($create_landing_page_request)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_landing_page_request when calling createLandingPageUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/landingPages.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );
        $httpBody = ObjectSerializer::handleBody($create_landing_page_request, $headers['Content-Type'] === 'application/json');


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Exception handler for deleteLandingPageByIdUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function deleteLandingPageByIdUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse',
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Delete Landing Page
     *
     * @param  int $id id (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse
     */
    public function deleteLandingPageByIdUsingPOST($id)
    {
        list($response) = $this->deleteLandingPageByIdUsingPOSTWithHttpInfo($id);
        return $response;
    }

    /**
     * Delete Landing Page
     *
     * @param  int $id id (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLandingPageByIdUsingPOSTWithHttpInfo($id)
    {
        $request = $this->deleteLandingPageByIdUsingPOSTRequest($id);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse');
        } catch (ApiException $e) {
            throw $this->deleteLandingPageByIdUsingPOSTHandleException($e);
        }
    }

    /**
     * Delete Landing Page
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLandingPageByIdUsingPOSTAsync($id)
    {
        return $this->deleteLandingPageByIdUsingPOSTAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Delete Landing Page
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLandingPageByIdUsingPOSTAsyncWithHttpInfo($id)
    {
        $request = $this->deleteLandingPageByIdUsingPOSTRequest($id);
        return $this->makeAsyncRequest($request, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse', [$this, 'deleteLandingPageByIdUsingPOSTHandleException']);
    }

    /**
     * Create request for operation 'deleteLandingPageByIdUsingPOST'
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteLandingPageByIdUsingPOSTRequest($id)
    {
        // Verify the required parameter 'id' is set.
        if (!isset($id)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteLandingPageByIdUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/landingPage/{id}/delete.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Exception handler for discardLandingPageByIdUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function discardLandingPageByIdUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse',
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Discard Landing Page Draft
     *
     * @param  int $id id (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse
     */
    public function discardLandingPageByIdUsingPOST($id)
    {
        list($response) = $this->discardLandingPageByIdUsingPOSTWithHttpInfo($id);
        return $response;
    }

    /**
     * Discard Landing Page Draft
     *
     * @param  int $id id (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function discardLandingPageByIdUsingPOSTWithHttpInfo($id)
    {
        $request = $this->discardLandingPageByIdUsingPOSTRequest($id);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse');
        } catch (ApiException $e) {
            throw $this->discardLandingPageByIdUsingPOSTHandleException($e);
        }
    }

    /**
     * Discard Landing Page Draft
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function discardLandingPageByIdUsingPOSTAsync($id)
    {
        return $this->discardLandingPageByIdUsingPOSTAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Discard Landing Page Draft
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function discardLandingPageByIdUsingPOSTAsyncWithHttpInfo($id)
    {
        $request = $this->discardLandingPageByIdUsingPOSTRequest($id);
        return $this->makeAsyncRequest($request, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse', [$this, 'discardLandingPageByIdUsingPOSTHandleException']);
    }

    /**
     * Create request for operation 'discardLandingPageByIdUsingPOST'
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function discardLandingPageByIdUsingPOSTRequest($id)
    {
        // Verify the required parameter 'id' is set.
        if (!isset($id)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling discardLandingPageByIdUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/landingPage/{id}/discardDraft.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Exception handler for getLandingPageByIdUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function getLandingPageByIdUsingGETHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse',
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Landing Page by Id
     *
     * @param  int $id id (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse
     */
    public function getLandingPageByIdUsingGET($id, $status = null)
    {
        list($response) = $this->getLandingPageByIdUsingGETWithHttpInfo($id, $status);
        return $response;
    }

    /**
     * Get Landing Page by Id
     *
     * @param  int $id id (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLandingPageByIdUsingGETWithHttpInfo($id, $status = null)
    {
        $request = $this->getLandingPageByIdUsingGETRequest($id, $status);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse');
        } catch (ApiException $e) {
            throw $this->getLandingPageByIdUsingGETHandleException($e);
        }
    }

    /**
     * Get Landing Page by Id
     *
     * @param  int $id id (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLandingPageByIdUsingGETAsync($id, $status = null)
    {
        return $this->getLandingPageByIdUsingGETAsyncWithHttpInfo($id, $status)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Get Landing Page by Id
     *
     * @param  int $id id (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLandingPageByIdUsingGETAsyncWithHttpInfo($id, $status = null)
    {
        $request = $this->getLandingPageByIdUsingGETRequest($id, $status);
        return $this->makeAsyncRequest($request, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse', [$this, 'getLandingPageByIdUsingGETHandleException']);
    }

    /**
     * Create request for operation 'getLandingPageByIdUsingGET'
     *
     * @param  int $id id (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLandingPageByIdUsingGETRequest($id, $status = null)
    {
        // Verify the required parameter 'id' is set.
        if (!isset($id)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getLandingPageByIdUsingGET'
            );
        }

        $resourcePath = '/rest/asset/v1/landingPage/{id}.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Query parameters.
        $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        // Remove any null (optional values).
        $queryParams = array_filter($queryParams, function($v) { return $v !== null; });

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Exception handler for getLandingPageByNameUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function getLandingPageByNameUsingGETHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse',
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Landing Page by Name
     *
     * @param  string $name Name of the landing page (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     * @param  int $max_return Maximum number of channels to return.  Max 200, default 20 (optional)
     * @param  int $offset Integer offset for paging (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse
     */
    public function getLandingPageByNameUsingGET($name, $status = null, $max_return = null, $offset = null)
    {
        list($response) = $this->getLandingPageByNameUsingGETWithHttpInfo($name, $status, $max_return, $offset);
        return $response;
    }

    /**
     * Get Landing Page by Name
     *
     * @param  string $name Name of the landing page (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     * @param  int $max_return Maximum number of channels to return.  Max 200, default 20 (optional)
     * @param  int $offset Integer offset for paging (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLandingPageByNameUsingGETWithHttpInfo($name, $status = null, $max_return = null, $offset = null)
    {
        $request = $this->getLandingPageByNameUsingGETRequest($name, $status, $max_return, $offset);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse');
        } catch (ApiException $e) {
            throw $this->getLandingPageByNameUsingGETHandleException($e);
        }
    }

    /**
     * Get Landing Page by Name
     *
     * @param  string $name Name of the landing page (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     * @param  int $max_return Maximum number of channels to return.  Max 200, default 20 (optional)
     * @param  int $offset Integer offset for paging (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLandingPageByNameUsingGETAsync($name, $status = null, $max_return = null, $offset = null)
    {
        return $this->getLandingPageByNameUsingGETAsyncWithHttpInfo($name, $status, $max_return, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Get Landing Page by Name
     *
     * @param  string $name Name of the landing page (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     * @param  int $max_return Maximum number of channels to return.  Max 200, default 20 (optional)
     * @param  int $offset Integer offset for paging (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLandingPageByNameUsingGETAsyncWithHttpInfo($name, $status = null, $max_return = null, $offset = null)
    {
        $request = $this->getLandingPageByNameUsingGETRequest($name, $status, $max_return, $offset);
        return $this->makeAsyncRequest($request, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse', [$this, 'getLandingPageByNameUsingGETHandleException']);
    }

    /**
     * Create request for operation 'getLandingPageByNameUsingGET'
     *
     * @param  string $name Name of the landing page (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     * @param  int $max_return Maximum number of channels to return.  Max 200, default 20 (optional)
     * @param  int $offset Integer offset for paging (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLandingPageByNameUsingGETRequest($name, $status = null, $max_return = null, $offset = null)
    {
        // Verify the required parameter 'name' is set.
        if (!isset($name)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling getLandingPageByNameUsingGET'
            );
        }

        $resourcePath = '/rest/asset/v1/landingPage/byName.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Query parameters.
        $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        $queryParams['maxReturn'] = ObjectSerializer::toQueryValue($max_return);
        $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        // Remove any null (optional values).
        $queryParams = array_filter($queryParams, function($v) { return $v !== null; });
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Exception handler for getLandingPageFullContentUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function getLandingPageFullContentUsingGETHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Asset\Model\ResponseOfGetLandingPageFullContentResponse',
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Landing Page Full Content
     *
     * @param  int $id Id of the landing page. (required)
     * @param  int $lead_id The lead id to impersonate.  Landing page is rendered as though it was viewed by this lead. (optional)
     * @param  string $segmentation JSON array of of segmentations.  Each segmentation must be a JSON object with members &#39;segmentationId&#39;, and &#39;segmentId&#39;.&lt;br&gt;Example: [{\&quot;segmentationId\&quot;:1030,\&quot;segmentId\&quot;:1103}] (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfGetLandingPageFullContentResponse
     */
    public function getLandingPageFullContentUsingGET($id, $lead_id = null, $segmentation = null)
    {
        list($response) = $this->getLandingPageFullContentUsingGETWithHttpInfo($id, $lead_id, $segmentation);
        return $response;
    }

    /**
     * Get Landing Page Full Content
     *
     * @param  int $id Id of the landing page. (required)
     * @param  int $lead_id The lead id to impersonate.  Landing page is rendered as though it was viewed by this lead. (optional)
     * @param  string $segmentation JSON array of of segmentations.  Each segmentation must be a JSON object with members &#39;segmentationId&#39;, and &#39;segmentId&#39;.&lt;br&gt;Example: [{\&quot;segmentationId\&quot;:1030,\&quot;segmentId\&quot;:1103}] (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfGetLandingPageFullContentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLandingPageFullContentUsingGETWithHttpInfo($id, $lead_id = null, $segmentation = null)
    {
        $request = $this->getLandingPageFullContentUsingGETRequest($id, $lead_id, $segmentation);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfGetLandingPageFullContentResponse');
        } catch (ApiException $e) {
            throw $this->getLandingPageFullContentUsingGETHandleException($e);
        }
    }

    /**
     * Get Landing Page Full Content
     *
     * @param  int $id Id of the landing page. (required)
     * @param  int $lead_id The lead id to impersonate.  Landing page is rendered as though it was viewed by this lead. (optional)
     * @param  string $segmentation JSON array of of segmentations.  Each segmentation must be a JSON object with members &#39;segmentationId&#39;, and &#39;segmentId&#39;.&lt;br&gt;Example: [{\&quot;segmentationId\&quot;:1030,\&quot;segmentId\&quot;:1103}] (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLandingPageFullContentUsingGETAsync($id, $lead_id = null, $segmentation = null)
    {
        return $this->getLandingPageFullContentUsingGETAsyncWithHttpInfo($id, $lead_id, $segmentation)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Get Landing Page Full Content
     *
     * @param  int $id Id of the landing page. (required)
     * @param  int $lead_id The lead id to impersonate.  Landing page is rendered as though it was viewed by this lead. (optional)
     * @param  string $segmentation JSON array of of segmentations.  Each segmentation must be a JSON object with members &#39;segmentationId&#39;, and &#39;segmentId&#39;.&lt;br&gt;Example: [{\&quot;segmentationId\&quot;:1030,\&quot;segmentId\&quot;:1103}] (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLandingPageFullContentUsingGETAsyncWithHttpInfo($id, $lead_id = null, $segmentation = null)
    {
        $request = $this->getLandingPageFullContentUsingGETRequest($id, $lead_id, $segmentation);
        return $this->makeAsyncRequest($request, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfGetLandingPageFullContentResponse', [$this, 'getLandingPageFullContentUsingGETHandleException']);
    }

    /**
     * Create request for operation 'getLandingPageFullContentUsingGET'
     *
     * @param  int $id Id of the landing page. (required)
     * @param  int $lead_id The lead id to impersonate.  Landing page is rendered as though it was viewed by this lead. (optional)
     * @param  string $segmentation JSON array of of segmentations.  Each segmentation must be a JSON object with members &#39;segmentationId&#39;, and &#39;segmentId&#39;.&lt;br&gt;Example: [{\&quot;segmentationId\&quot;:1030,\&quot;segmentId\&quot;:1103}] (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLandingPageFullContentUsingGETRequest($id, $lead_id = null, $segmentation = null)
    {
        // Verify the required parameter 'id' is set.
        if (!isset($id)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getLandingPageFullContentUsingGET'
            );
        }

        $resourcePath = '/rest/asset/v1/landingPage/{id}/fullContent.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Query parameters.
        $queryParams['leadId'] = ObjectSerializer::toQueryValue($lead_id);
        $queryParams['segmentation'] = ObjectSerializer::toQueryValue($segmentation);
        // Remove any null (optional values).
        $queryParams = array_filter($queryParams, function($v) { return $v !== null; });

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Exception handler for getVariablesUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function getVariablesUsingGETHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageVariableResponse',
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Landing Page Variables
     *
     * @param  int $id Id of the landing page (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageVariableResponse
     */
    public function getVariablesUsingGET($id, $status = null)
    {
        list($response) = $this->getVariablesUsingGETWithHttpInfo($id, $status);
        return $response;
    }

    /**
     * Get Landing Page Variables
     *
     * @param  int $id Id of the landing page (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageVariableResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getVariablesUsingGETWithHttpInfo($id, $status = null)
    {
        $request = $this->getVariablesUsingGETRequest($id, $status);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageVariableResponse');
        } catch (ApiException $e) {
            throw $this->getVariablesUsingGETHandleException($e);
        }
    }

    /**
     * Get Landing Page Variables
     *
     * @param  int $id Id of the landing page (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVariablesUsingGETAsync($id, $status = null)
    {
        return $this->getVariablesUsingGETAsyncWithHttpInfo($id, $status)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Get Landing Page Variables
     *
     * @param  int $id Id of the landing page (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVariablesUsingGETAsyncWithHttpInfo($id, $status = null)
    {
        $request = $this->getVariablesUsingGETRequest($id, $status);
        return $this->makeAsyncRequest($request, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageVariableResponse', [$this, 'getVariablesUsingGETHandleException']);
    }

    /**
     * Create request for operation 'getVariablesUsingGET'
     *
     * @param  int $id Id of the landing page (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getVariablesUsingGETRequest($id, $status = null)
    {
        // Verify the required parameter 'id' is set.
        if (!isset($id)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getVariablesUsingGET'
            );
        }

        $resourcePath = '/rest/asset/v1/landingPage/{id}/variables.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Query parameters.
        $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        // Remove any null (optional values).
        $queryParams = array_filter($queryParams, function($v) { return $v !== null; });

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Exception handler for unapproveLandingPageByIdUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function unapproveLandingPageByIdUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse',
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Unapprove Landing Page
     *
     * @param  int $id id (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse
     */
    public function unapproveLandingPageByIdUsingPOST($id)
    {
        list($response) = $this->unapproveLandingPageByIdUsingPOSTWithHttpInfo($id);
        return $response;
    }

    /**
     * Unapprove Landing Page
     *
     * @param  int $id id (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function unapproveLandingPageByIdUsingPOSTWithHttpInfo($id)
    {
        $request = $this->unapproveLandingPageByIdUsingPOSTRequest($id);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse');
        } catch (ApiException $e) {
            throw $this->unapproveLandingPageByIdUsingPOSTHandleException($e);
        }
    }

    /**
     * Unapprove Landing Page
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function unapproveLandingPageByIdUsingPOSTAsync($id)
    {
        return $this->unapproveLandingPageByIdUsingPOSTAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Unapprove Landing Page
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function unapproveLandingPageByIdUsingPOSTAsyncWithHttpInfo($id)
    {
        $request = $this->unapproveLandingPageByIdUsingPOSTRequest($id);
        return $this->makeAsyncRequest($request, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse', [$this, 'unapproveLandingPageByIdUsingPOSTHandleException']);
    }

    /**
     * Create request for operation 'unapproveLandingPageByIdUsingPOST'
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function unapproveLandingPageByIdUsingPOSTRequest($id)
    {
        // Verify the required parameter 'id' is set.
        if (!isset($id)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling unapproveLandingPageByIdUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/landingPage/{id}/unapprove.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Exception handler for updateLandingPageUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function updateLandingPageUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse',
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Update Landing Page Metadata
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\UpdateLandingPageRequest $update_landing_page_request updateLandingPageRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse
     */
    public function updateLandingPageUsingPOST($id, $update_landing_page_request)
    {
        list($response) = $this->updateLandingPageUsingPOSTWithHttpInfo($id, $update_landing_page_request);
        return $response;
    }

    /**
     * Update Landing Page Metadata
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\UpdateLandingPageRequest $update_landing_page_request updateLandingPageRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLandingPageUsingPOSTWithHttpInfo($id, $update_landing_page_request)
    {
        $request = $this->updateLandingPageUsingPOSTRequest($id, $update_landing_page_request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse');
        } catch (ApiException $e) {
            throw $this->updateLandingPageUsingPOSTHandleException($e);
        }
    }

    /**
     * Update Landing Page Metadata
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\UpdateLandingPageRequest $update_landing_page_request updateLandingPageRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLandingPageUsingPOSTAsync($id, $update_landing_page_request)
    {
        return $this->updateLandingPageUsingPOSTAsyncWithHttpInfo($id, $update_landing_page_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Update Landing Page Metadata
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\UpdateLandingPageRequest $update_landing_page_request updateLandingPageRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLandingPageUsingPOSTAsyncWithHttpInfo($id, $update_landing_page_request)
    {
        $request = $this->updateLandingPageUsingPOSTRequest($id, $update_landing_page_request);
        return $this->makeAsyncRequest($request, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse', [$this, 'updateLandingPageUsingPOSTHandleException']);
    }

    /**
     * Create request for operation 'updateLandingPageUsingPOST'
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\UpdateLandingPageRequest $update_landing_page_request updateLandingPageRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateLandingPageUsingPOSTRequest($id, $update_landing_page_request)
    {
        // Verify the required parameter 'id' is set.
        if (!isset($id)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateLandingPageUsingPOST'
            );
        }
        // Verify the required parameter 'update_landing_page_request' is set.
        if (!isset($update_landing_page_request)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_landing_page_request when calling updateLandingPageUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/landingPage/{id}.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );
        $httpBody = ObjectSerializer::handleBody($update_landing_page_request, $headers['Content-Type'] === 'application/json');


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Exception handler for updateLandingPageVariableUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function updateLandingPageVariableUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageVariableResponse',
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Update Landing Page Variable
     *
     * @param  int $id id (required)
     * @param  string $variable_id variableId (required)
     * @param  int $value New value of the variable (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageVariableResponse
     */
    public function updateLandingPageVariableUsingPOST($id, $variable_id, $value)
    {
        list($response) = $this->updateLandingPageVariableUsingPOSTWithHttpInfo($id, $variable_id, $value);
        return $response;
    }

    /**
     * Update Landing Page Variable
     *
     * @param  int $id id (required)
     * @param  string $variable_id variableId (required)
     * @param  int $value New value of the variable (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageVariableResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLandingPageVariableUsingPOSTWithHttpInfo($id, $variable_id, $value)
    {
        $request = $this->updateLandingPageVariableUsingPOSTRequest($id, $variable_id, $value);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageVariableResponse');
        } catch (ApiException $e) {
            throw $this->updateLandingPageVariableUsingPOSTHandleException($e);
        }
    }

    /**
     * Update Landing Page Variable
     *
     * @param  int $id id (required)
     * @param  string $variable_id variableId (required)
     * @param  int $value New value of the variable (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLandingPageVariableUsingPOSTAsync($id, $variable_id, $value)
    {
        return $this->updateLandingPageVariableUsingPOSTAsyncWithHttpInfo($id, $variable_id, $value)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Update Landing Page Variable
     *
     * @param  int $id id (required)
     * @param  string $variable_id variableId (required)
     * @param  int $value New value of the variable (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLandingPageVariableUsingPOSTAsyncWithHttpInfo($id, $variable_id, $value)
    {
        $request = $this->updateLandingPageVariableUsingPOSTRequest($id, $variable_id, $value);
        return $this->makeAsyncRequest($request, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageVariableResponse', [$this, 'updateLandingPageVariableUsingPOSTHandleException']);
    }

    /**
     * Create request for operation 'updateLandingPageVariableUsingPOST'
     *
     * @param  int $id id (required)
     * @param  string $variable_id variableId (required)
     * @param  int $value New value of the variable (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateLandingPageVariableUsingPOSTRequest($id, $variable_id, $value)
    {
        // Verify the required parameter 'id' is set.
        if (!isset($id)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateLandingPageVariableUsingPOST'
            );
        }
        // Verify the required parameter 'variable_id' is set.
        if (!isset($variable_id)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $variable_id when calling updateLandingPageVariableUsingPOST'
            );
        }
        // Verify the required parameter 'value' is set.
        if (!isset($value)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $value when calling updateLandingPageVariableUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/landingPage/{id}/variable/{variableId}.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Query parameters.
        $queryParams['value'] = ObjectSerializer::toQueryValue($value);
        // Remove any null (optional values).
        $queryParams = array_filter($queryParams, function($v) { return $v !== null; });

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $resourcePath = str_replace(
            '{' . 'variableId' . '}',
            ObjectSerializer::toPathValue($variable_id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    /**
     * Make a request.
     *
     * @param \GuzzleHttp\Psr7\Request $request An initialized request object.
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @return \Psr\Http\Message\ResponseInterface
     */
    private function makeRequest(Request $request) {
        $options = $this->createHttpClientOption();
        try {
           $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            $response = $e->getResponse();
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                (int) $e->getCode(),
                $response ? $response->getHeaders() : null,
                $response ? (string) $response->getBody() : null
            );
        }

        $statusCode = $response->getStatusCode();
        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    (string) $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                (string) $response->getBody()
            );
        }
        return $response;
    }

    /**
     * Make an async request.
     *
     * @param \GuzzleHttp\Psr7\Request $request An initialized request object.
     * @param string $returnType The return type.
     * @param callable $exceptionHandler A callback to process HTTP errors.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @return \GuzzleHttp\Promise\PromiseInterface A promise that will return a processed response.
     */
    private function makeAsyncRequest(Request $request, string $returnType, callable $exceptionHandler)
    {
        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->responseToReturn($response, $returnType);
                },
                function (RequestException $exception) use ($exceptionHandler) {
                    $response = $exception->getResponse();
                    $e = new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                    throw $exceptionHandler($e);
                }
            );
    }

    /**
     * Convert a response to a return standard return array.
     *
     * @param \Psr\Http\Message\ResponseInterface $response A response from a request with a serialized body.
     * @param string $returnType The primary return type.
     *
     * @return array
     */
    private function responseToReturn(ResponseInterface $response, string $returnType) {
        return [
            $this->deserializeResponseBody($response->getBody(), $returnType),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    /**
     * Deserialize a response body.
     *
     * @param mixed $responseBody
     *   The response body.
     * @param string $returnType
     *   The return type.
     * @param array<string, string[]>|null $headers
     *   The a list of headers from the response.
     * @return mixed
     *   Either a string or a stream to be passed to a file object.
     */
    private function deserializeResponseBody($responseBody, string $returnType, ?array $headers = [])
    {
        return ObjectSerializer::deserialize(
            $returnType === '\SplFileObject' ? $responseBody : (string) $responseBody,
            $returnType,
            $headers
        );
    }

}
