<?php

/**
 * LandingPagesApi
 *
 * Marketo Rest API
 *
 * Marketo Rest API
 *
 * OpenAPI spec version: 1.0
 * Contact: developerfeedback@marketo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.26
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Asset
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace NecLimDul\MarketoRest\Asset\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\Promise\PromiseInterface;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\ResponseInterface;
use NecLimDul\MarketoRest\Asset\ApiException;
use NecLimDul\MarketoRest\Asset\Configuration;
use NecLimDul\MarketoRest\Asset\HeaderSelector;
use NecLimDul\MarketoRest\Asset\ObjectSerializer;

/**
 * LandingPagesApi Class Doc Comment
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Asset
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LandingPagesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the spec.
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Exception handler for approveLandingPageUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function approveLandingPageUsingPOSTHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Approve Landing Page Draft
     *
     * @param int $id
     *   id
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse
     */
    public function approveLandingPageUsingPOST(
        int $id
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse {
        list($response) = $this->approveLandingPageUsingPOSTWithHttpInfo($id);
        return $response;
    }

    /**
     * Approve Landing Page Draft
     *
     * @param int $id
     *   id
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function approveLandingPageUsingPOSTWithHttpInfo(
        int $id
    ): array {
        $request = $this->approveLandingPageUsingPOSTRequest($id);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class
            );
        } catch (ApiException $e) {
            throw $this->approveLandingPageUsingPOSTHandleException($e);
        }
    }

    /**
     * Approve Landing Page Draft
     *
     * @param int $id
     *   id
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function approveLandingPageUsingPOSTAsync(
        int $id
    ): PromiseInterface {
        return $this->approveLandingPageUsingPOSTAsyncWithHttpInfo($id)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Approve Landing Page Draft
     *
     * @param int $id
     *   id
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function approveLandingPageUsingPOSTAsyncWithHttpInfo(
        int $id
    ): PromiseInterface {
        $request = $this->approveLandingPageUsingPOSTRequest($id);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class,
            [$this, 'approveLandingPageUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'approveLandingPageUsingPOST'
     *
     * @param int $id
     *   id
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function approveLandingPageUsingPOSTRequest(
        int $id
    ): Request {

        $resourcePath = '/rest/asset/v1/landingPage/{id}/approveDraft.json';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for browseLandingPagesUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function browseLandingPagesUsingGETHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Landing Pages
     *
     * @param string|null $status
     *   Status filter for draft or approved versions
     * @param int|null $max_return
     *   Maximum number of landing pages to return.  Max 200, default 20
     * @param int|null $offset
     *   Integer offset for paging
     * @param string|null $folder
     *   JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39;
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse
     */
    public function browseLandingPagesUsingGET(
        string $status = null,
        int $max_return = null,
        int $offset = null,
        string $folder = null
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse {
        list($response) = $this->browseLandingPagesUsingGETWithHttpInfo($status, $max_return, $offset, $folder);
        return $response;
    }

    /**
     * Get Landing Pages
     *
     * @param string|null $status
     *   Status filter for draft or approved versions
     * @param int|null $max_return
     *   Maximum number of landing pages to return.  Max 200, default 20
     * @param int|null $offset
     *   Integer offset for paging
     * @param string|null $folder
     *   JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39;
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function browseLandingPagesUsingGETWithHttpInfo(
        string $status = null,
        int $max_return = null,
        int $offset = null,
        string $folder = null
    ): array {
        $request = $this->browseLandingPagesUsingGETRequest($status, $max_return, $offset, $folder);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse::class
            );
        } catch (ApiException $e) {
            throw $this->browseLandingPagesUsingGETHandleException($e);
        }
    }

    /**
     * Get Landing Pages
     *
     * @param string|null $status
     *   Status filter for draft or approved versions
     * @param int|null $max_return
     *   Maximum number of landing pages to return.  Max 200, default 20
     * @param int|null $offset
     *   Integer offset for paging
     * @param string|null $folder
     *   JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39;
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function browseLandingPagesUsingGETAsync(
        string $status = null,
        int $max_return = null,
        int $offset = null,
        string $folder = null
    ): PromiseInterface {
        return $this->browseLandingPagesUsingGETAsyncWithHttpInfo($status, $max_return, $offset, $folder)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Get Landing Pages
     *
     * @param string|null $status
     *   Status filter for draft or approved versions
     * @param int|null $max_return
     *   Maximum number of landing pages to return.  Max 200, default 20
     * @param int|null $offset
     *   Integer offset for paging
     * @param string|null $folder
     *   JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39;
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function browseLandingPagesUsingGETAsyncWithHttpInfo(
        string $status = null,
        int $max_return = null,
        int $offset = null,
        string $folder = null
    ): PromiseInterface {
        $request = $this->browseLandingPagesUsingGETRequest($status, $max_return, $offset, $folder);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse::class,
            [$this, 'browseLandingPagesUsingGETHandleException']
        );
    }

    /**
     * Create request for operation 'browseLandingPagesUsingGET'
     *
     * @param string|null $status
     *   Status filter for draft or approved versions
     * @param int|null $max_return
     *   Maximum number of landing pages to return.  Max 200, default 20
     * @param int|null $offset
     *   Integer offset for paging
     * @param string|null $folder
     *   JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39;
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function browseLandingPagesUsingGETRequest(
        string $status = null,
        int $max_return = null,
        int $offset = null,
        string $folder = null
    ): Request {

        $resourcePath = '/rest/asset/v1/landingPages.json';

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'GET',
            $operationHost . $resourcePath,
            // Query.
            [
                'status' => ObjectSerializer::toQueryValue($status),
                'maxReturn' => ObjectSerializer::toQueryValue($max_return),
                'offset' => ObjectSerializer::toQueryValue($offset),
                'folder' => ObjectSerializer::toQueryValue($folder),
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for cloneLandingPageUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function cloneLandingPageUsingPOSTHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Clone Landing Page
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\CloneLandingPageRequest $clone_landing_page_request
     *   cloneLandingPageRequest
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse
     */
    public function cloneLandingPageUsingPOST(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\CloneLandingPageRequest $clone_landing_page_request
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse {
        list($response) = $this->cloneLandingPageUsingPOSTWithHttpInfo($id, $clone_landing_page_request);
        return $response;
    }

    /**
     * Clone Landing Page
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\CloneLandingPageRequest $clone_landing_page_request
     *   cloneLandingPageRequest
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function cloneLandingPageUsingPOSTWithHttpInfo(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\CloneLandingPageRequest $clone_landing_page_request
    ): array {
        $request = $this->cloneLandingPageUsingPOSTRequest($id, $clone_landing_page_request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse::class
            );
        } catch (ApiException $e) {
            throw $this->cloneLandingPageUsingPOSTHandleException($e);
        }
    }

    /**
     * Clone Landing Page
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\CloneLandingPageRequest $clone_landing_page_request
     *   cloneLandingPageRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cloneLandingPageUsingPOSTAsync(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\CloneLandingPageRequest $clone_landing_page_request
    ): PromiseInterface {
        return $this->cloneLandingPageUsingPOSTAsyncWithHttpInfo($id, $clone_landing_page_request)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Clone Landing Page
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\CloneLandingPageRequest $clone_landing_page_request
     *   cloneLandingPageRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cloneLandingPageUsingPOSTAsyncWithHttpInfo(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\CloneLandingPageRequest $clone_landing_page_request
    ): PromiseInterface {
        $request = $this->cloneLandingPageUsingPOSTRequest($id, $clone_landing_page_request);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse::class,
            [$this, 'cloneLandingPageUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'cloneLandingPageUsingPOST'
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\CloneLandingPageRequest $clone_landing_page_request
     *   cloneLandingPageRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function cloneLandingPageUsingPOSTRequest(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\CloneLandingPageRequest $clone_landing_page_request
    ): Request {

        $resourcePath = '/rest/asset/v1/landingPage/{id}/clone.json';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            $clone_landing_page_request
        );
    }

    /**
     * Exception handler for createLandingPageUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function createLandingPageUsingPOSTHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Create Landing Page
     *
     * @param \NecLimDul\MarketoRest\Asset\Model\CreateLandingPageRequest $create_landing_page_request
     *   createLandingPageRequest
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse
     */
    public function createLandingPageUsingPOST(
        \NecLimDul\MarketoRest\Asset\Model\CreateLandingPageRequest $create_landing_page_request
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse {
        list($response) = $this->createLandingPageUsingPOSTWithHttpInfo($create_landing_page_request);
        return $response;
    }

    /**
     * Create Landing Page
     *
     * @param \NecLimDul\MarketoRest\Asset\Model\CreateLandingPageRequest $create_landing_page_request
     *   createLandingPageRequest
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function createLandingPageUsingPOSTWithHttpInfo(
        \NecLimDul\MarketoRest\Asset\Model\CreateLandingPageRequest $create_landing_page_request
    ): array {
        $request = $this->createLandingPageUsingPOSTRequest($create_landing_page_request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse::class
            );
        } catch (ApiException $e) {
            throw $this->createLandingPageUsingPOSTHandleException($e);
        }
    }

    /**
     * Create Landing Page
     *
     * @param \NecLimDul\MarketoRest\Asset\Model\CreateLandingPageRequest $create_landing_page_request
     *   createLandingPageRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createLandingPageUsingPOSTAsync(
        \NecLimDul\MarketoRest\Asset\Model\CreateLandingPageRequest $create_landing_page_request
    ): PromiseInterface {
        return $this->createLandingPageUsingPOSTAsyncWithHttpInfo($create_landing_page_request)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Create Landing Page
     *
     * @param \NecLimDul\MarketoRest\Asset\Model\CreateLandingPageRequest $create_landing_page_request
     *   createLandingPageRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createLandingPageUsingPOSTAsyncWithHttpInfo(
        \NecLimDul\MarketoRest\Asset\Model\CreateLandingPageRequest $create_landing_page_request
    ): PromiseInterface {
        $request = $this->createLandingPageUsingPOSTRequest($create_landing_page_request);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse::class,
            [$this, 'createLandingPageUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'createLandingPageUsingPOST'
     *
     * @param \NecLimDul\MarketoRest\Asset\Model\CreateLandingPageRequest $create_landing_page_request
     *   createLandingPageRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createLandingPageUsingPOSTRequest(
        \NecLimDul\MarketoRest\Asset\Model\CreateLandingPageRequest $create_landing_page_request
    ): Request {

        $resourcePath = '/rest/asset/v1/landingPages.json';

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            $create_landing_page_request
        );
    }

    /**
     * Exception handler for deleteLandingPageByIdUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function deleteLandingPageByIdUsingPOSTHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Delete Landing Page
     *
     * @param int $id
     *   id
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse
     */
    public function deleteLandingPageByIdUsingPOST(
        int $id
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse {
        list($response) = $this->deleteLandingPageByIdUsingPOSTWithHttpInfo($id);
        return $response;
    }

    /**
     * Delete Landing Page
     *
     * @param int $id
     *   id
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function deleteLandingPageByIdUsingPOSTWithHttpInfo(
        int $id
    ): array {
        $request = $this->deleteLandingPageByIdUsingPOSTRequest($id);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class
            );
        } catch (ApiException $e) {
            throw $this->deleteLandingPageByIdUsingPOSTHandleException($e);
        }
    }

    /**
     * Delete Landing Page
     *
     * @param int $id
     *   id
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLandingPageByIdUsingPOSTAsync(
        int $id
    ): PromiseInterface {
        return $this->deleteLandingPageByIdUsingPOSTAsyncWithHttpInfo($id)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Delete Landing Page
     *
     * @param int $id
     *   id
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLandingPageByIdUsingPOSTAsyncWithHttpInfo(
        int $id
    ): PromiseInterface {
        $request = $this->deleteLandingPageByIdUsingPOSTRequest($id);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class,
            [$this, 'deleteLandingPageByIdUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'deleteLandingPageByIdUsingPOST'
     *
     * @param int $id
     *   id
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteLandingPageByIdUsingPOSTRequest(
        int $id
    ): Request {

        $resourcePath = '/rest/asset/v1/landingPage/{id}/delete.json';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for discardLandingPageByIdUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function discardLandingPageByIdUsingPOSTHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Discard Landing Page Draft
     *
     * @param int $id
     *   id
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse
     */
    public function discardLandingPageByIdUsingPOST(
        int $id
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse {
        list($response) = $this->discardLandingPageByIdUsingPOSTWithHttpInfo($id);
        return $response;
    }

    /**
     * Discard Landing Page Draft
     *
     * @param int $id
     *   id
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function discardLandingPageByIdUsingPOSTWithHttpInfo(
        int $id
    ): array {
        $request = $this->discardLandingPageByIdUsingPOSTRequest($id);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class
            );
        } catch (ApiException $e) {
            throw $this->discardLandingPageByIdUsingPOSTHandleException($e);
        }
    }

    /**
     * Discard Landing Page Draft
     *
     * @param int $id
     *   id
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function discardLandingPageByIdUsingPOSTAsync(
        int $id
    ): PromiseInterface {
        return $this->discardLandingPageByIdUsingPOSTAsyncWithHttpInfo($id)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Discard Landing Page Draft
     *
     * @param int $id
     *   id
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function discardLandingPageByIdUsingPOSTAsyncWithHttpInfo(
        int $id
    ): PromiseInterface {
        $request = $this->discardLandingPageByIdUsingPOSTRequest($id);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class,
            [$this, 'discardLandingPageByIdUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'discardLandingPageByIdUsingPOST'
     *
     * @param int $id
     *   id
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function discardLandingPageByIdUsingPOSTRequest(
        int $id
    ): Request {

        $resourcePath = '/rest/asset/v1/landingPage/{id}/discardDraft.json';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for getLandingPageByIdUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function getLandingPageByIdUsingGETHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Landing Page by Id
     *
     * @param int $id
     *   id
     * @param string|null $status
     *   Status filter for draft or approved versions
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse
     */
    public function getLandingPageByIdUsingGET(
        int $id,
        string $status = null
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse {
        list($response) = $this->getLandingPageByIdUsingGETWithHttpInfo($id, $status);
        return $response;
    }

    /**
     * Get Landing Page by Id
     *
     * @param int $id
     *   id
     * @param string|null $status
     *   Status filter for draft or approved versions
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function getLandingPageByIdUsingGETWithHttpInfo(
        int $id,
        string $status = null
    ): array {
        $request = $this->getLandingPageByIdUsingGETRequest($id, $status);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse::class
            );
        } catch (ApiException $e) {
            throw $this->getLandingPageByIdUsingGETHandleException($e);
        }
    }

    /**
     * Get Landing Page by Id
     *
     * @param int $id
     *   id
     * @param string|null $status
     *   Status filter for draft or approved versions
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLandingPageByIdUsingGETAsync(
        int $id,
        string $status = null
    ): PromiseInterface {
        return $this->getLandingPageByIdUsingGETAsyncWithHttpInfo($id, $status)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Get Landing Page by Id
     *
     * @param int $id
     *   id
     * @param string|null $status
     *   Status filter for draft or approved versions
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLandingPageByIdUsingGETAsyncWithHttpInfo(
        int $id,
        string $status = null
    ): PromiseInterface {
        $request = $this->getLandingPageByIdUsingGETRequest($id, $status);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse::class,
            [$this, 'getLandingPageByIdUsingGETHandleException']
        );
    }

    /**
     * Create request for operation 'getLandingPageByIdUsingGET'
     *
     * @param int $id
     *   id
     * @param string|null $status
     *   Status filter for draft or approved versions
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLandingPageByIdUsingGETRequest(
        int $id,
        string $status = null
    ): Request {

        $resourcePath = '/rest/asset/v1/landingPage/{id}.json';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'GET',
            $operationHost . $resourcePath,
            // Query.
            [
                'status' => ObjectSerializer::toQueryValue($status),
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for getLandingPageByNameUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function getLandingPageByNameUsingGETHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Landing Page by Name
     *
     * @param string $name
     *   Name of the landing page
     * @param string|null $status
     *   Status filter for draft or approved versions
     * @param int|null $max_return
     *   Maximum number of channels to return.  Max 200, default 20
     * @param int|null $offset
     *   Integer offset for paging
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse
     */
    public function getLandingPageByNameUsingGET(
        string $name,
        string $status = null,
        int $max_return = null,
        int $offset = null
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse {
        list($response) = $this->getLandingPageByNameUsingGETWithHttpInfo($name, $status, $max_return, $offset);
        return $response;
    }

    /**
     * Get Landing Page by Name
     *
     * @param string $name
     *   Name of the landing page
     * @param string|null $status
     *   Status filter for draft or approved versions
     * @param int|null $max_return
     *   Maximum number of channels to return.  Max 200, default 20
     * @param int|null $offset
     *   Integer offset for paging
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function getLandingPageByNameUsingGETWithHttpInfo(
        string $name,
        string $status = null,
        int $max_return = null,
        int $offset = null
    ): array {
        $request = $this->getLandingPageByNameUsingGETRequest($name, $status, $max_return, $offset);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse::class
            );
        } catch (ApiException $e) {
            throw $this->getLandingPageByNameUsingGETHandleException($e);
        }
    }

    /**
     * Get Landing Page by Name
     *
     * @param string $name
     *   Name of the landing page
     * @param string|null $status
     *   Status filter for draft or approved versions
     * @param int|null $max_return
     *   Maximum number of channels to return.  Max 200, default 20
     * @param int|null $offset
     *   Integer offset for paging
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLandingPageByNameUsingGETAsync(
        string $name,
        string $status = null,
        int $max_return = null,
        int $offset = null
    ): PromiseInterface {
        return $this->getLandingPageByNameUsingGETAsyncWithHttpInfo($name, $status, $max_return, $offset)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Get Landing Page by Name
     *
     * @param string $name
     *   Name of the landing page
     * @param string|null $status
     *   Status filter for draft or approved versions
     * @param int|null $max_return
     *   Maximum number of channels to return.  Max 200, default 20
     * @param int|null $offset
     *   Integer offset for paging
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLandingPageByNameUsingGETAsyncWithHttpInfo(
        string $name,
        string $status = null,
        int $max_return = null,
        int $offset = null
    ): PromiseInterface {
        $request = $this->getLandingPageByNameUsingGETRequest($name, $status, $max_return, $offset);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse::class,
            [$this, 'getLandingPageByNameUsingGETHandleException']
        );
    }

    /**
     * Create request for operation 'getLandingPageByNameUsingGET'
     *
     * @param string $name
     *   Name of the landing page
     * @param string|null $status
     *   Status filter for draft or approved versions
     * @param int|null $max_return
     *   Maximum number of channels to return.  Max 200, default 20
     * @param int|null $offset
     *   Integer offset for paging
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLandingPageByNameUsingGETRequest(
        string $name,
        string $status = null,
        int $max_return = null,
        int $offset = null
    ): Request {

        $resourcePath = '/rest/asset/v1/landingPage/byName.json';

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'GET',
            $operationHost . $resourcePath,
            // Query.
            [
                'name' => ObjectSerializer::toQueryValue($name),
                'status' => ObjectSerializer::toQueryValue($status),
                'maxReturn' => ObjectSerializer::toQueryValue($max_return),
                'offset' => ObjectSerializer::toQueryValue($offset),
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for getLandingPageFullContentUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function getLandingPageFullContentUsingGETHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfGetLandingPageFullContentResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Landing Page Full Content
     *
     * @param int $id
     *   Id of the landing page.
     * @param int|null $lead_id
     *   The lead id to impersonate.  Landing page is rendered as though it was viewed by this lead.
     * @param string|null $segmentation
     *   JSON array of of segmentations.  Each segmentation must be a JSON object with members &#39;segmentationId&#39;, and &#39;segmentId&#39;.&lt;br&gt;Example: [{\&quot;segmentationId\&quot;:1030,\&quot;segmentId\&quot;:1103}]
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfGetLandingPageFullContentResponse
     */
    public function getLandingPageFullContentUsingGET(
        int $id,
        int $lead_id = null,
        string $segmentation = null
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfGetLandingPageFullContentResponse {
        list($response) = $this->getLandingPageFullContentUsingGETWithHttpInfo($id, $lead_id, $segmentation);
        return $response;
    }

    /**
     * Get Landing Page Full Content
     *
     * @param int $id
     *   Id of the landing page.
     * @param int|null $lead_id
     *   The lead id to impersonate.  Landing page is rendered as though it was viewed by this lead.
     * @param string|null $segmentation
     *   JSON array of of segmentations.  Each segmentation must be a JSON object with members &#39;segmentationId&#39;, and &#39;segmentId&#39;.&lt;br&gt;Example: [{\&quot;segmentationId\&quot;:1030,\&quot;segmentId\&quot;:1103}]
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfGetLandingPageFullContentResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function getLandingPageFullContentUsingGETWithHttpInfo(
        int $id,
        int $lead_id = null,
        string $segmentation = null
    ): array {
        $request = $this->getLandingPageFullContentUsingGETRequest($id, $lead_id, $segmentation);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfGetLandingPageFullContentResponse::class
            );
        } catch (ApiException $e) {
            throw $this->getLandingPageFullContentUsingGETHandleException($e);
        }
    }

    /**
     * Get Landing Page Full Content
     *
     * @param int $id
     *   Id of the landing page.
     * @param int|null $lead_id
     *   The lead id to impersonate.  Landing page is rendered as though it was viewed by this lead.
     * @param string|null $segmentation
     *   JSON array of of segmentations.  Each segmentation must be a JSON object with members &#39;segmentationId&#39;, and &#39;segmentId&#39;.&lt;br&gt;Example: [{\&quot;segmentationId\&quot;:1030,\&quot;segmentId\&quot;:1103}]
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLandingPageFullContentUsingGETAsync(
        int $id,
        int $lead_id = null,
        string $segmentation = null
    ): PromiseInterface {
        return $this->getLandingPageFullContentUsingGETAsyncWithHttpInfo($id, $lead_id, $segmentation)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfGetLandingPageFullContentResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Get Landing Page Full Content
     *
     * @param int $id
     *   Id of the landing page.
     * @param int|null $lead_id
     *   The lead id to impersonate.  Landing page is rendered as though it was viewed by this lead.
     * @param string|null $segmentation
     *   JSON array of of segmentations.  Each segmentation must be a JSON object with members &#39;segmentationId&#39;, and &#39;segmentId&#39;.&lt;br&gt;Example: [{\&quot;segmentationId\&quot;:1030,\&quot;segmentId\&quot;:1103}]
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLandingPageFullContentUsingGETAsyncWithHttpInfo(
        int $id,
        int $lead_id = null,
        string $segmentation = null
    ): PromiseInterface {
        $request = $this->getLandingPageFullContentUsingGETRequest($id, $lead_id, $segmentation);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfGetLandingPageFullContentResponse::class,
            [$this, 'getLandingPageFullContentUsingGETHandleException']
        );
    }

    /**
     * Create request for operation 'getLandingPageFullContentUsingGET'
     *
     * @param int $id
     *   Id of the landing page.
     * @param int|null $lead_id
     *   The lead id to impersonate.  Landing page is rendered as though it was viewed by this lead.
     * @param string|null $segmentation
     *   JSON array of of segmentations.  Each segmentation must be a JSON object with members &#39;segmentationId&#39;, and &#39;segmentId&#39;.&lt;br&gt;Example: [{\&quot;segmentationId\&quot;:1030,\&quot;segmentId\&quot;:1103}]
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLandingPageFullContentUsingGETRequest(
        int $id,
        int $lead_id = null,
        string $segmentation = null
    ): Request {

        $resourcePath = '/rest/asset/v1/landingPage/{id}/fullContent.json';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'GET',
            $operationHost . $resourcePath,
            // Query.
            [
                'leadId' => ObjectSerializer::toQueryValue($lead_id),
                'segmentation' => ObjectSerializer::toQueryValue($segmentation),
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for getVariablesUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function getVariablesUsingGETHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageVariableResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Landing Page Variables
     *
     * @param int $id
     *   Id of the landing page
     * @param string|null $status
     *   Status filter for draft or approved versions
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageVariableResponse
     */
    public function getVariablesUsingGET(
        int $id,
        string $status = null
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageVariableResponse {
        list($response) = $this->getVariablesUsingGETWithHttpInfo($id, $status);
        return $response;
    }

    /**
     * Get Landing Page Variables
     *
     * @param int $id
     *   Id of the landing page
     * @param string|null $status
     *   Status filter for draft or approved versions
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageVariableResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function getVariablesUsingGETWithHttpInfo(
        int $id,
        string $status = null
    ): array {
        $request = $this->getVariablesUsingGETRequest($id, $status);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageVariableResponse::class
            );
        } catch (ApiException $e) {
            throw $this->getVariablesUsingGETHandleException($e);
        }
    }

    /**
     * Get Landing Page Variables
     *
     * @param int $id
     *   Id of the landing page
     * @param string|null $status
     *   Status filter for draft or approved versions
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVariablesUsingGETAsync(
        int $id,
        string $status = null
    ): PromiseInterface {
        return $this->getVariablesUsingGETAsyncWithHttpInfo($id, $status)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageVariableResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Get Landing Page Variables
     *
     * @param int $id
     *   Id of the landing page
     * @param string|null $status
     *   Status filter for draft or approved versions
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVariablesUsingGETAsyncWithHttpInfo(
        int $id,
        string $status = null
    ): PromiseInterface {
        $request = $this->getVariablesUsingGETRequest($id, $status);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageVariableResponse::class,
            [$this, 'getVariablesUsingGETHandleException']
        );
    }

    /**
     * Create request for operation 'getVariablesUsingGET'
     *
     * @param int $id
     *   Id of the landing page
     * @param string|null $status
     *   Status filter for draft or approved versions
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getVariablesUsingGETRequest(
        int $id,
        string $status = null
    ): Request {

        $resourcePath = '/rest/asset/v1/landingPage/{id}/variables.json';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'GET',
            $operationHost . $resourcePath,
            // Query.
            [
                'status' => ObjectSerializer::toQueryValue($status),
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for unapproveLandingPageByIdUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function unapproveLandingPageByIdUsingPOSTHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Unapprove Landing Page
     *
     * @param int $id
     *   id
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse
     */
    public function unapproveLandingPageByIdUsingPOST(
        int $id
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse {
        list($response) = $this->unapproveLandingPageByIdUsingPOSTWithHttpInfo($id);
        return $response;
    }

    /**
     * Unapprove Landing Page
     *
     * @param int $id
     *   id
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function unapproveLandingPageByIdUsingPOSTWithHttpInfo(
        int $id
    ): array {
        $request = $this->unapproveLandingPageByIdUsingPOSTRequest($id);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse::class
            );
        } catch (ApiException $e) {
            throw $this->unapproveLandingPageByIdUsingPOSTHandleException($e);
        }
    }

    /**
     * Unapprove Landing Page
     *
     * @param int $id
     *   id
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function unapproveLandingPageByIdUsingPOSTAsync(
        int $id
    ): PromiseInterface {
        return $this->unapproveLandingPageByIdUsingPOSTAsyncWithHttpInfo($id)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Unapprove Landing Page
     *
     * @param int $id
     *   id
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function unapproveLandingPageByIdUsingPOSTAsyncWithHttpInfo(
        int $id
    ): PromiseInterface {
        $request = $this->unapproveLandingPageByIdUsingPOSTRequest($id);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse::class,
            [$this, 'unapproveLandingPageByIdUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'unapproveLandingPageByIdUsingPOST'
     *
     * @param int $id
     *   id
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function unapproveLandingPageByIdUsingPOSTRequest(
        int $id
    ): Request {

        $resourcePath = '/rest/asset/v1/landingPage/{id}/unapprove.json';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for updateLandingPageUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function updateLandingPageUsingPOSTHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Update Landing Page Metadata
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\UpdateLandingPageRequest $update_landing_page_request
     *   updateLandingPageRequest
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse
     */
    public function updateLandingPageUsingPOST(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\UpdateLandingPageRequest $update_landing_page_request
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse {
        list($response) = $this->updateLandingPageUsingPOSTWithHttpInfo($id, $update_landing_page_request);
        return $response;
    }

    /**
     * Update Landing Page Metadata
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\UpdateLandingPageRequest $update_landing_page_request
     *   updateLandingPageRequest
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function updateLandingPageUsingPOSTWithHttpInfo(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\UpdateLandingPageRequest $update_landing_page_request
    ): array {
        $request = $this->updateLandingPageUsingPOSTRequest($id, $update_landing_page_request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse::class
            );
        } catch (ApiException $e) {
            throw $this->updateLandingPageUsingPOSTHandleException($e);
        }
    }

    /**
     * Update Landing Page Metadata
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\UpdateLandingPageRequest $update_landing_page_request
     *   updateLandingPageRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLandingPageUsingPOSTAsync(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\UpdateLandingPageRequest $update_landing_page_request
    ): PromiseInterface {
        return $this->updateLandingPageUsingPOSTAsyncWithHttpInfo($id, $update_landing_page_request)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Update Landing Page Metadata
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\UpdateLandingPageRequest $update_landing_page_request
     *   updateLandingPageRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLandingPageUsingPOSTAsyncWithHttpInfo(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\UpdateLandingPageRequest $update_landing_page_request
    ): PromiseInterface {
        $request = $this->updateLandingPageUsingPOSTRequest($id, $update_landing_page_request);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse::class,
            [$this, 'updateLandingPageUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'updateLandingPageUsingPOST'
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\UpdateLandingPageRequest $update_landing_page_request
     *   updateLandingPageRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateLandingPageUsingPOSTRequest(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\UpdateLandingPageRequest $update_landing_page_request
    ): Request {

        $resourcePath = '/rest/asset/v1/landingPage/{id}.json';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            $update_landing_page_request
        );
    }

    /**
     * Exception handler for updateLandingPageVariableUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function updateLandingPageVariableUsingPOSTHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageVariableResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Update Landing Page Variable
     *
     * @param int $id
     *   id
     * @param string $variable_id
     *   variableId
     * @param int $value
     *   New value of the variable
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageVariableResponse
     */
    public function updateLandingPageVariableUsingPOST(
        int $id,
        string $variable_id,
        int $value
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageVariableResponse {
        list($response) = $this->updateLandingPageVariableUsingPOSTWithHttpInfo($id, $variable_id, $value);
        return $response;
    }

    /**
     * Update Landing Page Variable
     *
     * @param int $id
     *   id
     * @param string $variable_id
     *   variableId
     * @param int $value
     *   New value of the variable
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageVariableResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function updateLandingPageVariableUsingPOSTWithHttpInfo(
        int $id,
        string $variable_id,
        int $value
    ): array {
        $request = $this->updateLandingPageVariableUsingPOSTRequest($id, $variable_id, $value);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageVariableResponse::class
            );
        } catch (ApiException $e) {
            throw $this->updateLandingPageVariableUsingPOSTHandleException($e);
        }
    }

    /**
     * Update Landing Page Variable
     *
     * @param int $id
     *   id
     * @param string $variable_id
     *   variableId
     * @param int $value
     *   New value of the variable
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLandingPageVariableUsingPOSTAsync(
        int $id,
        string $variable_id,
        int $value
    ): PromiseInterface {
        return $this->updateLandingPageVariableUsingPOSTAsyncWithHttpInfo($id, $variable_id, $value)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageVariableResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Update Landing Page Variable
     *
     * @param int $id
     *   id
     * @param string $variable_id
     *   variableId
     * @param int $value
     *   New value of the variable
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLandingPageVariableUsingPOSTAsyncWithHttpInfo(
        int $id,
        string $variable_id,
        int $value
    ): PromiseInterface {
        $request = $this->updateLandingPageVariableUsingPOSTRequest($id, $variable_id, $value);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageVariableResponse::class,
            [$this, 'updateLandingPageVariableUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'updateLandingPageVariableUsingPOST'
     *
     * @param int $id
     *   id
     * @param string $variable_id
     *   variableId
     * @param int $value
     *   New value of the variable
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateLandingPageVariableUsingPOSTRequest(
        int $id,
        string $variable_id,
        int $value
    ): Request {

        $resourcePath = '/rest/asset/v1/landingPage/{id}/variable/{variableId}.json';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $resourcePath = str_replace(
            '{' . 'variableId' . '}',
            ObjectSerializer::toPathValue($variable_id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
                'value' => ObjectSerializer::toQueryValue($value),
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array<string, mixed> of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    /**
     * Make a request.
     *
     * @param \GuzzleHttp\Psr7\Request $request An initialized request object.
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @return \Psr\Http\Message\ResponseInterface
     */
    private function makeRequest(Request $request)
    {
        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            $response = $e->getResponse();
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                (int) $e->getCode(),
                $response ? $response->getHeaders() : [],
                $response ? (string) $response->getBody() : null
            );
        }

        $statusCode = $response->getStatusCode();
        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    (string) $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                (string) $response->getBody()
            );
        }
        return $response;
    }

    /**
     * Make an async request.
     *
     * @param \GuzzleHttp\Psr7\Request $request An initialized request object.
     * @param class-string $returnType The return type.
     * @param callable $exceptionHandler A callback to process HTTP errors.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @return \GuzzleHttp\Promise\PromiseInterface A promise that will return a processed response.
     */
    private function makeAsyncRequest(Request $request, string $returnType, callable $exceptionHandler)
    {
        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function (ResponseInterface $response) use ($returnType) {
                    return $this->responseToReturn($response, $returnType);
                },
                function (RequestException $exception) use ($exceptionHandler) {
                    $response = $exception->getResponse();
                    $e = new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : [],
                        $response ? (string) $response->getBody() : null
                    );
                    throw $exceptionHandler($e);
                }
            );
    }

    /**
     * Convert a response to a return standard return array.
     *
     * @template T
     * @param \Psr\Http\Message\ResponseInterface $response A response from a request with a serialized body.
     * @param string $returnType The primary return type.
     * @phpstan-param class-string<T> $returnType
     *
     * @return array structured array or response and http info.
     * @phpstan-return array{T, int, array<array<string>>}
     */
    private function responseToReturn(ResponseInterface $response, string $returnType)
    {
        return [
            $this->deserializeResponseBody($response->getBody(), $returnType),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    /**
     * Deserialize a response body.
     *
     * @template T
     * @param mixed $responseBody The response body.
     * @param string $returnType The return type.
     * @param array<string, string[]> $headers A list of headers from the response.
     * @phpstan-param class-string<T> $returnType
     *
     * @return mixed Either a string or a stream to be passed to a file object.
     * @phpstan-return T
     * @psalm-return T
     */
    private function deserializeResponseBody($responseBody, string $returnType, array $headers = [])
    {
        return ObjectSerializer::deserialize(
            $returnType === \SplFileObject::class ? $responseBody : (string) $responseBody,
            $returnType,
            $headers
        );
    }
}
