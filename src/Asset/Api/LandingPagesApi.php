<?php
/**
 * LandingPagesApi
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Asset
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Marketo Rest API
 *
 * Marketo Rest API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: developerfeedback@marketo.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace NecLimDul\MarketoRest\Asset\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Query;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\ResponseInterface;
use NecLimDul\MarketoRest\Asset\ApiException;
use NecLimDul\MarketoRest\Asset\Configuration;
use NecLimDul\MarketoRest\Asset\HeaderSelector;
use NecLimDul\MarketoRest\Asset\ObjectSerializer;

/**
 * LandingPagesApi Class Doc Comment
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Asset
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class LandingPagesApi
{

    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation approveLandingPageUsingPOST
     *
     * Approve Landing Page Draft
     *
     * @param  int $id id (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse
     */
    public function approveLandingPageUsingPOST($id)
    {
        list($response) = $this->approveLandingPageUsingPOSTWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation approveLandingPageUsingPOSTWithHttpInfo
     *
     * Approve Landing Page Draft
     *
     * @param  int $id id (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function approveLandingPageUsingPOSTWithHttpInfo($id)
    {
        $request = $this->approveLandingPageUsingPOSTRequest($id);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation approveLandingPageUsingPOSTAsync
     *
     * Approve Landing Page Draft
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function approveLandingPageUsingPOSTAsync($id)
    {
        return $this->approveLandingPageUsingPOSTAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation approveLandingPageUsingPOSTAsyncWithHttpInfo
     *
     * Approve Landing Page Draft
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function approveLandingPageUsingPOSTAsyncWithHttpInfo($id)
    {
        $request = $this->approveLandingPageUsingPOSTRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'approveLandingPageUsingPOST'
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function approveLandingPageUsingPOSTRequest($id)
    {
        // Verify the required parameter 'id' is set.
        if ($id === null || (is_array($id) && empty($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling approveLandingPageUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/landingPage/{id}/approveDraft.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            []
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation browseLandingPagesUsingGET
     *
     * Get Landing Pages
     *
     * @param  string $status Status filter for draft or approved versions (optional)
     * @param  int $max_return Maximum number of landing pages to return.  Max 200, default 20 (optional)
     * @param  int $offset Integer offset for paging (optional)
     * @param  string $folder JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39; (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse
     */
    public function browseLandingPagesUsingGET($status = null, $max_return = null, $offset = null, $folder = null)
    {
        list($response) = $this->browseLandingPagesUsingGETWithHttpInfo($status, $max_return, $offset, $folder);
        return $response;
    }

    /**
     * Operation browseLandingPagesUsingGETWithHttpInfo
     *
     * Get Landing Pages
     *
     * @param  string $status Status filter for draft or approved versions (optional)
     * @param  int $max_return Maximum number of landing pages to return.  Max 200, default 20 (optional)
     * @param  int $offset Integer offset for paging (optional)
     * @param  string $folder JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39; (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function browseLandingPagesUsingGETWithHttpInfo($status = null, $max_return = null, $offset = null, $folder = null)
    {
        $request = $this->browseLandingPagesUsingGETRequest($status, $max_return, $offset, $folder);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation browseLandingPagesUsingGETAsync
     *
     * Get Landing Pages
     *
     * @param  string $status Status filter for draft or approved versions (optional)
     * @param  int $max_return Maximum number of landing pages to return.  Max 200, default 20 (optional)
     * @param  int $offset Integer offset for paging (optional)
     * @param  string $folder JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function browseLandingPagesUsingGETAsync($status = null, $max_return = null, $offset = null, $folder = null)
    {
        return $this->browseLandingPagesUsingGETAsyncWithHttpInfo($status, $max_return, $offset, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation browseLandingPagesUsingGETAsyncWithHttpInfo
     *
     * Get Landing Pages
     *
     * @param  string $status Status filter for draft or approved versions (optional)
     * @param  int $max_return Maximum number of landing pages to return.  Max 200, default 20 (optional)
     * @param  int $offset Integer offset for paging (optional)
     * @param  string $folder JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function browseLandingPagesUsingGETAsyncWithHttpInfo($status = null, $max_return = null, $offset = null, $folder = null)
    {
        $request = $this->browseLandingPagesUsingGETRequest($status, $max_return, $offset, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'browseLandingPagesUsingGET'
     *
     * @param  string $status Status filter for draft or approved versions (optional)
     * @param  int $max_return Maximum number of landing pages to return.  Max 200, default 20 (optional)
     * @param  int $offset Integer offset for paging (optional)
     * @param  string $folder JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function browseLandingPagesUsingGETRequest($status = null, $max_return = null, $offset = null, $folder = null)
    {

        $resourcePath = '/rest/asset/v1/landingPages.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Query parameters.
        if (is_array($status)) {
            $status = ObjectSerializer::serializeCollection($status, '', true);
        }
        $queryParams['status'] = $status;
        if (is_array($max_return)) {
            $max_return = ObjectSerializer::serializeCollection($max_return, '', true);
        }
        $queryParams['maxReturn'] = $max_return;
        if (is_array($offset)) {
            $offset = ObjectSerializer::serializeCollection($offset, '', true);
        }
        $queryParams['offset'] = $offset;
        if (is_array($folder)) {
            $folder = ObjectSerializer::serializeCollection($folder, '', true);
        }
        $queryParams['folder'] = $folder;
        // Remove any null (optional values).
        $queryParams = array_filter($queryParams, function($v) { return $v !== null; });
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            []
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cloneLandingPageUsingPOST
     *
     * Clone Landing Page
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\Folder $folder folder (required)
     * @param  string $name Name of the landing page (required)
     * @param  string $description Description of the asset (optional)
     * @param  int $template Id of the template used (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse
     */
    public function cloneLandingPageUsingPOST($id, $folder, $name, $description = null, $template = null)
    {
        list($response) = $this->cloneLandingPageUsingPOSTWithHttpInfo($id, $folder, $name, $description, $template);
        return $response;
    }

    /**
     * Operation cloneLandingPageUsingPOSTWithHttpInfo
     *
     * Clone Landing Page
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\Folder $folder (required)
     * @param  string $name Name of the landing page (required)
     * @param  string $description Description of the asset (optional)
     * @param  int $template Id of the template used (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cloneLandingPageUsingPOSTWithHttpInfo($id, $folder, $name, $description = null, $template = null)
    {
        $request = $this->cloneLandingPageUsingPOSTRequest($id, $folder, $name, $description, $template);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cloneLandingPageUsingPOSTAsync
     *
     * Clone Landing Page
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\Folder $folder (required)
     * @param  string $name Name of the landing page (required)
     * @param  string $description Description of the asset (optional)
     * @param  int $template Id of the template used (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cloneLandingPageUsingPOSTAsync($id, $folder, $name, $description = null, $template = null)
    {
        return $this->cloneLandingPageUsingPOSTAsyncWithHttpInfo($id, $folder, $name, $description, $template)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cloneLandingPageUsingPOSTAsyncWithHttpInfo
     *
     * Clone Landing Page
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\Folder $folder (required)
     * @param  string $name Name of the landing page (required)
     * @param  string $description Description of the asset (optional)
     * @param  int $template Id of the template used (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cloneLandingPageUsingPOSTAsyncWithHttpInfo($id, $folder, $name, $description = null, $template = null)
    {
        $request = $this->cloneLandingPageUsingPOSTRequest($id, $folder, $name, $description, $template);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'cloneLandingPageUsingPOST'
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\Folder $folder (required)
     * @param  string $name Name of the landing page (required)
     * @param  string $description Description of the asset (optional)
     * @param  int $template Id of the template used (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function cloneLandingPageUsingPOSTRequest($id, $folder, $name, $description = null, $template = null)
    {
        // Verify the required parameter 'id' is set.
        if ($id === null || (is_array($id) && empty($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling cloneLandingPageUsingPOST'
            );
        }
        // Verify the required parameter 'folder' is set.
        if ($folder === null || (is_array($folder) && empty($folder))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $folder when calling cloneLandingPageUsingPOST'
            );
        }
        // Verify the required parameter 'name' is set.
        if ($name === null || (is_array($name) && empty($name))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cloneLandingPageUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/landingPage/{id}/clone.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        // Form parameters.
        /** @var string[][] $formParams */
        $formParams = [];
        $multipart = false;
        $formParams['description'] = ObjectSerializer::toFormValue($description);
        $formParams['folder'] = ObjectSerializer::toFormValue($folder);
        $formParams['name'] = ObjectSerializer::toFormValue($name);
        $formParams['template'] = ObjectSerializer::toFormValue($template);
        // Remove any null (optional values).
        $formParams = array_filter($formParams, function($v) { return $v !== null; });
        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }
        if (!empty($formParams)) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    foreach ((array) $formParamValue as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createLandingPageUsingPOST
     *
     * Create Landing Page
     *
     * @param  \NecLimDul\MarketoRest\Asset\Model\Folder $folder folder (required)
     * @param  string $name Name of the landing page (required)
     * @param  int $template Id of the template used (required)
     * @param  string $custom_head_html Any custom HTML to embed in the &lt;head&gt; tag of the page (optional)
     * @param  string $description Description of the asset (optional)
     * @param  string $facebook_og_tags Any OpenGraph meta tags to apply to the page (optional)
     * @param  string $keywords keywords (optional)
     * @param  bool $mobile_enabled Whether the page has mobile viewing enabled.  Free-form pages only.  Default false (optional)
     * @param  bool $prefill_form Boolean to toggle whether forms embedded in the page will prefill.  Default false (optional)
     * @param  string $robots Robots directives to apply to the pages meta tags (optional)
     * @param  string $title Title element of the landing page (optional)
     * @param  string $url_page_name URL path of the page.  Derived from the name field if unset (optional)
     * @param  string $workspace Name of the workspace (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse
     */
    public function createLandingPageUsingPOST($folder, $name, $template, $custom_head_html = null, $description = null, $facebook_og_tags = null, $keywords = null, $mobile_enabled = null, $prefill_form = null, $robots = null, $title = null, $url_page_name = null, $workspace = null)
    {
        list($response) = $this->createLandingPageUsingPOSTWithHttpInfo($folder, $name, $template, $custom_head_html, $description, $facebook_og_tags, $keywords, $mobile_enabled, $prefill_form, $robots, $title, $url_page_name, $workspace);
        return $response;
    }

    /**
     * Operation createLandingPageUsingPOSTWithHttpInfo
     *
     * Create Landing Page
     *
     * @param  \NecLimDul\MarketoRest\Asset\Model\Folder $folder (required)
     * @param  string $name Name of the landing page (required)
     * @param  int $template Id of the template used (required)
     * @param  string $custom_head_html Any custom HTML to embed in the &lt;head&gt; tag of the page (optional)
     * @param  string $description Description of the asset (optional)
     * @param  string $facebook_og_tags Any OpenGraph meta tags to apply to the page (optional)
     * @param  string $keywords (optional)
     * @param  bool $mobile_enabled Whether the page has mobile viewing enabled.  Free-form pages only.  Default false (optional)
     * @param  bool $prefill_form Boolean to toggle whether forms embedded in the page will prefill.  Default false (optional)
     * @param  string $robots Robots directives to apply to the pages meta tags (optional)
     * @param  string $title Title element of the landing page (optional)
     * @param  string $url_page_name URL path of the page.  Derived from the name field if unset (optional)
     * @param  string $workspace Name of the workspace (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createLandingPageUsingPOSTWithHttpInfo($folder, $name, $template, $custom_head_html = null, $description = null, $facebook_og_tags = null, $keywords = null, $mobile_enabled = null, $prefill_form = null, $robots = null, $title = null, $url_page_name = null, $workspace = null)
    {
        $request = $this->createLandingPageUsingPOSTRequest($folder, $name, $template, $custom_head_html, $description, $facebook_og_tags, $keywords, $mobile_enabled, $prefill_form, $robots, $title, $url_page_name, $workspace);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createLandingPageUsingPOSTAsync
     *
     * Create Landing Page
     *
     * @param  \NecLimDul\MarketoRest\Asset\Model\Folder $folder (required)
     * @param  string $name Name of the landing page (required)
     * @param  int $template Id of the template used (required)
     * @param  string $custom_head_html Any custom HTML to embed in the &lt;head&gt; tag of the page (optional)
     * @param  string $description Description of the asset (optional)
     * @param  string $facebook_og_tags Any OpenGraph meta tags to apply to the page (optional)
     * @param  string $keywords (optional)
     * @param  bool $mobile_enabled Whether the page has mobile viewing enabled.  Free-form pages only.  Default false (optional)
     * @param  bool $prefill_form Boolean to toggle whether forms embedded in the page will prefill.  Default false (optional)
     * @param  string $robots Robots directives to apply to the pages meta tags (optional)
     * @param  string $title Title element of the landing page (optional)
     * @param  string $url_page_name URL path of the page.  Derived from the name field if unset (optional)
     * @param  string $workspace Name of the workspace (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createLandingPageUsingPOSTAsync($folder, $name, $template, $custom_head_html = null, $description = null, $facebook_og_tags = null, $keywords = null, $mobile_enabled = null, $prefill_form = null, $robots = null, $title = null, $url_page_name = null, $workspace = null)
    {
        return $this->createLandingPageUsingPOSTAsyncWithHttpInfo($folder, $name, $template, $custom_head_html, $description, $facebook_og_tags, $keywords, $mobile_enabled, $prefill_form, $robots, $title, $url_page_name, $workspace)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createLandingPageUsingPOSTAsyncWithHttpInfo
     *
     * Create Landing Page
     *
     * @param  \NecLimDul\MarketoRest\Asset\Model\Folder $folder (required)
     * @param  string $name Name of the landing page (required)
     * @param  int $template Id of the template used (required)
     * @param  string $custom_head_html Any custom HTML to embed in the &lt;head&gt; tag of the page (optional)
     * @param  string $description Description of the asset (optional)
     * @param  string $facebook_og_tags Any OpenGraph meta tags to apply to the page (optional)
     * @param  string $keywords (optional)
     * @param  bool $mobile_enabled Whether the page has mobile viewing enabled.  Free-form pages only.  Default false (optional)
     * @param  bool $prefill_form Boolean to toggle whether forms embedded in the page will prefill.  Default false (optional)
     * @param  string $robots Robots directives to apply to the pages meta tags (optional)
     * @param  string $title Title element of the landing page (optional)
     * @param  string $url_page_name URL path of the page.  Derived from the name field if unset (optional)
     * @param  string $workspace Name of the workspace (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createLandingPageUsingPOSTAsyncWithHttpInfo($folder, $name, $template, $custom_head_html = null, $description = null, $facebook_og_tags = null, $keywords = null, $mobile_enabled = null, $prefill_form = null, $robots = null, $title = null, $url_page_name = null, $workspace = null)
    {
        $request = $this->createLandingPageUsingPOSTRequest($folder, $name, $template, $custom_head_html, $description, $facebook_og_tags, $keywords, $mobile_enabled, $prefill_form, $robots, $title, $url_page_name, $workspace);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'createLandingPageUsingPOST'
     *
     * @param  \NecLimDul\MarketoRest\Asset\Model\Folder $folder (required)
     * @param  string $name Name of the landing page (required)
     * @param  int $template Id of the template used (required)
     * @param  string $custom_head_html Any custom HTML to embed in the &lt;head&gt; tag of the page (optional)
     * @param  string $description Description of the asset (optional)
     * @param  string $facebook_og_tags Any OpenGraph meta tags to apply to the page (optional)
     * @param  string $keywords (optional)
     * @param  bool $mobile_enabled Whether the page has mobile viewing enabled.  Free-form pages only.  Default false (optional)
     * @param  bool $prefill_form Boolean to toggle whether forms embedded in the page will prefill.  Default false (optional)
     * @param  string $robots Robots directives to apply to the pages meta tags (optional)
     * @param  string $title Title element of the landing page (optional)
     * @param  string $url_page_name URL path of the page.  Derived from the name field if unset (optional)
     * @param  string $workspace Name of the workspace (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createLandingPageUsingPOSTRequest($folder, $name, $template, $custom_head_html = null, $description = null, $facebook_og_tags = null, $keywords = null, $mobile_enabled = null, $prefill_form = null, $robots = null, $title = null, $url_page_name = null, $workspace = null)
    {
        // Verify the required parameter 'folder' is set.
        if ($folder === null || (is_array($folder) && empty($folder))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $folder when calling createLandingPageUsingPOST'
            );
        }
        // Verify the required parameter 'name' is set.
        if ($name === null || (is_array($name) && empty($name))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling createLandingPageUsingPOST'
            );
        }
        // Verify the required parameter 'template' is set.
        if ($template === null || (is_array($template) && empty($template))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $template when calling createLandingPageUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/landingPages.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Form parameters.
        /** @var string[][] $formParams */
        $formParams = [];
        $multipart = false;
        $formParams['customHeadHTML'] = ObjectSerializer::toFormValue($custom_head_html);
        $formParams['description'] = ObjectSerializer::toFormValue($description);
        $formParams['facebookOgTags'] = ObjectSerializer::toFormValue($facebook_og_tags);
        $formParams['folder'] = ObjectSerializer::toFormValue($folder);
        $formParams['keywords'] = ObjectSerializer::toFormValue($keywords);
        $formParams['mobileEnabled'] = ObjectSerializer::toFormValue($mobile_enabled);
        $formParams['name'] = ObjectSerializer::toFormValue($name);
        $formParams['prefillForm'] = ObjectSerializer::toFormValue($prefill_form);
        $formParams['robots'] = ObjectSerializer::toFormValue($robots);
        $formParams['template'] = ObjectSerializer::toFormValue($template);
        $formParams['title'] = ObjectSerializer::toFormValue($title);
        $formParams['urlPageName'] = ObjectSerializer::toFormValue($url_page_name);
        $formParams['workspace'] = ObjectSerializer::toFormValue($workspace);
        // Remove any null (optional values).
        $formParams = array_filter($formParams, function($v) { return $v !== null; });
        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }
        if (!empty($formParams)) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    foreach ((array) $formParamValue as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteLandingPageByIdUsingPOST
     *
     * Delete Landing Page
     *
     * @param  int $id id (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse
     */
    public function deleteLandingPageByIdUsingPOST($id)
    {
        list($response) = $this->deleteLandingPageByIdUsingPOSTWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation deleteLandingPageByIdUsingPOSTWithHttpInfo
     *
     * Delete Landing Page
     *
     * @param  int $id id (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLandingPageByIdUsingPOSTWithHttpInfo($id)
    {
        $request = $this->deleteLandingPageByIdUsingPOSTRequest($id);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteLandingPageByIdUsingPOSTAsync
     *
     * Delete Landing Page
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLandingPageByIdUsingPOSTAsync($id)
    {
        return $this->deleteLandingPageByIdUsingPOSTAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteLandingPageByIdUsingPOSTAsyncWithHttpInfo
     *
     * Delete Landing Page
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLandingPageByIdUsingPOSTAsyncWithHttpInfo($id)
    {
        $request = $this->deleteLandingPageByIdUsingPOSTRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteLandingPageByIdUsingPOST'
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteLandingPageByIdUsingPOSTRequest($id)
    {
        // Verify the required parameter 'id' is set.
        if ($id === null || (is_array($id) && empty($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteLandingPageByIdUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/landingPage/{id}/delete.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            []
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation discardLandingPageByIdUsingPOST
     *
     * Discard Landing Page Draft
     *
     * @param  int $id id (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse
     */
    public function discardLandingPageByIdUsingPOST($id)
    {
        list($response) = $this->discardLandingPageByIdUsingPOSTWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation discardLandingPageByIdUsingPOSTWithHttpInfo
     *
     * Discard Landing Page Draft
     *
     * @param  int $id id (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function discardLandingPageByIdUsingPOSTWithHttpInfo($id)
    {
        $request = $this->discardLandingPageByIdUsingPOSTRequest($id);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation discardLandingPageByIdUsingPOSTAsync
     *
     * Discard Landing Page Draft
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function discardLandingPageByIdUsingPOSTAsync($id)
    {
        return $this->discardLandingPageByIdUsingPOSTAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation discardLandingPageByIdUsingPOSTAsyncWithHttpInfo
     *
     * Discard Landing Page Draft
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function discardLandingPageByIdUsingPOSTAsyncWithHttpInfo($id)
    {
        $request = $this->discardLandingPageByIdUsingPOSTRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'discardLandingPageByIdUsingPOST'
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function discardLandingPageByIdUsingPOSTRequest($id)
    {
        // Verify the required parameter 'id' is set.
        if ($id === null || (is_array($id) && empty($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling discardLandingPageByIdUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/landingPage/{id}/discardDraft.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            []
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLandingPageByIdUsingGET
     *
     * Get Landing Page by Id
     *
     * @param  int $id id (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse
     */
    public function getLandingPageByIdUsingGET($id, $status = null)
    {
        list($response) = $this->getLandingPageByIdUsingGETWithHttpInfo($id, $status);
        return $response;
    }

    /**
     * Operation getLandingPageByIdUsingGETWithHttpInfo
     *
     * Get Landing Page by Id
     *
     * @param  int $id id (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLandingPageByIdUsingGETWithHttpInfo($id, $status = null)
    {
        $request = $this->getLandingPageByIdUsingGETRequest($id, $status);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLandingPageByIdUsingGETAsync
     *
     * Get Landing Page by Id
     *
     * @param  int $id id (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLandingPageByIdUsingGETAsync($id, $status = null)
    {
        return $this->getLandingPageByIdUsingGETAsyncWithHttpInfo($id, $status)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLandingPageByIdUsingGETAsyncWithHttpInfo
     *
     * Get Landing Page by Id
     *
     * @param  int $id id (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLandingPageByIdUsingGETAsyncWithHttpInfo($id, $status = null)
    {
        $request = $this->getLandingPageByIdUsingGETRequest($id, $status);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLandingPageByIdUsingGET'
     *
     * @param  int $id id (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLandingPageByIdUsingGETRequest($id, $status = null)
    {
        // Verify the required parameter 'id' is set.
        if ($id === null || (is_array($id) && empty($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getLandingPageByIdUsingGET'
            );
        }

        $resourcePath = '/rest/asset/v1/landingPage/{id}.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Query parameters.
        if (is_array($status)) {
            $status = ObjectSerializer::serializeCollection($status, '', true);
        }
        $queryParams['status'] = $status;
        // Remove any null (optional values).
        $queryParams = array_filter($queryParams, function($v) { return $v !== null; });

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            []
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLandingPageByNameUsingGET
     *
     * Get Landing Page by Name
     *
     * @param  string $name Name of the landing page (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     * @param  int $max_return Maximum number of channels to return.  Max 200, default 20 (optional)
     * @param  int $offset Integer offset for paging (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse
     */
    public function getLandingPageByNameUsingGET($name, $status = null, $max_return = null, $offset = null)
    {
        list($response) = $this->getLandingPageByNameUsingGETWithHttpInfo($name, $status, $max_return, $offset);
        return $response;
    }

    /**
     * Operation getLandingPageByNameUsingGETWithHttpInfo
     *
     * Get Landing Page by Name
     *
     * @param  string $name Name of the landing page (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     * @param  int $max_return Maximum number of channels to return.  Max 200, default 20 (optional)
     * @param  int $offset Integer offset for paging (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLandingPageByNameUsingGETWithHttpInfo($name, $status = null, $max_return = null, $offset = null)
    {
        $request = $this->getLandingPageByNameUsingGETRequest($name, $status, $max_return, $offset);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLandingPageByNameUsingGETAsync
     *
     * Get Landing Page by Name
     *
     * @param  string $name Name of the landing page (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     * @param  int $max_return Maximum number of channels to return.  Max 200, default 20 (optional)
     * @param  int $offset Integer offset for paging (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLandingPageByNameUsingGETAsync($name, $status = null, $max_return = null, $offset = null)
    {
        return $this->getLandingPageByNameUsingGETAsyncWithHttpInfo($name, $status, $max_return, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLandingPageByNameUsingGETAsyncWithHttpInfo
     *
     * Get Landing Page by Name
     *
     * @param  string $name Name of the landing page (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     * @param  int $max_return Maximum number of channels to return.  Max 200, default 20 (optional)
     * @param  int $offset Integer offset for paging (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLandingPageByNameUsingGETAsyncWithHttpInfo($name, $status = null, $max_return = null, $offset = null)
    {
        $request = $this->getLandingPageByNameUsingGETRequest($name, $status, $max_return, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLandingPageByNameUsingGET'
     *
     * @param  string $name Name of the landing page (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     * @param  int $max_return Maximum number of channels to return.  Max 200, default 20 (optional)
     * @param  int $offset Integer offset for paging (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLandingPageByNameUsingGETRequest($name, $status = null, $max_return = null, $offset = null)
    {
        // Verify the required parameter 'name' is set.
        if ($name === null || (is_array($name) && empty($name))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling getLandingPageByNameUsingGET'
            );
        }

        $resourcePath = '/rest/asset/v1/landingPage/byName.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Query parameters.
        if (is_array($name)) {
            $name = ObjectSerializer::serializeCollection($name, '', true);
        }
        $queryParams['name'] = $name;
        if (is_array($status)) {
            $status = ObjectSerializer::serializeCollection($status, '', true);
        }
        $queryParams['status'] = $status;
        if (is_array($max_return)) {
            $max_return = ObjectSerializer::serializeCollection($max_return, '', true);
        }
        $queryParams['maxReturn'] = $max_return;
        if (is_array($offset)) {
            $offset = ObjectSerializer::serializeCollection($offset, '', true);
        }
        $queryParams['offset'] = $offset;
        // Remove any null (optional values).
        $queryParams = array_filter($queryParams, function($v) { return $v !== null; });
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            []
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLandingPageFullContentUsingGET
     *
     * Get Landing Page Full Content
     *
     * @param  int $id Id of the landing page. (required)
     * @param  int $lead_id The lead id to impersonate.  Landing page is rendered as though it was viewed by this lead. (optional)
     * @param  string $segmentation JSON array of of segmentations.  Each segmentation must be a JSON object with members &#39;segmentationId&#39;, and &#39;segmentId&#39;.&lt;br&gt;Example: [{\&quot;segmentationId\&quot;:1030,\&quot;segmentId\&quot;:1103}] (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfGetLandingPageFullContentResponse
     */
    public function getLandingPageFullContentUsingGET($id, $lead_id = null, $segmentation = null)
    {
        list($response) = $this->getLandingPageFullContentUsingGETWithHttpInfo($id, $lead_id, $segmentation);
        return $response;
    }

    /**
     * Operation getLandingPageFullContentUsingGETWithHttpInfo
     *
     * Get Landing Page Full Content
     *
     * @param  int $id Id of the landing page. (required)
     * @param  int $lead_id The lead id to impersonate.  Landing page is rendered as though it was viewed by this lead. (optional)
     * @param  string $segmentation JSON array of of segmentations.  Each segmentation must be a JSON object with members &#39;segmentationId&#39;, and &#39;segmentId&#39;.&lt;br&gt;Example: [{\&quot;segmentationId\&quot;:1030,\&quot;segmentId\&quot;:1103}] (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfGetLandingPageFullContentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLandingPageFullContentUsingGETWithHttpInfo($id, $lead_id = null, $segmentation = null)
    {
        $request = $this->getLandingPageFullContentUsingGETRequest($id, $lead_id, $segmentation);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfGetLandingPageFullContentResponse');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfGetLandingPageFullContentResponse');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Asset\Model\ResponseOfGetLandingPageFullContentResponse',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLandingPageFullContentUsingGETAsync
     *
     * Get Landing Page Full Content
     *
     * @param  int $id Id of the landing page. (required)
     * @param  int $lead_id The lead id to impersonate.  Landing page is rendered as though it was viewed by this lead. (optional)
     * @param  string $segmentation JSON array of of segmentations.  Each segmentation must be a JSON object with members &#39;segmentationId&#39;, and &#39;segmentId&#39;.&lt;br&gt;Example: [{\&quot;segmentationId\&quot;:1030,\&quot;segmentId\&quot;:1103}] (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLandingPageFullContentUsingGETAsync($id, $lead_id = null, $segmentation = null)
    {
        return $this->getLandingPageFullContentUsingGETAsyncWithHttpInfo($id, $lead_id, $segmentation)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLandingPageFullContentUsingGETAsyncWithHttpInfo
     *
     * Get Landing Page Full Content
     *
     * @param  int $id Id of the landing page. (required)
     * @param  int $lead_id The lead id to impersonate.  Landing page is rendered as though it was viewed by this lead. (optional)
     * @param  string $segmentation JSON array of of segmentations.  Each segmentation must be a JSON object with members &#39;segmentationId&#39;, and &#39;segmentId&#39;.&lt;br&gt;Example: [{\&quot;segmentationId\&quot;:1030,\&quot;segmentId\&quot;:1103}] (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLandingPageFullContentUsingGETAsyncWithHttpInfo($id, $lead_id = null, $segmentation = null)
    {
        $request = $this->getLandingPageFullContentUsingGETRequest($id, $lead_id, $segmentation);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfGetLandingPageFullContentResponse');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLandingPageFullContentUsingGET'
     *
     * @param  int $id Id of the landing page. (required)
     * @param  int $lead_id The lead id to impersonate.  Landing page is rendered as though it was viewed by this lead. (optional)
     * @param  string $segmentation JSON array of of segmentations.  Each segmentation must be a JSON object with members &#39;segmentationId&#39;, and &#39;segmentId&#39;.&lt;br&gt;Example: [{\&quot;segmentationId\&quot;:1030,\&quot;segmentId\&quot;:1103}] (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLandingPageFullContentUsingGETRequest($id, $lead_id = null, $segmentation = null)
    {
        // Verify the required parameter 'id' is set.
        if ($id === null || (is_array($id) && empty($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getLandingPageFullContentUsingGET'
            );
        }

        $resourcePath = '/rest/asset/v1/landingPage/{id}/fullContent.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Query parameters.
        if (is_array($lead_id)) {
            $lead_id = ObjectSerializer::serializeCollection($lead_id, '', true);
        }
        $queryParams['leadId'] = $lead_id;
        if (is_array($segmentation)) {
            $segmentation = ObjectSerializer::serializeCollection($segmentation, '', true);
        }
        $queryParams['segmentation'] = $segmentation;
        // Remove any null (optional values).
        $queryParams = array_filter($queryParams, function($v) { return $v !== null; });

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            []
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getVariablesUsingGET
     *
     * Get Landing Page Variables
     *
     * @param  int $id Id of the landing page (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageVariableResponse
     */
    public function getVariablesUsingGET($id, $status = null)
    {
        list($response) = $this->getVariablesUsingGETWithHttpInfo($id, $status);
        return $response;
    }

    /**
     * Operation getVariablesUsingGETWithHttpInfo
     *
     * Get Landing Page Variables
     *
     * @param  int $id Id of the landing page (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageVariableResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getVariablesUsingGETWithHttpInfo($id, $status = null)
    {
        $request = $this->getVariablesUsingGETRequest($id, $status);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageVariableResponse');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageVariableResponse');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageVariableResponse',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getVariablesUsingGETAsync
     *
     * Get Landing Page Variables
     *
     * @param  int $id Id of the landing page (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVariablesUsingGETAsync($id, $status = null)
    {
        return $this->getVariablesUsingGETAsyncWithHttpInfo($id, $status)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getVariablesUsingGETAsyncWithHttpInfo
     *
     * Get Landing Page Variables
     *
     * @param  int $id Id of the landing page (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVariablesUsingGETAsyncWithHttpInfo($id, $status = null)
    {
        $request = $this->getVariablesUsingGETRequest($id, $status);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageVariableResponse');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'getVariablesUsingGET'
     *
     * @param  int $id Id of the landing page (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getVariablesUsingGETRequest($id, $status = null)
    {
        // Verify the required parameter 'id' is set.
        if ($id === null || (is_array($id) && empty($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getVariablesUsingGET'
            );
        }

        $resourcePath = '/rest/asset/v1/landingPage/{id}/variables.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Query parameters.
        if (is_array($status)) {
            $status = ObjectSerializer::serializeCollection($status, '', true);
        }
        $queryParams['status'] = $status;
        // Remove any null (optional values).
        $queryParams = array_filter($queryParams, function($v) { return $v !== null; });

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            []
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation unapproveLandingPageByIdUsingPOST
     *
     * Unapprove Landing Page
     *
     * @param  int $id id (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse
     */
    public function unapproveLandingPageByIdUsingPOST($id)
    {
        list($response) = $this->unapproveLandingPageByIdUsingPOSTWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation unapproveLandingPageByIdUsingPOSTWithHttpInfo
     *
     * Unapprove Landing Page
     *
     * @param  int $id id (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function unapproveLandingPageByIdUsingPOSTWithHttpInfo($id)
    {
        $request = $this->unapproveLandingPageByIdUsingPOSTRequest($id);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation unapproveLandingPageByIdUsingPOSTAsync
     *
     * Unapprove Landing Page
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function unapproveLandingPageByIdUsingPOSTAsync($id)
    {
        return $this->unapproveLandingPageByIdUsingPOSTAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation unapproveLandingPageByIdUsingPOSTAsyncWithHttpInfo
     *
     * Unapprove Landing Page
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function unapproveLandingPageByIdUsingPOSTAsyncWithHttpInfo($id)
    {
        $request = $this->unapproveLandingPageByIdUsingPOSTRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'unapproveLandingPageByIdUsingPOST'
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function unapproveLandingPageByIdUsingPOSTRequest($id)
    {
        // Verify the required parameter 'id' is set.
        if ($id === null || (is_array($id) && empty($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling unapproveLandingPageByIdUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/landingPage/{id}/unapprove.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            []
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateLandingPageUsingPOST
     *
     * Update Landing Page Metadata
     *
     * @param  int $id id (required)
     * @param  string $custom_head_html Any custom HTML to embed in the &lt;head&gt; tag of the page (optional)
     * @param  string $description Description of the asset (optional)
     * @param  string $facebook_og_tags Any OpenGraph meta tags to apply to the page (optional)
     * @param  string $keywords keywords (optional)
     * @param  string $meta_tags_description Meta description property of the page (optional)
     * @param  bool $mobile_enabled Whether the page has mobile viewing enabled.  Free-form pages only.  Default false (optional)
     * @param  string $name Name of the landing page (optional)
     * @param  string $robots Robots directives to apply to the pages meta tags (optional)
     * @param  string $style_over_ride Additional CSS styles to append to the landing page &lt;head&gt; (optional)
     * @param  string $title Title element of the landing page (optional)
     * @param  string $url_page_name URL path of the page.  Derived from the name field if unset (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse
     */
    public function updateLandingPageUsingPOST($id, $custom_head_html = null, $description = null, $facebook_og_tags = null, $keywords = null, $meta_tags_description = null, $mobile_enabled = null, $name = null, $robots = null, $style_over_ride = null, $title = null, $url_page_name = null)
    {
        list($response) = $this->updateLandingPageUsingPOSTWithHttpInfo($id, $custom_head_html, $description, $facebook_og_tags, $keywords, $meta_tags_description, $mobile_enabled, $name, $robots, $style_over_ride, $title, $url_page_name);
        return $response;
    }

    /**
     * Operation updateLandingPageUsingPOSTWithHttpInfo
     *
     * Update Landing Page Metadata
     *
     * @param  int $id id (required)
     * @param  string $custom_head_html Any custom HTML to embed in the &lt;head&gt; tag of the page (optional)
     * @param  string $description Description of the asset (optional)
     * @param  string $facebook_og_tags Any OpenGraph meta tags to apply to the page (optional)
     * @param  string $keywords (optional)
     * @param  string $meta_tags_description Meta description property of the page (optional)
     * @param  bool $mobile_enabled Whether the page has mobile viewing enabled.  Free-form pages only.  Default false (optional)
     * @param  string $name Name of the landing page (optional)
     * @param  string $robots Robots directives to apply to the pages meta tags (optional)
     * @param  string $style_over_ride Additional CSS styles to append to the landing page &lt;head&gt; (optional)
     * @param  string $title Title element of the landing page (optional)
     * @param  string $url_page_name URL path of the page.  Derived from the name field if unset (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLandingPageUsingPOSTWithHttpInfo($id, $custom_head_html = null, $description = null, $facebook_og_tags = null, $keywords = null, $meta_tags_description = null, $mobile_enabled = null, $name = null, $robots = null, $style_over_ride = null, $title = null, $url_page_name = null)
    {
        $request = $this->updateLandingPageUsingPOSTRequest($id, $custom_head_html, $description, $facebook_og_tags, $keywords, $meta_tags_description, $mobile_enabled, $name, $robots, $style_over_ride, $title, $url_page_name);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateLandingPageUsingPOSTAsync
     *
     * Update Landing Page Metadata
     *
     * @param  int $id id (required)
     * @param  string $custom_head_html Any custom HTML to embed in the &lt;head&gt; tag of the page (optional)
     * @param  string $description Description of the asset (optional)
     * @param  string $facebook_og_tags Any OpenGraph meta tags to apply to the page (optional)
     * @param  string $keywords (optional)
     * @param  string $meta_tags_description Meta description property of the page (optional)
     * @param  bool $mobile_enabled Whether the page has mobile viewing enabled.  Free-form pages only.  Default false (optional)
     * @param  string $name Name of the landing page (optional)
     * @param  string $robots Robots directives to apply to the pages meta tags (optional)
     * @param  string $style_over_ride Additional CSS styles to append to the landing page &lt;head&gt; (optional)
     * @param  string $title Title element of the landing page (optional)
     * @param  string $url_page_name URL path of the page.  Derived from the name field if unset (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLandingPageUsingPOSTAsync($id, $custom_head_html = null, $description = null, $facebook_og_tags = null, $keywords = null, $meta_tags_description = null, $mobile_enabled = null, $name = null, $robots = null, $style_over_ride = null, $title = null, $url_page_name = null)
    {
        return $this->updateLandingPageUsingPOSTAsyncWithHttpInfo($id, $custom_head_html, $description, $facebook_og_tags, $keywords, $meta_tags_description, $mobile_enabled, $name, $robots, $style_over_ride, $title, $url_page_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateLandingPageUsingPOSTAsyncWithHttpInfo
     *
     * Update Landing Page Metadata
     *
     * @param  int $id id (required)
     * @param  string $custom_head_html Any custom HTML to embed in the &lt;head&gt; tag of the page (optional)
     * @param  string $description Description of the asset (optional)
     * @param  string $facebook_og_tags Any OpenGraph meta tags to apply to the page (optional)
     * @param  string $keywords (optional)
     * @param  string $meta_tags_description Meta description property of the page (optional)
     * @param  bool $mobile_enabled Whether the page has mobile viewing enabled.  Free-form pages only.  Default false (optional)
     * @param  string $name Name of the landing page (optional)
     * @param  string $robots Robots directives to apply to the pages meta tags (optional)
     * @param  string $style_over_ride Additional CSS styles to append to the landing page &lt;head&gt; (optional)
     * @param  string $title Title element of the landing page (optional)
     * @param  string $url_page_name URL path of the page.  Derived from the name field if unset (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLandingPageUsingPOSTAsyncWithHttpInfo($id, $custom_head_html = null, $description = null, $facebook_og_tags = null, $keywords = null, $meta_tags_description = null, $mobile_enabled = null, $name = null, $robots = null, $style_over_ride = null, $title = null, $url_page_name = null)
    {
        $request = $this->updateLandingPageUsingPOSTRequest($id, $custom_head_html, $description, $facebook_og_tags, $keywords, $meta_tags_description, $mobile_enabled, $name, $robots, $style_over_ride, $title, $url_page_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageResponse');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateLandingPageUsingPOST'
     *
     * @param  int $id id (required)
     * @param  string $custom_head_html Any custom HTML to embed in the &lt;head&gt; tag of the page (optional)
     * @param  string $description Description of the asset (optional)
     * @param  string $facebook_og_tags Any OpenGraph meta tags to apply to the page (optional)
     * @param  string $keywords (optional)
     * @param  string $meta_tags_description Meta description property of the page (optional)
     * @param  bool $mobile_enabled Whether the page has mobile viewing enabled.  Free-form pages only.  Default false (optional)
     * @param  string $name Name of the landing page (optional)
     * @param  string $robots Robots directives to apply to the pages meta tags (optional)
     * @param  string $style_over_ride Additional CSS styles to append to the landing page &lt;head&gt; (optional)
     * @param  string $title Title element of the landing page (optional)
     * @param  string $url_page_name URL path of the page.  Derived from the name field if unset (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateLandingPageUsingPOSTRequest($id, $custom_head_html = null, $description = null, $facebook_og_tags = null, $keywords = null, $meta_tags_description = null, $mobile_enabled = null, $name = null, $robots = null, $style_over_ride = null, $title = null, $url_page_name = null)
    {
        // Verify the required parameter 'id' is set.
        if ($id === null || (is_array($id) && empty($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateLandingPageUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/landingPage/{id}.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        // Form parameters.
        /** @var string[][] $formParams */
        $formParams = [];
        $multipart = false;
        $formParams['customHeadHTML'] = ObjectSerializer::toFormValue($custom_head_html);
        $formParams['description'] = ObjectSerializer::toFormValue($description);
        $formParams['facebookOgTags'] = ObjectSerializer::toFormValue($facebook_og_tags);
        $formParams['keywords'] = ObjectSerializer::toFormValue($keywords);
        $formParams['metaTagsDescription'] = ObjectSerializer::toFormValue($meta_tags_description);
        $formParams['mobileEnabled'] = ObjectSerializer::toFormValue($mobile_enabled);
        $formParams['name'] = ObjectSerializer::toFormValue($name);
        $formParams['robots'] = ObjectSerializer::toFormValue($robots);
        $formParams['styleOverRide'] = ObjectSerializer::toFormValue($style_over_ride);
        $formParams['title'] = ObjectSerializer::toFormValue($title);
        $formParams['urlPageName'] = ObjectSerializer::toFormValue($url_page_name);
        // Remove any null (optional values).
        $formParams = array_filter($formParams, function($v) { return $v !== null; });
        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }
        if (!empty($formParams)) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    foreach ((array) $formParamValue as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateLandingPageVariableUsingPOST
     *
     * Update Landing Page Variable
     *
     * @param  int $id id (required)
     * @param  string $variable_id variableId (required)
     * @param  int $value New value of the variable (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageVariableResponse
     */
    public function updateLandingPageVariableUsingPOST($id, $variable_id, $value)
    {
        list($response) = $this->updateLandingPageVariableUsingPOSTWithHttpInfo($id, $variable_id, $value);
        return $response;
    }

    /**
     * Operation updateLandingPageVariableUsingPOSTWithHttpInfo
     *
     * Update Landing Page Variable
     *
     * @param  int $id id (required)
     * @param  string $variable_id variableId (required)
     * @param  int $value New value of the variable (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageVariableResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLandingPageVariableUsingPOSTWithHttpInfo($id, $variable_id, $value)
    {
        $request = $this->updateLandingPageVariableUsingPOSTRequest($id, $variable_id, $value);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageVariableResponse');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageVariableResponse');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageVariableResponse',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateLandingPageVariableUsingPOSTAsync
     *
     * Update Landing Page Variable
     *
     * @param  int $id id (required)
     * @param  string $variable_id variableId (required)
     * @param  int $value New value of the variable (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLandingPageVariableUsingPOSTAsync($id, $variable_id, $value)
    {
        return $this->updateLandingPageVariableUsingPOSTAsyncWithHttpInfo($id, $variable_id, $value)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateLandingPageVariableUsingPOSTAsyncWithHttpInfo
     *
     * Update Landing Page Variable
     *
     * @param  int $id id (required)
     * @param  string $variable_id variableId (required)
     * @param  int $value New value of the variable (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLandingPageVariableUsingPOSTAsyncWithHttpInfo($id, $variable_id, $value)
    {
        $request = $this->updateLandingPageVariableUsingPOSTRequest($id, $variable_id, $value);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageVariableResponse');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateLandingPageVariableUsingPOST'
     *
     * @param  int $id id (required)
     * @param  string $variable_id variableId (required)
     * @param  int $value New value of the variable (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateLandingPageVariableUsingPOSTRequest($id, $variable_id, $value)
    {
        // Verify the required parameter 'id' is set.
        if ($id === null || (is_array($id) && empty($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateLandingPageVariableUsingPOST'
            );
        }
        // Verify the required parameter 'variable_id' is set.
        if ($variable_id === null || (is_array($variable_id) && empty($variable_id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $variable_id when calling updateLandingPageVariableUsingPOST'
            );
        }
        // Verify the required parameter 'value' is set.
        if ($value === null || (is_array($value) && empty($value))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $value when calling updateLandingPageVariableUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/landingPage/{id}/variable/{variableId}.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Query parameters.
        if (is_array($value)) {
            $value = ObjectSerializer::serializeCollection($value, '', true);
        }
        $queryParams['value'] = $value;
        // Remove any null (optional values).
        $queryParams = array_filter($queryParams, function($v) { return $v !== null; });

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $resourcePath = str_replace(
            '{' . 'variableId' . '}',
            ObjectSerializer::toPathValue($variable_id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            []
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    /**
     * Make a request.
     *
     * @param \GuzzleHttp\Psr7\Request $request
     *   ...
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @return \Psr\Http\Message\ResponseInterface
     */
    private function makeRequest(Request $request) {
        $options = $this->createHttpClientOption();
        try {
           $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            $response = $e->getResponse();
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                (int) $e->getCode(),
                $response ? $response->getHeaders() : null,
                $response ? (string) $response->getBody() : null
            );
        }

        $statusCode = $response->getStatusCode();
        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    (string) $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                (string) $response->getBody()
            );
        }
        return $response;
    }

    /**
     * Convert a response to a return standard return array.
     *
     * @param \Psr\Http\Message\ResponseInterface $response
     *   A response from a request with a serialized body.
     * @param string $returnType
     *   The return type.
     *
     * @return array
     */
    private function responseToReturn(ResponseInterface $response, string $returnType) {
        return [
            $this->deserializeResponseBody($response->getBody(), $returnType),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    /**
     * Deserialize a response body.
     *
     * @param mixed $responseBody
     *   The response body.
     * @param string $returnType
     *   The return type.
     * @param array|null $headers
     *   The a list of headers from the response.
     * @return mixed
     *   Either a string or a stream to be passed to a file object.
     */
    private function deserializeResponseBody($responseBody, $returnType, $headers = [])
    {
        return ObjectSerializer::deserialize(
            $returnType === '\SplFileObject' ? $responseBody : (string) $responseBody,
            $returnType,
            $headers
        );
    }

}
