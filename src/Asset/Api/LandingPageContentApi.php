<?php
/**
 * LandingPageContentApi
 * PHP version 5
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Asset
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketo Rest API
 *
 * Marketo Rest API
 *
 * OpenAPI spec version: 1.0
 * Contact: developerfeedback@marketo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.3.4
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace NecLimDul\MarketoRest\Asset\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use NecLimDul\MarketoRest\Asset\ApiException;
use NecLimDul\MarketoRest\Asset\Configuration;
use NecLimDul\MarketoRest\Asset\HeaderSelector;
use NecLimDul\MarketoRest\Asset\ObjectSerializer;

/**
 * LandingPageContentApi Class Doc Comment
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Asset
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LandingPageContentApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addLandingPageContentUsingPOST
     *
     * Add Landing Page Content Section
     *
     * @param  int $id id (required)
     * @param  string $content_id Id of the content section.  Also the HTML id of the section. (required)
     * @param  string $type Type of content section (required)
     * @param  string $background_color background-color property of the HTML section (optional)
     * @param  string $border_color border-color property of the HTML section (optional)
     * @param  string $border_style border-style property of the HTML section (optional)
     * @param  string $border_width border-width property of the HTML section (optional)
     * @param  string $height height property of the HTML section (optional)
     * @param  bool $hide_desktop Hide the section when displayed on a desktop browser.  Default false (optional)
     * @param  bool $hide_mobile Hide the section when displayed on a mobile browser.  Default false (optional)
     * @param  string $image_open_new_window image_open_new_window (optional)
     * @param  string $left left property of the HTML section (optional)
     * @param  string $link_url URL parameter of a link type section (optional)
     * @param  string $opacity opacity property of the HTML section (optional)
     * @param  string $top top property of the HTML section (optional)
     * @param  string $value Type of content section (optional)
     * @param  string $width width property of the HTML section (optional)
     * @param  string $z_index z-index property of the HTML section (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse
     */
    public function addLandingPageContentUsingPOST($id, $content_id, $type, $background_color = null, $border_color = null, $border_style = null, $border_width = null, $height = null, $hide_desktop = null, $hide_mobile = null, $image_open_new_window = null, $left = null, $link_url = null, $opacity = null, $top = null, $value = null, $width = null, $z_index = null)
    {
        list($response) = $this->addLandingPageContentUsingPOSTWithHttpInfo($id, $content_id, $type, $background_color, $border_color, $border_style, $border_width, $height, $hide_desktop, $hide_mobile, $image_open_new_window, $left, $link_url, $opacity, $top, $value, $width, $z_index);
        return $response;
    }

    /**
     * Operation addLandingPageContentUsingPOSTWithHttpInfo
     *
     * Add Landing Page Content Section
     *
     * @param  int $id id (required)
     * @param  string $content_id Id of the content section.  Also the HTML id of the section. (required)
     * @param  string $type Type of content section (required)
     * @param  string $background_color background-color property of the HTML section (optional)
     * @param  string $border_color border-color property of the HTML section (optional)
     * @param  string $border_style border-style property of the HTML section (optional)
     * @param  string $border_width border-width property of the HTML section (optional)
     * @param  string $height height property of the HTML section (optional)
     * @param  bool $hide_desktop Hide the section when displayed on a desktop browser.  Default false (optional)
     * @param  bool $hide_mobile Hide the section when displayed on a mobile browser.  Default false (optional)
     * @param  string $image_open_new_window (optional)
     * @param  string $left left property of the HTML section (optional)
     * @param  string $link_url URL parameter of a link type section (optional)
     * @param  string $opacity opacity property of the HTML section (optional)
     * @param  string $top top property of the HTML section (optional)
     * @param  string $value Type of content section (optional)
     * @param  string $width width property of the HTML section (optional)
     * @param  string $z_index z-index property of the HTML section (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function addLandingPageContentUsingPOSTWithHttpInfo($id, $content_id, $type, $background_color = null, $border_color = null, $border_style = null, $border_width = null, $height = null, $hide_desktop = null, $hide_mobile = null, $image_open_new_window = null, $left = null, $link_url = null, $opacity = null, $top = null, $value = null, $width = null, $z_index = null)
    {
        $returnType = '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse';
        $request = $this->addLandingPageContentUsingPOSTRequest($id, $content_id, $type, $background_color, $border_color, $border_style, $border_width, $height, $hide_desktop, $hide_mobile, $image_open_new_window, $left, $link_url, $opacity, $top, $value, $width, $z_index);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addLandingPageContentUsingPOSTAsync
     *
     * Add Landing Page Content Section
     *
     * @param  int $id id (required)
     * @param  string $content_id Id of the content section.  Also the HTML id of the section. (required)
     * @param  string $type Type of content section (required)
     * @param  string $background_color background-color property of the HTML section (optional)
     * @param  string $border_color border-color property of the HTML section (optional)
     * @param  string $border_style border-style property of the HTML section (optional)
     * @param  string $border_width border-width property of the HTML section (optional)
     * @param  string $height height property of the HTML section (optional)
     * @param  bool $hide_desktop Hide the section when displayed on a desktop browser.  Default false (optional)
     * @param  bool $hide_mobile Hide the section when displayed on a mobile browser.  Default false (optional)
     * @param  string $image_open_new_window (optional)
     * @param  string $left left property of the HTML section (optional)
     * @param  string $link_url URL parameter of a link type section (optional)
     * @param  string $opacity opacity property of the HTML section (optional)
     * @param  string $top top property of the HTML section (optional)
     * @param  string $value Type of content section (optional)
     * @param  string $width width property of the HTML section (optional)
     * @param  string $z_index z-index property of the HTML section (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addLandingPageContentUsingPOSTAsync($id, $content_id, $type, $background_color = null, $border_color = null, $border_style = null, $border_width = null, $height = null, $hide_desktop = null, $hide_mobile = null, $image_open_new_window = null, $left = null, $link_url = null, $opacity = null, $top = null, $value = null, $width = null, $z_index = null)
    {
        return $this->addLandingPageContentUsingPOSTAsyncWithHttpInfo($id, $content_id, $type, $background_color, $border_color, $border_style, $border_width, $height, $hide_desktop, $hide_mobile, $image_open_new_window, $left, $link_url, $opacity, $top, $value, $width, $z_index)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addLandingPageContentUsingPOSTAsyncWithHttpInfo
     *
     * Add Landing Page Content Section
     *
     * @param  int $id id (required)
     * @param  string $content_id Id of the content section.  Also the HTML id of the section. (required)
     * @param  string $type Type of content section (required)
     * @param  string $background_color background-color property of the HTML section (optional)
     * @param  string $border_color border-color property of the HTML section (optional)
     * @param  string $border_style border-style property of the HTML section (optional)
     * @param  string $border_width border-width property of the HTML section (optional)
     * @param  string $height height property of the HTML section (optional)
     * @param  bool $hide_desktop Hide the section when displayed on a desktop browser.  Default false (optional)
     * @param  bool $hide_mobile Hide the section when displayed on a mobile browser.  Default false (optional)
     * @param  string $image_open_new_window (optional)
     * @param  string $left left property of the HTML section (optional)
     * @param  string $link_url URL parameter of a link type section (optional)
     * @param  string $opacity opacity property of the HTML section (optional)
     * @param  string $top top property of the HTML section (optional)
     * @param  string $value Type of content section (optional)
     * @param  string $width width property of the HTML section (optional)
     * @param  string $z_index z-index property of the HTML section (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addLandingPageContentUsingPOSTAsyncWithHttpInfo($id, $content_id, $type, $background_color = null, $border_color = null, $border_style = null, $border_width = null, $height = null, $hide_desktop = null, $hide_mobile = null, $image_open_new_window = null, $left = null, $link_url = null, $opacity = null, $top = null, $value = null, $width = null, $z_index = null)
    {
        $returnType = '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse';
        $request = $this->addLandingPageContentUsingPOSTRequest($id, $content_id, $type, $background_color, $border_color, $border_style, $border_width, $height, $hide_desktop, $hide_mobile, $image_open_new_window, $left, $link_url, $opacity, $top, $value, $width, $z_index);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addLandingPageContentUsingPOST'
     *
     * @param  int $id id (required)
     * @param  string $content_id Id of the content section.  Also the HTML id of the section. (required)
     * @param  string $type Type of content section (required)
     * @param  string $background_color background-color property of the HTML section (optional)
     * @param  string $border_color border-color property of the HTML section (optional)
     * @param  string $border_style border-style property of the HTML section (optional)
     * @param  string $border_width border-width property of the HTML section (optional)
     * @param  string $height height property of the HTML section (optional)
     * @param  bool $hide_desktop Hide the section when displayed on a desktop browser.  Default false (optional)
     * @param  bool $hide_mobile Hide the section when displayed on a mobile browser.  Default false (optional)
     * @param  string $image_open_new_window (optional)
     * @param  string $left left property of the HTML section (optional)
     * @param  string $link_url URL parameter of a link type section (optional)
     * @param  string $opacity opacity property of the HTML section (optional)
     * @param  string $top top property of the HTML section (optional)
     * @param  string $value Type of content section (optional)
     * @param  string $width width property of the HTML section (optional)
     * @param  string $z_index z-index property of the HTML section (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addLandingPageContentUsingPOSTRequest($id, $content_id, $type, $background_color = null, $border_color = null, $border_style = null, $border_width = null, $height = null, $hide_desktop = null, $hide_mobile = null, $image_open_new_window = null, $left = null, $link_url = null, $opacity = null, $top = null, $value = null, $width = null, $z_index = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling addLandingPageContentUsingPOST'
            );
        }
        // verify the required parameter 'content_id' is set
        if ($content_id === null || (is_array($content_id) && count($content_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_id when calling addLandingPageContentUsingPOST'
            );
        }
        // verify the required parameter 'type' is set
        if ($type === null || (is_array($type) && count($type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling addLandingPageContentUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/landingPage/{id}/content.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // form params
        if ($background_color !== null) {
            $formParams['backgroundColor'] = ObjectSerializer::toFormValue($background_color);
        }
        // form params
        if ($border_color !== null) {
            $formParams['borderColor'] = ObjectSerializer::toFormValue($border_color);
        }
        // form params
        if ($border_style !== null) {
            $formParams['borderStyle'] = ObjectSerializer::toFormValue($border_style);
        }
        // form params
        if ($border_width !== null) {
            $formParams['borderWidth'] = ObjectSerializer::toFormValue($border_width);
        }
        // form params
        if ($content_id !== null) {
            $formParams['contentId'] = ObjectSerializer::toFormValue($content_id);
        }
        // form params
        if ($height !== null) {
            $formParams['height'] = ObjectSerializer::toFormValue($height);
        }
        // form params
        if ($hide_desktop !== null) {
            $formParams['hideDesktop'] = ObjectSerializer::toFormValue($hide_desktop);
        }
        // form params
        if ($hide_mobile !== null) {
            $formParams['hideMobile'] = ObjectSerializer::toFormValue($hide_mobile);
        }
        // form params
        if ($image_open_new_window !== null) {
            $formParams['imageOpenNewWindow'] = ObjectSerializer::toFormValue($image_open_new_window);
        }
        // form params
        if ($left !== null) {
            $formParams['left'] = ObjectSerializer::toFormValue($left);
        }
        // form params
        if ($link_url !== null) {
            $formParams['linkUrl'] = ObjectSerializer::toFormValue($link_url);
        }
        // form params
        if ($opacity !== null) {
            $formParams['opacity'] = ObjectSerializer::toFormValue($opacity);
        }
        // form params
        if ($top !== null) {
            $formParams['top'] = ObjectSerializer::toFormValue($top);
        }
        // form params
        if ($type !== null) {
            $formParams['type'] = ObjectSerializer::toFormValue($type);
        }
        // form params
        if ($value !== null) {
            $formParams['value'] = ObjectSerializer::toFormValue($value);
        }
        // form params
        if ($width !== null) {
            $formParams['width'] = ObjectSerializer::toFormValue($width);
        }
        // form params
        if ($z_index !== null) {
            $formParams['zIndex'] = ObjectSerializer::toFormValue($z_index);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLandingPageContentUsingGET
     *
     * Get Landing Page Content
     *
     * @param  int $id id (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageContentResponse
     */
    public function getLandingPageContentUsingGET($id, $status = null)
    {
        list($response) = $this->getLandingPageContentUsingGETWithHttpInfo($id, $status);
        return $response;
    }

    /**
     * Operation getLandingPageContentUsingGETWithHttpInfo
     *
     * Get Landing Page Content
     *
     * @param  int $id id (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageContentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLandingPageContentUsingGETWithHttpInfo($id, $status = null)
    {
        $returnType = '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageContentResponse';
        $request = $this->getLandingPageContentUsingGETRequest($id, $status);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageContentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLandingPageContentUsingGETAsync
     *
     * Get Landing Page Content
     *
     * @param  int $id id (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLandingPageContentUsingGETAsync($id, $status = null)
    {
        return $this->getLandingPageContentUsingGETAsyncWithHttpInfo($id, $status)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLandingPageContentUsingGETAsyncWithHttpInfo
     *
     * Get Landing Page Content
     *
     * @param  int $id id (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLandingPageContentUsingGETAsyncWithHttpInfo($id, $status = null)
    {
        $returnType = '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageContentResponse';
        $request = $this->getLandingPageContentUsingGETRequest($id, $status);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLandingPageContentUsingGET'
     *
     * @param  int $id id (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getLandingPageContentUsingGETRequest($id, $status = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getLandingPageContentUsingGET'
            );
        }

        $resourcePath = '/rest/asset/v1/landingPage/{id}/content.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLandingPageDynamicContentsUsingGET
     *
     * Get Landing Page Dynamic Content
     *
     * @param  int $id Id of landing page (required)
     * @param  string $content_id Id of landing page dynamic content section (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageDynamicContentResponse
     */
    public function getLandingPageDynamicContentsUsingGET($id, $content_id)
    {
        list($response) = $this->getLandingPageDynamicContentsUsingGETWithHttpInfo($id, $content_id);
        return $response;
    }

    /**
     * Operation getLandingPageDynamicContentsUsingGETWithHttpInfo
     *
     * Get Landing Page Dynamic Content
     *
     * @param  int $id Id of landing page (required)
     * @param  string $content_id Id of landing page dynamic content section (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageDynamicContentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLandingPageDynamicContentsUsingGETWithHttpInfo($id, $content_id)
    {
        $returnType = '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageDynamicContentResponse';
        $request = $this->getLandingPageDynamicContentsUsingGETRequest($id, $content_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageDynamicContentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLandingPageDynamicContentsUsingGETAsync
     *
     * Get Landing Page Dynamic Content
     *
     * @param  int $id Id of landing page (required)
     * @param  string $content_id Id of landing page dynamic content section (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLandingPageDynamicContentsUsingGETAsync($id, $content_id)
    {
        return $this->getLandingPageDynamicContentsUsingGETAsyncWithHttpInfo($id, $content_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLandingPageDynamicContentsUsingGETAsyncWithHttpInfo
     *
     * Get Landing Page Dynamic Content
     *
     * @param  int $id Id of landing page (required)
     * @param  string $content_id Id of landing page dynamic content section (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLandingPageDynamicContentsUsingGETAsyncWithHttpInfo($id, $content_id)
    {
        $returnType = '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageDynamicContentResponse';
        $request = $this->getLandingPageDynamicContentsUsingGETRequest($id, $content_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLandingPageDynamicContentsUsingGET'
     *
     * @param  int $id Id of landing page (required)
     * @param  string $content_id Id of landing page dynamic content section (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getLandingPageDynamicContentsUsingGETRequest($id, $content_id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getLandingPageDynamicContentsUsingGET'
            );
        }
        // verify the required parameter 'content_id' is set
        if ($content_id === null || (is_array($content_id) && count($content_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_id when calling getLandingPageDynamicContentsUsingGET'
            );
        }

        $resourcePath = '/rest/asset/v1/landingPage/{id}/dynamicContent/{contentId}.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($content_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contentId' . '}',
                ObjectSerializer::toPathValue($content_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeLandingPageContentUsingPOST
     *
     * Delete Landing Page Content Section
     *
     * @param  int $id Id of landing page (required)
     * @param  string $content_id Id of landing page content section (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse
     */
    public function removeLandingPageContentUsingPOST($id, $content_id)
    {
        list($response) = $this->removeLandingPageContentUsingPOSTWithHttpInfo($id, $content_id);
        return $response;
    }

    /**
     * Operation removeLandingPageContentUsingPOSTWithHttpInfo
     *
     * Delete Landing Page Content Section
     *
     * @param  int $id Id of landing page (required)
     * @param  string $content_id Id of landing page content section (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeLandingPageContentUsingPOSTWithHttpInfo($id, $content_id)
    {
        $returnType = '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse';
        $request = $this->removeLandingPageContentUsingPOSTRequest($id, $content_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation removeLandingPageContentUsingPOSTAsync
     *
     * Delete Landing Page Content Section
     *
     * @param  int $id Id of landing page (required)
     * @param  string $content_id Id of landing page content section (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeLandingPageContentUsingPOSTAsync($id, $content_id)
    {
        return $this->removeLandingPageContentUsingPOSTAsyncWithHttpInfo($id, $content_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removeLandingPageContentUsingPOSTAsyncWithHttpInfo
     *
     * Delete Landing Page Content Section
     *
     * @param  int $id Id of landing page (required)
     * @param  string $content_id Id of landing page content section (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeLandingPageContentUsingPOSTAsyncWithHttpInfo($id, $content_id)
    {
        $returnType = '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse';
        $request = $this->removeLandingPageContentUsingPOSTRequest($id, $content_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeLandingPageContentUsingPOST'
     *
     * @param  int $id Id of landing page (required)
     * @param  string $content_id Id of landing page content section (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function removeLandingPageContentUsingPOSTRequest($id, $content_id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling removeLandingPageContentUsingPOST'
            );
        }
        // verify the required parameter 'content_id' is set
        if ($content_id === null || (is_array($content_id) && count($content_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_id when calling removeLandingPageContentUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/landingPage/{id}/content/{contentId}/delete.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($content_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contentId' . '}',
                ObjectSerializer::toPathValue($content_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateLandingPageContentUsingPOST
     *
     * Update Landing Page Content Section
     *
     * @param  int $id Id of landing page (required)
     * @param  string $content_id Id of landing page content section (required)
     * @param  string $type Type of content section (required)
     * @param  string $background_color background-color property of the HTML section (optional)
     * @param  string $border_color border-color property of the HTML section (optional)
     * @param  string $border_style border-style property of the HTML section (optional)
     * @param  string $border_width border-width property of the HTML section (optional)
     * @param  string $height height property of the HTML section (optional)
     * @param  bool $hide_desktop Hide the section when displayed on a desktop browser.  Default false (optional)
     * @param  bool $hide_mobile Hide the section when displayed on a mobile browser.  Default false (optional)
     * @param  string $image_open_new_window image_open_new_window (optional)
     * @param  int $index Index of the content section.  Determines the order of the section in the landing page (optional)
     * @param  string $left left property of the HTML section (optional)
     * @param  string $link_url URL parameter of a link type section (optional)
     * @param  string $opacity opacity property of the HTML section (optional)
     * @param  string $top top property of the HTML section (optional)
     * @param  string $value Type of content section (optional)
     * @param  string $width width property of the HTML section (optional)
     * @param  string $z_index z-index property of the HTML section (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse
     */
    public function updateLandingPageContentUsingPOST($id, $content_id, $type, $background_color = null, $border_color = null, $border_style = null, $border_width = null, $height = null, $hide_desktop = null, $hide_mobile = null, $image_open_new_window = null, $index = null, $left = null, $link_url = null, $opacity = null, $top = null, $value = null, $width = null, $z_index = null)
    {
        list($response) = $this->updateLandingPageContentUsingPOSTWithHttpInfo($id, $content_id, $type, $background_color, $border_color, $border_style, $border_width, $height, $hide_desktop, $hide_mobile, $image_open_new_window, $index, $left, $link_url, $opacity, $top, $value, $width, $z_index);
        return $response;
    }

    /**
     * Operation updateLandingPageContentUsingPOSTWithHttpInfo
     *
     * Update Landing Page Content Section
     *
     * @param  int $id Id of landing page (required)
     * @param  string $content_id Id of landing page content section (required)
     * @param  string $type Type of content section (required)
     * @param  string $background_color background-color property of the HTML section (optional)
     * @param  string $border_color border-color property of the HTML section (optional)
     * @param  string $border_style border-style property of the HTML section (optional)
     * @param  string $border_width border-width property of the HTML section (optional)
     * @param  string $height height property of the HTML section (optional)
     * @param  bool $hide_desktop Hide the section when displayed on a desktop browser.  Default false (optional)
     * @param  bool $hide_mobile Hide the section when displayed on a mobile browser.  Default false (optional)
     * @param  string $image_open_new_window (optional)
     * @param  int $index Index of the content section.  Determines the order of the section in the landing page (optional)
     * @param  string $left left property of the HTML section (optional)
     * @param  string $link_url URL parameter of a link type section (optional)
     * @param  string $opacity opacity property of the HTML section (optional)
     * @param  string $top top property of the HTML section (optional)
     * @param  string $value Type of content section (optional)
     * @param  string $width width property of the HTML section (optional)
     * @param  string $z_index z-index property of the HTML section (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLandingPageContentUsingPOSTWithHttpInfo($id, $content_id, $type, $background_color = null, $border_color = null, $border_style = null, $border_width = null, $height = null, $hide_desktop = null, $hide_mobile = null, $image_open_new_window = null, $index = null, $left = null, $link_url = null, $opacity = null, $top = null, $value = null, $width = null, $z_index = null)
    {
        $returnType = '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse';
        $request = $this->updateLandingPageContentUsingPOSTRequest($id, $content_id, $type, $background_color, $border_color, $border_style, $border_width, $height, $hide_desktop, $hide_mobile, $image_open_new_window, $index, $left, $link_url, $opacity, $top, $value, $width, $z_index);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateLandingPageContentUsingPOSTAsync
     *
     * Update Landing Page Content Section
     *
     * @param  int $id Id of landing page (required)
     * @param  string $content_id Id of landing page content section (required)
     * @param  string $type Type of content section (required)
     * @param  string $background_color background-color property of the HTML section (optional)
     * @param  string $border_color border-color property of the HTML section (optional)
     * @param  string $border_style border-style property of the HTML section (optional)
     * @param  string $border_width border-width property of the HTML section (optional)
     * @param  string $height height property of the HTML section (optional)
     * @param  bool $hide_desktop Hide the section when displayed on a desktop browser.  Default false (optional)
     * @param  bool $hide_mobile Hide the section when displayed on a mobile browser.  Default false (optional)
     * @param  string $image_open_new_window (optional)
     * @param  int $index Index of the content section.  Determines the order of the section in the landing page (optional)
     * @param  string $left left property of the HTML section (optional)
     * @param  string $link_url URL parameter of a link type section (optional)
     * @param  string $opacity opacity property of the HTML section (optional)
     * @param  string $top top property of the HTML section (optional)
     * @param  string $value Type of content section (optional)
     * @param  string $width width property of the HTML section (optional)
     * @param  string $z_index z-index property of the HTML section (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLandingPageContentUsingPOSTAsync($id, $content_id, $type, $background_color = null, $border_color = null, $border_style = null, $border_width = null, $height = null, $hide_desktop = null, $hide_mobile = null, $image_open_new_window = null, $index = null, $left = null, $link_url = null, $opacity = null, $top = null, $value = null, $width = null, $z_index = null)
    {
        return $this->updateLandingPageContentUsingPOSTAsyncWithHttpInfo($id, $content_id, $type, $background_color, $border_color, $border_style, $border_width, $height, $hide_desktop, $hide_mobile, $image_open_new_window, $index, $left, $link_url, $opacity, $top, $value, $width, $z_index)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateLandingPageContentUsingPOSTAsyncWithHttpInfo
     *
     * Update Landing Page Content Section
     *
     * @param  int $id Id of landing page (required)
     * @param  string $content_id Id of landing page content section (required)
     * @param  string $type Type of content section (required)
     * @param  string $background_color background-color property of the HTML section (optional)
     * @param  string $border_color border-color property of the HTML section (optional)
     * @param  string $border_style border-style property of the HTML section (optional)
     * @param  string $border_width border-width property of the HTML section (optional)
     * @param  string $height height property of the HTML section (optional)
     * @param  bool $hide_desktop Hide the section when displayed on a desktop browser.  Default false (optional)
     * @param  bool $hide_mobile Hide the section when displayed on a mobile browser.  Default false (optional)
     * @param  string $image_open_new_window (optional)
     * @param  int $index Index of the content section.  Determines the order of the section in the landing page (optional)
     * @param  string $left left property of the HTML section (optional)
     * @param  string $link_url URL parameter of a link type section (optional)
     * @param  string $opacity opacity property of the HTML section (optional)
     * @param  string $top top property of the HTML section (optional)
     * @param  string $value Type of content section (optional)
     * @param  string $width width property of the HTML section (optional)
     * @param  string $z_index z-index property of the HTML section (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLandingPageContentUsingPOSTAsyncWithHttpInfo($id, $content_id, $type, $background_color = null, $border_color = null, $border_style = null, $border_width = null, $height = null, $hide_desktop = null, $hide_mobile = null, $image_open_new_window = null, $index = null, $left = null, $link_url = null, $opacity = null, $top = null, $value = null, $width = null, $z_index = null)
    {
        $returnType = '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse';
        $request = $this->updateLandingPageContentUsingPOSTRequest($id, $content_id, $type, $background_color, $border_color, $border_style, $border_width, $height, $hide_desktop, $hide_mobile, $image_open_new_window, $index, $left, $link_url, $opacity, $top, $value, $width, $z_index);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateLandingPageContentUsingPOST'
     *
     * @param  int $id Id of landing page (required)
     * @param  string $content_id Id of landing page content section (required)
     * @param  string $type Type of content section (required)
     * @param  string $background_color background-color property of the HTML section (optional)
     * @param  string $border_color border-color property of the HTML section (optional)
     * @param  string $border_style border-style property of the HTML section (optional)
     * @param  string $border_width border-width property of the HTML section (optional)
     * @param  string $height height property of the HTML section (optional)
     * @param  bool $hide_desktop Hide the section when displayed on a desktop browser.  Default false (optional)
     * @param  bool $hide_mobile Hide the section when displayed on a mobile browser.  Default false (optional)
     * @param  string $image_open_new_window (optional)
     * @param  int $index Index of the content section.  Determines the order of the section in the landing page (optional)
     * @param  string $left left property of the HTML section (optional)
     * @param  string $link_url URL parameter of a link type section (optional)
     * @param  string $opacity opacity property of the HTML section (optional)
     * @param  string $top top property of the HTML section (optional)
     * @param  string $value Type of content section (optional)
     * @param  string $width width property of the HTML section (optional)
     * @param  string $z_index z-index property of the HTML section (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateLandingPageContentUsingPOSTRequest($id, $content_id, $type, $background_color = null, $border_color = null, $border_style = null, $border_width = null, $height = null, $hide_desktop = null, $hide_mobile = null, $image_open_new_window = null, $index = null, $left = null, $link_url = null, $opacity = null, $top = null, $value = null, $width = null, $z_index = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateLandingPageContentUsingPOST'
            );
        }
        // verify the required parameter 'content_id' is set
        if ($content_id === null || (is_array($content_id) && count($content_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_id when calling updateLandingPageContentUsingPOST'
            );
        }
        // verify the required parameter 'type' is set
        if ($type === null || (is_array($type) && count($type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling updateLandingPageContentUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/landingPage/{id}/content/{contentId}.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($content_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contentId' . '}',
                ObjectSerializer::toPathValue($content_id),
                $resourcePath
            );
        }

        // form params
        if ($background_color !== null) {
            $formParams['backgroundColor'] = ObjectSerializer::toFormValue($background_color);
        }
        // form params
        if ($border_color !== null) {
            $formParams['borderColor'] = ObjectSerializer::toFormValue($border_color);
        }
        // form params
        if ($border_style !== null) {
            $formParams['borderStyle'] = ObjectSerializer::toFormValue($border_style);
        }
        // form params
        if ($border_width !== null) {
            $formParams['borderWidth'] = ObjectSerializer::toFormValue($border_width);
        }
        // form params
        if ($height !== null) {
            $formParams['height'] = ObjectSerializer::toFormValue($height);
        }
        // form params
        if ($hide_desktop !== null) {
            $formParams['hideDesktop'] = ObjectSerializer::toFormValue($hide_desktop);
        }
        // form params
        if ($hide_mobile !== null) {
            $formParams['hideMobile'] = ObjectSerializer::toFormValue($hide_mobile);
        }
        // form params
        if ($image_open_new_window !== null) {
            $formParams['imageOpenNewWindow'] = ObjectSerializer::toFormValue($image_open_new_window);
        }
        // form params
        if ($index !== null) {
            $formParams['index'] = ObjectSerializer::toFormValue($index);
        }
        // form params
        if ($left !== null) {
            $formParams['left'] = ObjectSerializer::toFormValue($left);
        }
        // form params
        if ($link_url !== null) {
            $formParams['linkUrl'] = ObjectSerializer::toFormValue($link_url);
        }
        // form params
        if ($opacity !== null) {
            $formParams['opacity'] = ObjectSerializer::toFormValue($opacity);
        }
        // form params
        if ($top !== null) {
            $formParams['top'] = ObjectSerializer::toFormValue($top);
        }
        // form params
        if ($type !== null) {
            $formParams['type'] = ObjectSerializer::toFormValue($type);
        }
        // form params
        if ($value !== null) {
            $formParams['value'] = ObjectSerializer::toFormValue($value);
        }
        // form params
        if ($width !== null) {
            $formParams['width'] = ObjectSerializer::toFormValue($width);
        }
        // form params
        if ($z_index !== null) {
            $formParams['zIndex'] = ObjectSerializer::toFormValue($z_index);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateLandingPageDynamicContentUsingPOST
     *
     * Update Landing Page Dynamic Content Section
     *
     * @param  int $id Id of the landing page (required)
     * @param  string $content_id Id of the landing page dynamic content (required)
     * @param  string $background_color background-color property of the HTML section (optional)
     * @param  string $border_color border-color property of the HTML section (optional)
     * @param  string $border_style border-style property of the HTML section (optional)
     * @param  string $border_width border-width property of the HTML section (optional)
     * @param  string $height height property of the HTML section (optional)
     * @param  bool $hide_desktop Hide the section when displayed on a desktop browser.  Default false (optional)
     * @param  bool $hide_mobile Hide the section when displayed on a mobile browser.  Default false (optional)
     * @param  string $image_open_new_window image_open_new_window (optional)
     * @param  string $left left property of the HTML section (optional)
     * @param  string $link_url URL parameter of a link type section (optional)
     * @param  string $opacity opacity property of the HTML section (optional)
     * @param  string $segment Name of the segment to display content section for (optional)
     * @param  string $top top property of the HTML section (optional)
     * @param  string $type Type of content section (optional)
     * @param  string $value Type of content section (optional)
     * @param  string $width width property of the HTML section (optional)
     * @param  string $z_index z-index property of the HTML section (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse
     */
    public function updateLandingPageDynamicContentUsingPOST($id, $content_id, $background_color = null, $border_color = null, $border_style = null, $border_width = null, $height = null, $hide_desktop = null, $hide_mobile = null, $image_open_new_window = null, $left = null, $link_url = null, $opacity = null, $segment = null, $top = null, $type = null, $value = null, $width = null, $z_index = null)
    {
        list($response) = $this->updateLandingPageDynamicContentUsingPOSTWithHttpInfo($id, $content_id, $background_color, $border_color, $border_style, $border_width, $height, $hide_desktop, $hide_mobile, $image_open_new_window, $left, $link_url, $opacity, $segment, $top, $type, $value, $width, $z_index);
        return $response;
    }

    /**
     * Operation updateLandingPageDynamicContentUsingPOSTWithHttpInfo
     *
     * Update Landing Page Dynamic Content Section
     *
     * @param  int $id Id of the landing page (required)
     * @param  string $content_id Id of the landing page dynamic content (required)
     * @param  string $background_color background-color property of the HTML section (optional)
     * @param  string $border_color border-color property of the HTML section (optional)
     * @param  string $border_style border-style property of the HTML section (optional)
     * @param  string $border_width border-width property of the HTML section (optional)
     * @param  string $height height property of the HTML section (optional)
     * @param  bool $hide_desktop Hide the section when displayed on a desktop browser.  Default false (optional)
     * @param  bool $hide_mobile Hide the section when displayed on a mobile browser.  Default false (optional)
     * @param  string $image_open_new_window (optional)
     * @param  string $left left property of the HTML section (optional)
     * @param  string $link_url URL parameter of a link type section (optional)
     * @param  string $opacity opacity property of the HTML section (optional)
     * @param  string $segment Name of the segment to display content section for (optional)
     * @param  string $top top property of the HTML section (optional)
     * @param  string $type Type of content section (optional)
     * @param  string $value Type of content section (optional)
     * @param  string $width width property of the HTML section (optional)
     * @param  string $z_index z-index property of the HTML section (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLandingPageDynamicContentUsingPOSTWithHttpInfo($id, $content_id, $background_color = null, $border_color = null, $border_style = null, $border_width = null, $height = null, $hide_desktop = null, $hide_mobile = null, $image_open_new_window = null, $left = null, $link_url = null, $opacity = null, $segment = null, $top = null, $type = null, $value = null, $width = null, $z_index = null)
    {
        $returnType = '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse';
        $request = $this->updateLandingPageDynamicContentUsingPOSTRequest($id, $content_id, $background_color, $border_color, $border_style, $border_width, $height, $hide_desktop, $hide_mobile, $image_open_new_window, $left, $link_url, $opacity, $segment, $top, $type, $value, $width, $z_index);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateLandingPageDynamicContentUsingPOSTAsync
     *
     * Update Landing Page Dynamic Content Section
     *
     * @param  int $id Id of the landing page (required)
     * @param  string $content_id Id of the landing page dynamic content (required)
     * @param  string $background_color background-color property of the HTML section (optional)
     * @param  string $border_color border-color property of the HTML section (optional)
     * @param  string $border_style border-style property of the HTML section (optional)
     * @param  string $border_width border-width property of the HTML section (optional)
     * @param  string $height height property of the HTML section (optional)
     * @param  bool $hide_desktop Hide the section when displayed on a desktop browser.  Default false (optional)
     * @param  bool $hide_mobile Hide the section when displayed on a mobile browser.  Default false (optional)
     * @param  string $image_open_new_window (optional)
     * @param  string $left left property of the HTML section (optional)
     * @param  string $link_url URL parameter of a link type section (optional)
     * @param  string $opacity opacity property of the HTML section (optional)
     * @param  string $segment Name of the segment to display content section for (optional)
     * @param  string $top top property of the HTML section (optional)
     * @param  string $type Type of content section (optional)
     * @param  string $value Type of content section (optional)
     * @param  string $width width property of the HTML section (optional)
     * @param  string $z_index z-index property of the HTML section (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLandingPageDynamicContentUsingPOSTAsync($id, $content_id, $background_color = null, $border_color = null, $border_style = null, $border_width = null, $height = null, $hide_desktop = null, $hide_mobile = null, $image_open_new_window = null, $left = null, $link_url = null, $opacity = null, $segment = null, $top = null, $type = null, $value = null, $width = null, $z_index = null)
    {
        return $this->updateLandingPageDynamicContentUsingPOSTAsyncWithHttpInfo($id, $content_id, $background_color, $border_color, $border_style, $border_width, $height, $hide_desktop, $hide_mobile, $image_open_new_window, $left, $link_url, $opacity, $segment, $top, $type, $value, $width, $z_index)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateLandingPageDynamicContentUsingPOSTAsyncWithHttpInfo
     *
     * Update Landing Page Dynamic Content Section
     *
     * @param  int $id Id of the landing page (required)
     * @param  string $content_id Id of the landing page dynamic content (required)
     * @param  string $background_color background-color property of the HTML section (optional)
     * @param  string $border_color border-color property of the HTML section (optional)
     * @param  string $border_style border-style property of the HTML section (optional)
     * @param  string $border_width border-width property of the HTML section (optional)
     * @param  string $height height property of the HTML section (optional)
     * @param  bool $hide_desktop Hide the section when displayed on a desktop browser.  Default false (optional)
     * @param  bool $hide_mobile Hide the section when displayed on a mobile browser.  Default false (optional)
     * @param  string $image_open_new_window (optional)
     * @param  string $left left property of the HTML section (optional)
     * @param  string $link_url URL parameter of a link type section (optional)
     * @param  string $opacity opacity property of the HTML section (optional)
     * @param  string $segment Name of the segment to display content section for (optional)
     * @param  string $top top property of the HTML section (optional)
     * @param  string $type Type of content section (optional)
     * @param  string $value Type of content section (optional)
     * @param  string $width width property of the HTML section (optional)
     * @param  string $z_index z-index property of the HTML section (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLandingPageDynamicContentUsingPOSTAsyncWithHttpInfo($id, $content_id, $background_color = null, $border_color = null, $border_style = null, $border_width = null, $height = null, $hide_desktop = null, $hide_mobile = null, $image_open_new_window = null, $left = null, $link_url = null, $opacity = null, $segment = null, $top = null, $type = null, $value = null, $width = null, $z_index = null)
    {
        $returnType = '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse';
        $request = $this->updateLandingPageDynamicContentUsingPOSTRequest($id, $content_id, $background_color, $border_color, $border_style, $border_width, $height, $hide_desktop, $hide_mobile, $image_open_new_window, $left, $link_url, $opacity, $segment, $top, $type, $value, $width, $z_index);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateLandingPageDynamicContentUsingPOST'
     *
     * @param  int $id Id of the landing page (required)
     * @param  string $content_id Id of the landing page dynamic content (required)
     * @param  string $background_color background-color property of the HTML section (optional)
     * @param  string $border_color border-color property of the HTML section (optional)
     * @param  string $border_style border-style property of the HTML section (optional)
     * @param  string $border_width border-width property of the HTML section (optional)
     * @param  string $height height property of the HTML section (optional)
     * @param  bool $hide_desktop Hide the section when displayed on a desktop browser.  Default false (optional)
     * @param  bool $hide_mobile Hide the section when displayed on a mobile browser.  Default false (optional)
     * @param  string $image_open_new_window (optional)
     * @param  string $left left property of the HTML section (optional)
     * @param  string $link_url URL parameter of a link type section (optional)
     * @param  string $opacity opacity property of the HTML section (optional)
     * @param  string $segment Name of the segment to display content section for (optional)
     * @param  string $top top property of the HTML section (optional)
     * @param  string $type Type of content section (optional)
     * @param  string $value Type of content section (optional)
     * @param  string $width width property of the HTML section (optional)
     * @param  string $z_index z-index property of the HTML section (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateLandingPageDynamicContentUsingPOSTRequest($id, $content_id, $background_color = null, $border_color = null, $border_style = null, $border_width = null, $height = null, $hide_desktop = null, $hide_mobile = null, $image_open_new_window = null, $left = null, $link_url = null, $opacity = null, $segment = null, $top = null, $type = null, $value = null, $width = null, $z_index = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateLandingPageDynamicContentUsingPOST'
            );
        }
        // verify the required parameter 'content_id' is set
        if ($content_id === null || (is_array($content_id) && count($content_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_id when calling updateLandingPageDynamicContentUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/landingPage/{id}/dynamicContent/{contentId}.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($content_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contentId' . '}',
                ObjectSerializer::toPathValue($content_id),
                $resourcePath
            );
        }

        // form params
        if ($background_color !== null) {
            $formParams['backgroundColor'] = ObjectSerializer::toFormValue($background_color);
        }
        // form params
        if ($border_color !== null) {
            $formParams['borderColor'] = ObjectSerializer::toFormValue($border_color);
        }
        // form params
        if ($border_style !== null) {
            $formParams['borderStyle'] = ObjectSerializer::toFormValue($border_style);
        }
        // form params
        if ($border_width !== null) {
            $formParams['borderWidth'] = ObjectSerializer::toFormValue($border_width);
        }
        // form params
        if ($height !== null) {
            $formParams['height'] = ObjectSerializer::toFormValue($height);
        }
        // form params
        if ($hide_desktop !== null) {
            $formParams['hideDesktop'] = ObjectSerializer::toFormValue($hide_desktop);
        }
        // form params
        if ($hide_mobile !== null) {
            $formParams['hideMobile'] = ObjectSerializer::toFormValue($hide_mobile);
        }
        // form params
        if ($image_open_new_window !== null) {
            $formParams['imageOpenNewWindow'] = ObjectSerializer::toFormValue($image_open_new_window);
        }
        // form params
        if ($left !== null) {
            $formParams['left'] = ObjectSerializer::toFormValue($left);
        }
        // form params
        if ($link_url !== null) {
            $formParams['linkUrl'] = ObjectSerializer::toFormValue($link_url);
        }
        // form params
        if ($opacity !== null) {
            $formParams['opacity'] = ObjectSerializer::toFormValue($opacity);
        }
        // form params
        if ($segment !== null) {
            $formParams['segment'] = ObjectSerializer::toFormValue($segment);
        }
        // form params
        if ($top !== null) {
            $formParams['top'] = ObjectSerializer::toFormValue($top);
        }
        // form params
        if ($type !== null) {
            $formParams['type'] = ObjectSerializer::toFormValue($type);
        }
        // form params
        if ($value !== null) {
            $formParams['value'] = ObjectSerializer::toFormValue($value);
        }
        // form params
        if ($width !== null) {
            $formParams['width'] = ObjectSerializer::toFormValue($width);
        }
        // form params
        if ($z_index !== null) {
            $formParams['zIndex'] = ObjectSerializer::toFormValue($z_index);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
