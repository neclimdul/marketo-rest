<?php
/**
 * EmailsApi
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Asset
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Marketo Rest API
 *
 * Marketo Rest API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: developerfeedback@marketo.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace NecLimDul\MarketoRest\Asset\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Query;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\ResponseInterface;
use NecLimDul\MarketoRest\Asset\ApiException;
use NecLimDul\MarketoRest\Asset\Configuration;
use NecLimDul\MarketoRest\Asset\HeaderSelector;
use NecLimDul\MarketoRest\Asset\ObjectSerializer;

/**
 * EmailsApi Class Doc Comment
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Asset
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class EmailsApi
{

    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addModuleUsingPOST
     *
     * Add Email Module
     *
     * @param  int $id id (required)
     * @param  string $module_id moduleId (required)
     * @param  string $name Name of the module (required)
     * @param  int $index Index of the module.  Determines the order of the module in the email. (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function addModuleUsingPOST($id, $module_id, $name, $index)
    {
        list($response) = $this->addModuleUsingPOSTWithHttpInfo($id, $module_id, $name, $index);
        return $response;
    }

    /**
     * Operation addModuleUsingPOSTWithHttpInfo
     *
     * Add Email Module
     *
     * @param  int $id id (required)
     * @param  string $module_id moduleId (required)
     * @param  string $name Name of the module (required)
     * @param  int $index Index of the module.  Determines the order of the module in the email. (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function addModuleUsingPOSTWithHttpInfo($id, $module_id, $name, $index)
    {
        $request = $this->addModuleUsingPOSTRequest($id, $module_id, $name, $index);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, 'object');
            }

            return $this->responseToReturn($response, 'object');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            'object',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addModuleUsingPOSTAsync
     *
     * Add Email Module
     *
     * @param  int $id id (required)
     * @param  string $module_id moduleId (required)
     * @param  string $name Name of the module (required)
     * @param  int $index Index of the module.  Determines the order of the module in the email. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addModuleUsingPOSTAsync($id, $module_id, $name, $index)
    {
        return $this->addModuleUsingPOSTAsyncWithHttpInfo($id, $module_id, $name, $index)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addModuleUsingPOSTAsyncWithHttpInfo
     *
     * Add Email Module
     *
     * @param  int $id id (required)
     * @param  string $module_id moduleId (required)
     * @param  string $name Name of the module (required)
     * @param  int $index Index of the module.  Determines the order of the module in the email. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addModuleUsingPOSTAsyncWithHttpInfo($id, $module_id, $name, $index)
    {
        $request = $this->addModuleUsingPOSTRequest($id, $module_id, $name, $index);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, 'object');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'addModuleUsingPOST'
     *
     * @param  int $id id (required)
     * @param  string $module_id moduleId (required)
     * @param  string $name Name of the module (required)
     * @param  int $index Index of the module.  Determines the order of the module in the email. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addModuleUsingPOSTRequest($id, $module_id, $name, $index)
    {
        // Verify the required parameter 'id' is set.
        if ($id === null || (is_array($id) && empty($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling addModuleUsingPOST'
            );
        }
        // Verify the required parameter 'module_id' is set.
        if ($module_id === null || (is_array($module_id) && empty($module_id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $module_id when calling addModuleUsingPOST'
            );
        }
        // Verify the required parameter 'name' is set.
        if ($name === null || (is_array($name) && empty($name))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling addModuleUsingPOST'
            );
        }
        // Verify the required parameter 'index' is set.
        if ($index === null || (is_array($index) && empty($index))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $index when calling addModuleUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/email/{id}/content/{moduleId}/add.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Query parameters.
        if (is_array($name)) {
            $name = ObjectSerializer::serializeCollection($name, '', true);
        }
        $queryParams['name'] = $name;
        if (is_array($index)) {
            $index = ObjectSerializer::serializeCollection($index, '', true);
        }
        $queryParams['index'] = $index;
        // Remove any null (optional values).
        $queryParams = array_filter($queryParams, function($v) { return $v !== null; });

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $resourcePath = str_replace(
            '{' . 'moduleId' . '}',
            ObjectSerializer::toPathValue($module_id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            []
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation approveDraftUsingPOST
     *
     * Approve Email Draft
     *
     * @param  int $id id (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse
     */
    public function approveDraftUsingPOST($id)
    {
        list($response) = $this->approveDraftUsingPOSTWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation approveDraftUsingPOSTWithHttpInfo
     *
     * Approve Email Draft
     *
     * @param  int $id id (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function approveDraftUsingPOSTWithHttpInfo($id)
    {
        $request = $this->approveDraftUsingPOSTRequest($id);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation approveDraftUsingPOSTAsync
     *
     * Approve Email Draft
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function approveDraftUsingPOSTAsync($id)
    {
        return $this->approveDraftUsingPOSTAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation approveDraftUsingPOSTAsyncWithHttpInfo
     *
     * Approve Email Draft
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function approveDraftUsingPOSTAsyncWithHttpInfo($id)
    {
        $request = $this->approveDraftUsingPOSTRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'approveDraftUsingPOST'
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function approveDraftUsingPOSTRequest($id)
    {
        // Verify the required parameter 'id' is set.
        if ($id === null || (is_array($id) && empty($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling approveDraftUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/email/{id}/approveDraft.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            []
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cloneEmailUsingPOST
     *
     * Clone Email
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\Folder $folder folder (required)
     * @param  string $name Name of the new email asset (required)
     * @param  string $description Description of the asset (optional)
     * @param  bool $operational Whether the email is operational.  Operational emails bypass unsubscribe status.  Defaults to false (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse
     */
    public function cloneEmailUsingPOST($id, $folder, $name, $description = null, $operational = null)
    {
        list($response) = $this->cloneEmailUsingPOSTWithHttpInfo($id, $folder, $name, $description, $operational);
        return $response;
    }

    /**
     * Operation cloneEmailUsingPOSTWithHttpInfo
     *
     * Clone Email
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\Folder $folder (required)
     * @param  string $name Name of the new email asset (required)
     * @param  string $description Description of the asset (optional)
     * @param  bool $operational Whether the email is operational.  Operational emails bypass unsubscribe status.  Defaults to false (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cloneEmailUsingPOSTWithHttpInfo($id, $folder, $name, $description = null, $operational = null)
    {
        $request = $this->cloneEmailUsingPOSTRequest($id, $folder, $name, $description, $operational);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cloneEmailUsingPOSTAsync
     *
     * Clone Email
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\Folder $folder (required)
     * @param  string $name Name of the new email asset (required)
     * @param  string $description Description of the asset (optional)
     * @param  bool $operational Whether the email is operational.  Operational emails bypass unsubscribe status.  Defaults to false (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cloneEmailUsingPOSTAsync($id, $folder, $name, $description = null, $operational = null)
    {
        return $this->cloneEmailUsingPOSTAsyncWithHttpInfo($id, $folder, $name, $description, $operational)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cloneEmailUsingPOSTAsyncWithHttpInfo
     *
     * Clone Email
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\Folder $folder (required)
     * @param  string $name Name of the new email asset (required)
     * @param  string $description Description of the asset (optional)
     * @param  bool $operational Whether the email is operational.  Operational emails bypass unsubscribe status.  Defaults to false (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cloneEmailUsingPOSTAsyncWithHttpInfo($id, $folder, $name, $description = null, $operational = null)
    {
        $request = $this->cloneEmailUsingPOSTRequest($id, $folder, $name, $description, $operational);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'cloneEmailUsingPOST'
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\Folder $folder (required)
     * @param  string $name Name of the new email asset (required)
     * @param  string $description Description of the asset (optional)
     * @param  bool $operational Whether the email is operational.  Operational emails bypass unsubscribe status.  Defaults to false (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function cloneEmailUsingPOSTRequest($id, $folder, $name, $description = null, $operational = null)
    {
        // Verify the required parameter 'id' is set.
        if ($id === null || (is_array($id) && empty($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling cloneEmailUsingPOST'
            );
        }
        // Verify the required parameter 'folder' is set.
        if ($folder === null || (is_array($folder) && empty($folder))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $folder when calling cloneEmailUsingPOST'
            );
        }
        // Verify the required parameter 'name' is set.
        if ($name === null || (is_array($name) && empty($name))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cloneEmailUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/email/{id}/clone.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        // Form parameters.
        /** @var string[][] $formParams */
        $formParams = [];
        $multipart = false;
        $formParams['description'] = ObjectSerializer::toFormValue($description);
        $formParams['folder'] = ObjectSerializer::toFormValue($folder);
        $formParams['name'] = ObjectSerializer::toFormValue($name);
        $formParams['operational'] = ObjectSerializer::toFormValue($operational);
        // Remove any null (optional values).
        $formParams = array_filter($formParams, function($v) { return $v !== null; });
        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }
        if (!empty($formParams)) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    foreach ((array) $formParamValue as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createEmailFullContentUsingPOST
     *
     * Update Email Full Content
     *
     * @param  int $id Id of the email (required)
     * @param  string $content Multipart file. File containing HTML document to update with.  File cannot include JavaScript or script tags. (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfUpdateEmailFullContentResponse
     */
    public function createEmailFullContentUsingPOST($id, $content)
    {
        list($response) = $this->createEmailFullContentUsingPOSTWithHttpInfo($id, $content);
        return $response;
    }

    /**
     * Operation createEmailFullContentUsingPOSTWithHttpInfo
     *
     * Update Email Full Content
     *
     * @param  int $id Id of the email (required)
     * @param  string $content Multipart file. File containing HTML document to update with.  File cannot include JavaScript or script tags. (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfUpdateEmailFullContentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createEmailFullContentUsingPOSTWithHttpInfo($id, $content)
    {
        $request = $this->createEmailFullContentUsingPOSTRequest($id, $content);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfUpdateEmailFullContentResponse');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfUpdateEmailFullContentResponse');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Asset\Model\ResponseOfUpdateEmailFullContentResponse',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createEmailFullContentUsingPOSTAsync
     *
     * Update Email Full Content
     *
     * @param  int $id Id of the email (required)
     * @param  string $content Multipart file. File containing HTML document to update with.  File cannot include JavaScript or script tags. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createEmailFullContentUsingPOSTAsync($id, $content)
    {
        return $this->createEmailFullContentUsingPOSTAsyncWithHttpInfo($id, $content)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createEmailFullContentUsingPOSTAsyncWithHttpInfo
     *
     * Update Email Full Content
     *
     * @param  int $id Id of the email (required)
     * @param  string $content Multipart file. File containing HTML document to update with.  File cannot include JavaScript or script tags. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createEmailFullContentUsingPOSTAsyncWithHttpInfo($id, $content)
    {
        $request = $this->createEmailFullContentUsingPOSTRequest($id, $content);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfUpdateEmailFullContentResponse');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'createEmailFullContentUsingPOST'
     *
     * @param  int $id Id of the email (required)
     * @param  string $content Multipart file. File containing HTML document to update with.  File cannot include JavaScript or script tags. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createEmailFullContentUsingPOSTRequest($id, $content)
    {
        // Verify the required parameter 'id' is set.
        if ($id === null || (is_array($id) && empty($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling createEmailFullContentUsingPOST'
            );
        }
        // Verify the required parameter 'content' is set.
        if ($content === null || (is_array($content) && empty($content))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content when calling createEmailFullContentUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/email/{id}/fullContent.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        // Form parameters.
        /** @var string[][] $formParams */
        $formParams = [];
        $multipart = false;
        $formParams['content'] = ObjectSerializer::toFormValue($content);
        // Remove any null (optional values).
        $formParams = array_filter($formParams, function($v) { return $v !== null; });
        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }
        if (!empty($formParams)) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    foreach ((array) $formParamValue as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createEmailUsingPOST
     *
     * Create Email
     *
     * @param  \NecLimDul\MarketoRest\Asset\Model\Folder $folder folder (required)
     * @param  string $from_email From-address of the Email (required)
     * @param  string $from_name From-name of the Email (required)
     * @param  string $name Name of the email (required)
     * @param  string $reply_email Reply-To address of the Email (required)
     * @param  string $subject Subject Line of the Email (required)
     * @param  int $template Id of the parent template (required)
     * @param  string $description Description of the asset (optional)
     * @param  bool $operational Whether the email is operational.  Operational emails bypass unsubscribe status.  Defaults to false (optional)
     * @param  string $text_only Setting to include text-only version of email when sent (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse
     */
    public function createEmailUsingPOST($folder, $from_email, $from_name, $name, $reply_email, $subject, $template, $description = null, $operational = null, $text_only = null)
    {
        list($response) = $this->createEmailUsingPOSTWithHttpInfo($folder, $from_email, $from_name, $name, $reply_email, $subject, $template, $description, $operational, $text_only);
        return $response;
    }

    /**
     * Operation createEmailUsingPOSTWithHttpInfo
     *
     * Create Email
     *
     * @param  \NecLimDul\MarketoRest\Asset\Model\Folder $folder (required)
     * @param  string $from_email From-address of the Email (required)
     * @param  string $from_name From-name of the Email (required)
     * @param  string $name Name of the email (required)
     * @param  string $reply_email Reply-To address of the Email (required)
     * @param  string $subject Subject Line of the Email (required)
     * @param  int $template Id of the parent template (required)
     * @param  string $description Description of the asset (optional)
     * @param  bool $operational Whether the email is operational.  Operational emails bypass unsubscribe status.  Defaults to false (optional)
     * @param  string $text_only Setting to include text-only version of email when sent (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createEmailUsingPOSTWithHttpInfo($folder, $from_email, $from_name, $name, $reply_email, $subject, $template, $description = null, $operational = null, $text_only = null)
    {
        $request = $this->createEmailUsingPOSTRequest($folder, $from_email, $from_name, $name, $reply_email, $subject, $template, $description, $operational, $text_only);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createEmailUsingPOSTAsync
     *
     * Create Email
     *
     * @param  \NecLimDul\MarketoRest\Asset\Model\Folder $folder (required)
     * @param  string $from_email From-address of the Email (required)
     * @param  string $from_name From-name of the Email (required)
     * @param  string $name Name of the email (required)
     * @param  string $reply_email Reply-To address of the Email (required)
     * @param  string $subject Subject Line of the Email (required)
     * @param  int $template Id of the parent template (required)
     * @param  string $description Description of the asset (optional)
     * @param  bool $operational Whether the email is operational.  Operational emails bypass unsubscribe status.  Defaults to false (optional)
     * @param  string $text_only Setting to include text-only version of email when sent (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createEmailUsingPOSTAsync($folder, $from_email, $from_name, $name, $reply_email, $subject, $template, $description = null, $operational = null, $text_only = null)
    {
        return $this->createEmailUsingPOSTAsyncWithHttpInfo($folder, $from_email, $from_name, $name, $reply_email, $subject, $template, $description, $operational, $text_only)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createEmailUsingPOSTAsyncWithHttpInfo
     *
     * Create Email
     *
     * @param  \NecLimDul\MarketoRest\Asset\Model\Folder $folder (required)
     * @param  string $from_email From-address of the Email (required)
     * @param  string $from_name From-name of the Email (required)
     * @param  string $name Name of the email (required)
     * @param  string $reply_email Reply-To address of the Email (required)
     * @param  string $subject Subject Line of the Email (required)
     * @param  int $template Id of the parent template (required)
     * @param  string $description Description of the asset (optional)
     * @param  bool $operational Whether the email is operational.  Operational emails bypass unsubscribe status.  Defaults to false (optional)
     * @param  string $text_only Setting to include text-only version of email when sent (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createEmailUsingPOSTAsyncWithHttpInfo($folder, $from_email, $from_name, $name, $reply_email, $subject, $template, $description = null, $operational = null, $text_only = null)
    {
        $request = $this->createEmailUsingPOSTRequest($folder, $from_email, $from_name, $name, $reply_email, $subject, $template, $description, $operational, $text_only);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'createEmailUsingPOST'
     *
     * @param  \NecLimDul\MarketoRest\Asset\Model\Folder $folder (required)
     * @param  string $from_email From-address of the Email (required)
     * @param  string $from_name From-name of the Email (required)
     * @param  string $name Name of the email (required)
     * @param  string $reply_email Reply-To address of the Email (required)
     * @param  string $subject Subject Line of the Email (required)
     * @param  int $template Id of the parent template (required)
     * @param  string $description Description of the asset (optional)
     * @param  bool $operational Whether the email is operational.  Operational emails bypass unsubscribe status.  Defaults to false (optional)
     * @param  string $text_only Setting to include text-only version of email when sent (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createEmailUsingPOSTRequest($folder, $from_email, $from_name, $name, $reply_email, $subject, $template, $description = null, $operational = null, $text_only = null)
    {
        // Verify the required parameter 'folder' is set.
        if ($folder === null || (is_array($folder) && empty($folder))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $folder when calling createEmailUsingPOST'
            );
        }
        // Verify the required parameter 'from_email' is set.
        if ($from_email === null || (is_array($from_email) && empty($from_email))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from_email when calling createEmailUsingPOST'
            );
        }
        // Verify the required parameter 'from_name' is set.
        if ($from_name === null || (is_array($from_name) && empty($from_name))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from_name when calling createEmailUsingPOST'
            );
        }
        // Verify the required parameter 'name' is set.
        if ($name === null || (is_array($name) && empty($name))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling createEmailUsingPOST'
            );
        }
        // Verify the required parameter 'reply_email' is set.
        if ($reply_email === null || (is_array($reply_email) && empty($reply_email))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reply_email when calling createEmailUsingPOST'
            );
        }
        // Verify the required parameter 'subject' is set.
        if ($subject === null || (is_array($subject) && empty($subject))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $subject when calling createEmailUsingPOST'
            );
        }
        // Verify the required parameter 'template' is set.
        if ($template === null || (is_array($template) && empty($template))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $template when calling createEmailUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/emails.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Form parameters.
        /** @var string[][] $formParams */
        $formParams = [];
        $multipart = false;
        $formParams['description'] = ObjectSerializer::toFormValue($description);
        $formParams['folder'] = ObjectSerializer::toFormValue($folder);
        $formParams['fromEmail'] = ObjectSerializer::toFormValue($from_email);
        $formParams['fromName'] = ObjectSerializer::toFormValue($from_name);
        $formParams['name'] = ObjectSerializer::toFormValue($name);
        $formParams['operational'] = ObjectSerializer::toFormValue($operational);
        $formParams['replyEmail'] = ObjectSerializer::toFormValue($reply_email);
        $formParams['subject'] = ObjectSerializer::toFormValue($subject);
        $formParams['template'] = ObjectSerializer::toFormValue($template);
        $formParams['textOnly'] = ObjectSerializer::toFormValue($text_only);
        // Remove any null (optional values).
        $formParams = array_filter($formParams, function($v) { return $v !== null; });
        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }
        if (!empty($formParams)) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    foreach ((array) $formParamValue as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteEmailUsingPOST
     *
     * Delete Email
     *
     * @param  int $id id (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse
     */
    public function deleteEmailUsingPOST($id)
    {
        list($response) = $this->deleteEmailUsingPOSTWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation deleteEmailUsingPOSTWithHttpInfo
     *
     * Delete Email
     *
     * @param  int $id id (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEmailUsingPOSTWithHttpInfo($id)
    {
        $request = $this->deleteEmailUsingPOSTRequest($id);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteEmailUsingPOSTAsync
     *
     * Delete Email
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEmailUsingPOSTAsync($id)
    {
        return $this->deleteEmailUsingPOSTAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteEmailUsingPOSTAsyncWithHttpInfo
     *
     * Delete Email
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEmailUsingPOSTAsyncWithHttpInfo($id)
    {
        $request = $this->deleteEmailUsingPOSTRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteEmailUsingPOST'
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteEmailUsingPOSTRequest($id)
    {
        // Verify the required parameter 'id' is set.
        if ($id === null || (is_array($id) && empty($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteEmailUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/email/{id}/delete.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            []
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteModuleUsingPOST
     *
     * Delete Module
     *
     * @param  int $id id (required)
     * @param  string $module_id moduleId (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function deleteModuleUsingPOST($id, $module_id)
    {
        list($response) = $this->deleteModuleUsingPOSTWithHttpInfo($id, $module_id);
        return $response;
    }

    /**
     * Operation deleteModuleUsingPOSTWithHttpInfo
     *
     * Delete Module
     *
     * @param  int $id id (required)
     * @param  string $module_id moduleId (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteModuleUsingPOSTWithHttpInfo($id, $module_id)
    {
        $request = $this->deleteModuleUsingPOSTRequest($id, $module_id);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, 'object');
            }

            return $this->responseToReturn($response, 'object');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            'object',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteModuleUsingPOSTAsync
     *
     * Delete Module
     *
     * @param  int $id id (required)
     * @param  string $module_id moduleId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteModuleUsingPOSTAsync($id, $module_id)
    {
        return $this->deleteModuleUsingPOSTAsyncWithHttpInfo($id, $module_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteModuleUsingPOSTAsyncWithHttpInfo
     *
     * Delete Module
     *
     * @param  int $id id (required)
     * @param  string $module_id moduleId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteModuleUsingPOSTAsyncWithHttpInfo($id, $module_id)
    {
        $request = $this->deleteModuleUsingPOSTRequest($id, $module_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, 'object');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteModuleUsingPOST'
     *
     * @param  int $id id (required)
     * @param  string $module_id moduleId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteModuleUsingPOSTRequest($id, $module_id)
    {
        // Verify the required parameter 'id' is set.
        if ($id === null || (is_array($id) && empty($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteModuleUsingPOST'
            );
        }
        // Verify the required parameter 'module_id' is set.
        if ($module_id === null || (is_array($module_id) && empty($module_id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $module_id when calling deleteModuleUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/email/{id}/content/{moduleId}/delete.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $resourcePath = str_replace(
            '{' . 'moduleId' . '}',
            ObjectSerializer::toPathValue($module_id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            []
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation discardDraftUsingPOST
     *
     * Discard Email Draft
     *
     * @param  int $id id (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse
     */
    public function discardDraftUsingPOST($id)
    {
        list($response) = $this->discardDraftUsingPOSTWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation discardDraftUsingPOSTWithHttpInfo
     *
     * Discard Email Draft
     *
     * @param  int $id id (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function discardDraftUsingPOSTWithHttpInfo($id)
    {
        $request = $this->discardDraftUsingPOSTRequest($id);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation discardDraftUsingPOSTAsync
     *
     * Discard Email Draft
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function discardDraftUsingPOSTAsync($id)
    {
        return $this->discardDraftUsingPOSTAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation discardDraftUsingPOSTAsyncWithHttpInfo
     *
     * Discard Email Draft
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function discardDraftUsingPOSTAsyncWithHttpInfo($id)
    {
        $request = $this->discardDraftUsingPOSTRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'discardDraftUsingPOST'
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function discardDraftUsingPOSTRequest($id)
    {
        // Verify the required parameter 'id' is set.
        if ($id === null || (is_array($id) && empty($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling discardDraftUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/email/{id}/discardDraft.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            []
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation duplicateModuleUsingPOST
     *
     * Duplicate Email Module
     *
     * @param  int $id id (required)
     * @param  string $module_id moduleId (required)
     * @param  string $name Name of the new module (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function duplicateModuleUsingPOST($id, $module_id, $name)
    {
        list($response) = $this->duplicateModuleUsingPOSTWithHttpInfo($id, $module_id, $name);
        return $response;
    }

    /**
     * Operation duplicateModuleUsingPOSTWithHttpInfo
     *
     * Duplicate Email Module
     *
     * @param  int $id id (required)
     * @param  string $module_id moduleId (required)
     * @param  string $name Name of the new module (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function duplicateModuleUsingPOSTWithHttpInfo($id, $module_id, $name)
    {
        $request = $this->duplicateModuleUsingPOSTRequest($id, $module_id, $name);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, 'object');
            }

            return $this->responseToReturn($response, 'object');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            'object',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation duplicateModuleUsingPOSTAsync
     *
     * Duplicate Email Module
     *
     * @param  int $id id (required)
     * @param  string $module_id moduleId (required)
     * @param  string $name Name of the new module (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function duplicateModuleUsingPOSTAsync($id, $module_id, $name)
    {
        return $this->duplicateModuleUsingPOSTAsyncWithHttpInfo($id, $module_id, $name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation duplicateModuleUsingPOSTAsyncWithHttpInfo
     *
     * Duplicate Email Module
     *
     * @param  int $id id (required)
     * @param  string $module_id moduleId (required)
     * @param  string $name Name of the new module (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function duplicateModuleUsingPOSTAsyncWithHttpInfo($id, $module_id, $name)
    {
        $request = $this->duplicateModuleUsingPOSTRequest($id, $module_id, $name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, 'object');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'duplicateModuleUsingPOST'
     *
     * @param  int $id id (required)
     * @param  string $module_id moduleId (required)
     * @param  string $name Name of the new module (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function duplicateModuleUsingPOSTRequest($id, $module_id, $name)
    {
        // Verify the required parameter 'id' is set.
        if ($id === null || (is_array($id) && empty($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling duplicateModuleUsingPOST'
            );
        }
        // Verify the required parameter 'module_id' is set.
        if ($module_id === null || (is_array($module_id) && empty($module_id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $module_id when calling duplicateModuleUsingPOST'
            );
        }
        // Verify the required parameter 'name' is set.
        if ($name === null || (is_array($name) && empty($name))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling duplicateModuleUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/email/{id}/content/{moduleId}/duplicate.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Query parameters.
        if (is_array($name)) {
            $name = ObjectSerializer::serializeCollection($name, '', true);
        }
        $queryParams['name'] = $name;
        // Remove any null (optional values).
        $queryParams = array_filter($queryParams, function($v) { return $v !== null; });

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $resourcePath = str_replace(
            '{' . 'moduleId' . '}',
            ObjectSerializer::toPathValue($module_id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            []
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailByIdUsingGET
     *
     * Get Email By Id
     *
     * @param  int $id id (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse
     */
    public function getEmailByIdUsingGET($id, $status = null)
    {
        list($response) = $this->getEmailByIdUsingGETWithHttpInfo($id, $status);
        return $response;
    }

    /**
     * Operation getEmailByIdUsingGETWithHttpInfo
     *
     * Get Email By Id
     *
     * @param  int $id id (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailByIdUsingGETWithHttpInfo($id, $status = null)
    {
        $request = $this->getEmailByIdUsingGETRequest($id, $status);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailByIdUsingGETAsync
     *
     * Get Email By Id
     *
     * @param  int $id id (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailByIdUsingGETAsync($id, $status = null)
    {
        return $this->getEmailByIdUsingGETAsyncWithHttpInfo($id, $status)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailByIdUsingGETAsyncWithHttpInfo
     *
     * Get Email By Id
     *
     * @param  int $id id (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailByIdUsingGETAsyncWithHttpInfo($id, $status = null)
    {
        $request = $this->getEmailByIdUsingGETRequest($id, $status);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailByIdUsingGET'
     *
     * @param  int $id id (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEmailByIdUsingGETRequest($id, $status = null)
    {
        // Verify the required parameter 'id' is set.
        if ($id === null || (is_array($id) && empty($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getEmailByIdUsingGET'
            );
        }

        $resourcePath = '/rest/asset/v1/email/{id}.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Query parameters.
        if (is_array($status)) {
            $status = ObjectSerializer::serializeCollection($status, '', true);
        }
        $queryParams['status'] = $status;
        // Remove any null (optional values).
        $queryParams = array_filter($queryParams, function($v) { return $v !== null; });

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            []
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailByNameUsingGET
     *
     * Get Email by Name
     *
     * @param  string $name Name of the email (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     * @param  string $folder JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39; (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse
     */
    public function getEmailByNameUsingGET($name, $status = null, $folder = null)
    {
        list($response) = $this->getEmailByNameUsingGETWithHttpInfo($name, $status, $folder);
        return $response;
    }

    /**
     * Operation getEmailByNameUsingGETWithHttpInfo
     *
     * Get Email by Name
     *
     * @param  string $name Name of the email (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     * @param  string $folder JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39; (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailByNameUsingGETWithHttpInfo($name, $status = null, $folder = null)
    {
        $request = $this->getEmailByNameUsingGETRequest($name, $status, $folder);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailByNameUsingGETAsync
     *
     * Get Email by Name
     *
     * @param  string $name Name of the email (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     * @param  string $folder JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailByNameUsingGETAsync($name, $status = null, $folder = null)
    {
        return $this->getEmailByNameUsingGETAsyncWithHttpInfo($name, $status, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailByNameUsingGETAsyncWithHttpInfo
     *
     * Get Email by Name
     *
     * @param  string $name Name of the email (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     * @param  string $folder JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailByNameUsingGETAsyncWithHttpInfo($name, $status = null, $folder = null)
    {
        $request = $this->getEmailByNameUsingGETRequest($name, $status, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailByNameUsingGET'
     *
     * @param  string $name Name of the email (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     * @param  string $folder JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEmailByNameUsingGETRequest($name, $status = null, $folder = null)
    {
        // Verify the required parameter 'name' is set.
        if ($name === null || (is_array($name) && empty($name))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling getEmailByNameUsingGET'
            );
        }

        $resourcePath = '/rest/asset/v1/email/byName.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Query parameters.
        if (is_array($name)) {
            $name = ObjectSerializer::serializeCollection($name, '', true);
        }
        $queryParams['name'] = $name;
        if (is_array($status)) {
            $status = ObjectSerializer::serializeCollection($status, '', true);
        }
        $queryParams['status'] = $status;
        if (is_array($folder)) {
            $folder = ObjectSerializer::serializeCollection($folder, '', true);
        }
        $queryParams['folder'] = $folder;
        // Remove any null (optional values).
        $queryParams = array_filter($queryParams, function($v) { return $v !== null; });
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            []
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailCCFieldsUsingGET
     *
     * Get Email CC Fields
     *
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailCCFieldsResponse
     */
    public function getEmailCCFieldsUsingGET()
    {
        list($response) = $this->getEmailCCFieldsUsingGETWithHttpInfo();
        return $response;
    }

    /**
     * Operation getEmailCCFieldsUsingGETWithHttpInfo
     *
     * Get Email CC Fields
     *
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailCCFieldsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailCCFieldsUsingGETWithHttpInfo()
    {
        $request = $this->getEmailCCFieldsUsingGETRequest();

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailCCFieldsResponse');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailCCFieldsResponse');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailCCFieldsResponse',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailCCFieldsUsingGETAsync
     *
     * Get Email CC Fields
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailCCFieldsUsingGETAsync()
    {
        return $this->getEmailCCFieldsUsingGETAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailCCFieldsUsingGETAsyncWithHttpInfo
     *
     * Get Email CC Fields
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailCCFieldsUsingGETAsyncWithHttpInfo()
    {
        $request = $this->getEmailCCFieldsUsingGETRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailCCFieldsResponse');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailCCFieldsUsingGET'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEmailCCFieldsUsingGETRequest()
    {

        $resourcePath = '/rest/asset/v1/email/ccFields.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            []
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailContentByIdUsingGET
     *
     * Get Email Content
     *
     * @param  int $id id (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailContentResponse
     */
    public function getEmailContentByIdUsingGET($id, $status = null)
    {
        list($response) = $this->getEmailContentByIdUsingGETWithHttpInfo($id, $status);
        return $response;
    }

    /**
     * Operation getEmailContentByIdUsingGETWithHttpInfo
     *
     * Get Email Content
     *
     * @param  int $id id (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailContentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailContentByIdUsingGETWithHttpInfo($id, $status = null)
    {
        $request = $this->getEmailContentByIdUsingGETRequest($id, $status);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailContentResponse');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailContentResponse');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailContentResponse',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailContentByIdUsingGETAsync
     *
     * Get Email Content
     *
     * @param  int $id id (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailContentByIdUsingGETAsync($id, $status = null)
    {
        return $this->getEmailContentByIdUsingGETAsyncWithHttpInfo($id, $status)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailContentByIdUsingGETAsyncWithHttpInfo
     *
     * Get Email Content
     *
     * @param  int $id id (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailContentByIdUsingGETAsyncWithHttpInfo($id, $status = null)
    {
        $request = $this->getEmailContentByIdUsingGETRequest($id, $status);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailContentResponse');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailContentByIdUsingGET'
     *
     * @param  int $id id (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEmailContentByIdUsingGETRequest($id, $status = null)
    {
        // Verify the required parameter 'id' is set.
        if ($id === null || (is_array($id) && empty($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getEmailContentByIdUsingGET'
            );
        }

        $resourcePath = '/rest/asset/v1/email/{id}/content.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Query parameters.
        if (is_array($status)) {
            $status = ObjectSerializer::serializeCollection($status, '', true);
        }
        $queryParams['status'] = $status;
        // Remove any null (optional values).
        $queryParams = array_filter($queryParams, function($v) { return $v !== null; });

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            []
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailDynamicContentUsingGET
     *
     * Get Email Dynamic Content
     *
     * @param  int $id Id of email (required)
     * @param  string $content_id Id of email dynamic content section (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailDynamicContentResponse
     */
    public function getEmailDynamicContentUsingGET($id, $content_id, $status = null)
    {
        list($response) = $this->getEmailDynamicContentUsingGETWithHttpInfo($id, $content_id, $status);
        return $response;
    }

    /**
     * Operation getEmailDynamicContentUsingGETWithHttpInfo
     *
     * Get Email Dynamic Content
     *
     * @param  int $id Id of email (required)
     * @param  string $content_id Id of email dynamic content section (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailDynamicContentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailDynamicContentUsingGETWithHttpInfo($id, $content_id, $status = null)
    {
        $request = $this->getEmailDynamicContentUsingGETRequest($id, $content_id, $status);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailDynamicContentResponse');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailDynamicContentResponse');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailDynamicContentResponse',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailDynamicContentUsingGETAsync
     *
     * Get Email Dynamic Content
     *
     * @param  int $id Id of email (required)
     * @param  string $content_id Id of email dynamic content section (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailDynamicContentUsingGETAsync($id, $content_id, $status = null)
    {
        return $this->getEmailDynamicContentUsingGETAsyncWithHttpInfo($id, $content_id, $status)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailDynamicContentUsingGETAsyncWithHttpInfo
     *
     * Get Email Dynamic Content
     *
     * @param  int $id Id of email (required)
     * @param  string $content_id Id of email dynamic content section (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailDynamicContentUsingGETAsyncWithHttpInfo($id, $content_id, $status = null)
    {
        $request = $this->getEmailDynamicContentUsingGETRequest($id, $content_id, $status);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailDynamicContentResponse');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailDynamicContentUsingGET'
     *
     * @param  int $id Id of email (required)
     * @param  string $content_id Id of email dynamic content section (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEmailDynamicContentUsingGETRequest($id, $content_id, $status = null)
    {
        // Verify the required parameter 'id' is set.
        if ($id === null || (is_array($id) && empty($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getEmailDynamicContentUsingGET'
            );
        }
        // Verify the required parameter 'content_id' is set.
        if ($content_id === null || (is_array($content_id) && empty($content_id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_id when calling getEmailDynamicContentUsingGET'
            );
        }

        $resourcePath = '/rest/asset/v1/email/{id}/dynamicContent/{contentId}.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Query parameters.
        if (is_array($status)) {
            $status = ObjectSerializer::serializeCollection($status, '', true);
        }
        $queryParams['status'] = $status;
        // Remove any null (optional values).
        $queryParams = array_filter($queryParams, function($v) { return $v !== null; });

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $resourcePath = str_replace(
            '{' . 'contentId' . '}',
            ObjectSerializer::toPathValue($content_id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            []
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailFullContentUsingGET
     *
     * Get Email Full Content
     *
     * @param  int $id Id of the email (required)
     * @param  string $status Status filter for draft or approved versions.  Defaults to approved if asset is approved, draft if not. (optional)
     * @param  int $lead_id The lead id to impersonate.  Email is rendered as though it was received by this lead. (optional)
     * @param  string $type Email content type to return.  Default is HTML. (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfGetEmailFullContentResponse
     */
    public function getEmailFullContentUsingGET($id, $status = null, $lead_id = null, $type = null)
    {
        list($response) = $this->getEmailFullContentUsingGETWithHttpInfo($id, $status, $lead_id, $type);
        return $response;
    }

    /**
     * Operation getEmailFullContentUsingGETWithHttpInfo
     *
     * Get Email Full Content
     *
     * @param  int $id Id of the email (required)
     * @param  string $status Status filter for draft or approved versions.  Defaults to approved if asset is approved, draft if not. (optional)
     * @param  int $lead_id The lead id to impersonate.  Email is rendered as though it was received by this lead. (optional)
     * @param  string $type Email content type to return.  Default is HTML. (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfGetEmailFullContentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailFullContentUsingGETWithHttpInfo($id, $status = null, $lead_id = null, $type = null)
    {
        $request = $this->getEmailFullContentUsingGETRequest($id, $status, $lead_id, $type);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfGetEmailFullContentResponse');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfGetEmailFullContentResponse');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Asset\Model\ResponseOfGetEmailFullContentResponse',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailFullContentUsingGETAsync
     *
     * Get Email Full Content
     *
     * @param  int $id Id of the email (required)
     * @param  string $status Status filter for draft or approved versions.  Defaults to approved if asset is approved, draft if not. (optional)
     * @param  int $lead_id The lead id to impersonate.  Email is rendered as though it was received by this lead. (optional)
     * @param  string $type Email content type to return.  Default is HTML. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailFullContentUsingGETAsync($id, $status = null, $lead_id = null, $type = null)
    {
        return $this->getEmailFullContentUsingGETAsyncWithHttpInfo($id, $status, $lead_id, $type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailFullContentUsingGETAsyncWithHttpInfo
     *
     * Get Email Full Content
     *
     * @param  int $id Id of the email (required)
     * @param  string $status Status filter for draft or approved versions.  Defaults to approved if asset is approved, draft if not. (optional)
     * @param  int $lead_id The lead id to impersonate.  Email is rendered as though it was received by this lead. (optional)
     * @param  string $type Email content type to return.  Default is HTML. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailFullContentUsingGETAsyncWithHttpInfo($id, $status = null, $lead_id = null, $type = null)
    {
        $request = $this->getEmailFullContentUsingGETRequest($id, $status, $lead_id, $type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfGetEmailFullContentResponse');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailFullContentUsingGET'
     *
     * @param  int $id Id of the email (required)
     * @param  string $status Status filter for draft or approved versions.  Defaults to approved if asset is approved, draft if not. (optional)
     * @param  int $lead_id The lead id to impersonate.  Email is rendered as though it was received by this lead. (optional)
     * @param  string $type Email content type to return.  Default is HTML. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEmailFullContentUsingGETRequest($id, $status = null, $lead_id = null, $type = null)
    {
        // Verify the required parameter 'id' is set.
        if ($id === null || (is_array($id) && empty($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getEmailFullContentUsingGET'
            );
        }

        $resourcePath = '/rest/asset/v1/email/{id}/fullContent.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Query parameters.
        if (is_array($status)) {
            $status = ObjectSerializer::serializeCollection($status, '', true);
        }
        $queryParams['status'] = $status;
        if (is_array($lead_id)) {
            $lead_id = ObjectSerializer::serializeCollection($lead_id, '', true);
        }
        $queryParams['leadId'] = $lead_id;
        if (is_array($type)) {
            $type = ObjectSerializer::serializeCollection($type, '', true);
        }
        $queryParams['type'] = $type;
        // Remove any null (optional values).
        $queryParams = array_filter($queryParams, function($v) { return $v !== null; });

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            []
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailUsingGET
     *
     * Get Emails
     *
     * @param  string $status Status filter for draft or approved versions (optional)
     * @param  string $folder JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39; (optional)
     * @param  int $offset Integer offset for paging (optional)
     * @param  int $max_return Maximum number of emails to return.  Max 200, default 20 (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse
     */
    public function getEmailUsingGET($status = null, $folder = null, $offset = null, $max_return = null)
    {
        list($response) = $this->getEmailUsingGETWithHttpInfo($status, $folder, $offset, $max_return);
        return $response;
    }

    /**
     * Operation getEmailUsingGETWithHttpInfo
     *
     * Get Emails
     *
     * @param  string $status Status filter for draft or approved versions (optional)
     * @param  string $folder JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39; (optional)
     * @param  int $offset Integer offset for paging (optional)
     * @param  int $max_return Maximum number of emails to return.  Max 200, default 20 (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailUsingGETWithHttpInfo($status = null, $folder = null, $offset = null, $max_return = null)
    {
        $request = $this->getEmailUsingGETRequest($status, $folder, $offset, $max_return);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailUsingGETAsync
     *
     * Get Emails
     *
     * @param  string $status Status filter for draft or approved versions (optional)
     * @param  string $folder JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39; (optional)
     * @param  int $offset Integer offset for paging (optional)
     * @param  int $max_return Maximum number of emails to return.  Max 200, default 20 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailUsingGETAsync($status = null, $folder = null, $offset = null, $max_return = null)
    {
        return $this->getEmailUsingGETAsyncWithHttpInfo($status, $folder, $offset, $max_return)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailUsingGETAsyncWithHttpInfo
     *
     * Get Emails
     *
     * @param  string $status Status filter for draft or approved versions (optional)
     * @param  string $folder JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39; (optional)
     * @param  int $offset Integer offset for paging (optional)
     * @param  int $max_return Maximum number of emails to return.  Max 200, default 20 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailUsingGETAsyncWithHttpInfo($status = null, $folder = null, $offset = null, $max_return = null)
    {
        $request = $this->getEmailUsingGETRequest($status, $folder, $offset, $max_return);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailUsingGET'
     *
     * @param  string $status Status filter for draft or approved versions (optional)
     * @param  string $folder JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39; (optional)
     * @param  int $offset Integer offset for paging (optional)
     * @param  int $max_return Maximum number of emails to return.  Max 200, default 20 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEmailUsingGETRequest($status = null, $folder = null, $offset = null, $max_return = null)
    {

        $resourcePath = '/rest/asset/v1/emails.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Query parameters.
        if (is_array($status)) {
            $status = ObjectSerializer::serializeCollection($status, '', true);
        }
        $queryParams['status'] = $status;
        if (is_array($folder)) {
            $folder = ObjectSerializer::serializeCollection($folder, '', true);
        }
        $queryParams['folder'] = $folder;
        if (is_array($offset)) {
            $offset = ObjectSerializer::serializeCollection($offset, '', true);
        }
        $queryParams['offset'] = $offset;
        if (is_array($max_return)) {
            $max_return = ObjectSerializer::serializeCollection($max_return, '', true);
        }
        $queryParams['maxReturn'] = $max_return;
        // Remove any null (optional values).
        $queryParams = array_filter($queryParams, function($v) { return $v !== null; });
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            []
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailVariablesUsingGET
     *
     * Get Email Variables
     *
     * @param  int $id id (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function getEmailVariablesUsingGET($id)
    {
        list($response) = $this->getEmailVariablesUsingGETWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getEmailVariablesUsingGETWithHttpInfo
     *
     * Get Email Variables
     *
     * @param  int $id id (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailVariablesUsingGETWithHttpInfo($id)
    {
        $request = $this->getEmailVariablesUsingGETRequest($id);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, 'object');
            }

            return $this->responseToReturn($response, 'object');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            'object',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailVariablesUsingGETAsync
     *
     * Get Email Variables
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailVariablesUsingGETAsync($id)
    {
        return $this->getEmailVariablesUsingGETAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailVariablesUsingGETAsyncWithHttpInfo
     *
     * Get Email Variables
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailVariablesUsingGETAsyncWithHttpInfo($id)
    {
        $request = $this->getEmailVariablesUsingGETRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, 'object');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailVariablesUsingGET'
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEmailVariablesUsingGETRequest($id)
    {
        // Verify the required parameter 'id' is set.
        if ($id === null || (is_array($id) && empty($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getEmailVariablesUsingGET'
            );
        }

        $resourcePath = '/rest/asset/v1/email/{id}/variables.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            []
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation rearrangeModulesUsingPOST
     *
     * Rearrange Email Modules
     *
     * @param  int $id id (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function rearrangeModulesUsingPOST($id)
    {
        list($response) = $this->rearrangeModulesUsingPOSTWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation rearrangeModulesUsingPOSTWithHttpInfo
     *
     * Rearrange Email Modules
     *
     * @param  int $id id (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function rearrangeModulesUsingPOSTWithHttpInfo($id)
    {
        $request = $this->rearrangeModulesUsingPOSTRequest($id);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, 'object');
            }

            return $this->responseToReturn($response, 'object');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            'object',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation rearrangeModulesUsingPOSTAsync
     *
     * Rearrange Email Modules
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rearrangeModulesUsingPOSTAsync($id)
    {
        return $this->rearrangeModulesUsingPOSTAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation rearrangeModulesUsingPOSTAsyncWithHttpInfo
     *
     * Rearrange Email Modules
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rearrangeModulesUsingPOSTAsyncWithHttpInfo($id)
    {
        $request = $this->rearrangeModulesUsingPOSTRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, 'object');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'rearrangeModulesUsingPOST'
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function rearrangeModulesUsingPOSTRequest($id)
    {
        // Verify the required parameter 'id' is set.
        if ($id === null || (is_array($id) && empty($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling rearrangeModulesUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/email/{id}/content/rearrange.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation renameUsingPOST
     *
     * Rename Email Module
     *
     * @param  int $id id (required)
     * @param  string $module_id moduleId (required)
     * @param  string $name New module name (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function renameUsingPOST($id, $module_id, $name)
    {
        list($response) = $this->renameUsingPOSTWithHttpInfo($id, $module_id, $name);
        return $response;
    }

    /**
     * Operation renameUsingPOSTWithHttpInfo
     *
     * Rename Email Module
     *
     * @param  int $id id (required)
     * @param  string $module_id moduleId (required)
     * @param  string $name New module name (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function renameUsingPOSTWithHttpInfo($id, $module_id, $name)
    {
        $request = $this->renameUsingPOSTRequest($id, $module_id, $name);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, 'object');
            }

            return $this->responseToReturn($response, 'object');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            'object',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation renameUsingPOSTAsync
     *
     * Rename Email Module
     *
     * @param  int $id id (required)
     * @param  string $module_id moduleId (required)
     * @param  string $name New module name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function renameUsingPOSTAsync($id, $module_id, $name)
    {
        return $this->renameUsingPOSTAsyncWithHttpInfo($id, $module_id, $name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation renameUsingPOSTAsyncWithHttpInfo
     *
     * Rename Email Module
     *
     * @param  int $id id (required)
     * @param  string $module_id moduleId (required)
     * @param  string $name New module name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function renameUsingPOSTAsyncWithHttpInfo($id, $module_id, $name)
    {
        $request = $this->renameUsingPOSTRequest($id, $module_id, $name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, 'object');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'renameUsingPOST'
     *
     * @param  int $id id (required)
     * @param  string $module_id moduleId (required)
     * @param  string $name New module name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function renameUsingPOSTRequest($id, $module_id, $name)
    {
        // Verify the required parameter 'id' is set.
        if ($id === null || (is_array($id) && empty($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling renameUsingPOST'
            );
        }
        // Verify the required parameter 'module_id' is set.
        if ($module_id === null || (is_array($module_id) && empty($module_id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $module_id when calling renameUsingPOST'
            );
        }
        // Verify the required parameter 'name' is set.
        if ($name === null || (is_array($name) && empty($name))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling renameUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/email/{id}/content/{moduleId}/rename.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Query parameters.
        if (is_array($name)) {
            $name = ObjectSerializer::serializeCollection($name, '', true);
        }
        $queryParams['name'] = $name;
        // Remove any null (optional values).
        $queryParams = array_filter($queryParams, function($v) { return $v !== null; });

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $resourcePath = str_replace(
            '{' . 'moduleId' . '}',
            ObjectSerializer::toPathValue($module_id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            []
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendSampleEmailUsingPOST
     *
     * Send Sample Email
     *
     * @param  int $id Id of the email (required)
     * @param  string $email_address Email address to receive sample email (required)
     * @param  string $lead_id Id of a lead to impersonate.  Tokens and dynamic content will be populated as though it were sent to the lead. (optional)
     * @param  bool $text_only Whether to send to text only version along with the HTML version.  Default false. (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse
     */
    public function sendSampleEmailUsingPOST($id, $email_address, $lead_id = null, $text_only = null)
    {
        list($response) = $this->sendSampleEmailUsingPOSTWithHttpInfo($id, $email_address, $lead_id, $text_only);
        return $response;
    }

    /**
     * Operation sendSampleEmailUsingPOSTWithHttpInfo
     *
     * Send Sample Email
     *
     * @param  int $id Id of the email (required)
     * @param  string $email_address Email address to receive sample email (required)
     * @param  string $lead_id Id of a lead to impersonate.  Tokens and dynamic content will be populated as though it were sent to the lead. (optional)
     * @param  bool $text_only Whether to send to text only version along with the HTML version.  Default false. (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendSampleEmailUsingPOSTWithHttpInfo($id, $email_address, $lead_id = null, $text_only = null)
    {
        $request = $this->sendSampleEmailUsingPOSTRequest($id, $email_address, $lead_id, $text_only);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sendSampleEmailUsingPOSTAsync
     *
     * Send Sample Email
     *
     * @param  int $id Id of the email (required)
     * @param  string $email_address Email address to receive sample email (required)
     * @param  string $lead_id Id of a lead to impersonate.  Tokens and dynamic content will be populated as though it were sent to the lead. (optional)
     * @param  bool $text_only Whether to send to text only version along with the HTML version.  Default false. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendSampleEmailUsingPOSTAsync($id, $email_address, $lead_id = null, $text_only = null)
    {
        return $this->sendSampleEmailUsingPOSTAsyncWithHttpInfo($id, $email_address, $lead_id, $text_only)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendSampleEmailUsingPOSTAsyncWithHttpInfo
     *
     * Send Sample Email
     *
     * @param  int $id Id of the email (required)
     * @param  string $email_address Email address to receive sample email (required)
     * @param  string $lead_id Id of a lead to impersonate.  Tokens and dynamic content will be populated as though it were sent to the lead. (optional)
     * @param  bool $text_only Whether to send to text only version along with the HTML version.  Default false. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendSampleEmailUsingPOSTAsyncWithHttpInfo($id, $email_address, $lead_id = null, $text_only = null)
    {
        $request = $this->sendSampleEmailUsingPOSTRequest($id, $email_address, $lead_id, $text_only);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendSampleEmailUsingPOST'
     *
     * @param  int $id Id of the email (required)
     * @param  string $email_address Email address to receive sample email (required)
     * @param  string $lead_id Id of a lead to impersonate.  Tokens and dynamic content will be populated as though it were sent to the lead. (optional)
     * @param  bool $text_only Whether to send to text only version along with the HTML version.  Default false. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sendSampleEmailUsingPOSTRequest($id, $email_address, $lead_id = null, $text_only = null)
    {
        // Verify the required parameter 'id' is set.
        if ($id === null || (is_array($id) && empty($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling sendSampleEmailUsingPOST'
            );
        }
        // Verify the required parameter 'email_address' is set.
        if ($email_address === null || (is_array($email_address) && empty($email_address))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_address when calling sendSampleEmailUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/email/{id}/sendSample.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        // Form parameters.
        /** @var string[][] $formParams */
        $formParams = [];
        $multipart = false;
        $formParams['emailAddress'] = ObjectSerializer::toFormValue($email_address);
        $formParams['leadId'] = ObjectSerializer::toFormValue($lead_id);
        $formParams['textOnly'] = ObjectSerializer::toFormValue($text_only);
        // Remove any null (optional values).
        $formParams = array_filter($formParams, function($v) { return $v !== null; });
        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }
        if (!empty($formParams)) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    foreach ((array) $formParamValue as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation unapproveDraftUsingPOST
     *
     * Unapprove Email
     *
     * @param  int $id id (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse
     */
    public function unapproveDraftUsingPOST($id)
    {
        list($response) = $this->unapproveDraftUsingPOSTWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation unapproveDraftUsingPOSTWithHttpInfo
     *
     * Unapprove Email
     *
     * @param  int $id id (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function unapproveDraftUsingPOSTWithHttpInfo($id)
    {
        $request = $this->unapproveDraftUsingPOSTRequest($id);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation unapproveDraftUsingPOSTAsync
     *
     * Unapprove Email
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function unapproveDraftUsingPOSTAsync($id)
    {
        return $this->unapproveDraftUsingPOSTAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation unapproveDraftUsingPOSTAsyncWithHttpInfo
     *
     * Unapprove Email
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function unapproveDraftUsingPOSTAsyncWithHttpInfo($id)
    {
        $request = $this->unapproveDraftUsingPOSTRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'unapproveDraftUsingPOST'
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function unapproveDraftUsingPOSTRequest($id)
    {
        // Verify the required parameter 'id' is set.
        if ($id === null || (is_array($id) && empty($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling unapproveDraftUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/email/{id}/unapprove.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            []
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateEmailComponentContentUsingPOST
     *
     * Update Email Content Section
     *
     * @param  int $id id (required)
     * @param  string $html_id htmlId (required)
     * @param  string $type Type of content to set for the section. (required)
     * @param  string $value Value to set for the section.  For type Text, the HTML content of the section.  For type DynamicContent, the id of the segmentation to use for the content.  For type Snippet, the id of the snippet to embed (required)
     * @param  string $alt_text Sets the value of the alt parameter for the resulting img element (optional)
     * @param  string $external_url external_url (optional)
     * @param  int $height Overrides naitve height of the image.  The resulting file will be resized to the given height (optional)
     * @param  string $image Multipart file that allows you to load an image from your computer (optional)
     * @param  string $link_url link_url (optional)
     * @param  bool $over_write Allows overwriting of the existing image content section (optional)
     * @param  string $style Sets the value of the style parameter for the content section (optional)
     * @param  string $text_value text_value (optional)
     * @param  string $video_url Sets the Url of the video element.  Videos must be either from YouTube or Vimeo (optional)
     * @param  int $width Overrides native width of the image.  The resulting file will be resized to the given width (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse
     */
    public function updateEmailComponentContentUsingPOST($id, $html_id, $type, $value, $alt_text = null, $external_url = null, $height = null, $image = null, $link_url = null, $over_write = null, $style = null, $text_value = null, $video_url = null, $width = null)
    {
        list($response) = $this->updateEmailComponentContentUsingPOSTWithHttpInfo($id, $html_id, $type, $value, $alt_text, $external_url, $height, $image, $link_url, $over_write, $style, $text_value, $video_url, $width);
        return $response;
    }

    /**
     * Operation updateEmailComponentContentUsingPOSTWithHttpInfo
     *
     * Update Email Content Section
     *
     * @param  int $id id (required)
     * @param  string $html_id htmlId (required)
     * @param  string $type Type of content to set for the section. (required)
     * @param  string $value Value to set for the section.  For type Text, the HTML content of the section.  For type DynamicContent, the id of the segmentation to use for the content.  For type Snippet, the id of the snippet to embed (required)
     * @param  string $alt_text Sets the value of the alt parameter for the resulting img element (optional)
     * @param  string $external_url (optional)
     * @param  int $height Overrides naitve height of the image.  The resulting file will be resized to the given height (optional)
     * @param  string $image Multipart file that allows you to load an image from your computer (optional)
     * @param  string $link_url (optional)
     * @param  bool $over_write Allows overwriting of the existing image content section (optional)
     * @param  string $style Sets the value of the style parameter for the content section (optional)
     * @param  string $text_value (optional)
     * @param  string $video_url Sets the Url of the video element.  Videos must be either from YouTube or Vimeo (optional)
     * @param  int $width Overrides native width of the image.  The resulting file will be resized to the given width (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateEmailComponentContentUsingPOSTWithHttpInfo($id, $html_id, $type, $value, $alt_text = null, $external_url = null, $height = null, $image = null, $link_url = null, $over_write = null, $style = null, $text_value = null, $video_url = null, $width = null)
    {
        $request = $this->updateEmailComponentContentUsingPOSTRequest($id, $html_id, $type, $value, $alt_text, $external_url, $height, $image, $link_url, $over_write, $style, $text_value, $video_url, $width);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateEmailComponentContentUsingPOSTAsync
     *
     * Update Email Content Section
     *
     * @param  int $id id (required)
     * @param  string $html_id htmlId (required)
     * @param  string $type Type of content to set for the section. (required)
     * @param  string $value Value to set for the section.  For type Text, the HTML content of the section.  For type DynamicContent, the id of the segmentation to use for the content.  For type Snippet, the id of the snippet to embed (required)
     * @param  string $alt_text Sets the value of the alt parameter for the resulting img element (optional)
     * @param  string $external_url (optional)
     * @param  int $height Overrides naitve height of the image.  The resulting file will be resized to the given height (optional)
     * @param  string $image Multipart file that allows you to load an image from your computer (optional)
     * @param  string $link_url (optional)
     * @param  bool $over_write Allows overwriting of the existing image content section (optional)
     * @param  string $style Sets the value of the style parameter for the content section (optional)
     * @param  string $text_value (optional)
     * @param  string $video_url Sets the Url of the video element.  Videos must be either from YouTube or Vimeo (optional)
     * @param  int $width Overrides native width of the image.  The resulting file will be resized to the given width (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEmailComponentContentUsingPOSTAsync($id, $html_id, $type, $value, $alt_text = null, $external_url = null, $height = null, $image = null, $link_url = null, $over_write = null, $style = null, $text_value = null, $video_url = null, $width = null)
    {
        return $this->updateEmailComponentContentUsingPOSTAsyncWithHttpInfo($id, $html_id, $type, $value, $alt_text, $external_url, $height, $image, $link_url, $over_write, $style, $text_value, $video_url, $width)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateEmailComponentContentUsingPOSTAsyncWithHttpInfo
     *
     * Update Email Content Section
     *
     * @param  int $id id (required)
     * @param  string $html_id htmlId (required)
     * @param  string $type Type of content to set for the section. (required)
     * @param  string $value Value to set for the section.  For type Text, the HTML content of the section.  For type DynamicContent, the id of the segmentation to use for the content.  For type Snippet, the id of the snippet to embed (required)
     * @param  string $alt_text Sets the value of the alt parameter for the resulting img element (optional)
     * @param  string $external_url (optional)
     * @param  int $height Overrides naitve height of the image.  The resulting file will be resized to the given height (optional)
     * @param  string $image Multipart file that allows you to load an image from your computer (optional)
     * @param  string $link_url (optional)
     * @param  bool $over_write Allows overwriting of the existing image content section (optional)
     * @param  string $style Sets the value of the style parameter for the content section (optional)
     * @param  string $text_value (optional)
     * @param  string $video_url Sets the Url of the video element.  Videos must be either from YouTube or Vimeo (optional)
     * @param  int $width Overrides native width of the image.  The resulting file will be resized to the given width (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEmailComponentContentUsingPOSTAsyncWithHttpInfo($id, $html_id, $type, $value, $alt_text = null, $external_url = null, $height = null, $image = null, $link_url = null, $over_write = null, $style = null, $text_value = null, $video_url = null, $width = null)
    {
        $request = $this->updateEmailComponentContentUsingPOSTRequest($id, $html_id, $type, $value, $alt_text, $external_url, $height, $image, $link_url, $over_write, $style, $text_value, $video_url, $width);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateEmailComponentContentUsingPOST'
     *
     * @param  int $id id (required)
     * @param  string $html_id htmlId (required)
     * @param  string $type Type of content to set for the section. (required)
     * @param  string $value Value to set for the section.  For type Text, the HTML content of the section.  For type DynamicContent, the id of the segmentation to use for the content.  For type Snippet, the id of the snippet to embed (required)
     * @param  string $alt_text Sets the value of the alt parameter for the resulting img element (optional)
     * @param  string $external_url (optional)
     * @param  int $height Overrides naitve height of the image.  The resulting file will be resized to the given height (optional)
     * @param  string $image Multipart file that allows you to load an image from your computer (optional)
     * @param  string $link_url (optional)
     * @param  bool $over_write Allows overwriting of the existing image content section (optional)
     * @param  string $style Sets the value of the style parameter for the content section (optional)
     * @param  string $text_value (optional)
     * @param  string $video_url Sets the Url of the video element.  Videos must be either from YouTube or Vimeo (optional)
     * @param  int $width Overrides native width of the image.  The resulting file will be resized to the given width (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateEmailComponentContentUsingPOSTRequest($id, $html_id, $type, $value, $alt_text = null, $external_url = null, $height = null, $image = null, $link_url = null, $over_write = null, $style = null, $text_value = null, $video_url = null, $width = null)
    {
        // Verify the required parameter 'id' is set.
        if ($id === null || (is_array($id) && empty($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateEmailComponentContentUsingPOST'
            );
        }
        // Verify the required parameter 'html_id' is set.
        if ($html_id === null || (is_array($html_id) && empty($html_id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $html_id when calling updateEmailComponentContentUsingPOST'
            );
        }
        // Verify the required parameter 'type' is set.
        if ($type === null || (is_array($type) && empty($type))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling updateEmailComponentContentUsingPOST'
            );
        }
        // Verify the required parameter 'value' is set.
        if ($value === null || (is_array($value) && empty($value))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $value when calling updateEmailComponentContentUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/email/{id}/content/{htmlId}.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $resourcePath = str_replace(
            '{' . 'htmlId' . '}',
            ObjectSerializer::toPathValue($html_id),
            $resourcePath
        );

        // Form parameters.
        /** @var string[][] $formParams */
        $formParams = [];
        $multipart = false;
        $formParams['altText'] = ObjectSerializer::toFormValue($alt_text);
        $formParams['externalUrl'] = ObjectSerializer::toFormValue($external_url);
        $formParams['height'] = ObjectSerializer::toFormValue($height);
        $formParams['image'] = ObjectSerializer::toFormValue($image);
        $formParams['linkUrl'] = ObjectSerializer::toFormValue($link_url);
        $formParams['overWrite'] = ObjectSerializer::toFormValue($over_write);
        $formParams['style'] = ObjectSerializer::toFormValue($style);
        $formParams['textValue'] = ObjectSerializer::toFormValue($text_value);
        $formParams['type'] = ObjectSerializer::toFormValue($type);
        $formParams['value'] = ObjectSerializer::toFormValue($value);
        $formParams['videoUrl'] = ObjectSerializer::toFormValue($video_url);
        $formParams['width'] = ObjectSerializer::toFormValue($width);
        // Remove any null (optional values).
        $formParams = array_filter($formParams, function($v) { return $v !== null; });
        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }
        if (!empty($formParams)) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    foreach ((array) $formParamValue as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateEmailContentUsingPOST
     *
     * Update Email Content
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\EmailHeaderField $from_email from_email (optional)
     * @param  \NecLimDul\MarketoRest\Asset\Model\EmailHeaderField $from_name from_name (optional)
     * @param  \NecLimDul\MarketoRest\Asset\Model\EmailHeaderField $reply_to reply_to (optional)
     * @param  \NecLimDul\MarketoRest\Asset\Model\EmailHeaderField $subject subject (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse
     */
    public function updateEmailContentUsingPOST($id, $from_email = null, $from_name = null, $reply_to = null, $subject = null)
    {
        list($response) = $this->updateEmailContentUsingPOSTWithHttpInfo($id, $from_email, $from_name, $reply_to, $subject);
        return $response;
    }

    /**
     * Operation updateEmailContentUsingPOSTWithHttpInfo
     *
     * Update Email Content
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\EmailHeaderField $from_email (optional)
     * @param  \NecLimDul\MarketoRest\Asset\Model\EmailHeaderField $from_name (optional)
     * @param  \NecLimDul\MarketoRest\Asset\Model\EmailHeaderField $reply_to (optional)
     * @param  \NecLimDul\MarketoRest\Asset\Model\EmailHeaderField $subject (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateEmailContentUsingPOSTWithHttpInfo($id, $from_email = null, $from_name = null, $reply_to = null, $subject = null)
    {
        $request = $this->updateEmailContentUsingPOSTRequest($id, $from_email, $from_name, $reply_to, $subject);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateEmailContentUsingPOSTAsync
     *
     * Update Email Content
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\EmailHeaderField $from_email (optional)
     * @param  \NecLimDul\MarketoRest\Asset\Model\EmailHeaderField $from_name (optional)
     * @param  \NecLimDul\MarketoRest\Asset\Model\EmailHeaderField $reply_to (optional)
     * @param  \NecLimDul\MarketoRest\Asset\Model\EmailHeaderField $subject (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEmailContentUsingPOSTAsync($id, $from_email = null, $from_name = null, $reply_to = null, $subject = null)
    {
        return $this->updateEmailContentUsingPOSTAsyncWithHttpInfo($id, $from_email, $from_name, $reply_to, $subject)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateEmailContentUsingPOSTAsyncWithHttpInfo
     *
     * Update Email Content
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\EmailHeaderField $from_email (optional)
     * @param  \NecLimDul\MarketoRest\Asset\Model\EmailHeaderField $from_name (optional)
     * @param  \NecLimDul\MarketoRest\Asset\Model\EmailHeaderField $reply_to (optional)
     * @param  \NecLimDul\MarketoRest\Asset\Model\EmailHeaderField $subject (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEmailContentUsingPOSTAsyncWithHttpInfo($id, $from_email = null, $from_name = null, $reply_to = null, $subject = null)
    {
        $request = $this->updateEmailContentUsingPOSTRequest($id, $from_email, $from_name, $reply_to, $subject);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateEmailContentUsingPOST'
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\EmailHeaderField $from_email (optional)
     * @param  \NecLimDul\MarketoRest\Asset\Model\EmailHeaderField $from_name (optional)
     * @param  \NecLimDul\MarketoRest\Asset\Model\EmailHeaderField $reply_to (optional)
     * @param  \NecLimDul\MarketoRest\Asset\Model\EmailHeaderField $subject (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateEmailContentUsingPOSTRequest($id, $from_email = null, $from_name = null, $reply_to = null, $subject = null)
    {
        // Verify the required parameter 'id' is set.
        if ($id === null || (is_array($id) && empty($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateEmailContentUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/email/{id}/content.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        // Form parameters.
        /** @var string[][] $formParams */
        $formParams = [];
        $multipart = false;
        $formParams['fromEmail'] = ObjectSerializer::toFormValue($from_email);
        $formParams['fromName'] = ObjectSerializer::toFormValue($from_name);
        $formParams['replyTO'] = ObjectSerializer::toFormValue($reply_to);
        $formParams['subject'] = ObjectSerializer::toFormValue($subject);
        // Remove any null (optional values).
        $formParams = array_filter($formParams, function($v) { return $v !== null; });
        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }
        if (!empty($formParams)) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    foreach ((array) $formParamValue as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateEmailDynamicContentUsingPOST
     *
     * Update Email Dynamic Content Section
     *
     * @param  int $id Id of email (required)
     * @param  string $content_id Id of email dynamic content section (required)
     * @param  string $type Type of content to set for the section. (required)
     * @param  string $value Value to set for the section.  For type Text, the HTML content of the section.  For type DynamicContent, the id of the segmentation to use for the content.  For type Snippet, the id of the snippet to embed (required)
     * @param  string $alt_text Sets the value of the alt parameter for the resulting img element (optional)
     * @param  string $external_url external_url (optional)
     * @param  int $height Overrides naitve height of the image.  The resulting file will be resized to the given height (optional)
     * @param  string $image Multipart file that allows you to add an image from your computer (optional)
     * @param  string $link_url link_url (optional)
     * @param  bool $over_write Allows overwriting of the existing image content section (optional)
     * @param  string $style Sets the value of the style parameter for the content section (optional)
     * @param  string $video_url Sets the Url of the video element.  Videos must be either from YouTube or Vimeo (optional)
     * @param  int $width Overrides native width of the image.  The resulting file will be resized to the given width (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse
     */
    public function updateEmailDynamicContentUsingPOST($id, $content_id, $type, $value, $alt_text = null, $external_url = null, $height = null, $image = null, $link_url = null, $over_write = null, $style = null, $video_url = null, $width = null)
    {
        list($response) = $this->updateEmailDynamicContentUsingPOSTWithHttpInfo($id, $content_id, $type, $value, $alt_text, $external_url, $height, $image, $link_url, $over_write, $style, $video_url, $width);
        return $response;
    }

    /**
     * Operation updateEmailDynamicContentUsingPOSTWithHttpInfo
     *
     * Update Email Dynamic Content Section
     *
     * @param  int $id Id of email (required)
     * @param  string $content_id Id of email dynamic content section (required)
     * @param  string $type Type of content to set for the section. (required)
     * @param  string $value Value to set for the section.  For type Text, the HTML content of the section.  For type DynamicContent, the id of the segmentation to use for the content.  For type Snippet, the id of the snippet to embed (required)
     * @param  string $alt_text Sets the value of the alt parameter for the resulting img element (optional)
     * @param  string $external_url (optional)
     * @param  int $height Overrides naitve height of the image.  The resulting file will be resized to the given height (optional)
     * @param  string $image Multipart file that allows you to add an image from your computer (optional)
     * @param  string $link_url (optional)
     * @param  bool $over_write Allows overwriting of the existing image content section (optional)
     * @param  string $style Sets the value of the style parameter for the content section (optional)
     * @param  string $video_url Sets the Url of the video element.  Videos must be either from YouTube or Vimeo (optional)
     * @param  int $width Overrides native width of the image.  The resulting file will be resized to the given width (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateEmailDynamicContentUsingPOSTWithHttpInfo($id, $content_id, $type, $value, $alt_text = null, $external_url = null, $height = null, $image = null, $link_url = null, $over_write = null, $style = null, $video_url = null, $width = null)
    {
        $request = $this->updateEmailDynamicContentUsingPOSTRequest($id, $content_id, $type, $value, $alt_text, $external_url, $height, $image, $link_url, $over_write, $style, $video_url, $width);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateEmailDynamicContentUsingPOSTAsync
     *
     * Update Email Dynamic Content Section
     *
     * @param  int $id Id of email (required)
     * @param  string $content_id Id of email dynamic content section (required)
     * @param  string $type Type of content to set for the section. (required)
     * @param  string $value Value to set for the section.  For type Text, the HTML content of the section.  For type DynamicContent, the id of the segmentation to use for the content.  For type Snippet, the id of the snippet to embed (required)
     * @param  string $alt_text Sets the value of the alt parameter for the resulting img element (optional)
     * @param  string $external_url (optional)
     * @param  int $height Overrides naitve height of the image.  The resulting file will be resized to the given height (optional)
     * @param  string $image Multipart file that allows you to add an image from your computer (optional)
     * @param  string $link_url (optional)
     * @param  bool $over_write Allows overwriting of the existing image content section (optional)
     * @param  string $style Sets the value of the style parameter for the content section (optional)
     * @param  string $video_url Sets the Url of the video element.  Videos must be either from YouTube or Vimeo (optional)
     * @param  int $width Overrides native width of the image.  The resulting file will be resized to the given width (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEmailDynamicContentUsingPOSTAsync($id, $content_id, $type, $value, $alt_text = null, $external_url = null, $height = null, $image = null, $link_url = null, $over_write = null, $style = null, $video_url = null, $width = null)
    {
        return $this->updateEmailDynamicContentUsingPOSTAsyncWithHttpInfo($id, $content_id, $type, $value, $alt_text, $external_url, $height, $image, $link_url, $over_write, $style, $video_url, $width)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateEmailDynamicContentUsingPOSTAsyncWithHttpInfo
     *
     * Update Email Dynamic Content Section
     *
     * @param  int $id Id of email (required)
     * @param  string $content_id Id of email dynamic content section (required)
     * @param  string $type Type of content to set for the section. (required)
     * @param  string $value Value to set for the section.  For type Text, the HTML content of the section.  For type DynamicContent, the id of the segmentation to use for the content.  For type Snippet, the id of the snippet to embed (required)
     * @param  string $alt_text Sets the value of the alt parameter for the resulting img element (optional)
     * @param  string $external_url (optional)
     * @param  int $height Overrides naitve height of the image.  The resulting file will be resized to the given height (optional)
     * @param  string $image Multipart file that allows you to add an image from your computer (optional)
     * @param  string $link_url (optional)
     * @param  bool $over_write Allows overwriting of the existing image content section (optional)
     * @param  string $style Sets the value of the style parameter for the content section (optional)
     * @param  string $video_url Sets the Url of the video element.  Videos must be either from YouTube or Vimeo (optional)
     * @param  int $width Overrides native width of the image.  The resulting file will be resized to the given width (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEmailDynamicContentUsingPOSTAsyncWithHttpInfo($id, $content_id, $type, $value, $alt_text = null, $external_url = null, $height = null, $image = null, $link_url = null, $over_write = null, $style = null, $video_url = null, $width = null)
    {
        $request = $this->updateEmailDynamicContentUsingPOSTRequest($id, $content_id, $type, $value, $alt_text, $external_url, $height, $image, $link_url, $over_write, $style, $video_url, $width);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateEmailDynamicContentUsingPOST'
     *
     * @param  int $id Id of email (required)
     * @param  string $content_id Id of email dynamic content section (required)
     * @param  string $type Type of content to set for the section. (required)
     * @param  string $value Value to set for the section.  For type Text, the HTML content of the section.  For type DynamicContent, the id of the segmentation to use for the content.  For type Snippet, the id of the snippet to embed (required)
     * @param  string $alt_text Sets the value of the alt parameter for the resulting img element (optional)
     * @param  string $external_url (optional)
     * @param  int $height Overrides naitve height of the image.  The resulting file will be resized to the given height (optional)
     * @param  string $image Multipart file that allows you to add an image from your computer (optional)
     * @param  string $link_url (optional)
     * @param  bool $over_write Allows overwriting of the existing image content section (optional)
     * @param  string $style Sets the value of the style parameter for the content section (optional)
     * @param  string $video_url Sets the Url of the video element.  Videos must be either from YouTube or Vimeo (optional)
     * @param  int $width Overrides native width of the image.  The resulting file will be resized to the given width (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateEmailDynamicContentUsingPOSTRequest($id, $content_id, $type, $value, $alt_text = null, $external_url = null, $height = null, $image = null, $link_url = null, $over_write = null, $style = null, $video_url = null, $width = null)
    {
        // Verify the required parameter 'id' is set.
        if ($id === null || (is_array($id) && empty($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateEmailDynamicContentUsingPOST'
            );
        }
        // Verify the required parameter 'content_id' is set.
        if ($content_id === null || (is_array($content_id) && empty($content_id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_id when calling updateEmailDynamicContentUsingPOST'
            );
        }
        // Verify the required parameter 'type' is set.
        if ($type === null || (is_array($type) && empty($type))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling updateEmailDynamicContentUsingPOST'
            );
        }
        // Verify the required parameter 'value' is set.
        if ($value === null || (is_array($value) && empty($value))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $value when calling updateEmailDynamicContentUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/email/{id}/dynamicContent/{contentId}.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $resourcePath = str_replace(
            '{' . 'contentId' . '}',
            ObjectSerializer::toPathValue($content_id),
            $resourcePath
        );

        // Form parameters.
        /** @var string[][] $formParams */
        $formParams = [];
        $multipart = false;
        $formParams['altText'] = ObjectSerializer::toFormValue($alt_text);
        $formParams['externalUrl'] = ObjectSerializer::toFormValue($external_url);
        $formParams['height'] = ObjectSerializer::toFormValue($height);
        $formParams['image'] = ObjectSerializer::toFormValue($image);
        $formParams['linkUrl'] = ObjectSerializer::toFormValue($link_url);
        $formParams['overWrite'] = ObjectSerializer::toFormValue($over_write);
        $formParams['style'] = ObjectSerializer::toFormValue($style);
        $formParams['type'] = ObjectSerializer::toFormValue($type);
        $formParams['value'] = ObjectSerializer::toFormValue($value);
        $formParams['videoUrl'] = ObjectSerializer::toFormValue($video_url);
        $formParams['width'] = ObjectSerializer::toFormValue($width);
        // Remove any null (optional values).
        $formParams = array_filter($formParams, function($v) { return $v !== null; });
        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }
        if (!empty($formParams)) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    foreach ((array) $formParamValue as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateEmailUsingPOST
     *
     * Update Email Metadata
     *
     * @param  int $id id (required)
     * @param  string $description Description of the asset (optional)
     * @param  string $name Name of the Email (optional)
     * @param  string $pre_header Preheader text for the email (optional)
     * @param  bool $operational Whether the email is operational.  Operational emails bypass unsubscribe status.  Defaults to false (optional)
     * @param  bool $published Whether the email has been published to Sales Insight.  Default false (optional)
     * @param  bool $text_only Setting to include text-only version of email when sent (optional)
     * @param  bool $web_view Whether the email has been enabled to allow the &#39;View as Web Page&#39; when received (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse
     */
    public function updateEmailUsingPOST($id, $description = null, $name = null, $pre_header = null, $operational = null, $published = null, $text_only = null, $web_view = null)
    {
        list($response) = $this->updateEmailUsingPOSTWithHttpInfo($id, $description, $name, $pre_header, $operational, $published, $text_only, $web_view);
        return $response;
    }

    /**
     * Operation updateEmailUsingPOSTWithHttpInfo
     *
     * Update Email Metadata
     *
     * @param  int $id id (required)
     * @param  string $description Description of the asset (optional)
     * @param  string $name Name of the Email (optional)
     * @param  string $pre_header Preheader text for the email (optional)
     * @param  bool $operational Whether the email is operational.  Operational emails bypass unsubscribe status.  Defaults to false (optional)
     * @param  bool $published Whether the email has been published to Sales Insight.  Default false (optional)
     * @param  bool $text_only Setting to include text-only version of email when sent (optional)
     * @param  bool $web_view Whether the email has been enabled to allow the &#39;View as Web Page&#39; when received (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateEmailUsingPOSTWithHttpInfo($id, $description = null, $name = null, $pre_header = null, $operational = null, $published = null, $text_only = null, $web_view = null)
    {
        $request = $this->updateEmailUsingPOSTRequest($id, $description, $name, $pre_header, $operational, $published, $text_only, $web_view);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateEmailUsingPOSTAsync
     *
     * Update Email Metadata
     *
     * @param  int $id id (required)
     * @param  string $description Description of the asset (optional)
     * @param  string $name Name of the Email (optional)
     * @param  string $pre_header Preheader text for the email (optional)
     * @param  bool $operational Whether the email is operational.  Operational emails bypass unsubscribe status.  Defaults to false (optional)
     * @param  bool $published Whether the email has been published to Sales Insight.  Default false (optional)
     * @param  bool $text_only Setting to include text-only version of email when sent (optional)
     * @param  bool $web_view Whether the email has been enabled to allow the &#39;View as Web Page&#39; when received (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEmailUsingPOSTAsync($id, $description = null, $name = null, $pre_header = null, $operational = null, $published = null, $text_only = null, $web_view = null)
    {
        return $this->updateEmailUsingPOSTAsyncWithHttpInfo($id, $description, $name, $pre_header, $operational, $published, $text_only, $web_view)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateEmailUsingPOSTAsyncWithHttpInfo
     *
     * Update Email Metadata
     *
     * @param  int $id id (required)
     * @param  string $description Description of the asset (optional)
     * @param  string $name Name of the Email (optional)
     * @param  string $pre_header Preheader text for the email (optional)
     * @param  bool $operational Whether the email is operational.  Operational emails bypass unsubscribe status.  Defaults to false (optional)
     * @param  bool $published Whether the email has been published to Sales Insight.  Default false (optional)
     * @param  bool $text_only Setting to include text-only version of email when sent (optional)
     * @param  bool $web_view Whether the email has been enabled to allow the &#39;View as Web Page&#39; when received (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEmailUsingPOSTAsyncWithHttpInfo($id, $description = null, $name = null, $pre_header = null, $operational = null, $published = null, $text_only = null, $web_view = null)
    {
        $request = $this->updateEmailUsingPOSTRequest($id, $description, $name, $pre_header, $operational, $published, $text_only, $web_view);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateEmailUsingPOST'
     *
     * @param  int $id id (required)
     * @param  string $description Description of the asset (optional)
     * @param  string $name Name of the Email (optional)
     * @param  string $pre_header Preheader text for the email (optional)
     * @param  bool $operational Whether the email is operational.  Operational emails bypass unsubscribe status.  Defaults to false (optional)
     * @param  bool $published Whether the email has been published to Sales Insight.  Default false (optional)
     * @param  bool $text_only Setting to include text-only version of email when sent (optional)
     * @param  bool $web_view Whether the email has been enabled to allow the &#39;View as Web Page&#39; when received (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateEmailUsingPOSTRequest($id, $description = null, $name = null, $pre_header = null, $operational = null, $published = null, $text_only = null, $web_view = null)
    {
        // Verify the required parameter 'id' is set.
        if ($id === null || (is_array($id) && empty($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateEmailUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/email/{id}.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        // Form parameters.
        /** @var string[][] $formParams */
        $formParams = [];
        $multipart = false;
        $formParams['description'] = ObjectSerializer::toFormValue($description);
        $formParams['name'] = ObjectSerializer::toFormValue($name);
        $formParams['preHeader'] = ObjectSerializer::toFormValue($pre_header);
        $formParams['operational'] = ObjectSerializer::toFormValue($operational);
        $formParams['published'] = ObjectSerializer::toFormValue($published);
        $formParams['textOnly'] = ObjectSerializer::toFormValue($text_only);
        $formParams['webView'] = ObjectSerializer::toFormValue($web_view);
        // Remove any null (optional values).
        $formParams = array_filter($formParams, function($v) { return $v !== null; });
        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }
        if (!empty($formParams)) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    foreach ((array) $formParamValue as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateVariableUsingPOST
     *
     * Update Email Variable
     *
     * @param  int $id id (required)
     * @param  string $name name (required)
     * @param  string $value Value to update variable with (optional)
     * @param  string $module_id Module that variable is associated with. Required for updating module variables. Not needed for global variables. (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function updateVariableUsingPOST($id, $name, $value = null, $module_id = null)
    {
        list($response) = $this->updateVariableUsingPOSTWithHttpInfo($id, $name, $value, $module_id);
        return $response;
    }

    /**
     * Operation updateVariableUsingPOSTWithHttpInfo
     *
     * Update Email Variable
     *
     * @param  int $id id (required)
     * @param  string $name name (required)
     * @param  string $value Value to update variable with (optional)
     * @param  string $module_id Module that variable is associated with. Required for updating module variables. Not needed for global variables. (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateVariableUsingPOSTWithHttpInfo($id, $name, $value = null, $module_id = null)
    {
        $request = $this->updateVariableUsingPOSTRequest($id, $name, $value, $module_id);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, 'object');
            }

            return $this->responseToReturn($response, 'object');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            'object',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateVariableUsingPOSTAsync
     *
     * Update Email Variable
     *
     * @param  int $id id (required)
     * @param  string $name name (required)
     * @param  string $value Value to update variable with (optional)
     * @param  string $module_id Module that variable is associated with. Required for updating module variables. Not needed for global variables. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateVariableUsingPOSTAsync($id, $name, $value = null, $module_id = null)
    {
        return $this->updateVariableUsingPOSTAsyncWithHttpInfo($id, $name, $value, $module_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateVariableUsingPOSTAsyncWithHttpInfo
     *
     * Update Email Variable
     *
     * @param  int $id id (required)
     * @param  string $name name (required)
     * @param  string $value Value to update variable with (optional)
     * @param  string $module_id Module that variable is associated with. Required for updating module variables. Not needed for global variables. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateVariableUsingPOSTAsyncWithHttpInfo($id, $name, $value = null, $module_id = null)
    {
        $request = $this->updateVariableUsingPOSTRequest($id, $name, $value, $module_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, 'object');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateVariableUsingPOST'
     *
     * @param  int $id id (required)
     * @param  string $name name (required)
     * @param  string $value Value to update variable with (optional)
     * @param  string $module_id Module that variable is associated with. Required for updating module variables. Not needed for global variables. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateVariableUsingPOSTRequest($id, $name, $value = null, $module_id = null)
    {
        // Verify the required parameter 'id' is set.
        if ($id === null || (is_array($id) && empty($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateVariableUsingPOST'
            );
        }
        // Verify the required parameter 'name' is set.
        if ($name === null || (is_array($name) && empty($name))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling updateVariableUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/email/{id}/variable/{name}.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $resourcePath = str_replace(
            '{' . 'name' . '}',
            ObjectSerializer::toPathValue($name),
            $resourcePath
        );

        // Form parameters.
        /** @var string[][] $formParams */
        $formParams = [];
        $multipart = false;
        $formParams['value'] = ObjectSerializer::toFormValue($value);
        $formParams['moduleId'] = ObjectSerializer::toFormValue($module_id);
        // Remove any null (optional values).
        $formParams = array_filter($formParams, function($v) { return $v !== null; });
        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }
        if (!empty($formParams)) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    foreach ((array) $formParamValue as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    /**
     * Make a request.
     *
     * @param \GuzzleHttp\Psr7\Request $request
     *   ...
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @return \Psr\Http\Message\ResponseInterface
     */
    private function makeRequest(Request $request) {
        $options = $this->createHttpClientOption();
        try {
           $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            $response = $e->getResponse();
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                (int) $e->getCode(),
                $response ? $response->getHeaders() : null,
                $response ? (string) $response->getBody() : null
            );
        }

        $statusCode = $response->getStatusCode();
        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    (string) $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                (string) $response->getBody()
            );
        }
        return $response;
    }

    /**
     * Convert a response to a return standard return array.
     *
     * @param \Psr\Http\Message\ResponseInterface $response
     *   A response from a request with a serialized body.
     * @param string $returnType
     *   The return type.
     *
     * @return array
     */
    private function responseToReturn(ResponseInterface $response, string $returnType) {
        return [
            $this->deserializeResponseBody($response->getBody(), $returnType),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    /**
     * Deserialize a response body.
     *
     * @param mixed $responseBody
     *   The response body.
     * @param string $returnType
     *   The return type.
     * @param array|null $headers
     *   The a list of headers from the response.
     * @return mixed
     *   Either a string or a stream to be passed to a file object.
     */
    private function deserializeResponseBody($responseBody, $returnType, $headers = [])
    {
        return ObjectSerializer::deserialize(
            $returnType === '\SplFileObject' ? $responseBody : (string) $responseBody,
            $returnType,
            $headers
        );
    }

}
