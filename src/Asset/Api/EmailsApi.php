<?php

/**
 * EmailsApi
 *
 * Marketo Rest API
 *
 * Marketo Rest API
 *
 * OpenAPI spec version: 1.0
 * Contact: developerfeedback@marketo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.26
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Asset
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace NecLimDul\MarketoRest\Asset\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\Promise\PromiseInterface;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\ResponseInterface;
use NecLimDul\MarketoRest\Asset\ApiException;
use NecLimDul\MarketoRest\Asset\Configuration;
use NecLimDul\MarketoRest\Asset\HeaderSelector;
use NecLimDul\MarketoRest\Asset\ObjectSerializer;

/**
 * EmailsApi Class Doc Comment
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Asset
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EmailsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the spec.
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Exception handler for addModuleUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function addModuleUsingPOSTHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailModuleResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Add Email Module
     *
     * @param int $id
     *   id
     * @param string $module_id
     *   moduleId
     * @param string $name
     *   Name of the module
     * @param int $index
     *   Index of the module.  Determines the order of the module in the email.
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailModuleResponse
     */
    public function addModuleUsingPOST(
        int $id,
        string $module_id,
        string $name,
        int $index
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailModuleResponse {
        list($response) = $this->addModuleUsingPOSTWithHttpInfo($id, $module_id, $name, $index);
        return $response;
    }

    /**
     * Add Email Module
     *
     * @param int $id
     *   id
     * @param string $module_id
     *   moduleId
     * @param string $name
     *   Name of the module
     * @param int $index
     *   Index of the module.  Determines the order of the module in the email.
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailModuleResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function addModuleUsingPOSTWithHttpInfo(
        int $id,
        string $module_id,
        string $name,
        int $index
    ): array {
        $request = $this->addModuleUsingPOSTRequest($id, $module_id, $name, $index);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailModuleResponse::class
            );
        } catch (ApiException $e) {
            throw $this->addModuleUsingPOSTHandleException($e);
        }
    }

    /**
     * Add Email Module
     *
     * @param int $id
     *   id
     * @param string $module_id
     *   moduleId
     * @param string $name
     *   Name of the module
     * @param int $index
     *   Index of the module.  Determines the order of the module in the email.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addModuleUsingPOSTAsync(
        int $id,
        string $module_id,
        string $name,
        int $index
    ): PromiseInterface {
        return $this->addModuleUsingPOSTAsyncWithHttpInfo($id, $module_id, $name, $index)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailModuleResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Add Email Module
     *
     * @param int $id
     *   id
     * @param string $module_id
     *   moduleId
     * @param string $name
     *   Name of the module
     * @param int $index
     *   Index of the module.  Determines the order of the module in the email.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addModuleUsingPOSTAsyncWithHttpInfo(
        int $id,
        string $module_id,
        string $name,
        int $index
    ): PromiseInterface {
        $request = $this->addModuleUsingPOSTRequest($id, $module_id, $name, $index);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailModuleResponse::class,
            [$this, 'addModuleUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'addModuleUsingPOST'
     *
     * @param int $id
     *   id
     * @param string $module_id
     *   moduleId
     * @param string $name
     *   Name of the module
     * @param int $index
     *   Index of the module.  Determines the order of the module in the email.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addModuleUsingPOSTRequest(
        int $id,
        string $module_id,
        string $name,
        int $index
    ): Request {

        $resourcePath = '/rest/asset/v1/email/{id}/content/{moduleId}/add.json';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $resourcePath = str_replace(
            '{' . 'moduleId' . '}',
            ObjectSerializer::toPathValue($module_id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
                'name' => ObjectSerializer::toQueryValue($name),
                'index' => ObjectSerializer::toQueryValue($index),
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for approveDraftUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function approveDraftUsingPOSTHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Approve Email Draft
     *
     * @param int $id
     *   id
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse
     */
    public function approveDraftUsingPOST(
        int $id
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse {
        list($response) = $this->approveDraftUsingPOSTWithHttpInfo($id);
        return $response;
    }

    /**
     * Approve Email Draft
     *
     * @param int $id
     *   id
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function approveDraftUsingPOSTWithHttpInfo(
        int $id
    ): array {
        $request = $this->approveDraftUsingPOSTRequest($id);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class
            );
        } catch (ApiException $e) {
            throw $this->approveDraftUsingPOSTHandleException($e);
        }
    }

    /**
     * Approve Email Draft
     *
     * @param int $id
     *   id
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function approveDraftUsingPOSTAsync(
        int $id
    ): PromiseInterface {
        return $this->approveDraftUsingPOSTAsyncWithHttpInfo($id)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Approve Email Draft
     *
     * @param int $id
     *   id
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function approveDraftUsingPOSTAsyncWithHttpInfo(
        int $id
    ): PromiseInterface {
        $request = $this->approveDraftUsingPOSTRequest($id);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class,
            [$this, 'approveDraftUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'approveDraftUsingPOST'
     *
     * @param int $id
     *   id
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function approveDraftUsingPOSTRequest(
        int $id
    ): Request {

        $resourcePath = '/rest/asset/v1/email/{id}/approveDraft.json';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for cloneEmailUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function cloneEmailUsingPOSTHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Clone Email
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\CloneEmailRequest $clone_email_request
     *   cloneEmailRequest
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse
     */
    public function cloneEmailUsingPOST(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\CloneEmailRequest $clone_email_request
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse {
        list($response) = $this->cloneEmailUsingPOSTWithHttpInfo($id, $clone_email_request);
        return $response;
    }

    /**
     * Clone Email
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\CloneEmailRequest $clone_email_request
     *   cloneEmailRequest
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function cloneEmailUsingPOSTWithHttpInfo(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\CloneEmailRequest $clone_email_request
    ): array {
        $request = $this->cloneEmailUsingPOSTRequest($id, $clone_email_request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse::class
            );
        } catch (ApiException $e) {
            throw $this->cloneEmailUsingPOSTHandleException($e);
        }
    }

    /**
     * Clone Email
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\CloneEmailRequest $clone_email_request
     *   cloneEmailRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cloneEmailUsingPOSTAsync(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\CloneEmailRequest $clone_email_request
    ): PromiseInterface {
        return $this->cloneEmailUsingPOSTAsyncWithHttpInfo($id, $clone_email_request)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Clone Email
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\CloneEmailRequest $clone_email_request
     *   cloneEmailRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cloneEmailUsingPOSTAsyncWithHttpInfo(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\CloneEmailRequest $clone_email_request
    ): PromiseInterface {
        $request = $this->cloneEmailUsingPOSTRequest($id, $clone_email_request);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse::class,
            [$this, 'cloneEmailUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'cloneEmailUsingPOST'
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\CloneEmailRequest $clone_email_request
     *   cloneEmailRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function cloneEmailUsingPOSTRequest(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\CloneEmailRequest $clone_email_request
    ): Request {

        $resourcePath = '/rest/asset/v1/email/{id}/clone.json';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            $clone_email_request
        );
    }

    /**
     * Exception handler for createEmailFullContentUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function createEmailFullContentUsingPOSTHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfUpdateEmailFullContentResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Update Email Full Content
     *
     * @param int $id
     *   Id of the email
     * @param \NecLimDul\MarketoRest\Asset\Model\UpdateEmailFullContentRequest $update_email_full_content_request
     *   Content is multipart file parameter
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfUpdateEmailFullContentResponse
     */
    public function createEmailFullContentUsingPOST(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\UpdateEmailFullContentRequest $update_email_full_content_request
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfUpdateEmailFullContentResponse {
        list($response) = $this->createEmailFullContentUsingPOSTWithHttpInfo($id, $update_email_full_content_request);
        return $response;
    }

    /**
     * Update Email Full Content
     *
     * @param int $id
     *   Id of the email
     * @param \NecLimDul\MarketoRest\Asset\Model\UpdateEmailFullContentRequest $update_email_full_content_request
     *   Content is multipart file parameter
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfUpdateEmailFullContentResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function createEmailFullContentUsingPOSTWithHttpInfo(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\UpdateEmailFullContentRequest $update_email_full_content_request
    ): array {
        $request = $this->createEmailFullContentUsingPOSTRequest($id, $update_email_full_content_request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfUpdateEmailFullContentResponse::class
            );
        } catch (ApiException $e) {
            throw $this->createEmailFullContentUsingPOSTHandleException($e);
        }
    }

    /**
     * Update Email Full Content
     *
     * @param int $id
     *   Id of the email
     * @param \NecLimDul\MarketoRest\Asset\Model\UpdateEmailFullContentRequest $update_email_full_content_request
     *   Content is multipart file parameter
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createEmailFullContentUsingPOSTAsync(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\UpdateEmailFullContentRequest $update_email_full_content_request
    ): PromiseInterface {
        return $this->createEmailFullContentUsingPOSTAsyncWithHttpInfo($id, $update_email_full_content_request)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfUpdateEmailFullContentResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Update Email Full Content
     *
     * @param int $id
     *   Id of the email
     * @param \NecLimDul\MarketoRest\Asset\Model\UpdateEmailFullContentRequest $update_email_full_content_request
     *   Content is multipart file parameter
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createEmailFullContentUsingPOSTAsyncWithHttpInfo(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\UpdateEmailFullContentRequest $update_email_full_content_request
    ): PromiseInterface {
        $request = $this->createEmailFullContentUsingPOSTRequest($id, $update_email_full_content_request);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfUpdateEmailFullContentResponse::class,
            [$this, 'createEmailFullContentUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'createEmailFullContentUsingPOST'
     *
     * @param int $id
     *   Id of the email
     * @param \NecLimDul\MarketoRest\Asset\Model\UpdateEmailFullContentRequest $update_email_full_content_request
     *   Content is multipart file parameter
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createEmailFullContentUsingPOSTRequest(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\UpdateEmailFullContentRequest $update_email_full_content_request
    ): Request {

        $resourcePath = '/rest/asset/v1/email/{id}/fullContent.json';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['multipart/form-data']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            $update_email_full_content_request
        );
    }

    /**
     * Exception handler for createEmailUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function createEmailUsingPOSTHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Create Email
     *
     * @param \NecLimDul\MarketoRest\Asset\Model\CreateEmailRequest $create_email_request
     *   createEmailRequest
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse
     */
    public function createEmailUsingPOST(
        \NecLimDul\MarketoRest\Asset\Model\CreateEmailRequest $create_email_request
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse {
        list($response) = $this->createEmailUsingPOSTWithHttpInfo($create_email_request);
        return $response;
    }

    /**
     * Create Email
     *
     * @param \NecLimDul\MarketoRest\Asset\Model\CreateEmailRequest $create_email_request
     *   createEmailRequest
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function createEmailUsingPOSTWithHttpInfo(
        \NecLimDul\MarketoRest\Asset\Model\CreateEmailRequest $create_email_request
    ): array {
        $request = $this->createEmailUsingPOSTRequest($create_email_request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse::class
            );
        } catch (ApiException $e) {
            throw $this->createEmailUsingPOSTHandleException($e);
        }
    }

    /**
     * Create Email
     *
     * @param \NecLimDul\MarketoRest\Asset\Model\CreateEmailRequest $create_email_request
     *   createEmailRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createEmailUsingPOSTAsync(
        \NecLimDul\MarketoRest\Asset\Model\CreateEmailRequest $create_email_request
    ): PromiseInterface {
        return $this->createEmailUsingPOSTAsyncWithHttpInfo($create_email_request)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Create Email
     *
     * @param \NecLimDul\MarketoRest\Asset\Model\CreateEmailRequest $create_email_request
     *   createEmailRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createEmailUsingPOSTAsyncWithHttpInfo(
        \NecLimDul\MarketoRest\Asset\Model\CreateEmailRequest $create_email_request
    ): PromiseInterface {
        $request = $this->createEmailUsingPOSTRequest($create_email_request);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse::class,
            [$this, 'createEmailUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'createEmailUsingPOST'
     *
     * @param \NecLimDul\MarketoRest\Asset\Model\CreateEmailRequest $create_email_request
     *   createEmailRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createEmailUsingPOSTRequest(
        \NecLimDul\MarketoRest\Asset\Model\CreateEmailRequest $create_email_request
    ): Request {

        $resourcePath = '/rest/asset/v1/emails.json';

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            $create_email_request
        );
    }

    /**
     * Exception handler for deleteEmailUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function deleteEmailUsingPOSTHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Delete Email
     *
     * @param int $id
     *   id
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse
     */
    public function deleteEmailUsingPOST(
        int $id
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse {
        list($response) = $this->deleteEmailUsingPOSTWithHttpInfo($id);
        return $response;
    }

    /**
     * Delete Email
     *
     * @param int $id
     *   id
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function deleteEmailUsingPOSTWithHttpInfo(
        int $id
    ): array {
        $request = $this->deleteEmailUsingPOSTRequest($id);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class
            );
        } catch (ApiException $e) {
            throw $this->deleteEmailUsingPOSTHandleException($e);
        }
    }

    /**
     * Delete Email
     *
     * @param int $id
     *   id
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEmailUsingPOSTAsync(
        int $id
    ): PromiseInterface {
        return $this->deleteEmailUsingPOSTAsyncWithHttpInfo($id)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Delete Email
     *
     * @param int $id
     *   id
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEmailUsingPOSTAsyncWithHttpInfo(
        int $id
    ): PromiseInterface {
        $request = $this->deleteEmailUsingPOSTRequest($id);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class,
            [$this, 'deleteEmailUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'deleteEmailUsingPOST'
     *
     * @param int $id
     *   id
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteEmailUsingPOSTRequest(
        int $id
    ): Request {

        $resourcePath = '/rest/asset/v1/email/{id}/delete.json';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for deleteModuleUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function deleteModuleUsingPOSTHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailModuleResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Delete Module
     *
     * @param int $id
     *   id
     * @param string $module_id
     *   moduleId
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailModuleResponse
     */
    public function deleteModuleUsingPOST(
        int $id,
        string $module_id
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailModuleResponse {
        list($response) = $this->deleteModuleUsingPOSTWithHttpInfo($id, $module_id);
        return $response;
    }

    /**
     * Delete Module
     *
     * @param int $id
     *   id
     * @param string $module_id
     *   moduleId
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailModuleResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function deleteModuleUsingPOSTWithHttpInfo(
        int $id,
        string $module_id
    ): array {
        $request = $this->deleteModuleUsingPOSTRequest($id, $module_id);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailModuleResponse::class
            );
        } catch (ApiException $e) {
            throw $this->deleteModuleUsingPOSTHandleException($e);
        }
    }

    /**
     * Delete Module
     *
     * @param int $id
     *   id
     * @param string $module_id
     *   moduleId
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteModuleUsingPOSTAsync(
        int $id,
        string $module_id
    ): PromiseInterface {
        return $this->deleteModuleUsingPOSTAsyncWithHttpInfo($id, $module_id)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailModuleResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Delete Module
     *
     * @param int $id
     *   id
     * @param string $module_id
     *   moduleId
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteModuleUsingPOSTAsyncWithHttpInfo(
        int $id,
        string $module_id
    ): PromiseInterface {
        $request = $this->deleteModuleUsingPOSTRequest($id, $module_id);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailModuleResponse::class,
            [$this, 'deleteModuleUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'deleteModuleUsingPOST'
     *
     * @param int $id
     *   id
     * @param string $module_id
     *   moduleId
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteModuleUsingPOSTRequest(
        int $id,
        string $module_id
    ): Request {

        $resourcePath = '/rest/asset/v1/email/{id}/content/{moduleId}/delete.json';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $resourcePath = str_replace(
            '{' . 'moduleId' . '}',
            ObjectSerializer::toPathValue($module_id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for discardDraftUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function discardDraftUsingPOSTHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Discard Email Draft
     *
     * @param int $id
     *   id
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse
     */
    public function discardDraftUsingPOST(
        int $id
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse {
        list($response) = $this->discardDraftUsingPOSTWithHttpInfo($id);
        return $response;
    }

    /**
     * Discard Email Draft
     *
     * @param int $id
     *   id
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function discardDraftUsingPOSTWithHttpInfo(
        int $id
    ): array {
        $request = $this->discardDraftUsingPOSTRequest($id);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class
            );
        } catch (ApiException $e) {
            throw $this->discardDraftUsingPOSTHandleException($e);
        }
    }

    /**
     * Discard Email Draft
     *
     * @param int $id
     *   id
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function discardDraftUsingPOSTAsync(
        int $id
    ): PromiseInterface {
        return $this->discardDraftUsingPOSTAsyncWithHttpInfo($id)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Discard Email Draft
     *
     * @param int $id
     *   id
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function discardDraftUsingPOSTAsyncWithHttpInfo(
        int $id
    ): PromiseInterface {
        $request = $this->discardDraftUsingPOSTRequest($id);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class,
            [$this, 'discardDraftUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'discardDraftUsingPOST'
     *
     * @param int $id
     *   id
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function discardDraftUsingPOSTRequest(
        int $id
    ): Request {

        $resourcePath = '/rest/asset/v1/email/{id}/discardDraft.json';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for duplicateModuleUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function duplicateModuleUsingPOSTHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailModuleResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Duplicate Email Module
     *
     * @param int $id
     *   id
     * @param string $module_id
     *   moduleId
     * @param string $name
     *   Name of the new module
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailModuleResponse
     */
    public function duplicateModuleUsingPOST(
        int $id,
        string $module_id,
        string $name
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailModuleResponse {
        list($response) = $this->duplicateModuleUsingPOSTWithHttpInfo($id, $module_id, $name);
        return $response;
    }

    /**
     * Duplicate Email Module
     *
     * @param int $id
     *   id
     * @param string $module_id
     *   moduleId
     * @param string $name
     *   Name of the new module
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailModuleResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function duplicateModuleUsingPOSTWithHttpInfo(
        int $id,
        string $module_id,
        string $name
    ): array {
        $request = $this->duplicateModuleUsingPOSTRequest($id, $module_id, $name);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailModuleResponse::class
            );
        } catch (ApiException $e) {
            throw $this->duplicateModuleUsingPOSTHandleException($e);
        }
    }

    /**
     * Duplicate Email Module
     *
     * @param int $id
     *   id
     * @param string $module_id
     *   moduleId
     * @param string $name
     *   Name of the new module
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function duplicateModuleUsingPOSTAsync(
        int $id,
        string $module_id,
        string $name
    ): PromiseInterface {
        return $this->duplicateModuleUsingPOSTAsyncWithHttpInfo($id, $module_id, $name)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailModuleResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Duplicate Email Module
     *
     * @param int $id
     *   id
     * @param string $module_id
     *   moduleId
     * @param string $name
     *   Name of the new module
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function duplicateModuleUsingPOSTAsyncWithHttpInfo(
        int $id,
        string $module_id,
        string $name
    ): PromiseInterface {
        $request = $this->duplicateModuleUsingPOSTRequest($id, $module_id, $name);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailModuleResponse::class,
            [$this, 'duplicateModuleUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'duplicateModuleUsingPOST'
     *
     * @param int $id
     *   id
     * @param string $module_id
     *   moduleId
     * @param string $name
     *   Name of the new module
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function duplicateModuleUsingPOSTRequest(
        int $id,
        string $module_id,
        string $name
    ): Request {

        $resourcePath = '/rest/asset/v1/email/{id}/content/{moduleId}/duplicate.json';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $resourcePath = str_replace(
            '{' . 'moduleId' . '}',
            ObjectSerializer::toPathValue($module_id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
                'name' => ObjectSerializer::toQueryValue($name),
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for getEmailByIdUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function getEmailByIdUsingGETHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Email By Id
     *
     * @param int $id
     *   id
     * @param string|null $status
     *   Status filter for draft or approved versions
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse
     */
    public function getEmailByIdUsingGET(
        int $id,
        string $status = null
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse {
        list($response) = $this->getEmailByIdUsingGETWithHttpInfo($id, $status);
        return $response;
    }

    /**
     * Get Email By Id
     *
     * @param int $id
     *   id
     * @param string|null $status
     *   Status filter for draft or approved versions
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function getEmailByIdUsingGETWithHttpInfo(
        int $id,
        string $status = null
    ): array {
        $request = $this->getEmailByIdUsingGETRequest($id, $status);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse::class
            );
        } catch (ApiException $e) {
            throw $this->getEmailByIdUsingGETHandleException($e);
        }
    }

    /**
     * Get Email By Id
     *
     * @param int $id
     *   id
     * @param string|null $status
     *   Status filter for draft or approved versions
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailByIdUsingGETAsync(
        int $id,
        string $status = null
    ): PromiseInterface {
        return $this->getEmailByIdUsingGETAsyncWithHttpInfo($id, $status)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Get Email By Id
     *
     * @param int $id
     *   id
     * @param string|null $status
     *   Status filter for draft or approved versions
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailByIdUsingGETAsyncWithHttpInfo(
        int $id,
        string $status = null
    ): PromiseInterface {
        $request = $this->getEmailByIdUsingGETRequest($id, $status);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse::class,
            [$this, 'getEmailByIdUsingGETHandleException']
        );
    }

    /**
     * Create request for operation 'getEmailByIdUsingGET'
     *
     * @param int $id
     *   id
     * @param string|null $status
     *   Status filter for draft or approved versions
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEmailByIdUsingGETRequest(
        int $id,
        string $status = null
    ): Request {

        $resourcePath = '/rest/asset/v1/email/{id}.json';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'GET',
            $operationHost . $resourcePath,
            // Query.
            [
                'status' => ObjectSerializer::toQueryValue($status),
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for getEmailByNameUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function getEmailByNameUsingGETHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Email by Name
     *
     * @param string $name
     *   Name of the email
     * @param string|null $status
     *   Status filter for draft or approved versions
     * @param string|null $folder
     *   JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39;
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse
     */
    public function getEmailByNameUsingGET(
        string $name,
        string $status = null,
        string $folder = null
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse {
        list($response) = $this->getEmailByNameUsingGETWithHttpInfo($name, $status, $folder);
        return $response;
    }

    /**
     * Get Email by Name
     *
     * @param string $name
     *   Name of the email
     * @param string|null $status
     *   Status filter for draft or approved versions
     * @param string|null $folder
     *   JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39;
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function getEmailByNameUsingGETWithHttpInfo(
        string $name,
        string $status = null,
        string $folder = null
    ): array {
        $request = $this->getEmailByNameUsingGETRequest($name, $status, $folder);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse::class
            );
        } catch (ApiException $e) {
            throw $this->getEmailByNameUsingGETHandleException($e);
        }
    }

    /**
     * Get Email by Name
     *
     * @param string $name
     *   Name of the email
     * @param string|null $status
     *   Status filter for draft or approved versions
     * @param string|null $folder
     *   JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39;
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailByNameUsingGETAsync(
        string $name,
        string $status = null,
        string $folder = null
    ): PromiseInterface {
        return $this->getEmailByNameUsingGETAsyncWithHttpInfo($name, $status, $folder)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Get Email by Name
     *
     * @param string $name
     *   Name of the email
     * @param string|null $status
     *   Status filter for draft or approved versions
     * @param string|null $folder
     *   JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39;
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailByNameUsingGETAsyncWithHttpInfo(
        string $name,
        string $status = null,
        string $folder = null
    ): PromiseInterface {
        $request = $this->getEmailByNameUsingGETRequest($name, $status, $folder);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse::class,
            [$this, 'getEmailByNameUsingGETHandleException']
        );
    }

    /**
     * Create request for operation 'getEmailByNameUsingGET'
     *
     * @param string $name
     *   Name of the email
     * @param string|null $status
     *   Status filter for draft or approved versions
     * @param string|null $folder
     *   JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39;
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEmailByNameUsingGETRequest(
        string $name,
        string $status = null,
        string $folder = null
    ): Request {

        $resourcePath = '/rest/asset/v1/email/byName.json';

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'GET',
            $operationHost . $resourcePath,
            // Query.
            [
                'name' => ObjectSerializer::toQueryValue($name),
                'status' => ObjectSerializer::toQueryValue($status),
                'folder' => ObjectSerializer::toQueryValue($folder),
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for getEmailCCFieldsUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function getEmailCCFieldsUsingGETHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailCCFieldsResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Email CC Fields
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailCCFieldsResponse
     */
    public function getEmailCCFieldsUsingGET(): \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailCCFieldsResponse
    {
        list($response) = $this->getEmailCCFieldsUsingGETWithHttpInfo();
        return $response;
    }

    /**
     * Get Email CC Fields
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailCCFieldsResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function getEmailCCFieldsUsingGETWithHttpInfo(): array
    {
        $request = $this->getEmailCCFieldsUsingGETRequest();
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailCCFieldsResponse::class
            );
        } catch (ApiException $e) {
            throw $this->getEmailCCFieldsUsingGETHandleException($e);
        }
    }

    /**
     * Get Email CC Fields
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailCCFieldsUsingGETAsync(): PromiseInterface
    {
        return $this->getEmailCCFieldsUsingGETAsyncWithHttpInfo()
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailCCFieldsResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Get Email CC Fields
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailCCFieldsUsingGETAsyncWithHttpInfo(): PromiseInterface
    {
        $request = $this->getEmailCCFieldsUsingGETRequest();
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailCCFieldsResponse::class,
            [$this, 'getEmailCCFieldsUsingGETHandleException']
        );
    }

    /**
     * Create request for operation 'getEmailCCFieldsUsingGET'
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEmailCCFieldsUsingGETRequest(): Request
    {

        $resourcePath = '/rest/asset/v1/email/ccFields.json';

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'GET',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for getEmailContentByIdUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function getEmailContentByIdUsingGETHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailContentResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Email Content
     *
     * @param int $id
     *   id
     * @param string|null $status
     *   Status filter for draft or approved versions
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailContentResponse
     */
    public function getEmailContentByIdUsingGET(
        int $id,
        string $status = null
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailContentResponse {
        list($response) = $this->getEmailContentByIdUsingGETWithHttpInfo($id, $status);
        return $response;
    }

    /**
     * Get Email Content
     *
     * @param int $id
     *   id
     * @param string|null $status
     *   Status filter for draft or approved versions
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailContentResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function getEmailContentByIdUsingGETWithHttpInfo(
        int $id,
        string $status = null
    ): array {
        $request = $this->getEmailContentByIdUsingGETRequest($id, $status);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailContentResponse::class
            );
        } catch (ApiException $e) {
            throw $this->getEmailContentByIdUsingGETHandleException($e);
        }
    }

    /**
     * Get Email Content
     *
     * @param int $id
     *   id
     * @param string|null $status
     *   Status filter for draft or approved versions
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailContentByIdUsingGETAsync(
        int $id,
        string $status = null
    ): PromiseInterface {
        return $this->getEmailContentByIdUsingGETAsyncWithHttpInfo($id, $status)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailContentResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Get Email Content
     *
     * @param int $id
     *   id
     * @param string|null $status
     *   Status filter for draft or approved versions
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailContentByIdUsingGETAsyncWithHttpInfo(
        int $id,
        string $status = null
    ): PromiseInterface {
        $request = $this->getEmailContentByIdUsingGETRequest($id, $status);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailContentResponse::class,
            [$this, 'getEmailContentByIdUsingGETHandleException']
        );
    }

    /**
     * Create request for operation 'getEmailContentByIdUsingGET'
     *
     * @param int $id
     *   id
     * @param string|null $status
     *   Status filter for draft or approved versions
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEmailContentByIdUsingGETRequest(
        int $id,
        string $status = null
    ): Request {

        $resourcePath = '/rest/asset/v1/email/{id}/content.json';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'GET',
            $operationHost . $resourcePath,
            // Query.
            [
                'status' => ObjectSerializer::toQueryValue($status),
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for getEmailDynamicContentUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function getEmailDynamicContentUsingGETHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailDynamicContentResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Email Dynamic Content
     *
     * @param int $id
     *   Id of email
     * @param string $content_id
     *   Id of email dynamic content section
     * @param string|null $status
     *   Status filter for draft or approved versions
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailDynamicContentResponse
     */
    public function getEmailDynamicContentUsingGET(
        int $id,
        string $content_id,
        string $status = null
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailDynamicContentResponse {
        list($response) = $this->getEmailDynamicContentUsingGETWithHttpInfo($id, $content_id, $status);
        return $response;
    }

    /**
     * Get Email Dynamic Content
     *
     * @param int $id
     *   Id of email
     * @param string $content_id
     *   Id of email dynamic content section
     * @param string|null $status
     *   Status filter for draft or approved versions
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailDynamicContentResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function getEmailDynamicContentUsingGETWithHttpInfo(
        int $id,
        string $content_id,
        string $status = null
    ): array {
        $request = $this->getEmailDynamicContentUsingGETRequest($id, $content_id, $status);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailDynamicContentResponse::class
            );
        } catch (ApiException $e) {
            throw $this->getEmailDynamicContentUsingGETHandleException($e);
        }
    }

    /**
     * Get Email Dynamic Content
     *
     * @param int $id
     *   Id of email
     * @param string $content_id
     *   Id of email dynamic content section
     * @param string|null $status
     *   Status filter for draft or approved versions
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailDynamicContentUsingGETAsync(
        int $id,
        string $content_id,
        string $status = null
    ): PromiseInterface {
        return $this->getEmailDynamicContentUsingGETAsyncWithHttpInfo($id, $content_id, $status)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailDynamicContentResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Get Email Dynamic Content
     *
     * @param int $id
     *   Id of email
     * @param string $content_id
     *   Id of email dynamic content section
     * @param string|null $status
     *   Status filter for draft or approved versions
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailDynamicContentUsingGETAsyncWithHttpInfo(
        int $id,
        string $content_id,
        string $status = null
    ): PromiseInterface {
        $request = $this->getEmailDynamicContentUsingGETRequest($id, $content_id, $status);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailDynamicContentResponse::class,
            [$this, 'getEmailDynamicContentUsingGETHandleException']
        );
    }

    /**
     * Create request for operation 'getEmailDynamicContentUsingGET'
     *
     * @param int $id
     *   Id of email
     * @param string $content_id
     *   Id of email dynamic content section
     * @param string|null $status
     *   Status filter for draft or approved versions
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEmailDynamicContentUsingGETRequest(
        int $id,
        string $content_id,
        string $status = null
    ): Request {

        $resourcePath = '/rest/asset/v1/email/{id}/dynamicContent/{contentId}.json';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $resourcePath = str_replace(
            '{' . 'contentId' . '}',
            ObjectSerializer::toPathValue($content_id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'GET',
            $operationHost . $resourcePath,
            // Query.
            [
                'status' => ObjectSerializer::toQueryValue($status),
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for getEmailFullContentUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function getEmailFullContentUsingGETHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfGetEmailFullContentResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Email Full Content
     *
     * @param int $id
     *   Id of the email
     * @param string|null $status
     *   Status filter for draft or approved versions.  Defaults to approved if asset is approved, draft if not.
     * @param int|null $lead_id
     *   The lead id to impersonate.  Email is rendered as though it was received by this lead.
     * @param string|null $type
     *   Email content type to return.  Default is HTML.
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfGetEmailFullContentResponse
     */
    public function getEmailFullContentUsingGET(
        int $id,
        string $status = null,
        int $lead_id = null,
        string $type = null
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfGetEmailFullContentResponse {
        list($response) = $this->getEmailFullContentUsingGETWithHttpInfo($id, $status, $lead_id, $type);
        return $response;
    }

    /**
     * Get Email Full Content
     *
     * @param int $id
     *   Id of the email
     * @param string|null $status
     *   Status filter for draft or approved versions.  Defaults to approved if asset is approved, draft if not.
     * @param int|null $lead_id
     *   The lead id to impersonate.  Email is rendered as though it was received by this lead.
     * @param string|null $type
     *   Email content type to return.  Default is HTML.
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfGetEmailFullContentResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function getEmailFullContentUsingGETWithHttpInfo(
        int $id,
        string $status = null,
        int $lead_id = null,
        string $type = null
    ): array {
        $request = $this->getEmailFullContentUsingGETRequest($id, $status, $lead_id, $type);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfGetEmailFullContentResponse::class
            );
        } catch (ApiException $e) {
            throw $this->getEmailFullContentUsingGETHandleException($e);
        }
    }

    /**
     * Get Email Full Content
     *
     * @param int $id
     *   Id of the email
     * @param string|null $status
     *   Status filter for draft or approved versions.  Defaults to approved if asset is approved, draft if not.
     * @param int|null $lead_id
     *   The lead id to impersonate.  Email is rendered as though it was received by this lead.
     * @param string|null $type
     *   Email content type to return.  Default is HTML.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailFullContentUsingGETAsync(
        int $id,
        string $status = null,
        int $lead_id = null,
        string $type = null
    ): PromiseInterface {
        return $this->getEmailFullContentUsingGETAsyncWithHttpInfo($id, $status, $lead_id, $type)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfGetEmailFullContentResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Get Email Full Content
     *
     * @param int $id
     *   Id of the email
     * @param string|null $status
     *   Status filter for draft or approved versions.  Defaults to approved if asset is approved, draft if not.
     * @param int|null $lead_id
     *   The lead id to impersonate.  Email is rendered as though it was received by this lead.
     * @param string|null $type
     *   Email content type to return.  Default is HTML.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailFullContentUsingGETAsyncWithHttpInfo(
        int $id,
        string $status = null,
        int $lead_id = null,
        string $type = null
    ): PromiseInterface {
        $request = $this->getEmailFullContentUsingGETRequest($id, $status, $lead_id, $type);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfGetEmailFullContentResponse::class,
            [$this, 'getEmailFullContentUsingGETHandleException']
        );
    }

    /**
     * Create request for operation 'getEmailFullContentUsingGET'
     *
     * @param int $id
     *   Id of the email
     * @param string|null $status
     *   Status filter for draft or approved versions.  Defaults to approved if asset is approved, draft if not.
     * @param int|null $lead_id
     *   The lead id to impersonate.  Email is rendered as though it was received by this lead.
     * @param string|null $type
     *   Email content type to return.  Default is HTML.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEmailFullContentUsingGETRequest(
        int $id,
        string $status = null,
        int $lead_id = null,
        string $type = null
    ): Request {

        $resourcePath = '/rest/asset/v1/email/{id}/fullContent.json';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'GET',
            $operationHost . $resourcePath,
            // Query.
            [
                'status' => ObjectSerializer::toQueryValue($status),
                'leadId' => ObjectSerializer::toQueryValue($lead_id),
                'type' => ObjectSerializer::toQueryValue($type),
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for getEmailUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function getEmailUsingGETHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Emails
     *
     * @param string|null $status
     *   Status filter for draft or approved versions
     * @param string|null $folder
     *   JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39;
     * @param int|null $offset
     *   Integer offset for paging
     * @param int|null $max_return
     *   Maximum number of emails to return.  Max 200, default 20
     * @param string|null $earliest_updated_at
     *   Exclude emails prior to this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description.
     * @param string|null $latest_updated_at
     *   Exclude emails after this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description.
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse
     */
    public function getEmailUsingGET(
        string $status = null,
        string $folder = null,
        int $offset = null,
        int $max_return = null,
        string $earliest_updated_at = null,
        string $latest_updated_at = null
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse {
        list($response) = $this->getEmailUsingGETWithHttpInfo($status, $folder, $offset, $max_return, $earliest_updated_at, $latest_updated_at);
        return $response;
    }

    /**
     * Get Emails
     *
     * @param string|null $status
     *   Status filter for draft or approved versions
     * @param string|null $folder
     *   JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39;
     * @param int|null $offset
     *   Integer offset for paging
     * @param int|null $max_return
     *   Maximum number of emails to return.  Max 200, default 20
     * @param string|null $earliest_updated_at
     *   Exclude emails prior to this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description.
     * @param string|null $latest_updated_at
     *   Exclude emails after this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description.
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function getEmailUsingGETWithHttpInfo(
        string $status = null,
        string $folder = null,
        int $offset = null,
        int $max_return = null,
        string $earliest_updated_at = null,
        string $latest_updated_at = null
    ): array {
        $request = $this->getEmailUsingGETRequest($status, $folder, $offset, $max_return, $earliest_updated_at, $latest_updated_at);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse::class
            );
        } catch (ApiException $e) {
            throw $this->getEmailUsingGETHandleException($e);
        }
    }

    /**
     * Get Emails
     *
     * @param string|null $status
     *   Status filter for draft or approved versions
     * @param string|null $folder
     *   JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39;
     * @param int|null $offset
     *   Integer offset for paging
     * @param int|null $max_return
     *   Maximum number of emails to return.  Max 200, default 20
     * @param string|null $earliest_updated_at
     *   Exclude emails prior to this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description.
     * @param string|null $latest_updated_at
     *   Exclude emails after this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailUsingGETAsync(
        string $status = null,
        string $folder = null,
        int $offset = null,
        int $max_return = null,
        string $earliest_updated_at = null,
        string $latest_updated_at = null
    ): PromiseInterface {
        return $this->getEmailUsingGETAsyncWithHttpInfo($status, $folder, $offset, $max_return, $earliest_updated_at, $latest_updated_at)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Get Emails
     *
     * @param string|null $status
     *   Status filter for draft or approved versions
     * @param string|null $folder
     *   JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39;
     * @param int|null $offset
     *   Integer offset for paging
     * @param int|null $max_return
     *   Maximum number of emails to return.  Max 200, default 20
     * @param string|null $earliest_updated_at
     *   Exclude emails prior to this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description.
     * @param string|null $latest_updated_at
     *   Exclude emails after this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailUsingGETAsyncWithHttpInfo(
        string $status = null,
        string $folder = null,
        int $offset = null,
        int $max_return = null,
        string $earliest_updated_at = null,
        string $latest_updated_at = null
    ): PromiseInterface {
        $request = $this->getEmailUsingGETRequest($status, $folder, $offset, $max_return, $earliest_updated_at, $latest_updated_at);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse::class,
            [$this, 'getEmailUsingGETHandleException']
        );
    }

    /**
     * Create request for operation 'getEmailUsingGET'
     *
     * @param string|null $status
     *   Status filter for draft or approved versions
     * @param string|null $folder
     *   JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39;
     * @param int|null $offset
     *   Integer offset for paging
     * @param int|null $max_return
     *   Maximum number of emails to return.  Max 200, default 20
     * @param string|null $earliest_updated_at
     *   Exclude emails prior to this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description.
     * @param string|null $latest_updated_at
     *   Exclude emails after this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEmailUsingGETRequest(
        string $status = null,
        string $folder = null,
        int $offset = null,
        int $max_return = null,
        string $earliest_updated_at = null,
        string $latest_updated_at = null
    ): Request {

        $resourcePath = '/rest/asset/v1/emails.json';

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'GET',
            $operationHost . $resourcePath,
            // Query.
            [
                'status' => ObjectSerializer::toQueryValue($status),
                'folder' => ObjectSerializer::toQueryValue($folder),
                'offset' => ObjectSerializer::toQueryValue($offset),
                'maxReturn' => ObjectSerializer::toQueryValue($max_return),
                'earliestUpdatedAt' => ObjectSerializer::toQueryValue($earliest_updated_at),
                'latestUpdatedAt' => ObjectSerializer::toQueryValue($latest_updated_at),
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for getEmailVariablesUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function getEmailVariablesUsingGETHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailVariableResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Email Variables
     *
     * @param int $id
     *   id
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailVariableResponse
     */
    public function getEmailVariablesUsingGET(
        int $id
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailVariableResponse {
        list($response) = $this->getEmailVariablesUsingGETWithHttpInfo($id);
        return $response;
    }

    /**
     * Get Email Variables
     *
     * @param int $id
     *   id
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailVariableResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function getEmailVariablesUsingGETWithHttpInfo(
        int $id
    ): array {
        $request = $this->getEmailVariablesUsingGETRequest($id);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailVariableResponse::class
            );
        } catch (ApiException $e) {
            throw $this->getEmailVariablesUsingGETHandleException($e);
        }
    }

    /**
     * Get Email Variables
     *
     * @param int $id
     *   id
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailVariablesUsingGETAsync(
        int $id
    ): PromiseInterface {
        return $this->getEmailVariablesUsingGETAsyncWithHttpInfo($id)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailVariableResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Get Email Variables
     *
     * @param int $id
     *   id
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailVariablesUsingGETAsyncWithHttpInfo(
        int $id
    ): PromiseInterface {
        $request = $this->getEmailVariablesUsingGETRequest($id);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailVariableResponse::class,
            [$this, 'getEmailVariablesUsingGETHandleException']
        );
    }

    /**
     * Create request for operation 'getEmailVariablesUsingGET'
     *
     * @param int $id
     *   id
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEmailVariablesUsingGETRequest(
        int $id
    ): Request {

        $resourcePath = '/rest/asset/v1/email/{id}/variables.json';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'GET',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for rearrangeModulesUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function rearrangeModulesUsingPOSTHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailModuleResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Rearrange Email Modules
     *
     * @param int $id
     *   id
     * @param string|null $positions
     *   JSON array of module positions.  Each position must be a JSON object with members &#39;index&#39; and a &#39;moduleId&#39;
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailModuleResponse
     */
    public function rearrangeModulesUsingPOST(
        int $id,
        string $positions = null
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailModuleResponse {
        list($response) = $this->rearrangeModulesUsingPOSTWithHttpInfo($id, $positions);
        return $response;
    }

    /**
     * Rearrange Email Modules
     *
     * @param int $id
     *   id
     * @param string|null $positions
     *   JSON array of module positions.  Each position must be a JSON object with members &#39;index&#39; and a &#39;moduleId&#39;
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailModuleResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function rearrangeModulesUsingPOSTWithHttpInfo(
        int $id,
        string $positions = null
    ): array {
        $request = $this->rearrangeModulesUsingPOSTRequest($id, $positions);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailModuleResponse::class
            );
        } catch (ApiException $e) {
            throw $this->rearrangeModulesUsingPOSTHandleException($e);
        }
    }

    /**
     * Rearrange Email Modules
     *
     * @param int $id
     *   id
     * @param string|null $positions
     *   JSON array of module positions.  Each position must be a JSON object with members &#39;index&#39; and a &#39;moduleId&#39;
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rearrangeModulesUsingPOSTAsync(
        int $id,
        string $positions = null
    ): PromiseInterface {
        return $this->rearrangeModulesUsingPOSTAsyncWithHttpInfo($id, $positions)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailModuleResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Rearrange Email Modules
     *
     * @param int $id
     *   id
     * @param string|null $positions
     *   JSON array of module positions.  Each position must be a JSON object with members &#39;index&#39; and a &#39;moduleId&#39;
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rearrangeModulesUsingPOSTAsyncWithHttpInfo(
        int $id,
        string $positions = null
    ): PromiseInterface {
        $request = $this->rearrangeModulesUsingPOSTRequest($id, $positions);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailModuleResponse::class,
            [$this, 'rearrangeModulesUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'rearrangeModulesUsingPOST'
     *
     * @param int $id
     *   id
     * @param string|null $positions
     *   JSON array of module positions.  Each position must be a JSON object with members &#39;index&#39; and a &#39;moduleId&#39;
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function rearrangeModulesUsingPOSTRequest(
        int $id,
        string $positions = null
    ): Request {

        $resourcePath = '/rest/asset/v1/email/{id}/content/rearrange.json';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            $positions
        );
    }

    /**
     * Exception handler for renameUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function renameUsingPOSTHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailModuleResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Rename Email Module
     *
     * @param int $id
     *   id
     * @param string $module_id
     *   moduleId
     * @param string $name
     *   New module name
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailModuleResponse
     */
    public function renameUsingPOST(
        int $id,
        string $module_id,
        string $name
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailModuleResponse {
        list($response) = $this->renameUsingPOSTWithHttpInfo($id, $module_id, $name);
        return $response;
    }

    /**
     * Rename Email Module
     *
     * @param int $id
     *   id
     * @param string $module_id
     *   moduleId
     * @param string $name
     *   New module name
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailModuleResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function renameUsingPOSTWithHttpInfo(
        int $id,
        string $module_id,
        string $name
    ): array {
        $request = $this->renameUsingPOSTRequest($id, $module_id, $name);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailModuleResponse::class
            );
        } catch (ApiException $e) {
            throw $this->renameUsingPOSTHandleException($e);
        }
    }

    /**
     * Rename Email Module
     *
     * @param int $id
     *   id
     * @param string $module_id
     *   moduleId
     * @param string $name
     *   New module name
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function renameUsingPOSTAsync(
        int $id,
        string $module_id,
        string $name
    ): PromiseInterface {
        return $this->renameUsingPOSTAsyncWithHttpInfo($id, $module_id, $name)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailModuleResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Rename Email Module
     *
     * @param int $id
     *   id
     * @param string $module_id
     *   moduleId
     * @param string $name
     *   New module name
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function renameUsingPOSTAsyncWithHttpInfo(
        int $id,
        string $module_id,
        string $name
    ): PromiseInterface {
        $request = $this->renameUsingPOSTRequest($id, $module_id, $name);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailModuleResponse::class,
            [$this, 'renameUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'renameUsingPOST'
     *
     * @param int $id
     *   id
     * @param string $module_id
     *   moduleId
     * @param string $name
     *   New module name
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function renameUsingPOSTRequest(
        int $id,
        string $module_id,
        string $name
    ): Request {

        $resourcePath = '/rest/asset/v1/email/{id}/content/{moduleId}/rename.json';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $resourcePath = str_replace(
            '{' . 'moduleId' . '}',
            ObjectSerializer::toPathValue($module_id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
                'name' => ObjectSerializer::toQueryValue($name),
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for sendSampleEmailUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function sendSampleEmailUsingPOSTHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfSendSampleResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Send Sample Email
     *
     * @param int $id
     *   Id of the email
     * @param \NecLimDul\MarketoRest\Asset\Model\SendSampleEmailRequest $send_sample_email_request
     *   sendSampleEmailRequest
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfSendSampleResponse
     */
    public function sendSampleEmailUsingPOST(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\SendSampleEmailRequest $send_sample_email_request
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfSendSampleResponse {
        list($response) = $this->sendSampleEmailUsingPOSTWithHttpInfo($id, $send_sample_email_request);
        return $response;
    }

    /**
     * Send Sample Email
     *
     * @param int $id
     *   Id of the email
     * @param \NecLimDul\MarketoRest\Asset\Model\SendSampleEmailRequest $send_sample_email_request
     *   sendSampleEmailRequest
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfSendSampleResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function sendSampleEmailUsingPOSTWithHttpInfo(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\SendSampleEmailRequest $send_sample_email_request
    ): array {
        $request = $this->sendSampleEmailUsingPOSTRequest($id, $send_sample_email_request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfSendSampleResponse::class
            );
        } catch (ApiException $e) {
            throw $this->sendSampleEmailUsingPOSTHandleException($e);
        }
    }

    /**
     * Send Sample Email
     *
     * @param int $id
     *   Id of the email
     * @param \NecLimDul\MarketoRest\Asset\Model\SendSampleEmailRequest $send_sample_email_request
     *   sendSampleEmailRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendSampleEmailUsingPOSTAsync(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\SendSampleEmailRequest $send_sample_email_request
    ): PromiseInterface {
        return $this->sendSampleEmailUsingPOSTAsyncWithHttpInfo($id, $send_sample_email_request)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfSendSampleResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Send Sample Email
     *
     * @param int $id
     *   Id of the email
     * @param \NecLimDul\MarketoRest\Asset\Model\SendSampleEmailRequest $send_sample_email_request
     *   sendSampleEmailRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendSampleEmailUsingPOSTAsyncWithHttpInfo(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\SendSampleEmailRequest $send_sample_email_request
    ): PromiseInterface {
        $request = $this->sendSampleEmailUsingPOSTRequest($id, $send_sample_email_request);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfSendSampleResponse::class,
            [$this, 'sendSampleEmailUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'sendSampleEmailUsingPOST'
     *
     * @param int $id
     *   Id of the email
     * @param \NecLimDul\MarketoRest\Asset\Model\SendSampleEmailRequest $send_sample_email_request
     *   sendSampleEmailRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sendSampleEmailUsingPOSTRequest(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\SendSampleEmailRequest $send_sample_email_request
    ): Request {

        $resourcePath = '/rest/asset/v1/email/{id}/sendSample.json';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            $send_sample_email_request
        );
    }

    /**
     * Exception handler for unapproveDraftUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function unapproveDraftUsingPOSTHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Unapprove Email
     *
     * @param int $id
     *   id
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse
     */
    public function unapproveDraftUsingPOST(
        int $id
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse {
        list($response) = $this->unapproveDraftUsingPOSTWithHttpInfo($id);
        return $response;
    }

    /**
     * Unapprove Email
     *
     * @param int $id
     *   id
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function unapproveDraftUsingPOSTWithHttpInfo(
        int $id
    ): array {
        $request = $this->unapproveDraftUsingPOSTRequest($id);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class
            );
        } catch (ApiException $e) {
            throw $this->unapproveDraftUsingPOSTHandleException($e);
        }
    }

    /**
     * Unapprove Email
     *
     * @param int $id
     *   id
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function unapproveDraftUsingPOSTAsync(
        int $id
    ): PromiseInterface {
        return $this->unapproveDraftUsingPOSTAsyncWithHttpInfo($id)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Unapprove Email
     *
     * @param int $id
     *   id
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function unapproveDraftUsingPOSTAsyncWithHttpInfo(
        int $id
    ): PromiseInterface {
        $request = $this->unapproveDraftUsingPOSTRequest($id);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class,
            [$this, 'unapproveDraftUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'unapproveDraftUsingPOST'
     *
     * @param int $id
     *   id
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function unapproveDraftUsingPOSTRequest(
        int $id
    ): Request {

        $resourcePath = '/rest/asset/v1/email/{id}/unapprove.json';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for updateEmailComponentContentUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function updateEmailComponentContentUsingPOSTHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Update Email Content Section
     *
     * @param int $id
     *   id
     * @param string $html_id
     *   htmlId
     * @param \NecLimDul\MarketoRest\Asset\Model\UpdateEmailComponentContentRequest $request
     *   request
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse
     */
    public function updateEmailComponentContentUsingPOST(
        int $id,
        string $html_id,
        \NecLimDul\MarketoRest\Asset\Model\UpdateEmailComponentContentRequest $request
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse {
        list($response) = $this->updateEmailComponentContentUsingPOSTWithHttpInfo($id, $html_id, $request);
        return $response;
    }

    /**
     * Update Email Content Section
     *
     * @param int $id
     *   id
     * @param string $html_id
     *   htmlId
     * @param \NecLimDul\MarketoRest\Asset\Model\UpdateEmailComponentContentRequest $request
     *   request
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function updateEmailComponentContentUsingPOSTWithHttpInfo(
        int $id,
        string $html_id,
        \NecLimDul\MarketoRest\Asset\Model\UpdateEmailComponentContentRequest $request
    ): array {
        $request = $this->updateEmailComponentContentUsingPOSTRequest($id, $html_id, $request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class
            );
        } catch (ApiException $e) {
            throw $this->updateEmailComponentContentUsingPOSTHandleException($e);
        }
    }

    /**
     * Update Email Content Section
     *
     * @param int $id
     *   id
     * @param string $html_id
     *   htmlId
     * @param \NecLimDul\MarketoRest\Asset\Model\UpdateEmailComponentContentRequest $request
     *   request
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEmailComponentContentUsingPOSTAsync(
        int $id,
        string $html_id,
        \NecLimDul\MarketoRest\Asset\Model\UpdateEmailComponentContentRequest $request
    ): PromiseInterface {
        return $this->updateEmailComponentContentUsingPOSTAsyncWithHttpInfo($id, $html_id, $request)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Update Email Content Section
     *
     * @param int $id
     *   id
     * @param string $html_id
     *   htmlId
     * @param \NecLimDul\MarketoRest\Asset\Model\UpdateEmailComponentContentRequest $request
     *   request
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEmailComponentContentUsingPOSTAsyncWithHttpInfo(
        int $id,
        string $html_id,
        \NecLimDul\MarketoRest\Asset\Model\UpdateEmailComponentContentRequest $request
    ): PromiseInterface {
        $request = $this->updateEmailComponentContentUsingPOSTRequest($id, $html_id, $request);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class,
            [$this, 'updateEmailComponentContentUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'updateEmailComponentContentUsingPOST'
     *
     * @param int $id
     *   id
     * @param string $html_id
     *   htmlId
     * @param \NecLimDul\MarketoRest\Asset\Model\UpdateEmailComponentContentRequest $request
     *   request
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateEmailComponentContentUsingPOSTRequest(
        int $id,
        string $html_id,
        \NecLimDul\MarketoRest\Asset\Model\UpdateEmailComponentContentRequest $request
    ): Request {

        $resourcePath = '/rest/asset/v1/email/{id}/content/{htmlId}.json';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $resourcePath = str_replace(
            '{' . 'htmlId' . '}',
            ObjectSerializer::toPathValue($html_id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            $request
        );
    }

    /**
     * Exception handler for updateEmailContentUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function updateEmailContentUsingPOSTHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Update Email Content
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\UpdateEmailComponentDataRequest $update_email_request
     *   updateEmailRequest
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse
     */
    public function updateEmailContentUsingPOST(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\UpdateEmailComponentDataRequest $update_email_request
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse {
        list($response) = $this->updateEmailContentUsingPOSTWithHttpInfo($id, $update_email_request);
        return $response;
    }

    /**
     * Update Email Content
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\UpdateEmailComponentDataRequest $update_email_request
     *   updateEmailRequest
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function updateEmailContentUsingPOSTWithHttpInfo(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\UpdateEmailComponentDataRequest $update_email_request
    ): array {
        $request = $this->updateEmailContentUsingPOSTRequest($id, $update_email_request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class
            );
        } catch (ApiException $e) {
            throw $this->updateEmailContentUsingPOSTHandleException($e);
        }
    }

    /**
     * Update Email Content
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\UpdateEmailComponentDataRequest $update_email_request
     *   updateEmailRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEmailContentUsingPOSTAsync(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\UpdateEmailComponentDataRequest $update_email_request
    ): PromiseInterface {
        return $this->updateEmailContentUsingPOSTAsyncWithHttpInfo($id, $update_email_request)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Update Email Content
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\UpdateEmailComponentDataRequest $update_email_request
     *   updateEmailRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEmailContentUsingPOSTAsyncWithHttpInfo(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\UpdateEmailComponentDataRequest $update_email_request
    ): PromiseInterface {
        $request = $this->updateEmailContentUsingPOSTRequest($id, $update_email_request);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class,
            [$this, 'updateEmailContentUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'updateEmailContentUsingPOST'
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\UpdateEmailComponentDataRequest $update_email_request
     *   updateEmailRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateEmailContentUsingPOSTRequest(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\UpdateEmailComponentDataRequest $update_email_request
    ): Request {

        $resourcePath = '/rest/asset/v1/email/{id}/content.json';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            $update_email_request
        );
    }

    /**
     * Exception handler for updateEmailDynamicContentUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function updateEmailDynamicContentUsingPOSTHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Update Email Dynamic Content Section
     *
     * @param int $id
     *   Id of email
     * @param string $content_id
     *   Id of email dynamic content section
     * @param \NecLimDul\MarketoRest\Asset\Model\UpdateEmailDynamicContentRequest $request
     *   Content properties
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse
     */
    public function updateEmailDynamicContentUsingPOST(
        int $id,
        string $content_id,
        \NecLimDul\MarketoRest\Asset\Model\UpdateEmailDynamicContentRequest $request
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse {
        list($response) = $this->updateEmailDynamicContentUsingPOSTWithHttpInfo($id, $content_id, $request);
        return $response;
    }

    /**
     * Update Email Dynamic Content Section
     *
     * @param int $id
     *   Id of email
     * @param string $content_id
     *   Id of email dynamic content section
     * @param \NecLimDul\MarketoRest\Asset\Model\UpdateEmailDynamicContentRequest $request
     *   Content properties
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function updateEmailDynamicContentUsingPOSTWithHttpInfo(
        int $id,
        string $content_id,
        \NecLimDul\MarketoRest\Asset\Model\UpdateEmailDynamicContentRequest $request
    ): array {
        $request = $this->updateEmailDynamicContentUsingPOSTRequest($id, $content_id, $request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class
            );
        } catch (ApiException $e) {
            throw $this->updateEmailDynamicContentUsingPOSTHandleException($e);
        }
    }

    /**
     * Update Email Dynamic Content Section
     *
     * @param int $id
     *   Id of email
     * @param string $content_id
     *   Id of email dynamic content section
     * @param \NecLimDul\MarketoRest\Asset\Model\UpdateEmailDynamicContentRequest $request
     *   Content properties
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEmailDynamicContentUsingPOSTAsync(
        int $id,
        string $content_id,
        \NecLimDul\MarketoRest\Asset\Model\UpdateEmailDynamicContentRequest $request
    ): PromiseInterface {
        return $this->updateEmailDynamicContentUsingPOSTAsyncWithHttpInfo($id, $content_id, $request)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Update Email Dynamic Content Section
     *
     * @param int $id
     *   Id of email
     * @param string $content_id
     *   Id of email dynamic content section
     * @param \NecLimDul\MarketoRest\Asset\Model\UpdateEmailDynamicContentRequest $request
     *   Content properties
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEmailDynamicContentUsingPOSTAsyncWithHttpInfo(
        int $id,
        string $content_id,
        \NecLimDul\MarketoRest\Asset\Model\UpdateEmailDynamicContentRequest $request
    ): PromiseInterface {
        $request = $this->updateEmailDynamicContentUsingPOSTRequest($id, $content_id, $request);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class,
            [$this, 'updateEmailDynamicContentUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'updateEmailDynamicContentUsingPOST'
     *
     * @param int $id
     *   Id of email
     * @param string $content_id
     *   Id of email dynamic content section
     * @param \NecLimDul\MarketoRest\Asset\Model\UpdateEmailDynamicContentRequest $request
     *   Content properties
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateEmailDynamicContentUsingPOSTRequest(
        int $id,
        string $content_id,
        \NecLimDul\MarketoRest\Asset\Model\UpdateEmailDynamicContentRequest $request
    ): Request {

        $resourcePath = '/rest/asset/v1/email/{id}/dynamicContent/{contentId}.json';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $resourcePath = str_replace(
            '{' . 'contentId' . '}',
            ObjectSerializer::toPathValue($content_id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            $request
        );
    }

    /**
     * Exception handler for updateEmailUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function updateEmailUsingPOSTHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Update Email Metadata
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\UpdateEmailMetaDataRequest $update_email_request
     *   updateEmailRequest
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse
     */
    public function updateEmailUsingPOST(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\UpdateEmailMetaDataRequest $update_email_request
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse {
        list($response) = $this->updateEmailUsingPOSTWithHttpInfo($id, $update_email_request);
        return $response;
    }

    /**
     * Update Email Metadata
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\UpdateEmailMetaDataRequest $update_email_request
     *   updateEmailRequest
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function updateEmailUsingPOSTWithHttpInfo(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\UpdateEmailMetaDataRequest $update_email_request
    ): array {
        $request = $this->updateEmailUsingPOSTRequest($id, $update_email_request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse::class
            );
        } catch (ApiException $e) {
            throw $this->updateEmailUsingPOSTHandleException($e);
        }
    }

    /**
     * Update Email Metadata
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\UpdateEmailMetaDataRequest $update_email_request
     *   updateEmailRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEmailUsingPOSTAsync(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\UpdateEmailMetaDataRequest $update_email_request
    ): PromiseInterface {
        return $this->updateEmailUsingPOSTAsyncWithHttpInfo($id, $update_email_request)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Update Email Metadata
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\UpdateEmailMetaDataRequest $update_email_request
     *   updateEmailRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEmailUsingPOSTAsyncWithHttpInfo(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\UpdateEmailMetaDataRequest $update_email_request
    ): PromiseInterface {
        $request = $this->updateEmailUsingPOSTRequest($id, $update_email_request);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailResponse::class,
            [$this, 'updateEmailUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'updateEmailUsingPOST'
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\UpdateEmailMetaDataRequest $update_email_request
     *   updateEmailRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateEmailUsingPOSTRequest(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\UpdateEmailMetaDataRequest $update_email_request
    ): Request {

        $resourcePath = '/rest/asset/v1/email/{id}.json';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            $update_email_request
        );
    }

    /**
     * Exception handler for updateVariableUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function updateVariableUsingPOSTHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailVariableResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Update Email Variable
     *
     * @param int $id
     *   id
     * @param string $name
     *   name
     * @param \NecLimDul\MarketoRest\Asset\Model\UpdateVariableRequest|null $update_variable_request
     *   updateVariableRequest
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailVariableResponse
     */
    public function updateVariableUsingPOST(
        int $id,
        string $name,
        \NecLimDul\MarketoRest\Asset\Model\UpdateVariableRequest $update_variable_request = null
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailVariableResponse {
        list($response) = $this->updateVariableUsingPOSTWithHttpInfo($id, $name, $update_variable_request);
        return $response;
    }

    /**
     * Update Email Variable
     *
     * @param int $id
     *   id
     * @param string $name
     *   name
     * @param \NecLimDul\MarketoRest\Asset\Model\UpdateVariableRequest|null $update_variable_request
     *   updateVariableRequest
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailVariableResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function updateVariableUsingPOSTWithHttpInfo(
        int $id,
        string $name,
        \NecLimDul\MarketoRest\Asset\Model\UpdateVariableRequest $update_variable_request = null
    ): array {
        $request = $this->updateVariableUsingPOSTRequest($id, $name, $update_variable_request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailVariableResponse::class
            );
        } catch (ApiException $e) {
            throw $this->updateVariableUsingPOSTHandleException($e);
        }
    }

    /**
     * Update Email Variable
     *
     * @param int $id
     *   id
     * @param string $name
     *   name
     * @param \NecLimDul\MarketoRest\Asset\Model\UpdateVariableRequest|null $update_variable_request
     *   updateVariableRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateVariableUsingPOSTAsync(
        int $id,
        string $name,
        \NecLimDul\MarketoRest\Asset\Model\UpdateVariableRequest $update_variable_request = null
    ): PromiseInterface {
        return $this->updateVariableUsingPOSTAsyncWithHttpInfo($id, $name, $update_variable_request)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailVariableResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Update Email Variable
     *
     * @param int $id
     *   id
     * @param string $name
     *   name
     * @param \NecLimDul\MarketoRest\Asset\Model\UpdateVariableRequest|null $update_variable_request
     *   updateVariableRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateVariableUsingPOSTAsyncWithHttpInfo(
        int $id,
        string $name,
        \NecLimDul\MarketoRest\Asset\Model\UpdateVariableRequest $update_variable_request = null
    ): PromiseInterface {
        $request = $this->updateVariableUsingPOSTRequest($id, $name, $update_variable_request);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfEmailVariableResponse::class,
            [$this, 'updateVariableUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'updateVariableUsingPOST'
     *
     * @param int $id
     *   id
     * @param string $name
     *   name
     * @param \NecLimDul\MarketoRest\Asset\Model\UpdateVariableRequest|null $update_variable_request
     *   updateVariableRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateVariableUsingPOSTRequest(
        int $id,
        string $name,
        \NecLimDul\MarketoRest\Asset\Model\UpdateVariableRequest $update_variable_request = null
    ): Request {

        $resourcePath = '/rest/asset/v1/email/{id}/variable/{name}.json';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $resourcePath = str_replace(
            '{' . 'name' . '}',
            ObjectSerializer::toPathValue($name),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            $update_variable_request
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array<string, mixed> of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    /**
     * Make a request.
     *
     * @param \GuzzleHttp\Psr7\Request $request An initialized request object.
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @return \Psr\Http\Message\ResponseInterface
     */
    private function makeRequest(Request $request)
    {
        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            $response = $e->getResponse();
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                (int) $e->getCode(),
                $response ? $response->getHeaders() : [],
                $response ? (string) $response->getBody() : null
            );
        }

        $statusCode = $response->getStatusCode();
        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    (string) $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                (string) $response->getBody()
            );
        }
        return $response;
    }

    /**
     * Make an async request.
     *
     * @param \GuzzleHttp\Psr7\Request $request An initialized request object.
     * @param class-string $returnType The return type.
     * @param callable $exceptionHandler A callback to process HTTP errors.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @return \GuzzleHttp\Promise\PromiseInterface A promise that will return a processed response.
     */
    private function makeAsyncRequest(Request $request, string $returnType, callable $exceptionHandler)
    {
        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function (ResponseInterface $response) use ($returnType) {
                    return $this->responseToReturn($response, $returnType);
                },
                function (RequestException $exception) use ($exceptionHandler) {
                    $response = $exception->getResponse();
                    $e = new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : [],
                        $response ? (string) $response->getBody() : null
                    );
                    throw $exceptionHandler($e);
                }
            );
    }

    /**
     * Convert a response to a return standard return array.
     *
     * @template T
     * @param \Psr\Http\Message\ResponseInterface $response A response from a request with a serialized body.
     * @param string $returnType The primary return type.
     * @phpstan-param class-string<T> $returnType
     *
     * @return array structured array or response and http info.
     * @phpstan-return array{T, int, array<array<string>>}
     */
    private function responseToReturn(ResponseInterface $response, string $returnType)
    {
        return [
            $this->deserializeResponseBody($response->getBody(), $returnType),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    /**
     * Deserialize a response body.
     *
     * @template T
     * @param mixed $responseBody The response body.
     * @param string $returnType The return type.
     * @param array<string, string[]> $headers A list of headers from the response.
     * @phpstan-param class-string<T> $returnType
     *
     * @return mixed Either a string or a stream to be passed to a file object.
     * @phpstan-return T
     * @psalm-return T
     */
    private function deserializeResponseBody($responseBody, string $returnType, array $headers = [])
    {
        return ObjectSerializer::deserialize(
            $returnType === \SplFileObject::class ? $responseBody : (string) $responseBody,
            $returnType,
            $headers
        );
    }
}
