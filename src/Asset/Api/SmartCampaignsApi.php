<?php

/**
 * SmartCampaignsApi
 *
 * Marketo Rest API
 *
 * Marketo Rest API
 *
 * OpenAPI spec version: 1.0
 * Contact: developerfeedback@marketo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.26
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Asset
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace NecLimDul\MarketoRest\Asset\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\Promise\PromiseInterface;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\ResponseInterface;
use NecLimDul\MarketoRest\Asset\ApiException;
use NecLimDul\MarketoRest\Asset\Configuration;
use NecLimDul\MarketoRest\Asset\HeaderSelector;
use NecLimDul\MarketoRest\Asset\ObjectSerializer;

/**
 * SmartCampaignsApi Class Doc Comment
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Asset
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SmartCampaignsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the spec.
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Exception handler for activateSmartCampaignUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function activateSmartCampaignUsingPOSTHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Activate Smart Campaign
     *
     * @param int $id
     *   Id of the smart campaign
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse
     */
    public function activateSmartCampaignUsingPOST(
        int $id
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse {
        list($response) = $this->activateSmartCampaignUsingPOSTWithHttpInfo($id);
        return $response;
    }

    /**
     * Activate Smart Campaign
     *
     * @param int $id
     *   Id of the smart campaign
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function activateSmartCampaignUsingPOSTWithHttpInfo(
        int $id
    ): array {
        $request = $this->activateSmartCampaignUsingPOSTRequest($id);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class
            );
        } catch (ApiException $e) {
            throw $this->activateSmartCampaignUsingPOSTHandleException($e);
        }
    }

    /**
     * Activate Smart Campaign
     *
     * @param int $id
     *   Id of the smart campaign
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function activateSmartCampaignUsingPOSTAsync(
        int $id
    ): PromiseInterface {
        return $this->activateSmartCampaignUsingPOSTAsyncWithHttpInfo($id)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Activate Smart Campaign
     *
     * @param int $id
     *   Id of the smart campaign
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function activateSmartCampaignUsingPOSTAsyncWithHttpInfo(
        int $id
    ): PromiseInterface {
        $request = $this->activateSmartCampaignUsingPOSTRequest($id);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class,
            [$this, 'activateSmartCampaignUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'activateSmartCampaignUsingPOST'
     *
     * @param int $id
     *   Id of the smart campaign
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function activateSmartCampaignUsingPOSTRequest(
        int $id
    ): Request {

        $resourcePath = '/rest/asset/v1/smartCampaign/{id}/activate.json';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['multipart/form-data']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for cloneSmartCampaignUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function cloneSmartCampaignUsingPOSTHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartCampaignResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Clone Smart Campaign
     *
     * @param int $id
     *   Id of the smart campaign
     * @param \NecLimDul\MarketoRest\Asset\Model\CloneSmartCampaignRequest $clone_smart_campaign_request
     *   cloneSmartCampaignRequest
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartCampaignResponse
     */
    public function cloneSmartCampaignUsingPOST(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\CloneSmartCampaignRequest $clone_smart_campaign_request
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartCampaignResponse {
        list($response) = $this->cloneSmartCampaignUsingPOSTWithHttpInfo($id, $clone_smart_campaign_request);
        return $response;
    }

    /**
     * Clone Smart Campaign
     *
     * @param int $id
     *   Id of the smart campaign
     * @param \NecLimDul\MarketoRest\Asset\Model\CloneSmartCampaignRequest $clone_smart_campaign_request
     *   cloneSmartCampaignRequest
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartCampaignResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function cloneSmartCampaignUsingPOSTWithHttpInfo(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\CloneSmartCampaignRequest $clone_smart_campaign_request
    ): array {
        $request = $this->cloneSmartCampaignUsingPOSTRequest($id, $clone_smart_campaign_request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartCampaignResponse::class
            );
        } catch (ApiException $e) {
            throw $this->cloneSmartCampaignUsingPOSTHandleException($e);
        }
    }

    /**
     * Clone Smart Campaign
     *
     * @param int $id
     *   Id of the smart campaign
     * @param \NecLimDul\MarketoRest\Asset\Model\CloneSmartCampaignRequest $clone_smart_campaign_request
     *   cloneSmartCampaignRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cloneSmartCampaignUsingPOSTAsync(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\CloneSmartCampaignRequest $clone_smart_campaign_request
    ): PromiseInterface {
        return $this->cloneSmartCampaignUsingPOSTAsyncWithHttpInfo($id, $clone_smart_campaign_request)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartCampaignResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Clone Smart Campaign
     *
     * @param int $id
     *   Id of the smart campaign
     * @param \NecLimDul\MarketoRest\Asset\Model\CloneSmartCampaignRequest $clone_smart_campaign_request
     *   cloneSmartCampaignRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cloneSmartCampaignUsingPOSTAsyncWithHttpInfo(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\CloneSmartCampaignRequest $clone_smart_campaign_request
    ): PromiseInterface {
        $request = $this->cloneSmartCampaignUsingPOSTRequest($id, $clone_smart_campaign_request);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartCampaignResponse::class,
            [$this, 'cloneSmartCampaignUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'cloneSmartCampaignUsingPOST'
     *
     * @param int $id
     *   Id of the smart campaign
     * @param \NecLimDul\MarketoRest\Asset\Model\CloneSmartCampaignRequest $clone_smart_campaign_request
     *   cloneSmartCampaignRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function cloneSmartCampaignUsingPOSTRequest(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\CloneSmartCampaignRequest $clone_smart_campaign_request
    ): Request {

        $resourcePath = '/rest/asset/v1/smartCampaign/{id}/clone.json';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            $clone_smart_campaign_request
        );
    }

    /**
     * Exception handler for createSmartCampaignUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function createSmartCampaignUsingPOSTHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartCampaignResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Create Smart Campaign
     *
     * @param \NecLimDul\MarketoRest\Asset\Model\CreateSmartCampaignRequest $create_smart_campaign_request
     *   createSmartCampaignRequest
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartCampaignResponse
     */
    public function createSmartCampaignUsingPOST(
        \NecLimDul\MarketoRest\Asset\Model\CreateSmartCampaignRequest $create_smart_campaign_request
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartCampaignResponse {
        list($response) = $this->createSmartCampaignUsingPOSTWithHttpInfo($create_smart_campaign_request);
        return $response;
    }

    /**
     * Create Smart Campaign
     *
     * @param \NecLimDul\MarketoRest\Asset\Model\CreateSmartCampaignRequest $create_smart_campaign_request
     *   createSmartCampaignRequest
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartCampaignResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function createSmartCampaignUsingPOSTWithHttpInfo(
        \NecLimDul\MarketoRest\Asset\Model\CreateSmartCampaignRequest $create_smart_campaign_request
    ): array {
        $request = $this->createSmartCampaignUsingPOSTRequest($create_smart_campaign_request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartCampaignResponse::class
            );
        } catch (ApiException $e) {
            throw $this->createSmartCampaignUsingPOSTHandleException($e);
        }
    }

    /**
     * Create Smart Campaign
     *
     * @param \NecLimDul\MarketoRest\Asset\Model\CreateSmartCampaignRequest $create_smart_campaign_request
     *   createSmartCampaignRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSmartCampaignUsingPOSTAsync(
        \NecLimDul\MarketoRest\Asset\Model\CreateSmartCampaignRequest $create_smart_campaign_request
    ): PromiseInterface {
        return $this->createSmartCampaignUsingPOSTAsyncWithHttpInfo($create_smart_campaign_request)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartCampaignResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Create Smart Campaign
     *
     * @param \NecLimDul\MarketoRest\Asset\Model\CreateSmartCampaignRequest $create_smart_campaign_request
     *   createSmartCampaignRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSmartCampaignUsingPOSTAsyncWithHttpInfo(
        \NecLimDul\MarketoRest\Asset\Model\CreateSmartCampaignRequest $create_smart_campaign_request
    ): PromiseInterface {
        $request = $this->createSmartCampaignUsingPOSTRequest($create_smart_campaign_request);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartCampaignResponse::class,
            [$this, 'createSmartCampaignUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'createSmartCampaignUsingPOST'
     *
     * @param \NecLimDul\MarketoRest\Asset\Model\CreateSmartCampaignRequest $create_smart_campaign_request
     *   createSmartCampaignRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createSmartCampaignUsingPOSTRequest(
        \NecLimDul\MarketoRest\Asset\Model\CreateSmartCampaignRequest $create_smart_campaign_request
    ): Request {

        $resourcePath = '/rest/asset/v1/smartCampaigns.json';

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            $create_smart_campaign_request
        );
    }

    /**
     * Exception handler for deactivateSmartCampaignUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function deactivateSmartCampaignUsingPOSTHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Deactivate Smart Campaign
     *
     * @param int $id
     *   Id of the smart campaign
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse
     */
    public function deactivateSmartCampaignUsingPOST(
        int $id
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse {
        list($response) = $this->deactivateSmartCampaignUsingPOSTWithHttpInfo($id);
        return $response;
    }

    /**
     * Deactivate Smart Campaign
     *
     * @param int $id
     *   Id of the smart campaign
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function deactivateSmartCampaignUsingPOSTWithHttpInfo(
        int $id
    ): array {
        $request = $this->deactivateSmartCampaignUsingPOSTRequest($id);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class
            );
        } catch (ApiException $e) {
            throw $this->deactivateSmartCampaignUsingPOSTHandleException($e);
        }
    }

    /**
     * Deactivate Smart Campaign
     *
     * @param int $id
     *   Id of the smart campaign
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deactivateSmartCampaignUsingPOSTAsync(
        int $id
    ): PromiseInterface {
        return $this->deactivateSmartCampaignUsingPOSTAsyncWithHttpInfo($id)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Deactivate Smart Campaign
     *
     * @param int $id
     *   Id of the smart campaign
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deactivateSmartCampaignUsingPOSTAsyncWithHttpInfo(
        int $id
    ): PromiseInterface {
        $request = $this->deactivateSmartCampaignUsingPOSTRequest($id);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class,
            [$this, 'deactivateSmartCampaignUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'deactivateSmartCampaignUsingPOST'
     *
     * @param int $id
     *   Id of the smart campaign
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deactivateSmartCampaignUsingPOSTRequest(
        int $id
    ): Request {

        $resourcePath = '/rest/asset/v1/smartCampaign/{id}/deactivate.json';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['multipart/form-data']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for deleteSmartCampaignUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function deleteSmartCampaignUsingPOSTHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Delete Smart Campaign
     *
     * @param int $id
     *   Id of the smart campaign
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse
     */
    public function deleteSmartCampaignUsingPOST(
        int $id
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse {
        list($response) = $this->deleteSmartCampaignUsingPOSTWithHttpInfo($id);
        return $response;
    }

    /**
     * Delete Smart Campaign
     *
     * @param int $id
     *   Id of the smart campaign
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function deleteSmartCampaignUsingPOSTWithHttpInfo(
        int $id
    ): array {
        $request = $this->deleteSmartCampaignUsingPOSTRequest($id);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class
            );
        } catch (ApiException $e) {
            throw $this->deleteSmartCampaignUsingPOSTHandleException($e);
        }
    }

    /**
     * Delete Smart Campaign
     *
     * @param int $id
     *   Id of the smart campaign
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSmartCampaignUsingPOSTAsync(
        int $id
    ): PromiseInterface {
        return $this->deleteSmartCampaignUsingPOSTAsyncWithHttpInfo($id)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Delete Smart Campaign
     *
     * @param int $id
     *   Id of the smart campaign
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSmartCampaignUsingPOSTAsyncWithHttpInfo(
        int $id
    ): PromiseInterface {
        $request = $this->deleteSmartCampaignUsingPOSTRequest($id);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class,
            [$this, 'deleteSmartCampaignUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'deleteSmartCampaignUsingPOST'
     *
     * @param int $id
     *   Id of the smart campaign
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteSmartCampaignUsingPOSTRequest(
        int $id
    ): Request {

        $resourcePath = '/rest/asset/v1/smartCampaign/{id}/delete.json';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for getAllSmartCampaignsGET.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function getAllSmartCampaignsGETHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartCampaignResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Smart Campaigns
     *
     * @param int|null $max_return
     *   Maximum number of smart campaigns to return.  Max 200, default 20
     * @param int|null $offset
     *   Integer offset for paging
     * @param string|null $folder
     *   JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39;
     * @param string|null $earliest_updated_at
     *   Exclude smart campaigns prior to this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description.
     * @param string|null $latest_updated_at
     *   Exclude smart campaigns after this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description.
     * @param bool|null $is_active
     *   Set true to return only active campaigns.  Default false
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartCampaignResponse
     */
    public function getAllSmartCampaignsGET(
        int $max_return = null,
        int $offset = null,
        string $folder = null,
        string $earliest_updated_at = null,
        string $latest_updated_at = null,
        bool $is_active = null
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartCampaignResponse {
        list($response) = $this->getAllSmartCampaignsGETWithHttpInfo($max_return, $offset, $folder, $earliest_updated_at, $latest_updated_at, $is_active);
        return $response;
    }

    /**
     * Get Smart Campaigns
     *
     * @param int|null $max_return
     *   Maximum number of smart campaigns to return.  Max 200, default 20
     * @param int|null $offset
     *   Integer offset for paging
     * @param string|null $folder
     *   JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39;
     * @param string|null $earliest_updated_at
     *   Exclude smart campaigns prior to this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description.
     * @param string|null $latest_updated_at
     *   Exclude smart campaigns after this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description.
     * @param bool|null $is_active
     *   Set true to return only active campaigns.  Default false
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartCampaignResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function getAllSmartCampaignsGETWithHttpInfo(
        int $max_return = null,
        int $offset = null,
        string $folder = null,
        string $earliest_updated_at = null,
        string $latest_updated_at = null,
        bool $is_active = null
    ): array {
        $request = $this->getAllSmartCampaignsGETRequest($max_return, $offset, $folder, $earliest_updated_at, $latest_updated_at, $is_active);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartCampaignResponse::class
            );
        } catch (ApiException $e) {
            throw $this->getAllSmartCampaignsGETHandleException($e);
        }
    }

    /**
     * Get Smart Campaigns
     *
     * @param int|null $max_return
     *   Maximum number of smart campaigns to return.  Max 200, default 20
     * @param int|null $offset
     *   Integer offset for paging
     * @param string|null $folder
     *   JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39;
     * @param string|null $earliest_updated_at
     *   Exclude smart campaigns prior to this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description.
     * @param string|null $latest_updated_at
     *   Exclude smart campaigns after this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description.
     * @param bool|null $is_active
     *   Set true to return only active campaigns.  Default false
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllSmartCampaignsGETAsync(
        int $max_return = null,
        int $offset = null,
        string $folder = null,
        string $earliest_updated_at = null,
        string $latest_updated_at = null,
        bool $is_active = null
    ): PromiseInterface {
        return $this->getAllSmartCampaignsGETAsyncWithHttpInfo($max_return, $offset, $folder, $earliest_updated_at, $latest_updated_at, $is_active)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartCampaignResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Get Smart Campaigns
     *
     * @param int|null $max_return
     *   Maximum number of smart campaigns to return.  Max 200, default 20
     * @param int|null $offset
     *   Integer offset for paging
     * @param string|null $folder
     *   JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39;
     * @param string|null $earliest_updated_at
     *   Exclude smart campaigns prior to this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description.
     * @param string|null $latest_updated_at
     *   Exclude smart campaigns after this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description.
     * @param bool|null $is_active
     *   Set true to return only active campaigns.  Default false
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllSmartCampaignsGETAsyncWithHttpInfo(
        int $max_return = null,
        int $offset = null,
        string $folder = null,
        string $earliest_updated_at = null,
        string $latest_updated_at = null,
        bool $is_active = null
    ): PromiseInterface {
        $request = $this->getAllSmartCampaignsGETRequest($max_return, $offset, $folder, $earliest_updated_at, $latest_updated_at, $is_active);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartCampaignResponse::class,
            [$this, 'getAllSmartCampaignsGETHandleException']
        );
    }

    /**
     * Create request for operation 'getAllSmartCampaignsGET'
     *
     * @param int|null $max_return
     *   Maximum number of smart campaigns to return.  Max 200, default 20
     * @param int|null $offset
     *   Integer offset for paging
     * @param string|null $folder
     *   JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39;
     * @param string|null $earliest_updated_at
     *   Exclude smart campaigns prior to this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description.
     * @param string|null $latest_updated_at
     *   Exclude smart campaigns after this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description.
     * @param bool|null $is_active
     *   Set true to return only active campaigns.  Default false
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAllSmartCampaignsGETRequest(
        int $max_return = null,
        int $offset = null,
        string $folder = null,
        string $earliest_updated_at = null,
        string $latest_updated_at = null,
        bool $is_active = null
    ): Request {

        $resourcePath = '/rest/asset/v1/smartCampaigns.json';

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'GET',
            $operationHost . $resourcePath,
            // Query.
            [
                'maxReturn' => isset($max_return) ? ObjectSerializer::toQueryValue($max_return) : null,
                'offset' => isset($offset) ? ObjectSerializer::toQueryValue($offset) : null,
                'folder' => isset($folder) ? ObjectSerializer::toQueryValue($folder) : null,
                'earliestUpdatedAt' => isset($earliest_updated_at) ? ObjectSerializer::toQueryValue($earliest_updated_at) : null,
                'latestUpdatedAt' => isset($latest_updated_at) ? ObjectSerializer::toQueryValue($latest_updated_at) : null,
                'isActive' => isset($is_active) ? ObjectSerializer::toQueryValue($is_active) : null,
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for getSmartCampaignByIdUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function getSmartCampaignByIdUsingGETHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartCampaignResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Smart Campaign by Id
     *
     * @param int $id
     *   Id for the smart campaign
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartCampaignResponse
     */
    public function getSmartCampaignByIdUsingGET(
        int $id
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartCampaignResponse {
        list($response) = $this->getSmartCampaignByIdUsingGETWithHttpInfo($id);
        return $response;
    }

    /**
     * Get Smart Campaign by Id
     *
     * @param int $id
     *   Id for the smart campaign
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartCampaignResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function getSmartCampaignByIdUsingGETWithHttpInfo(
        int $id
    ): array {
        $request = $this->getSmartCampaignByIdUsingGETRequest($id);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartCampaignResponse::class
            );
        } catch (ApiException $e) {
            throw $this->getSmartCampaignByIdUsingGETHandleException($e);
        }
    }

    /**
     * Get Smart Campaign by Id
     *
     * @param int $id
     *   Id for the smart campaign
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSmartCampaignByIdUsingGETAsync(
        int $id
    ): PromiseInterface {
        return $this->getSmartCampaignByIdUsingGETAsyncWithHttpInfo($id)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartCampaignResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Get Smart Campaign by Id
     *
     * @param int $id
     *   Id for the smart campaign
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSmartCampaignByIdUsingGETAsyncWithHttpInfo(
        int $id
    ): PromiseInterface {
        $request = $this->getSmartCampaignByIdUsingGETRequest($id);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartCampaignResponse::class,
            [$this, 'getSmartCampaignByIdUsingGETHandleException']
        );
    }

    /**
     * Create request for operation 'getSmartCampaignByIdUsingGET'
     *
     * @param int $id
     *   Id for the smart campaign
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSmartCampaignByIdUsingGETRequest(
        int $id
    ): Request {

        $resourcePath = '/rest/asset/v1/smartCampaign/{id}.json';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'GET',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for getSmartCampaignByNameUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function getSmartCampaignByNameUsingGETHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartCampaignResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Smart Campaign by Name
     *
     * @param string $name
     *   Name for the smart campaign
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartCampaignResponse
     */
    public function getSmartCampaignByNameUsingGET(
        string $name
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartCampaignResponse {
        list($response) = $this->getSmartCampaignByNameUsingGETWithHttpInfo($name);
        return $response;
    }

    /**
     * Get Smart Campaign by Name
     *
     * @param string $name
     *   Name for the smart campaign
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartCampaignResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function getSmartCampaignByNameUsingGETWithHttpInfo(
        string $name
    ): array {
        $request = $this->getSmartCampaignByNameUsingGETRequest($name);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartCampaignResponse::class
            );
        } catch (ApiException $e) {
            throw $this->getSmartCampaignByNameUsingGETHandleException($e);
        }
    }

    /**
     * Get Smart Campaign by Name
     *
     * @param string $name
     *   Name for the smart campaign
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSmartCampaignByNameUsingGETAsync(
        string $name
    ): PromiseInterface {
        return $this->getSmartCampaignByNameUsingGETAsyncWithHttpInfo($name)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartCampaignResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Get Smart Campaign by Name
     *
     * @param string $name
     *   Name for the smart campaign
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSmartCampaignByNameUsingGETAsyncWithHttpInfo(
        string $name
    ): PromiseInterface {
        $request = $this->getSmartCampaignByNameUsingGETRequest($name);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartCampaignResponse::class,
            [$this, 'getSmartCampaignByNameUsingGETHandleException']
        );
    }

    /**
     * Create request for operation 'getSmartCampaignByNameUsingGET'
     *
     * @param string $name
     *   Name for the smart campaign
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSmartCampaignByNameUsingGETRequest(
        string $name
    ): Request {

        $resourcePath = '/rest/asset/v1/smartCampaign/byName.json';

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'GET',
            $operationHost . $resourcePath,
            // Query.
            [
                'name' => ObjectSerializer::toQueryValue($name),
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for getSmartListBySmartCampaignIdUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function getSmartListBySmartCampaignIdUsingGETHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartListResponseWithRules::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Smart List by Smart Campaign Id
     *
     * @param int $id
     *   Id for the smart campaign containing smart list to retrieve
     * @param bool|null $include_rules
     *   Set true to populate smart list rules.  Default false
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartListResponseWithRules
     */
    public function getSmartListBySmartCampaignIdUsingGET(
        int $id,
        bool $include_rules = null
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartListResponseWithRules {
        list($response) = $this->getSmartListBySmartCampaignIdUsingGETWithHttpInfo($id, $include_rules);
        return $response;
    }

    /**
     * Get Smart List by Smart Campaign Id
     *
     * @param int $id
     *   Id for the smart campaign containing smart list to retrieve
     * @param bool|null $include_rules
     *   Set true to populate smart list rules.  Default false
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartListResponseWithRules,
     *     int,
     *     array<array<string>>
     * }
     */
    public function getSmartListBySmartCampaignIdUsingGETWithHttpInfo(
        int $id,
        bool $include_rules = null
    ): array {
        $request = $this->getSmartListBySmartCampaignIdUsingGETRequest($id, $include_rules);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartListResponseWithRules::class
            );
        } catch (ApiException $e) {
            throw $this->getSmartListBySmartCampaignIdUsingGETHandleException($e);
        }
    }

    /**
     * Get Smart List by Smart Campaign Id
     *
     * @param int $id
     *   Id for the smart campaign containing smart list to retrieve
     * @param bool|null $include_rules
     *   Set true to populate smart list rules.  Default false
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSmartListBySmartCampaignIdUsingGETAsync(
        int $id,
        bool $include_rules = null
    ): PromiseInterface {
        return $this->getSmartListBySmartCampaignIdUsingGETAsyncWithHttpInfo($id, $include_rules)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartListResponseWithRules {
                    return $response[0];
                }
            );
    }

    /**
     * Get Smart List by Smart Campaign Id
     *
     * @param int $id
     *   Id for the smart campaign containing smart list to retrieve
     * @param bool|null $include_rules
     *   Set true to populate smart list rules.  Default false
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSmartListBySmartCampaignIdUsingGETAsyncWithHttpInfo(
        int $id,
        bool $include_rules = null
    ): PromiseInterface {
        $request = $this->getSmartListBySmartCampaignIdUsingGETRequest($id, $include_rules);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartListResponseWithRules::class,
            [$this, 'getSmartListBySmartCampaignIdUsingGETHandleException']
        );
    }

    /**
     * Create request for operation 'getSmartListBySmartCampaignIdUsingGET'
     *
     * @param int $id
     *   Id for the smart campaign containing smart list to retrieve
     * @param bool|null $include_rules
     *   Set true to populate smart list rules.  Default false
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSmartListBySmartCampaignIdUsingGETRequest(
        int $id,
        bool $include_rules = null
    ): Request {

        $resourcePath = '/rest/asset/v1/smartCampaign/{id}/smartList.json';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'GET',
            $operationHost . $resourcePath,
            // Query.
            [
                'includeRules' => isset($include_rules) ? ObjectSerializer::toQueryValue($include_rules) : null,
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for updateSmartCampaignUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function updateSmartCampaignUsingPOSTHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartCampaignResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Update Smart Campaign
     *
     * @param int $id
     *   Id for the smart campaign
     * @param \NecLimDul\MarketoRest\Asset\Model\UpdateSmartCampaignRequest $update_smart_campaign_request
     *   updateSmartCampaignRequest
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartCampaignResponse
     */
    public function updateSmartCampaignUsingPOST(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\UpdateSmartCampaignRequest $update_smart_campaign_request
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartCampaignResponse {
        list($response) = $this->updateSmartCampaignUsingPOSTWithHttpInfo($id, $update_smart_campaign_request);
        return $response;
    }

    /**
     * Update Smart Campaign
     *
     * @param int $id
     *   Id for the smart campaign
     * @param \NecLimDul\MarketoRest\Asset\Model\UpdateSmartCampaignRequest $update_smart_campaign_request
     *   updateSmartCampaignRequest
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartCampaignResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function updateSmartCampaignUsingPOSTWithHttpInfo(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\UpdateSmartCampaignRequest $update_smart_campaign_request
    ): array {
        $request = $this->updateSmartCampaignUsingPOSTRequest($id, $update_smart_campaign_request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartCampaignResponse::class
            );
        } catch (ApiException $e) {
            throw $this->updateSmartCampaignUsingPOSTHandleException($e);
        }
    }

    /**
     * Update Smart Campaign
     *
     * @param int $id
     *   Id for the smart campaign
     * @param \NecLimDul\MarketoRest\Asset\Model\UpdateSmartCampaignRequest $update_smart_campaign_request
     *   updateSmartCampaignRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSmartCampaignUsingPOSTAsync(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\UpdateSmartCampaignRequest $update_smart_campaign_request
    ): PromiseInterface {
        return $this->updateSmartCampaignUsingPOSTAsyncWithHttpInfo($id, $update_smart_campaign_request)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartCampaignResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Update Smart Campaign
     *
     * @param int $id
     *   Id for the smart campaign
     * @param \NecLimDul\MarketoRest\Asset\Model\UpdateSmartCampaignRequest $update_smart_campaign_request
     *   updateSmartCampaignRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSmartCampaignUsingPOSTAsyncWithHttpInfo(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\UpdateSmartCampaignRequest $update_smart_campaign_request
    ): PromiseInterface {
        $request = $this->updateSmartCampaignUsingPOSTRequest($id, $update_smart_campaign_request);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfSmartCampaignResponse::class,
            [$this, 'updateSmartCampaignUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'updateSmartCampaignUsingPOST'
     *
     * @param int $id
     *   Id for the smart campaign
     * @param \NecLimDul\MarketoRest\Asset\Model\UpdateSmartCampaignRequest $update_smart_campaign_request
     *   updateSmartCampaignRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateSmartCampaignUsingPOSTRequest(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\UpdateSmartCampaignRequest $update_smart_campaign_request
    ): Request {

        $resourcePath = '/rest/asset/v1/smartCampaign/{id}.json';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            $update_smart_campaign_request
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array<string, mixed> of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    /**
     * Make a request.
     *
     * @param \GuzzleHttp\Psr7\Request $request An initialized request object.
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @return \Psr\Http\Message\ResponseInterface
     */
    protected function makeRequest(Request $request)
    {
        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            $response = $e->getResponse();
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                (int) $e->getCode(),
                $response ? $response->getHeaders() : [],
                $response ? (string) $response->getBody() : null
            );
        }

        $statusCode = $response->getStatusCode();
        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    (string) $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                (string) $response->getBody()
            );
        }
        return $response;
    }

    /**
     * Make an async request.
     *
     * @param \GuzzleHttp\Psr7\Request $request An initialized request object.
     * @param class-string $returnType The return type.
     * @param callable $exceptionHandler A callback to process HTTP errors.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @return \GuzzleHttp\Promise\PromiseInterface A promise that will return a processed response.
     */
    protected function makeAsyncRequest(Request $request, string $returnType, callable $exceptionHandler)
    {
        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function (ResponseInterface $response) use ($returnType) {
                    return $this->responseToReturn($response, $returnType);
                },
                function (RequestException $exception) use ($exceptionHandler) {
                    $response = $exception->getResponse();
                    $e = new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : [],
                        $response ? (string) $response->getBody() : null
                    );
                    throw $exceptionHandler($e);
                }
            );
    }

    /**
     * Convert a response to a return standard return array.
     *
     * @template T
     * @param \Psr\Http\Message\ResponseInterface $response A response from a request with a serialized body.
     * @param string $returnType The primary return type.
     * @phpstan-param class-string<T> $returnType
     *
     * @return array structured array or response and http info.
     * @phpstan-return array{T, int, array<array<string>>}
     */
    protected function responseToReturn(ResponseInterface $response, string $returnType)
    {
        return [
            $this->deserializeResponseBody($response->getBody(), $returnType),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    /**
     * Deserialize a response body.
     *
     * @template T
     * @param mixed $responseBody The response body.
     * @param string $returnType The return type.
     * @param array<string, string[]> $headers A list of headers from the response.
     * @phpstan-param class-string<T> $returnType
     *
     * @return mixed Either a string or a stream to be passed to a file object.
     * @phpstan-return T
     * @psalm-return T
     */
    private function deserializeResponseBody($responseBody, string $returnType, array $headers = [])
    {
        return ObjectSerializer::deserialize(
            $returnType === \SplFileObject::class ? $responseBody : (string) $responseBody,
            $returnType,
            $headers
        );
    }
}
