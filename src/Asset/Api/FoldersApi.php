<?php
/**
 * FoldersApi
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Asset
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketo Rest API
 *
 * Marketo Rest API
 *
 * OpenAPI spec version: 1.0
 * Contact: developerfeedback@marketo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.26
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace NecLimDul\MarketoRest\Asset\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Query;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\ResponseInterface;
use NecLimDul\MarketoRest\Asset\ApiException;
use NecLimDul\MarketoRest\Asset\Configuration;
use NecLimDul\MarketoRest\Asset\HeaderSelector;
use NecLimDul\MarketoRest\Asset\ObjectSerializer;

/**
 * FoldersApi Class Doc Comment
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Asset
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FoldersApi
{

    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createFolderUsingPOST
     *
     * Create Folder
     *
     * @param  \NecLimDul\MarketoRest\Asset\Model\CreateFolderRequest $create_folder_request createFolderRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfFolderResponse
     */
    public function createFolderUsingPOST($create_folder_request)
    {
        list($response) = $this->createFolderUsingPOSTWithHttpInfo($create_folder_request);
        return $response;
    }

    /**
     * Operation createFolderUsingPOSTWithHttpInfo
     *
     * Create Folder
     *
     * @param  \NecLimDul\MarketoRest\Asset\Model\CreateFolderRequest $create_folder_request createFolderRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfFolderResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createFolderUsingPOSTWithHttpInfo($create_folder_request)
    {
        $request = $this->createFolderUsingPOSTRequest($create_folder_request);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfFolderResponse');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfFolderResponse');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Asset\Model\ResponseOfFolderResponse',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createFolderUsingPOSTAsync
     *
     * Create Folder
     *
     * @param  \NecLimDul\MarketoRest\Asset\Model\CreateFolderRequest $create_folder_request createFolderRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createFolderUsingPOSTAsync($create_folder_request)
    {
        return $this->createFolderUsingPOSTAsyncWithHttpInfo($create_folder_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createFolderUsingPOSTAsyncWithHttpInfo
     *
     * Create Folder
     *
     * @param  \NecLimDul\MarketoRest\Asset\Model\CreateFolderRequest $create_folder_request createFolderRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createFolderUsingPOSTAsyncWithHttpInfo($create_folder_request)
    {
        $request = $this->createFolderUsingPOSTRequest($create_folder_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfFolderResponse');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'createFolderUsingPOST'
     *
     * @param  \NecLimDul\MarketoRest\Asset\Model\CreateFolderRequest $create_folder_request createFolderRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createFolderUsingPOSTRequest($create_folder_request)
    {
        // Verify the required parameter 'create_folder_request' is set.
        if ($create_folder_request === null || (is_array($create_folder_request) && empty($create_folder_request))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_folder_request when calling createFolderUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/folders.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );
        if ($headers['Content-Type'] === 'application/json') {
          $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($create_folder_request));
        }
        else {
          $httpBody = (string) $create_folder_request;
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteFolderUsingPOST
     *
     * Delete Folder
     *
     * @param  int $id Id of the folder to delete (required)
     * @param  string $type type (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse
     */
    public function deleteFolderUsingPOST($id, $type)
    {
        list($response) = $this->deleteFolderUsingPOSTWithHttpInfo($id, $type);
        return $response;
    }

    /**
     * Operation deleteFolderUsingPOSTWithHttpInfo
     *
     * Delete Folder
     *
     * @param  int $id Id of the folder to delete (required)
     * @param  string $type type (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteFolderUsingPOSTWithHttpInfo($id, $type)
    {
        $request = $this->deleteFolderUsingPOSTRequest($id, $type);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteFolderUsingPOSTAsync
     *
     * Delete Folder
     *
     * @param  int $id Id of the folder to delete (required)
     * @param  string $type type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFolderUsingPOSTAsync($id, $type)
    {
        return $this->deleteFolderUsingPOSTAsyncWithHttpInfo($id, $type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteFolderUsingPOSTAsyncWithHttpInfo
     *
     * Delete Folder
     *
     * @param  int $id Id of the folder to delete (required)
     * @param  string $type type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFolderUsingPOSTAsyncWithHttpInfo($id, $type)
    {
        $request = $this->deleteFolderUsingPOSTRequest($id, $type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteFolderUsingPOST'
     *
     * @param  int $id Id of the folder to delete (required)
     * @param  string $type type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteFolderUsingPOSTRequest($id, $type)
    {
        // Verify the required parameter 'id' is set.
        if ($id === null || (is_array($id) && empty($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteFolderUsingPOST'
            );
        }
        // Verify the required parameter 'type' is set.
        if ($type === null || (is_array($type) && empty($type))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling deleteFolderUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/folder/{id}/delete.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        // Form parameters.
        /** @var string[][] $formParams */
        $formParams = [];
        $multipart = false;
        $formParams['type'] = ObjectSerializer::toFormValue($type);
        // Remove any null (optional values).
        $formParams = array_filter($formParams, function($v) { return $v !== null; });
        /**
         * @psalm-suppress RedundantCondition,TypeDoesNotContainType
         * @phpstan-ignore-next-line
         */
        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }
        if (!empty($formParams)) {
            /**
             * @psalm-suppress RedundantCondition,TypeDoesNotContainType
             * @phpstan-ignore-next-line
             */
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    foreach ((array) $formParamValue as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFolderByIdUsingGET
     *
     * Get Folder by Id
     *
     * @param  int $id Id of the folder to retrieve (required)
     * @param  string $type Type of folder.  &#39;Folder&#39; or &#39;Program&#39; (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfFolderResponse
     */
    public function getFolderByIdUsingGET($id, $type)
    {
        list($response) = $this->getFolderByIdUsingGETWithHttpInfo($id, $type);
        return $response;
    }

    /**
     * Operation getFolderByIdUsingGETWithHttpInfo
     *
     * Get Folder by Id
     *
     * @param  int $id Id of the folder to retrieve (required)
     * @param  string $type Type of folder.  &#39;Folder&#39; or &#39;Program&#39; (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfFolderResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFolderByIdUsingGETWithHttpInfo($id, $type)
    {
        $request = $this->getFolderByIdUsingGETRequest($id, $type);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfFolderResponse');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfFolderResponse');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Asset\Model\ResponseOfFolderResponse',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFolderByIdUsingGETAsync
     *
     * Get Folder by Id
     *
     * @param  int $id Id of the folder to retrieve (required)
     * @param  string $type Type of folder.  &#39;Folder&#39; or &#39;Program&#39; (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFolderByIdUsingGETAsync($id, $type)
    {
        return $this->getFolderByIdUsingGETAsyncWithHttpInfo($id, $type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFolderByIdUsingGETAsyncWithHttpInfo
     *
     * Get Folder by Id
     *
     * @param  int $id Id of the folder to retrieve (required)
     * @param  string $type Type of folder.  &#39;Folder&#39; or &#39;Program&#39; (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFolderByIdUsingGETAsyncWithHttpInfo($id, $type)
    {
        $request = $this->getFolderByIdUsingGETRequest($id, $type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfFolderResponse');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFolderByIdUsingGET'
     *
     * @param  int $id Id of the folder to retrieve (required)
     * @param  string $type Type of folder.  &#39;Folder&#39; or &#39;Program&#39; (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getFolderByIdUsingGETRequest($id, $type)
    {
        // Verify the required parameter 'id' is set.
        if ($id === null || (is_array($id) && empty($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getFolderByIdUsingGET'
            );
        }
        // Verify the required parameter 'type' is set.
        if ($type === null || (is_array($type) && empty($type))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling getFolderByIdUsingGET'
            );
        }

        $resourcePath = '/rest/asset/v1/folder/{id}.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Query parameters.
        $queryParams['type'] = $type;
        // Remove any null (optional values).
        $queryParams = array_filter($queryParams, function($v) { return $v !== null; });

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFolderByNameUsingGET
     *
     * Get Folder by Name
     *
     * @param  string $name Name of the folder.  Not applicable for Programs (required)
     * @param  string $type Type of folder.  &#39;Folder&#39; or &#39;Program&#39; (optional)
     * @param  string $root Parent folder reference (optional)
     * @param  string $work_space Name of the workspace (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfFolderResponse
     */
    public function getFolderByNameUsingGET($name, $type = null, $root = null, $work_space = null)
    {
        list($response) = $this->getFolderByNameUsingGETWithHttpInfo($name, $type, $root, $work_space);
        return $response;
    }

    /**
     * Operation getFolderByNameUsingGETWithHttpInfo
     *
     * Get Folder by Name
     *
     * @param  string $name Name of the folder.  Not applicable for Programs (required)
     * @param  string $type Type of folder.  &#39;Folder&#39; or &#39;Program&#39; (optional)
     * @param  string $root Parent folder reference (optional)
     * @param  string $work_space Name of the workspace (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfFolderResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFolderByNameUsingGETWithHttpInfo($name, $type = null, $root = null, $work_space = null)
    {
        $request = $this->getFolderByNameUsingGETRequest($name, $type, $root, $work_space);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfFolderResponse');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfFolderResponse');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Asset\Model\ResponseOfFolderResponse',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFolderByNameUsingGETAsync
     *
     * Get Folder by Name
     *
     * @param  string $name Name of the folder.  Not applicable for Programs (required)
     * @param  string $type Type of folder.  &#39;Folder&#39; or &#39;Program&#39; (optional)
     * @param  string $root Parent folder reference (optional)
     * @param  string $work_space Name of the workspace (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFolderByNameUsingGETAsync($name, $type = null, $root = null, $work_space = null)
    {
        return $this->getFolderByNameUsingGETAsyncWithHttpInfo($name, $type, $root, $work_space)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFolderByNameUsingGETAsyncWithHttpInfo
     *
     * Get Folder by Name
     *
     * @param  string $name Name of the folder.  Not applicable for Programs (required)
     * @param  string $type Type of folder.  &#39;Folder&#39; or &#39;Program&#39; (optional)
     * @param  string $root Parent folder reference (optional)
     * @param  string $work_space Name of the workspace (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFolderByNameUsingGETAsyncWithHttpInfo($name, $type = null, $root = null, $work_space = null)
    {
        $request = $this->getFolderByNameUsingGETRequest($name, $type, $root, $work_space);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfFolderResponse');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFolderByNameUsingGET'
     *
     * @param  string $name Name of the folder.  Not applicable for Programs (required)
     * @param  string $type Type of folder.  &#39;Folder&#39; or &#39;Program&#39; (optional)
     * @param  string $root Parent folder reference (optional)
     * @param  string $work_space Name of the workspace (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getFolderByNameUsingGETRequest($name, $type = null, $root = null, $work_space = null)
    {
        // Verify the required parameter 'name' is set.
        if ($name === null || (is_array($name) && empty($name))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling getFolderByNameUsingGET'
            );
        }

        $resourcePath = '/rest/asset/v1/folder/byName.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Query parameters.
        $queryParams['name'] = $name;
        $queryParams['type'] = $type;
        $queryParams['root'] = $root;
        $queryParams['workSpace'] = $work_space;
        // Remove any null (optional values).
        $queryParams = array_filter($queryParams, function($v) { return $v !== null; });
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFolderContentUsingGET
     *
     * Get Folder Contents
     *
     * @param  int $id Id of the folder to retrieve (required)
     * @param  string $type Type of folder.  &#39;Folder&#39; or &#39;Program&#39;.  Default is &#39;Folder&#39; (required)
     * @param  int $max_return Maximum number of channels to return.  Max 200, default 20 (optional)
     * @param  int $offset Integer offset for paging (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfFolderContentResponse
     */
    public function getFolderContentUsingGET($id, $type, $max_return = null, $offset = null)
    {
        list($response) = $this->getFolderContentUsingGETWithHttpInfo($id, $type, $max_return, $offset);
        return $response;
    }

    /**
     * Operation getFolderContentUsingGETWithHttpInfo
     *
     * Get Folder Contents
     *
     * @param  int $id Id of the folder to retrieve (required)
     * @param  string $type Type of folder.  &#39;Folder&#39; or &#39;Program&#39;.  Default is &#39;Folder&#39; (required)
     * @param  int $max_return Maximum number of channels to return.  Max 200, default 20 (optional)
     * @param  int $offset Integer offset for paging (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfFolderContentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFolderContentUsingGETWithHttpInfo($id, $type, $max_return = null, $offset = null)
    {
        $request = $this->getFolderContentUsingGETRequest($id, $type, $max_return, $offset);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfFolderContentResponse');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfFolderContentResponse');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Asset\Model\ResponseOfFolderContentResponse',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFolderContentUsingGETAsync
     *
     * Get Folder Contents
     *
     * @param  int $id Id of the folder to retrieve (required)
     * @param  string $type Type of folder.  &#39;Folder&#39; or &#39;Program&#39;.  Default is &#39;Folder&#39; (required)
     * @param  int $max_return Maximum number of channels to return.  Max 200, default 20 (optional)
     * @param  int $offset Integer offset for paging (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFolderContentUsingGETAsync($id, $type, $max_return = null, $offset = null)
    {
        return $this->getFolderContentUsingGETAsyncWithHttpInfo($id, $type, $max_return, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFolderContentUsingGETAsyncWithHttpInfo
     *
     * Get Folder Contents
     *
     * @param  int $id Id of the folder to retrieve (required)
     * @param  string $type Type of folder.  &#39;Folder&#39; or &#39;Program&#39;.  Default is &#39;Folder&#39; (required)
     * @param  int $max_return Maximum number of channels to return.  Max 200, default 20 (optional)
     * @param  int $offset Integer offset for paging (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFolderContentUsingGETAsyncWithHttpInfo($id, $type, $max_return = null, $offset = null)
    {
        $request = $this->getFolderContentUsingGETRequest($id, $type, $max_return, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfFolderContentResponse');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFolderContentUsingGET'
     *
     * @param  int $id Id of the folder to retrieve (required)
     * @param  string $type Type of folder.  &#39;Folder&#39; or &#39;Program&#39;.  Default is &#39;Folder&#39; (required)
     * @param  int $max_return Maximum number of channels to return.  Max 200, default 20 (optional)
     * @param  int $offset Integer offset for paging (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getFolderContentUsingGETRequest($id, $type, $max_return = null, $offset = null)
    {
        // Verify the required parameter 'id' is set.
        if ($id === null || (is_array($id) && empty($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getFolderContentUsingGET'
            );
        }
        // Verify the required parameter 'type' is set.
        if ($type === null || (is_array($type) && empty($type))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling getFolderContentUsingGET'
            );
        }

        $resourcePath = '/rest/asset/v1/folder/{id}/content.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Query parameters.
        $queryParams['maxReturn'] = $max_return;
        $queryParams['offset'] = $offset;
        $queryParams['type'] = $type;
        // Remove any null (optional values).
        $queryParams = array_filter($queryParams, function($v) { return $v !== null; });

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFolderUsingGET
     *
     * Get Folders
     *
     * @param  string $root Parent folder reference (optional)
     * @param  int $max_depth Maximum folder depth to traverse, Default 2 (optional)
     * @param  int $max_return Maximum number of folders to return. Default 20, maximum 200 (optional)
     * @param  int $offset Integer offset for paging.  Default 0 (optional)
     * @param  string $work_space Name of the workspace (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfFolderResponse
     */
    public function getFolderUsingGET($root = null, $max_depth = null, $max_return = null, $offset = null, $work_space = null)
    {
        list($response) = $this->getFolderUsingGETWithHttpInfo($root, $max_depth, $max_return, $offset, $work_space);
        return $response;
    }

    /**
     * Operation getFolderUsingGETWithHttpInfo
     *
     * Get Folders
     *
     * @param  string $root Parent folder reference (optional)
     * @param  int $max_depth Maximum folder depth to traverse, Default 2 (optional)
     * @param  int $max_return Maximum number of folders to return. Default 20, maximum 200 (optional)
     * @param  int $offset Integer offset for paging.  Default 0 (optional)
     * @param  string $work_space Name of the workspace (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfFolderResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFolderUsingGETWithHttpInfo($root = null, $max_depth = null, $max_return = null, $offset = null, $work_space = null)
    {
        $request = $this->getFolderUsingGETRequest($root, $max_depth, $max_return, $offset, $work_space);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfFolderResponse');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfFolderResponse');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Asset\Model\ResponseOfFolderResponse',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFolderUsingGETAsync
     *
     * Get Folders
     *
     * @param  string $root Parent folder reference (optional)
     * @param  int $max_depth Maximum folder depth to traverse, Default 2 (optional)
     * @param  int $max_return Maximum number of folders to return. Default 20, maximum 200 (optional)
     * @param  int $offset Integer offset for paging.  Default 0 (optional)
     * @param  string $work_space Name of the workspace (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFolderUsingGETAsync($root = null, $max_depth = null, $max_return = null, $offset = null, $work_space = null)
    {
        return $this->getFolderUsingGETAsyncWithHttpInfo($root, $max_depth, $max_return, $offset, $work_space)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFolderUsingGETAsyncWithHttpInfo
     *
     * Get Folders
     *
     * @param  string $root Parent folder reference (optional)
     * @param  int $max_depth Maximum folder depth to traverse, Default 2 (optional)
     * @param  int $max_return Maximum number of folders to return. Default 20, maximum 200 (optional)
     * @param  int $offset Integer offset for paging.  Default 0 (optional)
     * @param  string $work_space Name of the workspace (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFolderUsingGETAsyncWithHttpInfo($root = null, $max_depth = null, $max_return = null, $offset = null, $work_space = null)
    {
        $request = $this->getFolderUsingGETRequest($root, $max_depth, $max_return, $offset, $work_space);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfFolderResponse');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFolderUsingGET'
     *
     * @param  string $root Parent folder reference (optional)
     * @param  int $max_depth Maximum folder depth to traverse, Default 2 (optional)
     * @param  int $max_return Maximum number of folders to return. Default 20, maximum 200 (optional)
     * @param  int $offset Integer offset for paging.  Default 0 (optional)
     * @param  string $work_space Name of the workspace (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getFolderUsingGETRequest($root = null, $max_depth = null, $max_return = null, $offset = null, $work_space = null)
    {

        $resourcePath = '/rest/asset/v1/folders.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Query parameters.
        $queryParams['root'] = $root;
        $queryParams['maxDepth'] = $max_depth;
        $queryParams['maxReturn'] = $max_return;
        $queryParams['offset'] = $offset;
        $queryParams['workSpace'] = $work_space;
        // Remove any null (optional values).
        $queryParams = array_filter($queryParams, function($v) { return $v !== null; });
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateFolderUsingPOST
     *
     * Update Folder Metadata
     *
     * @param  int $id Id of the folder to update (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\UpdateFolderRequest $update_folder_request updateFolderRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfFolderResponse
     */
    public function updateFolderUsingPOST($id, $update_folder_request)
    {
        list($response) = $this->updateFolderUsingPOSTWithHttpInfo($id, $update_folder_request);
        return $response;
    }

    /**
     * Operation updateFolderUsingPOSTWithHttpInfo
     *
     * Update Folder Metadata
     *
     * @param  int $id Id of the folder to update (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\UpdateFolderRequest $update_folder_request updateFolderRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfFolderResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateFolderUsingPOSTWithHttpInfo($id, $update_folder_request)
    {
        $request = $this->updateFolderUsingPOSTRequest($id, $update_folder_request);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfFolderResponse');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfFolderResponse');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Asset\Model\ResponseOfFolderResponse',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateFolderUsingPOSTAsync
     *
     * Update Folder Metadata
     *
     * @param  int $id Id of the folder to update (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\UpdateFolderRequest $update_folder_request updateFolderRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateFolderUsingPOSTAsync($id, $update_folder_request)
    {
        return $this->updateFolderUsingPOSTAsyncWithHttpInfo($id, $update_folder_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateFolderUsingPOSTAsyncWithHttpInfo
     *
     * Update Folder Metadata
     *
     * @param  int $id Id of the folder to update (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\UpdateFolderRequest $update_folder_request updateFolderRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateFolderUsingPOSTAsyncWithHttpInfo($id, $update_folder_request)
    {
        $request = $this->updateFolderUsingPOSTRequest($id, $update_folder_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfFolderResponse');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateFolderUsingPOST'
     *
     * @param  int $id Id of the folder to update (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\UpdateFolderRequest $update_folder_request updateFolderRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateFolderUsingPOSTRequest($id, $update_folder_request)
    {
        // Verify the required parameter 'id' is set.
        if ($id === null || (is_array($id) && empty($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateFolderUsingPOST'
            );
        }
        // Verify the required parameter 'update_folder_request' is set.
        if ($update_folder_request === null || (is_array($update_folder_request) && empty($update_folder_request))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_folder_request when calling updateFolderUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/folder/{id}.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );
        if ($headers['Content-Type'] === 'application/json') {
          $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($update_folder_request));
        }
        else {
          $httpBody = (string) $update_folder_request;
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    /**
     * Make a request.
     *
     * @param \GuzzleHttp\Psr7\Request $request
     *   An initialized request object.
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @return \Psr\Http\Message\ResponseInterface
     */
    protected function makeRequest(Request $request) {
        $options = $this->createHttpClientOption();
        try {
           $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            $response = $e->getResponse();
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                (int) $e->getCode(),
                $response ? $response->getHeaders() : null,
                $response ? (string) $response->getBody() : null
            );
        }

        $statusCode = $response->getStatusCode();
        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    (string) $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                (string) $response->getBody()
            );
        }
        return $response;
    }

    /**
     * Convert a response to a return standard return array.
     *
     * @param \Psr\Http\Message\ResponseInterface $response
     *   A response from a request with a serialized body.
     * @param string $returnType
     *   The return type.
     *
     * @return array
     */
    protected function responseToReturn(ResponseInterface $response, string $returnType) {
        return [
            $this->deserializeResponseBody($response->getBody(), $returnType),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    /**
     * Deserialize a response body.
     *
     * @param mixed $responseBody
     *   The response body.
     * @param string $returnType
     *   The return type.
     * @param array|null $headers
     *   The a list of headers from the response.
     * @return mixed
     *   Either a string or a stream to be passed to a file object.
     */
    protected function deserializeResponseBody($responseBody, $returnType, $headers = [])
    {
        return ObjectSerializer::deserialize(
            $returnType === '\SplFileObject' ? $responseBody : (string) $responseBody,
            $returnType,
            $headers
        );
    }

}
