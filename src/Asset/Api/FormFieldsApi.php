<?php
/**
 * FormFieldsApi
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Asset
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Marketo Rest API
 *
 * Marketo Rest API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: developerfeedback@marketo.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace NecLimDul\MarketoRest\Asset\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Query;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\ResponseInterface;
use NecLimDul\MarketoRest\Asset\ApiException;
use NecLimDul\MarketoRest\Asset\Configuration;
use NecLimDul\MarketoRest\Asset\HeaderSelector;
use NecLimDul\MarketoRest\Asset\ObjectSerializer;

/**
 * FormFieldsApi Class Doc Comment
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Asset
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class FormFieldsApi
{

    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addFieldSetUsingPOST
     *
     * Add Fieldset to Form
     *
     * @param  int $id id (required)
     * @param  string $label Label of the fieldset (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormFieldResponse
     */
    public function addFieldSetUsingPOST($id, $label)
    {
        list($response) = $this->addFieldSetUsingPOSTWithHttpInfo($id, $label);
        return $response;
    }

    /**
     * Operation addFieldSetUsingPOSTWithHttpInfo
     *
     * Add Fieldset to Form
     *
     * @param  int $id id (required)
     * @param  string $label Label of the fieldset (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormFieldResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function addFieldSetUsingPOSTWithHttpInfo($id, $label)
    {
        $request = $this->addFieldSetUsingPOSTRequest($id, $label);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormFieldResponse');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormFieldResponse');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormFieldResponse',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addFieldSetUsingPOSTAsync
     *
     * Add Fieldset to Form
     *
     * @param  int $id id (required)
     * @param  string $label Label of the fieldset (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addFieldSetUsingPOSTAsync($id, $label)
    {
        return $this->addFieldSetUsingPOSTAsyncWithHttpInfo($id, $label)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addFieldSetUsingPOSTAsyncWithHttpInfo
     *
     * Add Fieldset to Form
     *
     * @param  int $id id (required)
     * @param  string $label Label of the fieldset (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addFieldSetUsingPOSTAsyncWithHttpInfo($id, $label)
    {
        $request = $this->addFieldSetUsingPOSTRequest($id, $label);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormFieldResponse');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'addFieldSetUsingPOST'
     *
     * @param  int $id id (required)
     * @param  string $label Label of the fieldset (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addFieldSetUsingPOSTRequest($id, $label)
    {
        // Verify the required parameter 'id' is set.
        if ($id === null || (is_array($id) && empty($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling addFieldSetUsingPOST'
            );
        }
        // Verify the required parameter 'label' is set.
        if ($label === null || (is_array($label) && empty($label))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $label when calling addFieldSetUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/form/{id}/fieldSet.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        // Form parameters.
        /** @var string[][] $formParams */
        $formParams = [];
        $multipart = false;
        $formParams['label'] = ObjectSerializer::toFormValue($label);
        // Remove any null (optional values).
        $formParams = array_filter($formParams, function($v) { return $v !== null; });
        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }
        if (!empty($formParams)) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    foreach ((array) $formParamValue as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addFieldToAFormUsingPOST
     *
     * Add Field to Form
     *
     * @param  int $id id (required)
     * @param  string $field_id Id of the field (required)
     * @param  int $blank_fields Number of blank fields to show when progressive profiling is enabled (optional)
     * @param  string $default_value Optional default value for the field (optional)
     * @param  int $field_width Width of the input or select element (optional)
     * @param  bool $form_prefill Whether the field should prefill.  Default true (optional)
     * @param  bool $is_sensitive Whether the field is marked as sensitive.  Default false (optional)
     * @param  string $hint_text Hint text for the field (optional)
     * @param  bool $initially_checked Whether the field should be checked upon loading.  Default false (optional)
     * @param  string $instructions Instructions for the field (optional)
     * @param  string $label Label of the field (optional)
     * @param  bool $label_to_right Whether the field label should be displayed to the right of the input/select element. Default false (optional)
     * @param  int $label_width Width of the field label element (optional)
     * @param  string $mask_input Optional input mask for the field (optional)
     * @param  int $max_length Maximum length for text type fields (optional)
     * @param  float $max_value Maximum value accepted by the field (optional)
     * @param  float $min_value Minimum value accepted by the field (optional)
     * @param  bool $multi_select Whether the field should allow multiple selections. Default false (optional)
     * @param  bool $required Whether the field is required to submit the form.  Default false (optional)
     * @param  string $validation_message Validation message to display on failed validation (optional)
     * @param  string $values Comma-separated list of accepted values for the field.  Only for select-field types (optional)
     * @param  int $visible_lines Number of lines to display for the field element (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormFieldResponse
     */
    public function addFieldToAFormUsingPOST($id, $field_id, $blank_fields = null, $default_value = null, $field_width = null, $form_prefill = null, $is_sensitive = null, $hint_text = null, $initially_checked = null, $instructions = null, $label = null, $label_to_right = null, $label_width = null, $mask_input = null, $max_length = null, $max_value = null, $min_value = null, $multi_select = null, $required = null, $validation_message = null, $values = null, $visible_lines = null)
    {
        list($response) = $this->addFieldToAFormUsingPOSTWithHttpInfo($id, $field_id, $blank_fields, $default_value, $field_width, $form_prefill, $is_sensitive, $hint_text, $initially_checked, $instructions, $label, $label_to_right, $label_width, $mask_input, $max_length, $max_value, $min_value, $multi_select, $required, $validation_message, $values, $visible_lines);
        return $response;
    }

    /**
     * Operation addFieldToAFormUsingPOSTWithHttpInfo
     *
     * Add Field to Form
     *
     * @param  int $id id (required)
     * @param  string $field_id Id of the field (required)
     * @param  int $blank_fields Number of blank fields to show when progressive profiling is enabled (optional)
     * @param  string $default_value Optional default value for the field (optional)
     * @param  int $field_width Width of the input or select element (optional)
     * @param  bool $form_prefill Whether the field should prefill.  Default true (optional)
     * @param  bool $is_sensitive Whether the field is marked as sensitive.  Default false (optional)
     * @param  string $hint_text Hint text for the field (optional)
     * @param  bool $initially_checked Whether the field should be checked upon loading.  Default false (optional)
     * @param  string $instructions Instructions for the field (optional)
     * @param  string $label Label of the field (optional)
     * @param  bool $label_to_right Whether the field label should be displayed to the right of the input/select element. Default false (optional)
     * @param  int $label_width Width of the field label element (optional)
     * @param  string $mask_input Optional input mask for the field (optional)
     * @param  int $max_length Maximum length for text type fields (optional)
     * @param  float $max_value Maximum value accepted by the field (optional)
     * @param  float $min_value Minimum value accepted by the field (optional)
     * @param  bool $multi_select Whether the field should allow multiple selections. Default false (optional)
     * @param  bool $required Whether the field is required to submit the form.  Default false (optional)
     * @param  string $validation_message Validation message to display on failed validation (optional)
     * @param  string $values Comma-separated list of accepted values for the field.  Only for select-field types (optional)
     * @param  int $visible_lines Number of lines to display for the field element (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormFieldResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function addFieldToAFormUsingPOSTWithHttpInfo($id, $field_id, $blank_fields = null, $default_value = null, $field_width = null, $form_prefill = null, $is_sensitive = null, $hint_text = null, $initially_checked = null, $instructions = null, $label = null, $label_to_right = null, $label_width = null, $mask_input = null, $max_length = null, $max_value = null, $min_value = null, $multi_select = null, $required = null, $validation_message = null, $values = null, $visible_lines = null)
    {
        $request = $this->addFieldToAFormUsingPOSTRequest($id, $field_id, $blank_fields, $default_value, $field_width, $form_prefill, $is_sensitive, $hint_text, $initially_checked, $instructions, $label, $label_to_right, $label_width, $mask_input, $max_length, $max_value, $min_value, $multi_select, $required, $validation_message, $values, $visible_lines);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormFieldResponse');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormFieldResponse');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormFieldResponse',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addFieldToAFormUsingPOSTAsync
     *
     * Add Field to Form
     *
     * @param  int $id id (required)
     * @param  string $field_id Id of the field (required)
     * @param  int $blank_fields Number of blank fields to show when progressive profiling is enabled (optional)
     * @param  string $default_value Optional default value for the field (optional)
     * @param  int $field_width Width of the input or select element (optional)
     * @param  bool $form_prefill Whether the field should prefill.  Default true (optional)
     * @param  bool $is_sensitive Whether the field is marked as sensitive.  Default false (optional)
     * @param  string $hint_text Hint text for the field (optional)
     * @param  bool $initially_checked Whether the field should be checked upon loading.  Default false (optional)
     * @param  string $instructions Instructions for the field (optional)
     * @param  string $label Label of the field (optional)
     * @param  bool $label_to_right Whether the field label should be displayed to the right of the input/select element. Default false (optional)
     * @param  int $label_width Width of the field label element (optional)
     * @param  string $mask_input Optional input mask for the field (optional)
     * @param  int $max_length Maximum length for text type fields (optional)
     * @param  float $max_value Maximum value accepted by the field (optional)
     * @param  float $min_value Minimum value accepted by the field (optional)
     * @param  bool $multi_select Whether the field should allow multiple selections. Default false (optional)
     * @param  bool $required Whether the field is required to submit the form.  Default false (optional)
     * @param  string $validation_message Validation message to display on failed validation (optional)
     * @param  string $values Comma-separated list of accepted values for the field.  Only for select-field types (optional)
     * @param  int $visible_lines Number of lines to display for the field element (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addFieldToAFormUsingPOSTAsync($id, $field_id, $blank_fields = null, $default_value = null, $field_width = null, $form_prefill = null, $is_sensitive = null, $hint_text = null, $initially_checked = null, $instructions = null, $label = null, $label_to_right = null, $label_width = null, $mask_input = null, $max_length = null, $max_value = null, $min_value = null, $multi_select = null, $required = null, $validation_message = null, $values = null, $visible_lines = null)
    {
        return $this->addFieldToAFormUsingPOSTAsyncWithHttpInfo($id, $field_id, $blank_fields, $default_value, $field_width, $form_prefill, $is_sensitive, $hint_text, $initially_checked, $instructions, $label, $label_to_right, $label_width, $mask_input, $max_length, $max_value, $min_value, $multi_select, $required, $validation_message, $values, $visible_lines)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addFieldToAFormUsingPOSTAsyncWithHttpInfo
     *
     * Add Field to Form
     *
     * @param  int $id id (required)
     * @param  string $field_id Id of the field (required)
     * @param  int $blank_fields Number of blank fields to show when progressive profiling is enabled (optional)
     * @param  string $default_value Optional default value for the field (optional)
     * @param  int $field_width Width of the input or select element (optional)
     * @param  bool $form_prefill Whether the field should prefill.  Default true (optional)
     * @param  bool $is_sensitive Whether the field is marked as sensitive.  Default false (optional)
     * @param  string $hint_text Hint text for the field (optional)
     * @param  bool $initially_checked Whether the field should be checked upon loading.  Default false (optional)
     * @param  string $instructions Instructions for the field (optional)
     * @param  string $label Label of the field (optional)
     * @param  bool $label_to_right Whether the field label should be displayed to the right of the input/select element. Default false (optional)
     * @param  int $label_width Width of the field label element (optional)
     * @param  string $mask_input Optional input mask for the field (optional)
     * @param  int $max_length Maximum length for text type fields (optional)
     * @param  float $max_value Maximum value accepted by the field (optional)
     * @param  float $min_value Minimum value accepted by the field (optional)
     * @param  bool $multi_select Whether the field should allow multiple selections. Default false (optional)
     * @param  bool $required Whether the field is required to submit the form.  Default false (optional)
     * @param  string $validation_message Validation message to display on failed validation (optional)
     * @param  string $values Comma-separated list of accepted values for the field.  Only for select-field types (optional)
     * @param  int $visible_lines Number of lines to display for the field element (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addFieldToAFormUsingPOSTAsyncWithHttpInfo($id, $field_id, $blank_fields = null, $default_value = null, $field_width = null, $form_prefill = null, $is_sensitive = null, $hint_text = null, $initially_checked = null, $instructions = null, $label = null, $label_to_right = null, $label_width = null, $mask_input = null, $max_length = null, $max_value = null, $min_value = null, $multi_select = null, $required = null, $validation_message = null, $values = null, $visible_lines = null)
    {
        $request = $this->addFieldToAFormUsingPOSTRequest($id, $field_id, $blank_fields, $default_value, $field_width, $form_prefill, $is_sensitive, $hint_text, $initially_checked, $instructions, $label, $label_to_right, $label_width, $mask_input, $max_length, $max_value, $min_value, $multi_select, $required, $validation_message, $values, $visible_lines);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormFieldResponse');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'addFieldToAFormUsingPOST'
     *
     * @param  int $id id (required)
     * @param  string $field_id Id of the field (required)
     * @param  int $blank_fields Number of blank fields to show when progressive profiling is enabled (optional)
     * @param  string $default_value Optional default value for the field (optional)
     * @param  int $field_width Width of the input or select element (optional)
     * @param  bool $form_prefill Whether the field should prefill.  Default true (optional)
     * @param  bool $is_sensitive Whether the field is marked as sensitive.  Default false (optional)
     * @param  string $hint_text Hint text for the field (optional)
     * @param  bool $initially_checked Whether the field should be checked upon loading.  Default false (optional)
     * @param  string $instructions Instructions for the field (optional)
     * @param  string $label Label of the field (optional)
     * @param  bool $label_to_right Whether the field label should be displayed to the right of the input/select element. Default false (optional)
     * @param  int $label_width Width of the field label element (optional)
     * @param  string $mask_input Optional input mask for the field (optional)
     * @param  int $max_length Maximum length for text type fields (optional)
     * @param  float $max_value Maximum value accepted by the field (optional)
     * @param  float $min_value Minimum value accepted by the field (optional)
     * @param  bool $multi_select Whether the field should allow multiple selections. Default false (optional)
     * @param  bool $required Whether the field is required to submit the form.  Default false (optional)
     * @param  string $validation_message Validation message to display on failed validation (optional)
     * @param  string $values Comma-separated list of accepted values for the field.  Only for select-field types (optional)
     * @param  int $visible_lines Number of lines to display for the field element (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addFieldToAFormUsingPOSTRequest($id, $field_id, $blank_fields = null, $default_value = null, $field_width = null, $form_prefill = null, $is_sensitive = null, $hint_text = null, $initially_checked = null, $instructions = null, $label = null, $label_to_right = null, $label_width = null, $mask_input = null, $max_length = null, $max_value = null, $min_value = null, $multi_select = null, $required = null, $validation_message = null, $values = null, $visible_lines = null)
    {
        // Verify the required parameter 'id' is set.
        if ($id === null || (is_array($id) && empty($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling addFieldToAFormUsingPOST'
            );
        }
        // Verify the required parameter 'field_id' is set.
        if ($field_id === null || (is_array($field_id) && empty($field_id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $field_id when calling addFieldToAFormUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/form/{id}/fields.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        // Form parameters.
        /** @var string[][] $formParams */
        $formParams = [];
        $multipart = false;
        $formParams['blankFields'] = ObjectSerializer::toFormValue($blank_fields);
        $formParams['defaultValue'] = ObjectSerializer::toFormValue($default_value);
        $formParams['fieldId'] = ObjectSerializer::toFormValue($field_id);
        $formParams['fieldWidth'] = ObjectSerializer::toFormValue($field_width);
        $formParams['formPrefill'] = ObjectSerializer::toFormValue($form_prefill);
        $formParams['isSensitive'] = ObjectSerializer::toFormValue($is_sensitive);
        $formParams['hintText'] = ObjectSerializer::toFormValue($hint_text);
        $formParams['initiallyChecked'] = ObjectSerializer::toFormValue($initially_checked);
        $formParams['instructions'] = ObjectSerializer::toFormValue($instructions);
        $formParams['label'] = ObjectSerializer::toFormValue($label);
        $formParams['labelToRight'] = ObjectSerializer::toFormValue($label_to_right);
        $formParams['labelWidth'] = ObjectSerializer::toFormValue($label_width);
        $formParams['maskInput'] = ObjectSerializer::toFormValue($mask_input);
        $formParams['maxLength'] = ObjectSerializer::toFormValue($max_length);
        $formParams['maxValue'] = ObjectSerializer::toFormValue($max_value);
        $formParams['minValue'] = ObjectSerializer::toFormValue($min_value);
        $formParams['multiSelect'] = ObjectSerializer::toFormValue($multi_select);
        $formParams['required'] = ObjectSerializer::toFormValue($required);
        $formParams['validationMessage'] = ObjectSerializer::toFormValue($validation_message);
        $formParams['values'] = ObjectSerializer::toFormValue($values);
        $formParams['visibleLines'] = ObjectSerializer::toFormValue($visible_lines);
        // Remove any null (optional values).
        $formParams = array_filter($formParams, function($v) { return $v !== null; });
        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }
        if (!empty($formParams)) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    foreach ((array) $formParamValue as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addFormFieldVisibilityRuleUsingPOST
     *
     * Add Form Field Visibility Rules
     *
     * @param  int $form_id formId (required)
     * @param  string $field_id fieldId (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\FormFieldVisibilityRequest $visibility_rule visibility_rule (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfFormVisibilityRuleResponse
     */
    public function addFormFieldVisibilityRuleUsingPOST($form_id, $field_id, $visibility_rule = null)
    {
        list($response) = $this->addFormFieldVisibilityRuleUsingPOSTWithHttpInfo($form_id, $field_id, $visibility_rule);
        return $response;
    }

    /**
     * Operation addFormFieldVisibilityRuleUsingPOSTWithHttpInfo
     *
     * Add Form Field Visibility Rules
     *
     * @param  int $form_id formId (required)
     * @param  string $field_id fieldId (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\FormFieldVisibilityRequest $visibility_rule (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfFormVisibilityRuleResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function addFormFieldVisibilityRuleUsingPOSTWithHttpInfo($form_id, $field_id, $visibility_rule = null)
    {
        $request = $this->addFormFieldVisibilityRuleUsingPOSTRequest($form_id, $field_id, $visibility_rule);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfFormVisibilityRuleResponse');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfFormVisibilityRuleResponse');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Asset\Model\ResponseOfFormVisibilityRuleResponse',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addFormFieldVisibilityRuleUsingPOSTAsync
     *
     * Add Form Field Visibility Rules
     *
     * @param  int $form_id formId (required)
     * @param  string $field_id fieldId (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\FormFieldVisibilityRequest $visibility_rule (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addFormFieldVisibilityRuleUsingPOSTAsync($form_id, $field_id, $visibility_rule = null)
    {
        return $this->addFormFieldVisibilityRuleUsingPOSTAsyncWithHttpInfo($form_id, $field_id, $visibility_rule)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addFormFieldVisibilityRuleUsingPOSTAsyncWithHttpInfo
     *
     * Add Form Field Visibility Rules
     *
     * @param  int $form_id formId (required)
     * @param  string $field_id fieldId (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\FormFieldVisibilityRequest $visibility_rule (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addFormFieldVisibilityRuleUsingPOSTAsyncWithHttpInfo($form_id, $field_id, $visibility_rule = null)
    {
        $request = $this->addFormFieldVisibilityRuleUsingPOSTRequest($form_id, $field_id, $visibility_rule);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfFormVisibilityRuleResponse');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'addFormFieldVisibilityRuleUsingPOST'
     *
     * @param  int $form_id formId (required)
     * @param  string $field_id fieldId (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\FormFieldVisibilityRequest $visibility_rule (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addFormFieldVisibilityRuleUsingPOSTRequest($form_id, $field_id, $visibility_rule = null)
    {
        // Verify the required parameter 'form_id' is set.
        if ($form_id === null || (is_array($form_id) && empty($form_id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $form_id when calling addFormFieldVisibilityRuleUsingPOST'
            );
        }
        // Verify the required parameter 'field_id' is set.
        if ($field_id === null || (is_array($field_id) && empty($field_id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $field_id when calling addFormFieldVisibilityRuleUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/form/{formId}/field/{fieldId}/visibility.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'formId' . '}',
            ObjectSerializer::toPathValue($form_id),
            $resourcePath
        );
        $resourcePath = str_replace(
            '{' . 'fieldId' . '}',
            ObjectSerializer::toPathValue($field_id),
            $resourcePath
        );

        // Form parameters.
        /** @var string[][] $formParams */
        $formParams = [];
        $multipart = false;
        $formParams['visibilityRule'] = ObjectSerializer::toFormValue($visibility_rule);
        // Remove any null (optional values).
        $formParams = array_filter($formParams, function($v) { return $v !== null; });
        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }
        if (!empty($formParams)) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    foreach ((array) $formParamValue as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addRichTextFieldUsingPOST
     *
     * Add Rich Text Field
     *
     * @param  int $id id (required)
     * @param  string $text Multipart file. HTML Content for the rich text field. (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormFieldResponse
     */
    public function addRichTextFieldUsingPOST($id, $text)
    {
        list($response) = $this->addRichTextFieldUsingPOSTWithHttpInfo($id, $text);
        return $response;
    }

    /**
     * Operation addRichTextFieldUsingPOSTWithHttpInfo
     *
     * Add Rich Text Field
     *
     * @param  int $id id (required)
     * @param  string $text Multipart file. HTML Content for the rich text field. (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormFieldResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function addRichTextFieldUsingPOSTWithHttpInfo($id, $text)
    {
        $request = $this->addRichTextFieldUsingPOSTRequest($id, $text);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormFieldResponse');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormFieldResponse');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormFieldResponse',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addRichTextFieldUsingPOSTAsync
     *
     * Add Rich Text Field
     *
     * @param  int $id id (required)
     * @param  string $text Multipart file. HTML Content for the rich text field. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addRichTextFieldUsingPOSTAsync($id, $text)
    {
        return $this->addRichTextFieldUsingPOSTAsyncWithHttpInfo($id, $text)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addRichTextFieldUsingPOSTAsyncWithHttpInfo
     *
     * Add Rich Text Field
     *
     * @param  int $id id (required)
     * @param  string $text Multipart file. HTML Content for the rich text field. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addRichTextFieldUsingPOSTAsyncWithHttpInfo($id, $text)
    {
        $request = $this->addRichTextFieldUsingPOSTRequest($id, $text);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormFieldResponse');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'addRichTextFieldUsingPOST'
     *
     * @param  int $id id (required)
     * @param  string $text Multipart file. HTML Content for the rich text field. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addRichTextFieldUsingPOSTRequest($id, $text)
    {
        // Verify the required parameter 'id' is set.
        if ($id === null || (is_array($id) && empty($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling addRichTextFieldUsingPOST'
            );
        }
        // Verify the required parameter 'text' is set.
        if ($text === null || (is_array($text) && empty($text))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $text when calling addRichTextFieldUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/form/{id}/richText.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        // Form parameters.
        /** @var string[][] $formParams */
        $formParams = [];
        $multipart = false;
        $formParams['text'] = ObjectSerializer::toFormValue($text);
        // Remove any null (optional values).
        $formParams = array_filter($formParams, function($v) { return $v !== null; });
        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }
        if (!empty($formParams)) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    foreach ((array) $formParamValue as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteFormFieldFromFieldSetUsingPOST
     *
     * Delete Field from Fieldset
     *
     * @param  int $id id (required)
     * @param  string $field_set_id fieldSetId (required)
     * @param  string $field_id fieldId (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse
     */
    public function deleteFormFieldFromFieldSetUsingPOST($id, $field_set_id, $field_id)
    {
        list($response) = $this->deleteFormFieldFromFieldSetUsingPOSTWithHttpInfo($id, $field_set_id, $field_id);
        return $response;
    }

    /**
     * Operation deleteFormFieldFromFieldSetUsingPOSTWithHttpInfo
     *
     * Delete Field from Fieldset
     *
     * @param  int $id id (required)
     * @param  string $field_set_id fieldSetId (required)
     * @param  string $field_id fieldId (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteFormFieldFromFieldSetUsingPOSTWithHttpInfo($id, $field_set_id, $field_id)
    {
        $request = $this->deleteFormFieldFromFieldSetUsingPOSTRequest($id, $field_set_id, $field_id);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteFormFieldFromFieldSetUsingPOSTAsync
     *
     * Delete Field from Fieldset
     *
     * @param  int $id id (required)
     * @param  string $field_set_id fieldSetId (required)
     * @param  string $field_id fieldId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFormFieldFromFieldSetUsingPOSTAsync($id, $field_set_id, $field_id)
    {
        return $this->deleteFormFieldFromFieldSetUsingPOSTAsyncWithHttpInfo($id, $field_set_id, $field_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteFormFieldFromFieldSetUsingPOSTAsyncWithHttpInfo
     *
     * Delete Field from Fieldset
     *
     * @param  int $id id (required)
     * @param  string $field_set_id fieldSetId (required)
     * @param  string $field_id fieldId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFormFieldFromFieldSetUsingPOSTAsyncWithHttpInfo($id, $field_set_id, $field_id)
    {
        $request = $this->deleteFormFieldFromFieldSetUsingPOSTRequest($id, $field_set_id, $field_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteFormFieldFromFieldSetUsingPOST'
     *
     * @param  int $id id (required)
     * @param  string $field_set_id fieldSetId (required)
     * @param  string $field_id fieldId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteFormFieldFromFieldSetUsingPOSTRequest($id, $field_set_id, $field_id)
    {
        // Verify the required parameter 'id' is set.
        if ($id === null || (is_array($id) && empty($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteFormFieldFromFieldSetUsingPOST'
            );
        }
        // Verify the required parameter 'field_set_id' is set.
        if ($field_set_id === null || (is_array($field_set_id) && empty($field_set_id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $field_set_id when calling deleteFormFieldFromFieldSetUsingPOST'
            );
        }
        // Verify the required parameter 'field_id' is set.
        if ($field_id === null || (is_array($field_id) && empty($field_id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $field_id when calling deleteFormFieldFromFieldSetUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/form/{id}/fieldSet/{fieldSetId}/field/{fieldId}/delete.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $resourcePath = str_replace(
            '{' . 'fieldSetId' . '}',
            ObjectSerializer::toPathValue($field_set_id),
            $resourcePath
        );
        $resourcePath = str_replace(
            '{' . 'fieldId' . '}',
            ObjectSerializer::toPathValue($field_id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            []
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteFormFieldUsingPOST
     *
     * Delete Form Field
     *
     * @param  int $id id (required)
     * @param  string $field_id fieldId (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse
     */
    public function deleteFormFieldUsingPOST($id, $field_id)
    {
        list($response) = $this->deleteFormFieldUsingPOSTWithHttpInfo($id, $field_id);
        return $response;
    }

    /**
     * Operation deleteFormFieldUsingPOSTWithHttpInfo
     *
     * Delete Form Field
     *
     * @param  int $id id (required)
     * @param  string $field_id fieldId (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteFormFieldUsingPOSTWithHttpInfo($id, $field_id)
    {
        $request = $this->deleteFormFieldUsingPOSTRequest($id, $field_id);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteFormFieldUsingPOSTAsync
     *
     * Delete Form Field
     *
     * @param  int $id id (required)
     * @param  string $field_id fieldId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFormFieldUsingPOSTAsync($id, $field_id)
    {
        return $this->deleteFormFieldUsingPOSTAsyncWithHttpInfo($id, $field_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteFormFieldUsingPOSTAsyncWithHttpInfo
     *
     * Delete Form Field
     *
     * @param  int $id id (required)
     * @param  string $field_id fieldId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFormFieldUsingPOSTAsyncWithHttpInfo($id, $field_id)
    {
        $request = $this->deleteFormFieldUsingPOSTRequest($id, $field_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteFormFieldUsingPOST'
     *
     * @param  int $id id (required)
     * @param  string $field_id fieldId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteFormFieldUsingPOSTRequest($id, $field_id)
    {
        // Verify the required parameter 'id' is set.
        if ($id === null || (is_array($id) && empty($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteFormFieldUsingPOST'
            );
        }
        // Verify the required parameter 'field_id' is set.
        if ($field_id === null || (is_array($field_id) && empty($field_id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $field_id when calling deleteFormFieldUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/form/{id}/field/{fieldId}/delete.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $resourcePath = str_replace(
            '{' . 'fieldId' . '}',
            ObjectSerializer::toPathValue($field_id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            []
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAllFieldsUsingGET
     *
     * Get Available Form Fields
     *
     * @param  int $max_return Maximum number of fields to return.  Max 200, default 20 (optional)
     * @param  int $offset Integer offset for paging (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfFieldsMetaDataResponse
     */
    public function getAllFieldsUsingGET($max_return = null, $offset = null)
    {
        list($response) = $this->getAllFieldsUsingGETWithHttpInfo($max_return, $offset);
        return $response;
    }

    /**
     * Operation getAllFieldsUsingGETWithHttpInfo
     *
     * Get Available Form Fields
     *
     * @param  int $max_return Maximum number of fields to return.  Max 200, default 20 (optional)
     * @param  int $offset Integer offset for paging (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfFieldsMetaDataResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllFieldsUsingGETWithHttpInfo($max_return = null, $offset = null)
    {
        $request = $this->getAllFieldsUsingGETRequest($max_return, $offset);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfFieldsMetaDataResponse');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfFieldsMetaDataResponse');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Asset\Model\ResponseOfFieldsMetaDataResponse',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAllFieldsUsingGETAsync
     *
     * Get Available Form Fields
     *
     * @param  int $max_return Maximum number of fields to return.  Max 200, default 20 (optional)
     * @param  int $offset Integer offset for paging (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllFieldsUsingGETAsync($max_return = null, $offset = null)
    {
        return $this->getAllFieldsUsingGETAsyncWithHttpInfo($max_return, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllFieldsUsingGETAsyncWithHttpInfo
     *
     * Get Available Form Fields
     *
     * @param  int $max_return Maximum number of fields to return.  Max 200, default 20 (optional)
     * @param  int $offset Integer offset for paging (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllFieldsUsingGETAsyncWithHttpInfo($max_return = null, $offset = null)
    {
        $request = $this->getAllFieldsUsingGETRequest($max_return, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfFieldsMetaDataResponse');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllFieldsUsingGET'
     *
     * @param  int $max_return Maximum number of fields to return.  Max 200, default 20 (optional)
     * @param  int $offset Integer offset for paging (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAllFieldsUsingGETRequest($max_return = null, $offset = null)
    {

        $resourcePath = '/rest/asset/v1/form/fields.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Query parameters.
        if (is_array($max_return)) {
            $max_return = ObjectSerializer::serializeCollection($max_return, '', true);
        }
        $queryParams['maxReturn'] = $max_return;
        if (is_array($offset)) {
            $offset = ObjectSerializer::serializeCollection($offset, '', true);
        }
        $queryParams['offset'] = $offset;
        // Remove any null (optional values).
        $queryParams = array_filter($queryParams, function($v) { return $v !== null; });
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            []
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAllProgramMemberFieldsUsingGET
     *
     * Get Available Form Program Member Fields
     *
     * @param  int $max_return Maximum number of fields to return.  Max 200, default 20 (optional)
     * @param  int $offset Integer offset for paging (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfFieldsMetaDataResponse
     */
    public function getAllProgramMemberFieldsUsingGET($max_return = null, $offset = null)
    {
        list($response) = $this->getAllProgramMemberFieldsUsingGETWithHttpInfo($max_return, $offset);
        return $response;
    }

    /**
     * Operation getAllProgramMemberFieldsUsingGETWithHttpInfo
     *
     * Get Available Form Program Member Fields
     *
     * @param  int $max_return Maximum number of fields to return.  Max 200, default 20 (optional)
     * @param  int $offset Integer offset for paging (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfFieldsMetaDataResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllProgramMemberFieldsUsingGETWithHttpInfo($max_return = null, $offset = null)
    {
        $request = $this->getAllProgramMemberFieldsUsingGETRequest($max_return, $offset);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfFieldsMetaDataResponse');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfFieldsMetaDataResponse');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Asset\Model\ResponseOfFieldsMetaDataResponse',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAllProgramMemberFieldsUsingGETAsync
     *
     * Get Available Form Program Member Fields
     *
     * @param  int $max_return Maximum number of fields to return.  Max 200, default 20 (optional)
     * @param  int $offset Integer offset for paging (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllProgramMemberFieldsUsingGETAsync($max_return = null, $offset = null)
    {
        return $this->getAllProgramMemberFieldsUsingGETAsyncWithHttpInfo($max_return, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllProgramMemberFieldsUsingGETAsyncWithHttpInfo
     *
     * Get Available Form Program Member Fields
     *
     * @param  int $max_return Maximum number of fields to return.  Max 200, default 20 (optional)
     * @param  int $offset Integer offset for paging (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllProgramMemberFieldsUsingGETAsyncWithHttpInfo($max_return = null, $offset = null)
    {
        $request = $this->getAllProgramMemberFieldsUsingGETRequest($max_return, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfFieldsMetaDataResponse');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllProgramMemberFieldsUsingGET'
     *
     * @param  int $max_return Maximum number of fields to return.  Max 200, default 20 (optional)
     * @param  int $offset Integer offset for paging (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAllProgramMemberFieldsUsingGETRequest($max_return = null, $offset = null)
    {

        $resourcePath = '/rest/asset/v1/form/programMemberFields.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Query parameters.
        if (is_array($max_return)) {
            $max_return = ObjectSerializer::serializeCollection($max_return, '', true);
        }
        $queryParams['maxReturn'] = $max_return;
        if (is_array($offset)) {
            $offset = ObjectSerializer::serializeCollection($offset, '', true);
        }
        $queryParams['offset'] = $offset;
        // Remove any null (optional values).
        $queryParams = array_filter($queryParams, function($v) { return $v !== null; });
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            []
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFormFieldByFormVidUsingGET
     *
     * Get Fields for Form
     *
     * @param  int $id id (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormFieldResponse
     */
    public function getFormFieldByFormVidUsingGET($id, $status = null)
    {
        list($response) = $this->getFormFieldByFormVidUsingGETWithHttpInfo($id, $status);
        return $response;
    }

    /**
     * Operation getFormFieldByFormVidUsingGETWithHttpInfo
     *
     * Get Fields for Form
     *
     * @param  int $id id (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormFieldResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFormFieldByFormVidUsingGETWithHttpInfo($id, $status = null)
    {
        $request = $this->getFormFieldByFormVidUsingGETRequest($id, $status);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormFieldResponse');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormFieldResponse');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormFieldResponse',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFormFieldByFormVidUsingGETAsync
     *
     * Get Fields for Form
     *
     * @param  int $id id (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFormFieldByFormVidUsingGETAsync($id, $status = null)
    {
        return $this->getFormFieldByFormVidUsingGETAsyncWithHttpInfo($id, $status)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFormFieldByFormVidUsingGETAsyncWithHttpInfo
     *
     * Get Fields for Form
     *
     * @param  int $id id (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFormFieldByFormVidUsingGETAsyncWithHttpInfo($id, $status = null)
    {
        $request = $this->getFormFieldByFormVidUsingGETRequest($id, $status);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormFieldResponse');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFormFieldByFormVidUsingGET'
     *
     * @param  int $id id (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getFormFieldByFormVidUsingGETRequest($id, $status = null)
    {
        // Verify the required parameter 'id' is set.
        if ($id === null || (is_array($id) && empty($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getFormFieldByFormVidUsingGET'
            );
        }

        $resourcePath = '/rest/asset/v1/form/{id}/fields.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Query parameters.
        if (is_array($status)) {
            $status = ObjectSerializer::serializeCollection($status, '', true);
        }
        $queryParams['status'] = $status;
        // Remove any null (optional values).
        $queryParams = array_filter($queryParams, function($v) { return $v !== null; });

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            []
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateFieldPositionsUsingPOST
     *
     * Update Field Positions
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\UpdateFieldPosition[] $positions positions (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse
     */
    public function updateFieldPositionsUsingPOST($id, $positions = null)
    {
        list($response) = $this->updateFieldPositionsUsingPOSTWithHttpInfo($id, $positions);
        return $response;
    }

    /**
     * Operation updateFieldPositionsUsingPOSTWithHttpInfo
     *
     * Update Field Positions
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\UpdateFieldPosition[] $positions (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateFieldPositionsUsingPOSTWithHttpInfo($id, $positions = null)
    {
        $request = $this->updateFieldPositionsUsingPOSTRequest($id, $positions);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateFieldPositionsUsingPOSTAsync
     *
     * Update Field Positions
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\UpdateFieldPosition[] $positions (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateFieldPositionsUsingPOSTAsync($id, $positions = null)
    {
        return $this->updateFieldPositionsUsingPOSTAsyncWithHttpInfo($id, $positions)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateFieldPositionsUsingPOSTAsyncWithHttpInfo
     *
     * Update Field Positions
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\UpdateFieldPosition[] $positions (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateFieldPositionsUsingPOSTAsyncWithHttpInfo($id, $positions = null)
    {
        $request = $this->updateFieldPositionsUsingPOSTRequest($id, $positions);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateFieldPositionsUsingPOST'
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\UpdateFieldPosition[] $positions (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateFieldPositionsUsingPOSTRequest($id, $positions = null)
    {
        // Verify the required parameter 'id' is set.
        if ($id === null || (is_array($id) && empty($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateFieldPositionsUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/form/{id}/reArrange.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        // Form parameters.
        /** @var string[][] $formParams */
        $formParams = [];
        $multipart = false;
        $formParams['positions'] = ObjectSerializer::toFormValue($positions);
        // Remove any null (optional values).
        $formParams = array_filter($formParams, function($v) { return $v !== null; });
        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }
        if (!empty($formParams)) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    foreach ((array) $formParamValue as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateFormFieldUsingPOST
     *
     * Update Form Field
     *
     * @param  int $id id (required)
     * @param  string $field_id fieldId (required)
     * @param  int $blank_fields Number of blank fields to show when progressive profiling is enabled (optional)
     * @param  string $default_value Optional default value for the field (optional)
     * @param  string $field_type Type of field (optional)
     * @param  int $field_width Width of the input or select element (optional)
     * @param  bool $form_prefill Whether the field should prefill.  Default true (optional)
     * @param  bool $is_sensitive Whether the field is marked as sensitive.  Default false (optional)
     * @param  string $hint_text Hint text for the field (optional)
     * @param  bool $initially_checked Whether the field should be checked upon loading.  Default false (optional)
     * @param  string $instructions Instructions for the field (optional)
     * @param  string $label Label of the field (optional)
     * @param  bool $label_to_right Whether the field label should be displayed to the right of the input/select element. Default false (optional)
     * @param  int $label_width Width of the field label element (optional)
     * @param  string $mask_input Optional input mask for the field (optional)
     * @param  int $max_length Maximum length for text type fields (optional)
     * @param  float $max_value Maximum value accepted by the field (optional)
     * @param  float $min_value Minimum value accepted by the field (optional)
     * @param  bool $multi_select Whether the field should allow multiple selections. Default false (optional)
     * @param  bool $required Whether the field is required to submit the form.  Default false (optional)
     * @param  string $validation_message Validation message to display on failed validation (optional)
     * @param  string $values Array of JSON objects that contain field attributes. Only for select-field types.  Example: values&#x3D;[{&#39;label&#39;:&#39;Select...&#39;,&#39;value&#39;:&#39;&#39;,&#39;isDefault&#39;:true,&#39;selected&#39;:true}, {&#39;label&#39;:&#39;MR&#39;,&#39;value&#39;:&#39;Mr&#39;}, {&#39;label&#39;:&#39;MS&#39;,&#39;value&#39;:&#39;Ms&#39;}, {&#39;label&#39;:&#39;MRS&#39;,&#39;value&#39;:&#39;Mrs&#39;}, {&#39;label&#39;:&#39;DR&#39;,&#39;value&#39;:&#39;Dr&#39;}, {&#39;label&#39;:&#39;PROF&#39;,&#39;value&#39;:&#39;Prof&#39;}] (optional)
     * @param  int $visible_lines Number of lines to display for the field element (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormFieldResponse
     */
    public function updateFormFieldUsingPOST($id, $field_id, $blank_fields = null, $default_value = null, $field_type = null, $field_width = null, $form_prefill = null, $is_sensitive = null, $hint_text = null, $initially_checked = null, $instructions = null, $label = null, $label_to_right = null, $label_width = null, $mask_input = null, $max_length = null, $max_value = null, $min_value = null, $multi_select = null, $required = null, $validation_message = null, $values = null, $visible_lines = null)
    {
        list($response) = $this->updateFormFieldUsingPOSTWithHttpInfo($id, $field_id, $blank_fields, $default_value, $field_type, $field_width, $form_prefill, $is_sensitive, $hint_text, $initially_checked, $instructions, $label, $label_to_right, $label_width, $mask_input, $max_length, $max_value, $min_value, $multi_select, $required, $validation_message, $values, $visible_lines);
        return $response;
    }

    /**
     * Operation updateFormFieldUsingPOSTWithHttpInfo
     *
     * Update Form Field
     *
     * @param  int $id id (required)
     * @param  string $field_id fieldId (required)
     * @param  int $blank_fields Number of blank fields to show when progressive profiling is enabled (optional)
     * @param  string $default_value Optional default value for the field (optional)
     * @param  string $field_type Type of field (optional)
     * @param  int $field_width Width of the input or select element (optional)
     * @param  bool $form_prefill Whether the field should prefill.  Default true (optional)
     * @param  bool $is_sensitive Whether the field is marked as sensitive.  Default false (optional)
     * @param  string $hint_text Hint text for the field (optional)
     * @param  bool $initially_checked Whether the field should be checked upon loading.  Default false (optional)
     * @param  string $instructions Instructions for the field (optional)
     * @param  string $label Label of the field (optional)
     * @param  bool $label_to_right Whether the field label should be displayed to the right of the input/select element. Default false (optional)
     * @param  int $label_width Width of the field label element (optional)
     * @param  string $mask_input Optional input mask for the field (optional)
     * @param  int $max_length Maximum length for text type fields (optional)
     * @param  float $max_value Maximum value accepted by the field (optional)
     * @param  float $min_value Minimum value accepted by the field (optional)
     * @param  bool $multi_select Whether the field should allow multiple selections. Default false (optional)
     * @param  bool $required Whether the field is required to submit the form.  Default false (optional)
     * @param  string $validation_message Validation message to display on failed validation (optional)
     * @param  string $values Array of JSON objects that contain field attributes. Only for select-field types.  Example: values&#x3D;[{&#39;label&#39;:&#39;Select...&#39;,&#39;value&#39;:&#39;&#39;,&#39;isDefault&#39;:true,&#39;selected&#39;:true}, {&#39;label&#39;:&#39;MR&#39;,&#39;value&#39;:&#39;Mr&#39;}, {&#39;label&#39;:&#39;MS&#39;,&#39;value&#39;:&#39;Ms&#39;}, {&#39;label&#39;:&#39;MRS&#39;,&#39;value&#39;:&#39;Mrs&#39;}, {&#39;label&#39;:&#39;DR&#39;,&#39;value&#39;:&#39;Dr&#39;}, {&#39;label&#39;:&#39;PROF&#39;,&#39;value&#39;:&#39;Prof&#39;}] (optional)
     * @param  int $visible_lines Number of lines to display for the field element (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormFieldResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateFormFieldUsingPOSTWithHttpInfo($id, $field_id, $blank_fields = null, $default_value = null, $field_type = null, $field_width = null, $form_prefill = null, $is_sensitive = null, $hint_text = null, $initially_checked = null, $instructions = null, $label = null, $label_to_right = null, $label_width = null, $mask_input = null, $max_length = null, $max_value = null, $min_value = null, $multi_select = null, $required = null, $validation_message = null, $values = null, $visible_lines = null)
    {
        $request = $this->updateFormFieldUsingPOSTRequest($id, $field_id, $blank_fields, $default_value, $field_type, $field_width, $form_prefill, $is_sensitive, $hint_text, $initially_checked, $instructions, $label, $label_to_right, $label_width, $mask_input, $max_length, $max_value, $min_value, $multi_select, $required, $validation_message, $values, $visible_lines);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormFieldResponse');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormFieldResponse');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormFieldResponse',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateFormFieldUsingPOSTAsync
     *
     * Update Form Field
     *
     * @param  int $id id (required)
     * @param  string $field_id fieldId (required)
     * @param  int $blank_fields Number of blank fields to show when progressive profiling is enabled (optional)
     * @param  string $default_value Optional default value for the field (optional)
     * @param  string $field_type Type of field (optional)
     * @param  int $field_width Width of the input or select element (optional)
     * @param  bool $form_prefill Whether the field should prefill.  Default true (optional)
     * @param  bool $is_sensitive Whether the field is marked as sensitive.  Default false (optional)
     * @param  string $hint_text Hint text for the field (optional)
     * @param  bool $initially_checked Whether the field should be checked upon loading.  Default false (optional)
     * @param  string $instructions Instructions for the field (optional)
     * @param  string $label Label of the field (optional)
     * @param  bool $label_to_right Whether the field label should be displayed to the right of the input/select element. Default false (optional)
     * @param  int $label_width Width of the field label element (optional)
     * @param  string $mask_input Optional input mask for the field (optional)
     * @param  int $max_length Maximum length for text type fields (optional)
     * @param  float $max_value Maximum value accepted by the field (optional)
     * @param  float $min_value Minimum value accepted by the field (optional)
     * @param  bool $multi_select Whether the field should allow multiple selections. Default false (optional)
     * @param  bool $required Whether the field is required to submit the form.  Default false (optional)
     * @param  string $validation_message Validation message to display on failed validation (optional)
     * @param  string $values Array of JSON objects that contain field attributes. Only for select-field types.  Example: values&#x3D;[{&#39;label&#39;:&#39;Select...&#39;,&#39;value&#39;:&#39;&#39;,&#39;isDefault&#39;:true,&#39;selected&#39;:true}, {&#39;label&#39;:&#39;MR&#39;,&#39;value&#39;:&#39;Mr&#39;}, {&#39;label&#39;:&#39;MS&#39;,&#39;value&#39;:&#39;Ms&#39;}, {&#39;label&#39;:&#39;MRS&#39;,&#39;value&#39;:&#39;Mrs&#39;}, {&#39;label&#39;:&#39;DR&#39;,&#39;value&#39;:&#39;Dr&#39;}, {&#39;label&#39;:&#39;PROF&#39;,&#39;value&#39;:&#39;Prof&#39;}] (optional)
     * @param  int $visible_lines Number of lines to display for the field element (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateFormFieldUsingPOSTAsync($id, $field_id, $blank_fields = null, $default_value = null, $field_type = null, $field_width = null, $form_prefill = null, $is_sensitive = null, $hint_text = null, $initially_checked = null, $instructions = null, $label = null, $label_to_right = null, $label_width = null, $mask_input = null, $max_length = null, $max_value = null, $min_value = null, $multi_select = null, $required = null, $validation_message = null, $values = null, $visible_lines = null)
    {
        return $this->updateFormFieldUsingPOSTAsyncWithHttpInfo($id, $field_id, $blank_fields, $default_value, $field_type, $field_width, $form_prefill, $is_sensitive, $hint_text, $initially_checked, $instructions, $label, $label_to_right, $label_width, $mask_input, $max_length, $max_value, $min_value, $multi_select, $required, $validation_message, $values, $visible_lines)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateFormFieldUsingPOSTAsyncWithHttpInfo
     *
     * Update Form Field
     *
     * @param  int $id id (required)
     * @param  string $field_id fieldId (required)
     * @param  int $blank_fields Number of blank fields to show when progressive profiling is enabled (optional)
     * @param  string $default_value Optional default value for the field (optional)
     * @param  string $field_type Type of field (optional)
     * @param  int $field_width Width of the input or select element (optional)
     * @param  bool $form_prefill Whether the field should prefill.  Default true (optional)
     * @param  bool $is_sensitive Whether the field is marked as sensitive.  Default false (optional)
     * @param  string $hint_text Hint text for the field (optional)
     * @param  bool $initially_checked Whether the field should be checked upon loading.  Default false (optional)
     * @param  string $instructions Instructions for the field (optional)
     * @param  string $label Label of the field (optional)
     * @param  bool $label_to_right Whether the field label should be displayed to the right of the input/select element. Default false (optional)
     * @param  int $label_width Width of the field label element (optional)
     * @param  string $mask_input Optional input mask for the field (optional)
     * @param  int $max_length Maximum length for text type fields (optional)
     * @param  float $max_value Maximum value accepted by the field (optional)
     * @param  float $min_value Minimum value accepted by the field (optional)
     * @param  bool $multi_select Whether the field should allow multiple selections. Default false (optional)
     * @param  bool $required Whether the field is required to submit the form.  Default false (optional)
     * @param  string $validation_message Validation message to display on failed validation (optional)
     * @param  string $values Array of JSON objects that contain field attributes. Only for select-field types.  Example: values&#x3D;[{&#39;label&#39;:&#39;Select...&#39;,&#39;value&#39;:&#39;&#39;,&#39;isDefault&#39;:true,&#39;selected&#39;:true}, {&#39;label&#39;:&#39;MR&#39;,&#39;value&#39;:&#39;Mr&#39;}, {&#39;label&#39;:&#39;MS&#39;,&#39;value&#39;:&#39;Ms&#39;}, {&#39;label&#39;:&#39;MRS&#39;,&#39;value&#39;:&#39;Mrs&#39;}, {&#39;label&#39;:&#39;DR&#39;,&#39;value&#39;:&#39;Dr&#39;}, {&#39;label&#39;:&#39;PROF&#39;,&#39;value&#39;:&#39;Prof&#39;}] (optional)
     * @param  int $visible_lines Number of lines to display for the field element (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateFormFieldUsingPOSTAsyncWithHttpInfo($id, $field_id, $blank_fields = null, $default_value = null, $field_type = null, $field_width = null, $form_prefill = null, $is_sensitive = null, $hint_text = null, $initially_checked = null, $instructions = null, $label = null, $label_to_right = null, $label_width = null, $mask_input = null, $max_length = null, $max_value = null, $min_value = null, $multi_select = null, $required = null, $validation_message = null, $values = null, $visible_lines = null)
    {
        $request = $this->updateFormFieldUsingPOSTRequest($id, $field_id, $blank_fields, $default_value, $field_type, $field_width, $form_prefill, $is_sensitive, $hint_text, $initially_checked, $instructions, $label, $label_to_right, $label_width, $mask_input, $max_length, $max_value, $min_value, $multi_select, $required, $validation_message, $values, $visible_lines);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormFieldResponse');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateFormFieldUsingPOST'
     *
     * @param  int $id id (required)
     * @param  string $field_id fieldId (required)
     * @param  int $blank_fields Number of blank fields to show when progressive profiling is enabled (optional)
     * @param  string $default_value Optional default value for the field (optional)
     * @param  string $field_type Type of field (optional)
     * @param  int $field_width Width of the input or select element (optional)
     * @param  bool $form_prefill Whether the field should prefill.  Default true (optional)
     * @param  bool $is_sensitive Whether the field is marked as sensitive.  Default false (optional)
     * @param  string $hint_text Hint text for the field (optional)
     * @param  bool $initially_checked Whether the field should be checked upon loading.  Default false (optional)
     * @param  string $instructions Instructions for the field (optional)
     * @param  string $label Label of the field (optional)
     * @param  bool $label_to_right Whether the field label should be displayed to the right of the input/select element. Default false (optional)
     * @param  int $label_width Width of the field label element (optional)
     * @param  string $mask_input Optional input mask for the field (optional)
     * @param  int $max_length Maximum length for text type fields (optional)
     * @param  float $max_value Maximum value accepted by the field (optional)
     * @param  float $min_value Minimum value accepted by the field (optional)
     * @param  bool $multi_select Whether the field should allow multiple selections. Default false (optional)
     * @param  bool $required Whether the field is required to submit the form.  Default false (optional)
     * @param  string $validation_message Validation message to display on failed validation (optional)
     * @param  string $values Array of JSON objects that contain field attributes. Only for select-field types.  Example: values&#x3D;[{&#39;label&#39;:&#39;Select...&#39;,&#39;value&#39;:&#39;&#39;,&#39;isDefault&#39;:true,&#39;selected&#39;:true}, {&#39;label&#39;:&#39;MR&#39;,&#39;value&#39;:&#39;Mr&#39;}, {&#39;label&#39;:&#39;MS&#39;,&#39;value&#39;:&#39;Ms&#39;}, {&#39;label&#39;:&#39;MRS&#39;,&#39;value&#39;:&#39;Mrs&#39;}, {&#39;label&#39;:&#39;DR&#39;,&#39;value&#39;:&#39;Dr&#39;}, {&#39;label&#39;:&#39;PROF&#39;,&#39;value&#39;:&#39;Prof&#39;}] (optional)
     * @param  int $visible_lines Number of lines to display for the field element (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateFormFieldUsingPOSTRequest($id, $field_id, $blank_fields = null, $default_value = null, $field_type = null, $field_width = null, $form_prefill = null, $is_sensitive = null, $hint_text = null, $initially_checked = null, $instructions = null, $label = null, $label_to_right = null, $label_width = null, $mask_input = null, $max_length = null, $max_value = null, $min_value = null, $multi_select = null, $required = null, $validation_message = null, $values = null, $visible_lines = null)
    {
        // Verify the required parameter 'id' is set.
        if ($id === null || (is_array($id) && empty($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateFormFieldUsingPOST'
            );
        }
        // Verify the required parameter 'field_id' is set.
        if ($field_id === null || (is_array($field_id) && empty($field_id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $field_id when calling updateFormFieldUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/form/{id}/field/{fieldId}.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $resourcePath = str_replace(
            '{' . 'fieldId' . '}',
            ObjectSerializer::toPathValue($field_id),
            $resourcePath
        );

        // Form parameters.
        /** @var string[][] $formParams */
        $formParams = [];
        $multipart = false;
        $formParams['blankFields'] = ObjectSerializer::toFormValue($blank_fields);
        $formParams['defaultValue'] = ObjectSerializer::toFormValue($default_value);
        $formParams['fieldType'] = ObjectSerializer::toFormValue($field_type);
        $formParams['fieldWidth'] = ObjectSerializer::toFormValue($field_width);
        $formParams['formPrefill'] = ObjectSerializer::toFormValue($form_prefill);
        $formParams['isSensitive'] = ObjectSerializer::toFormValue($is_sensitive);
        $formParams['hintText'] = ObjectSerializer::toFormValue($hint_text);
        $formParams['initiallyChecked'] = ObjectSerializer::toFormValue($initially_checked);
        $formParams['instructions'] = ObjectSerializer::toFormValue($instructions);
        $formParams['label'] = ObjectSerializer::toFormValue($label);
        $formParams['labelToRight'] = ObjectSerializer::toFormValue($label_to_right);
        $formParams['labelWidth'] = ObjectSerializer::toFormValue($label_width);
        $formParams['maskInput'] = ObjectSerializer::toFormValue($mask_input);
        $formParams['maxLength'] = ObjectSerializer::toFormValue($max_length);
        $formParams['maxValue'] = ObjectSerializer::toFormValue($max_value);
        $formParams['minValue'] = ObjectSerializer::toFormValue($min_value);
        $formParams['multiSelect'] = ObjectSerializer::toFormValue($multi_select);
        $formParams['required'] = ObjectSerializer::toFormValue($required);
        $formParams['validationMessage'] = ObjectSerializer::toFormValue($validation_message);
        $formParams['values'] = ObjectSerializer::toFormValue($values);
        $formParams['visibleLines'] = ObjectSerializer::toFormValue($visible_lines);
        // Remove any null (optional values).
        $formParams = array_filter($formParams, function($v) { return $v !== null; });
        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }
        if (!empty($formParams)) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    foreach ((array) $formParamValue as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    /**
     * Make a request.
     *
     * @param \GuzzleHttp\Psr7\Request $request
     *   ...
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @return \Psr\Http\Message\ResponseInterface
     */
    private function makeRequest(Request $request) {
        $options = $this->createHttpClientOption();
        try {
           $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            $response = $e->getResponse();
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                (int) $e->getCode(),
                $response ? $response->getHeaders() : null,
                $response ? (string) $response->getBody() : null
            );
        }

        $statusCode = $response->getStatusCode();
        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    (string) $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                (string) $response->getBody()
            );
        }
        return $response;
    }

    /**
     * Convert a response to a return standard return array.
     *
     * @param \Psr\Http\Message\ResponseInterface $response
     *   A response from a request with a serialized body.
     * @param string $returnType
     *   The return type.
     *
     * @return array
     */
    private function responseToReturn(ResponseInterface $response, string $returnType) {
        return [
            $this->deserializeResponseBody($response->getBody(), $returnType),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    /**
     * Deserialize a response body.
     *
     * @param mixed $responseBody
     *   The response body.
     * @param string $returnType
     *   The return type.
     * @param array|null $headers
     *   The a list of headers from the response.
     * @return mixed
     *   Either a string or a stream to be passed to a file object.
     */
    private function deserializeResponseBody($responseBody, $returnType, $headers = [])
    {
        return ObjectSerializer::deserialize(
            $returnType === '\SplFileObject' ? $responseBody : (string) $responseBody,
            $returnType,
            $headers
        );
    }

}
