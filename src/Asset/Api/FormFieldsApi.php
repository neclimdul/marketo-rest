<?php
/**
 * FormFieldsApi
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Asset
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketo Rest API
 *
 * Marketo Rest API
 *
 * OpenAPI spec version: 1.0
 * Contact: developerfeedback@marketo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.26
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace NecLimDul\MarketoRest\Asset\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Query;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\ResponseInterface;
use NecLimDul\MarketoRest\Asset\ApiException;
use NecLimDul\MarketoRest\Asset\Configuration;
use NecLimDul\MarketoRest\Asset\HeaderSelector;
use NecLimDul\MarketoRest\Asset\ObjectSerializer;

/**
 * FormFieldsApi Class Doc Comment
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Asset
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FormFieldsApi
{

    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Exception handler for addFieldSetUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function addFieldSetUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormFieldResponse',
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Add Fieldset to Form
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\AddFormFieldSetRequest $add_form_field_set_request addFormFieldSetRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormFieldResponse
     */
    public function addFieldSetUsingPOST($id, $add_form_field_set_request)
    {
        list($response) = $this->addFieldSetUsingPOSTWithHttpInfo($id, $add_form_field_set_request);
        return $response;
    }

    /**
     * Add Fieldset to Form
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\AddFormFieldSetRequest $add_form_field_set_request addFormFieldSetRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormFieldResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function addFieldSetUsingPOSTWithHttpInfo($id, $add_form_field_set_request)
    {
        $request = $this->addFieldSetUsingPOSTRequest($id, $add_form_field_set_request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormFieldResponse');
        } catch (ApiException $e) {
            throw $this->addFieldSetUsingPOSTHandleException($e);
        }
    }

    /**
     * Add Fieldset to Form
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\AddFormFieldSetRequest $add_form_field_set_request addFormFieldSetRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addFieldSetUsingPOSTAsync($id, $add_form_field_set_request)
    {
        return $this->addFieldSetUsingPOSTAsyncWithHttpInfo($id, $add_form_field_set_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Add Fieldset to Form
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\AddFormFieldSetRequest $add_form_field_set_request addFormFieldSetRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addFieldSetUsingPOSTAsyncWithHttpInfo($id, $add_form_field_set_request)
    {
        $request = $this->addFieldSetUsingPOSTRequest($id, $add_form_field_set_request);
        return $this->makeAsyncRequest($request, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormFieldResponse', [$this, 'addFieldSetUsingPOSTHandleException']);
    }

    /**
     * Create request for operation 'addFieldSetUsingPOST'
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\AddFormFieldSetRequest $add_form_field_set_request addFormFieldSetRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addFieldSetUsingPOSTRequest($id, $add_form_field_set_request)
    {
        // Verify the required parameter 'id' is set.
        if (!isset($id)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling addFieldSetUsingPOST'
            );
        }
        // Verify the required parameter 'add_form_field_set_request' is set.
        if (!isset($add_form_field_set_request)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $add_form_field_set_request when calling addFieldSetUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/form/{id}/fieldSet.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );
        if ($headers['Content-Type'] === 'application/json') {
          $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($add_form_field_set_request));
        } elseif (!is_array($add_form_field_set_request)) {
          $httpBody = (string) $add_form_field_set_request;
        }
        else {
          $httpBody = '';
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Exception handler for addFieldToAFormUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function addFieldToAFormUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormFieldResponse',
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Add Field to Form
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\AddFormFieldRequest $add_form_field_set_request addFormFieldSetRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormFieldResponse
     */
    public function addFieldToAFormUsingPOST($id, $add_form_field_set_request)
    {
        list($response) = $this->addFieldToAFormUsingPOSTWithHttpInfo($id, $add_form_field_set_request);
        return $response;
    }

    /**
     * Add Field to Form
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\AddFormFieldRequest $add_form_field_set_request addFormFieldSetRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormFieldResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function addFieldToAFormUsingPOSTWithHttpInfo($id, $add_form_field_set_request)
    {
        $request = $this->addFieldToAFormUsingPOSTRequest($id, $add_form_field_set_request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormFieldResponse');
        } catch (ApiException $e) {
            throw $this->addFieldToAFormUsingPOSTHandleException($e);
        }
    }

    /**
     * Add Field to Form
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\AddFormFieldRequest $add_form_field_set_request addFormFieldSetRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addFieldToAFormUsingPOSTAsync($id, $add_form_field_set_request)
    {
        return $this->addFieldToAFormUsingPOSTAsyncWithHttpInfo($id, $add_form_field_set_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Add Field to Form
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\AddFormFieldRequest $add_form_field_set_request addFormFieldSetRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addFieldToAFormUsingPOSTAsyncWithHttpInfo($id, $add_form_field_set_request)
    {
        $request = $this->addFieldToAFormUsingPOSTRequest($id, $add_form_field_set_request);
        return $this->makeAsyncRequest($request, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormFieldResponse', [$this, 'addFieldToAFormUsingPOSTHandleException']);
    }

    /**
     * Create request for operation 'addFieldToAFormUsingPOST'
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\AddFormFieldRequest $add_form_field_set_request addFormFieldSetRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addFieldToAFormUsingPOSTRequest($id, $add_form_field_set_request)
    {
        // Verify the required parameter 'id' is set.
        if (!isset($id)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling addFieldToAFormUsingPOST'
            );
        }
        // Verify the required parameter 'add_form_field_set_request' is set.
        if (!isset($add_form_field_set_request)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $add_form_field_set_request when calling addFieldToAFormUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/form/{id}/fields.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );
        if ($headers['Content-Type'] === 'application/json') {
          $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($add_form_field_set_request));
        } elseif (!is_array($add_form_field_set_request)) {
          $httpBody = (string) $add_form_field_set_request;
        }
        else {
          $httpBody = '';
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Exception handler for addFormFieldVisibilityRuleUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function addFormFieldVisibilityRuleUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Asset\Model\ResponseOfFormVisibilityRuleResponse',
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Add Form Field Visibility Rules
     *
     * @param  int $form_id formId (required)
     * @param  string $field_id fieldId (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\AddFormFieldVisibilityRequest $add_form_field_visibility_request addFormFieldVisibilityRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfFormVisibilityRuleResponse
     */
    public function addFormFieldVisibilityRuleUsingPOST($form_id, $field_id, $add_form_field_visibility_request)
    {
        list($response) = $this->addFormFieldVisibilityRuleUsingPOSTWithHttpInfo($form_id, $field_id, $add_form_field_visibility_request);
        return $response;
    }

    /**
     * Add Form Field Visibility Rules
     *
     * @param  int $form_id formId (required)
     * @param  string $field_id fieldId (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\AddFormFieldVisibilityRequest $add_form_field_visibility_request addFormFieldVisibilityRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfFormVisibilityRuleResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function addFormFieldVisibilityRuleUsingPOSTWithHttpInfo($form_id, $field_id, $add_form_field_visibility_request)
    {
        $request = $this->addFormFieldVisibilityRuleUsingPOSTRequest($form_id, $field_id, $add_form_field_visibility_request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfFormVisibilityRuleResponse');
        } catch (ApiException $e) {
            throw $this->addFormFieldVisibilityRuleUsingPOSTHandleException($e);
        }
    }

    /**
     * Add Form Field Visibility Rules
     *
     * @param  int $form_id formId (required)
     * @param  string $field_id fieldId (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\AddFormFieldVisibilityRequest $add_form_field_visibility_request addFormFieldVisibilityRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addFormFieldVisibilityRuleUsingPOSTAsync($form_id, $field_id, $add_form_field_visibility_request)
    {
        return $this->addFormFieldVisibilityRuleUsingPOSTAsyncWithHttpInfo($form_id, $field_id, $add_form_field_visibility_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Add Form Field Visibility Rules
     *
     * @param  int $form_id formId (required)
     * @param  string $field_id fieldId (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\AddFormFieldVisibilityRequest $add_form_field_visibility_request addFormFieldVisibilityRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addFormFieldVisibilityRuleUsingPOSTAsyncWithHttpInfo($form_id, $field_id, $add_form_field_visibility_request)
    {
        $request = $this->addFormFieldVisibilityRuleUsingPOSTRequest($form_id, $field_id, $add_form_field_visibility_request);
        return $this->makeAsyncRequest($request, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfFormVisibilityRuleResponse', [$this, 'addFormFieldVisibilityRuleUsingPOSTHandleException']);
    }

    /**
     * Create request for operation 'addFormFieldVisibilityRuleUsingPOST'
     *
     * @param  int $form_id formId (required)
     * @param  string $field_id fieldId (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\AddFormFieldVisibilityRequest $add_form_field_visibility_request addFormFieldVisibilityRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addFormFieldVisibilityRuleUsingPOSTRequest($form_id, $field_id, $add_form_field_visibility_request)
    {
        // Verify the required parameter 'form_id' is set.
        if (!isset($form_id)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $form_id when calling addFormFieldVisibilityRuleUsingPOST'
            );
        }
        // Verify the required parameter 'field_id' is set.
        if (!isset($field_id)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $field_id when calling addFormFieldVisibilityRuleUsingPOST'
            );
        }
        // Verify the required parameter 'add_form_field_visibility_request' is set.
        if (!isset($add_form_field_visibility_request)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $add_form_field_visibility_request when calling addFormFieldVisibilityRuleUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/form/{formId}/field/{fieldId}/visibility.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'formId' . '}',
            ObjectSerializer::toPathValue($form_id),
            $resourcePath
        );
        $resourcePath = str_replace(
            '{' . 'fieldId' . '}',
            ObjectSerializer::toPathValue($field_id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );
        if ($headers['Content-Type'] === 'application/json') {
          $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($add_form_field_visibility_request));
        } elseif (!is_array($add_form_field_visibility_request)) {
          $httpBody = (string) $add_form_field_visibility_request;
        }
        else {
          $httpBody = '';
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Exception handler for addRichTextFieldUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function addRichTextFieldUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormFieldResponse',
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Add Rich Text Field
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\AddRichTextRequest $add_rich_text_request addRichTextRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormFieldResponse
     */
    public function addRichTextFieldUsingPOST($id, $add_rich_text_request)
    {
        list($response) = $this->addRichTextFieldUsingPOSTWithHttpInfo($id, $add_rich_text_request);
        return $response;
    }

    /**
     * Add Rich Text Field
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\AddRichTextRequest $add_rich_text_request addRichTextRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormFieldResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function addRichTextFieldUsingPOSTWithHttpInfo($id, $add_rich_text_request)
    {
        $request = $this->addRichTextFieldUsingPOSTRequest($id, $add_rich_text_request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormFieldResponse');
        } catch (ApiException $e) {
            throw $this->addRichTextFieldUsingPOSTHandleException($e);
        }
    }

    /**
     * Add Rich Text Field
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\AddRichTextRequest $add_rich_text_request addRichTextRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addRichTextFieldUsingPOSTAsync($id, $add_rich_text_request)
    {
        return $this->addRichTextFieldUsingPOSTAsyncWithHttpInfo($id, $add_rich_text_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Add Rich Text Field
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\AddRichTextRequest $add_rich_text_request addRichTextRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addRichTextFieldUsingPOSTAsyncWithHttpInfo($id, $add_rich_text_request)
    {
        $request = $this->addRichTextFieldUsingPOSTRequest($id, $add_rich_text_request);
        return $this->makeAsyncRequest($request, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormFieldResponse', [$this, 'addRichTextFieldUsingPOSTHandleException']);
    }

    /**
     * Create request for operation 'addRichTextFieldUsingPOST'
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\AddRichTextRequest $add_rich_text_request addRichTextRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addRichTextFieldUsingPOSTRequest($id, $add_rich_text_request)
    {
        // Verify the required parameter 'id' is set.
        if (!isset($id)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling addRichTextFieldUsingPOST'
            );
        }
        // Verify the required parameter 'add_rich_text_request' is set.
        if (!isset($add_rich_text_request)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $add_rich_text_request when calling addRichTextFieldUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/form/{id}/richText.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );
        if ($headers['Content-Type'] === 'application/json') {
          $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($add_rich_text_request));
        } elseif (!is_array($add_rich_text_request)) {
          $httpBody = (string) $add_rich_text_request;
        }
        else {
          $httpBody = '';
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Exception handler for deleteFormFieldFromFieldSetUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function deleteFormFieldFromFieldSetUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse',
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Delete Field from Fieldset
     *
     * @param  int $id id (required)
     * @param  string $field_set_id fieldSetId (required)
     * @param  string $field_id fieldId (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse
     */
    public function deleteFormFieldFromFieldSetUsingPOST($id, $field_set_id, $field_id)
    {
        list($response) = $this->deleteFormFieldFromFieldSetUsingPOSTWithHttpInfo($id, $field_set_id, $field_id);
        return $response;
    }

    /**
     * Delete Field from Fieldset
     *
     * @param  int $id id (required)
     * @param  string $field_set_id fieldSetId (required)
     * @param  string $field_id fieldId (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteFormFieldFromFieldSetUsingPOSTWithHttpInfo($id, $field_set_id, $field_id)
    {
        $request = $this->deleteFormFieldFromFieldSetUsingPOSTRequest($id, $field_set_id, $field_id);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse');
        } catch (ApiException $e) {
            throw $this->deleteFormFieldFromFieldSetUsingPOSTHandleException($e);
        }
    }

    /**
     * Delete Field from Fieldset
     *
     * @param  int $id id (required)
     * @param  string $field_set_id fieldSetId (required)
     * @param  string $field_id fieldId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFormFieldFromFieldSetUsingPOSTAsync($id, $field_set_id, $field_id)
    {
        return $this->deleteFormFieldFromFieldSetUsingPOSTAsyncWithHttpInfo($id, $field_set_id, $field_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Delete Field from Fieldset
     *
     * @param  int $id id (required)
     * @param  string $field_set_id fieldSetId (required)
     * @param  string $field_id fieldId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFormFieldFromFieldSetUsingPOSTAsyncWithHttpInfo($id, $field_set_id, $field_id)
    {
        $request = $this->deleteFormFieldFromFieldSetUsingPOSTRequest($id, $field_set_id, $field_id);
        return $this->makeAsyncRequest($request, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse', [$this, 'deleteFormFieldFromFieldSetUsingPOSTHandleException']);
    }

    /**
     * Create request for operation 'deleteFormFieldFromFieldSetUsingPOST'
     *
     * @param  int $id id (required)
     * @param  string $field_set_id fieldSetId (required)
     * @param  string $field_id fieldId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteFormFieldFromFieldSetUsingPOSTRequest($id, $field_set_id, $field_id)
    {
        // Verify the required parameter 'id' is set.
        if (!isset($id)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteFormFieldFromFieldSetUsingPOST'
            );
        }
        // Verify the required parameter 'field_set_id' is set.
        if (!isset($field_set_id)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $field_set_id when calling deleteFormFieldFromFieldSetUsingPOST'
            );
        }
        // Verify the required parameter 'field_id' is set.
        if (!isset($field_id)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $field_id when calling deleteFormFieldFromFieldSetUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/form/{id}/fieldSet/{fieldSetId}/field/{fieldId}/delete.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $resourcePath = str_replace(
            '{' . 'fieldSetId' . '}',
            ObjectSerializer::toPathValue($field_set_id),
            $resourcePath
        );
        $resourcePath = str_replace(
            '{' . 'fieldId' . '}',
            ObjectSerializer::toPathValue($field_id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Exception handler for deleteFormFieldUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function deleteFormFieldUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse',
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Delete Form Field
     *
     * @param  int $id id (required)
     * @param  string $field_id fieldId (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse
     */
    public function deleteFormFieldUsingPOST($id, $field_id)
    {
        list($response) = $this->deleteFormFieldUsingPOSTWithHttpInfo($id, $field_id);
        return $response;
    }

    /**
     * Delete Form Field
     *
     * @param  int $id id (required)
     * @param  string $field_id fieldId (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteFormFieldUsingPOSTWithHttpInfo($id, $field_id)
    {
        $request = $this->deleteFormFieldUsingPOSTRequest($id, $field_id);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse');
        } catch (ApiException $e) {
            throw $this->deleteFormFieldUsingPOSTHandleException($e);
        }
    }

    /**
     * Delete Form Field
     *
     * @param  int $id id (required)
     * @param  string $field_id fieldId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFormFieldUsingPOSTAsync($id, $field_id)
    {
        return $this->deleteFormFieldUsingPOSTAsyncWithHttpInfo($id, $field_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Delete Form Field
     *
     * @param  int $id id (required)
     * @param  string $field_id fieldId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFormFieldUsingPOSTAsyncWithHttpInfo($id, $field_id)
    {
        $request = $this->deleteFormFieldUsingPOSTRequest($id, $field_id);
        return $this->makeAsyncRequest($request, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse', [$this, 'deleteFormFieldUsingPOSTHandleException']);
    }

    /**
     * Create request for operation 'deleteFormFieldUsingPOST'
     *
     * @param  int $id id (required)
     * @param  string $field_id fieldId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteFormFieldUsingPOSTRequest($id, $field_id)
    {
        // Verify the required parameter 'id' is set.
        if (!isset($id)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteFormFieldUsingPOST'
            );
        }
        // Verify the required parameter 'field_id' is set.
        if (!isset($field_id)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $field_id when calling deleteFormFieldUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/form/{id}/field/{fieldId}/delete.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $resourcePath = str_replace(
            '{' . 'fieldId' . '}',
            ObjectSerializer::toPathValue($field_id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Exception handler for getAllFieldsUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function getAllFieldsUsingGETHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Asset\Model\ResponseOfFieldsMetaDataResponse',
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Available Form Fields
     *
     * @param  int $max_return Maximum number of fields to return.  Max 200, default 20 (optional)
     * @param  int $offset Integer offset for paging (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfFieldsMetaDataResponse
     */
    public function getAllFieldsUsingGET($max_return = null, $offset = null)
    {
        list($response) = $this->getAllFieldsUsingGETWithHttpInfo($max_return, $offset);
        return $response;
    }

    /**
     * Get Available Form Fields
     *
     * @param  int $max_return Maximum number of fields to return.  Max 200, default 20 (optional)
     * @param  int $offset Integer offset for paging (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfFieldsMetaDataResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllFieldsUsingGETWithHttpInfo($max_return = null, $offset = null)
    {
        $request = $this->getAllFieldsUsingGETRequest($max_return, $offset);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfFieldsMetaDataResponse');
        } catch (ApiException $e) {
            throw $this->getAllFieldsUsingGETHandleException($e);
        }
    }

    /**
     * Get Available Form Fields
     *
     * @param  int $max_return Maximum number of fields to return.  Max 200, default 20 (optional)
     * @param  int $offset Integer offset for paging (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllFieldsUsingGETAsync($max_return = null, $offset = null)
    {
        return $this->getAllFieldsUsingGETAsyncWithHttpInfo($max_return, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Get Available Form Fields
     *
     * @param  int $max_return Maximum number of fields to return.  Max 200, default 20 (optional)
     * @param  int $offset Integer offset for paging (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllFieldsUsingGETAsyncWithHttpInfo($max_return = null, $offset = null)
    {
        $request = $this->getAllFieldsUsingGETRequest($max_return, $offset);
        return $this->makeAsyncRequest($request, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfFieldsMetaDataResponse', [$this, 'getAllFieldsUsingGETHandleException']);
    }

    /**
     * Create request for operation 'getAllFieldsUsingGET'
     *
     * @param  int $max_return Maximum number of fields to return.  Max 200, default 20 (optional)
     * @param  int $offset Integer offset for paging (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAllFieldsUsingGETRequest($max_return = null, $offset = null)
    {

        $resourcePath = '/rest/asset/v1/form/fields.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Query parameters.
        $queryParams['maxReturn'] = ObjectSerializer::toQueryValue($max_return);
        $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        // Remove any null (optional values).
        $queryParams = array_filter($queryParams, function($v) { return $v !== null; });
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Exception handler for getAllProgramMemberFieldsUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function getAllProgramMemberFieldsUsingGETHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Asset\Model\ResponseOfFieldsMetaDataResponse',
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Available Form Program Member Fields
     *
     * @param  int $max_return Maximum number of fields to return.  Max 200, default 20 (optional)
     * @param  int $offset Integer offset for paging (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfFieldsMetaDataResponse
     */
    public function getAllProgramMemberFieldsUsingGET($max_return = null, $offset = null)
    {
        list($response) = $this->getAllProgramMemberFieldsUsingGETWithHttpInfo($max_return, $offset);
        return $response;
    }

    /**
     * Get Available Form Program Member Fields
     *
     * @param  int $max_return Maximum number of fields to return.  Max 200, default 20 (optional)
     * @param  int $offset Integer offset for paging (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfFieldsMetaDataResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllProgramMemberFieldsUsingGETWithHttpInfo($max_return = null, $offset = null)
    {
        $request = $this->getAllProgramMemberFieldsUsingGETRequest($max_return, $offset);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfFieldsMetaDataResponse');
        } catch (ApiException $e) {
            throw $this->getAllProgramMemberFieldsUsingGETHandleException($e);
        }
    }

    /**
     * Get Available Form Program Member Fields
     *
     * @param  int $max_return Maximum number of fields to return.  Max 200, default 20 (optional)
     * @param  int $offset Integer offset for paging (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllProgramMemberFieldsUsingGETAsync($max_return = null, $offset = null)
    {
        return $this->getAllProgramMemberFieldsUsingGETAsyncWithHttpInfo($max_return, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Get Available Form Program Member Fields
     *
     * @param  int $max_return Maximum number of fields to return.  Max 200, default 20 (optional)
     * @param  int $offset Integer offset for paging (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllProgramMemberFieldsUsingGETAsyncWithHttpInfo($max_return = null, $offset = null)
    {
        $request = $this->getAllProgramMemberFieldsUsingGETRequest($max_return, $offset);
        return $this->makeAsyncRequest($request, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfFieldsMetaDataResponse', [$this, 'getAllProgramMemberFieldsUsingGETHandleException']);
    }

    /**
     * Create request for operation 'getAllProgramMemberFieldsUsingGET'
     *
     * @param  int $max_return Maximum number of fields to return.  Max 200, default 20 (optional)
     * @param  int $offset Integer offset for paging (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAllProgramMemberFieldsUsingGETRequest($max_return = null, $offset = null)
    {

        $resourcePath = '/rest/asset/v1/form/programMemberFields.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Query parameters.
        $queryParams['maxReturn'] = ObjectSerializer::toQueryValue($max_return);
        $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        // Remove any null (optional values).
        $queryParams = array_filter($queryParams, function($v) { return $v !== null; });
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Exception handler for getFormFieldByFormVidUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function getFormFieldByFormVidUsingGETHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormFieldResponse',
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Fields for Form
     *
     * @param  int $id id (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormFieldResponse
     */
    public function getFormFieldByFormVidUsingGET($id, $status = null)
    {
        list($response) = $this->getFormFieldByFormVidUsingGETWithHttpInfo($id, $status);
        return $response;
    }

    /**
     * Get Fields for Form
     *
     * @param  int $id id (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormFieldResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFormFieldByFormVidUsingGETWithHttpInfo($id, $status = null)
    {
        $request = $this->getFormFieldByFormVidUsingGETRequest($id, $status);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormFieldResponse');
        } catch (ApiException $e) {
            throw $this->getFormFieldByFormVidUsingGETHandleException($e);
        }
    }

    /**
     * Get Fields for Form
     *
     * @param  int $id id (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFormFieldByFormVidUsingGETAsync($id, $status = null)
    {
        return $this->getFormFieldByFormVidUsingGETAsyncWithHttpInfo($id, $status)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Get Fields for Form
     *
     * @param  int $id id (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFormFieldByFormVidUsingGETAsyncWithHttpInfo($id, $status = null)
    {
        $request = $this->getFormFieldByFormVidUsingGETRequest($id, $status);
        return $this->makeAsyncRequest($request, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormFieldResponse', [$this, 'getFormFieldByFormVidUsingGETHandleException']);
    }

    /**
     * Create request for operation 'getFormFieldByFormVidUsingGET'
     *
     * @param  int $id id (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getFormFieldByFormVidUsingGETRequest($id, $status = null)
    {
        // Verify the required parameter 'id' is set.
        if (!isset($id)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getFormFieldByFormVidUsingGET'
            );
        }

        $resourcePath = '/rest/asset/v1/form/{id}/fields.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Query parameters.
        $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        // Remove any null (optional values).
        $queryParams = array_filter($queryParams, function($v) { return $v !== null; });

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Exception handler for updateFieldPositionsUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function updateFieldPositionsUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse',
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Update Field Positions
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\ReArrangeRequest $re_arrange_request reArrangeRequest (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse
     */
    public function updateFieldPositionsUsingPOST($id, $re_arrange_request = null)
    {
        list($response) = $this->updateFieldPositionsUsingPOSTWithHttpInfo($id, $re_arrange_request);
        return $response;
    }

    /**
     * Update Field Positions
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\ReArrangeRequest $re_arrange_request reArrangeRequest (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateFieldPositionsUsingPOSTWithHttpInfo($id, $re_arrange_request = null)
    {
        $request = $this->updateFieldPositionsUsingPOSTRequest($id, $re_arrange_request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse');
        } catch (ApiException $e) {
            throw $this->updateFieldPositionsUsingPOSTHandleException($e);
        }
    }

    /**
     * Update Field Positions
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\ReArrangeRequest $re_arrange_request reArrangeRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateFieldPositionsUsingPOSTAsync($id, $re_arrange_request = null)
    {
        return $this->updateFieldPositionsUsingPOSTAsyncWithHttpInfo($id, $re_arrange_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Update Field Positions
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\ReArrangeRequest $re_arrange_request reArrangeRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateFieldPositionsUsingPOSTAsyncWithHttpInfo($id, $re_arrange_request = null)
    {
        $request = $this->updateFieldPositionsUsingPOSTRequest($id, $re_arrange_request);
        return $this->makeAsyncRequest($request, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse', [$this, 'updateFieldPositionsUsingPOSTHandleException']);
    }

    /**
     * Create request for operation 'updateFieldPositionsUsingPOST'
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\ReArrangeRequest $re_arrange_request reArrangeRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateFieldPositionsUsingPOSTRequest($id, $re_arrange_request = null)
    {
        // Verify the required parameter 'id' is set.
        if (!isset($id)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateFieldPositionsUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/form/{id}/reArrange.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );
        // for model (json/xml)
        if (!empty($re_arrange_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($re_arrange_request));
            } elseif (!is_array($re_arrange_request)) {
                $httpBody = (string) $re_arrange_request;
            }
            else {
                $httpBody = '';
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Exception handler for updateFormFieldUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function updateFormFieldUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormFieldResponse',
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Update Form Field
     *
     * @param  int $id id (required)
     * @param  string $field_id fieldId (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\UpdateFormFieldRequest $update_form_field_request updateFormFieldRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormFieldResponse
     */
    public function updateFormFieldUsingPOST($id, $field_id, $update_form_field_request)
    {
        list($response) = $this->updateFormFieldUsingPOSTWithHttpInfo($id, $field_id, $update_form_field_request);
        return $response;
    }

    /**
     * Update Form Field
     *
     * @param  int $id id (required)
     * @param  string $field_id fieldId (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\UpdateFormFieldRequest $update_form_field_request updateFormFieldRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormFieldResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateFormFieldUsingPOSTWithHttpInfo($id, $field_id, $update_form_field_request)
    {
        $request = $this->updateFormFieldUsingPOSTRequest($id, $field_id, $update_form_field_request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormFieldResponse');
        } catch (ApiException $e) {
            throw $this->updateFormFieldUsingPOSTHandleException($e);
        }
    }

    /**
     * Update Form Field
     *
     * @param  int $id id (required)
     * @param  string $field_id fieldId (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\UpdateFormFieldRequest $update_form_field_request updateFormFieldRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateFormFieldUsingPOSTAsync($id, $field_id, $update_form_field_request)
    {
        return $this->updateFormFieldUsingPOSTAsyncWithHttpInfo($id, $field_id, $update_form_field_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Update Form Field
     *
     * @param  int $id id (required)
     * @param  string $field_id fieldId (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\UpdateFormFieldRequest $update_form_field_request updateFormFieldRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateFormFieldUsingPOSTAsyncWithHttpInfo($id, $field_id, $update_form_field_request)
    {
        $request = $this->updateFormFieldUsingPOSTRequest($id, $field_id, $update_form_field_request);
        return $this->makeAsyncRequest($request, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormFieldResponse', [$this, 'updateFormFieldUsingPOSTHandleException']);
    }

    /**
     * Create request for operation 'updateFormFieldUsingPOST'
     *
     * @param  int $id id (required)
     * @param  string $field_id fieldId (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\UpdateFormFieldRequest $update_form_field_request updateFormFieldRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateFormFieldUsingPOSTRequest($id, $field_id, $update_form_field_request)
    {
        // Verify the required parameter 'id' is set.
        if (!isset($id)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateFormFieldUsingPOST'
            );
        }
        // Verify the required parameter 'field_id' is set.
        if (!isset($field_id)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $field_id when calling updateFormFieldUsingPOST'
            );
        }
        // Verify the required parameter 'update_form_field_request' is set.
        if (!isset($update_form_field_request)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_form_field_request when calling updateFormFieldUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/form/{id}/field/{fieldId}.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $resourcePath = str_replace(
            '{' . 'fieldId' . '}',
            ObjectSerializer::toPathValue($field_id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );
        if ($headers['Content-Type'] === 'application/json') {
          $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($update_form_field_request));
        } elseif (!is_array($update_form_field_request)) {
          $httpBody = (string) $update_form_field_request;
        }
        else {
          $httpBody = '';
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    /**
     * Make a request.
     *
     * @param \GuzzleHttp\Psr7\Request $request An initialized request object.
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @return \Psr\Http\Message\ResponseInterface
     */
    private function makeRequest(Request $request) {
        $options = $this->createHttpClientOption();
        try {
           $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            $response = $e->getResponse();
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                (int) $e->getCode(),
                $response ? $response->getHeaders() : null,
                $response ? (string) $response->getBody() : null
            );
        }

        $statusCode = $response->getStatusCode();
        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    (string) $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                (string) $response->getBody()
            );
        }
        return $response;
    }

    /**
     * Make an async request.
     *
     * @param \GuzzleHttp\Psr7\Request $request An initialized request object.
     * @param string $returnType The return type.
     * @param callable $exceptionHandler A callback to process HTTP errors.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @return \GuzzleHttp\Promise\PromiseInterface A promise that will return a processed response.
     */
    private function makeAsyncRequest(Request $request, string $returnType, callable $exceptionHandler)
    {
        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->responseToReturn($response, $returnType);
                },
                function (RequestException $exception) use ($exceptionHandler) {
                    $response = $exception->getResponse();
                    $e = new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                    throw $exceptionHandler($e);
                }
            );
    }

    /**
     * Convert a response to a return standard return array.
     *
     * @param \Psr\Http\Message\ResponseInterface $response A response from a request with a serialized body.
     * @param string $returnType The primary return type.
     *
     * @return array
     */
    private function responseToReturn(ResponseInterface $response, string $returnType) {
        return [
            $this->deserializeResponseBody($response->getBody(), $returnType),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    /**
     * Deserialize a response body.
     *
     * @param mixed $responseBody
     *   The response body.
     * @param string $returnType
     *   The return type.
     * @param array<string, string[]>|null $headers
     *   The a list of headers from the response.
     * @return mixed
     *   Either a string or a stream to be passed to a file object.
     */
    private function deserializeResponseBody($responseBody, string $returnType, ?array $headers = [])
    {
        return ObjectSerializer::deserialize(
            $returnType === '\SplFileObject' ? $responseBody : (string) $responseBody,
            $returnType,
            $headers
        );
    }

}
