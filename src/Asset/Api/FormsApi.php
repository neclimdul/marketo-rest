<?php

/**
 * FormsApi
 *
 * Marketo Rest API
 *
 * Marketo Rest API
 *
 * OpenAPI spec version: 1.0
 * Contact: developerfeedback@marketo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.26
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Asset
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace NecLimDul\MarketoRest\Asset\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\Promise\PromiseInterface;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\ResponseInterface;
use NecLimDul\MarketoRest\Asset\ApiException;
use NecLimDul\MarketoRest\Asset\Configuration;
use NecLimDul\MarketoRest\Asset\HeaderSelector;
use NecLimDul\MarketoRest\Asset\ObjectSerializer;

/**
 * FormsApi Class Doc Comment
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Asset
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FormsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the spec.
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Exception handler for approveFromUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function approveFromUsingPOSTHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Approve Form Draft
     *
     * @param int $id
     *   id
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse
     */
    public function approveFromUsingPOST(
        int $id
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse {
        list($response) = $this->approveFromUsingPOSTWithHttpInfo($id);
        return $response;
    }

    /**
     * Approve Form Draft
     *
     * @param int $id
     *   id
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function approveFromUsingPOSTWithHttpInfo(
        int $id
    ): array {
        $request = $this->approveFromUsingPOSTRequest($id);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse::class
            );
        } catch (ApiException $e) {
            throw $this->approveFromUsingPOSTHandleException($e);
        }
    }

    /**
     * Approve Form Draft
     *
     * @param int $id
     *   id
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function approveFromUsingPOSTAsync(
        int $id
    ): PromiseInterface {
        return $this->approveFromUsingPOSTAsyncWithHttpInfo($id)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Approve Form Draft
     *
     * @param int $id
     *   id
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function approveFromUsingPOSTAsyncWithHttpInfo(
        int $id
    ): PromiseInterface {
        $request = $this->approveFromUsingPOSTRequest($id);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse::class,
            [$this, 'approveFromUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'approveFromUsingPOST'
     *
     * @param int $id
     *   id
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function approveFromUsingPOSTRequest(
        int $id
    ): Request {

        $resourcePath = '/rest/asset/v1/form/{id}/approveDraft.json';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for browseForms2UsingGET.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function browseForms2UsingGETHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Forms
     *
     * @param string $folder
     *   JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39;
     * @param string|null $status
     *   Status filter for draft or approved versions
     * @param string|null $max_return
     *   Maximum number of channels to return.  Max 200, default 20
     * @param string|null $offset
     *   Integer offset for paging
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse
     */
    public function browseForms2UsingGET(
        string $folder,
        string $status = null,
        string $max_return = null,
        string $offset = null
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse {
        list($response) = $this->browseForms2UsingGETWithHttpInfo($folder, $status, $max_return, $offset);
        return $response;
    }

    /**
     * Get Forms
     *
     * @param string $folder
     *   JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39;
     * @param string|null $status
     *   Status filter for draft or approved versions
     * @param string|null $max_return
     *   Maximum number of channels to return.  Max 200, default 20
     * @param string|null $offset
     *   Integer offset for paging
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function browseForms2UsingGETWithHttpInfo(
        string $folder,
        string $status = null,
        string $max_return = null,
        string $offset = null
    ): array {
        $request = $this->browseForms2UsingGETRequest($folder, $status, $max_return, $offset);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse::class
            );
        } catch (ApiException $e) {
            throw $this->browseForms2UsingGETHandleException($e);
        }
    }

    /**
     * Get Forms
     *
     * @param string $folder
     *   JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39;
     * @param string|null $status
     *   Status filter for draft or approved versions
     * @param string|null $max_return
     *   Maximum number of channels to return.  Max 200, default 20
     * @param string|null $offset
     *   Integer offset for paging
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function browseForms2UsingGETAsync(
        string $folder,
        string $status = null,
        string $max_return = null,
        string $offset = null
    ): PromiseInterface {
        return $this->browseForms2UsingGETAsyncWithHttpInfo($folder, $status, $max_return, $offset)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Get Forms
     *
     * @param string $folder
     *   JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39;
     * @param string|null $status
     *   Status filter for draft or approved versions
     * @param string|null $max_return
     *   Maximum number of channels to return.  Max 200, default 20
     * @param string|null $offset
     *   Integer offset for paging
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function browseForms2UsingGETAsyncWithHttpInfo(
        string $folder,
        string $status = null,
        string $max_return = null,
        string $offset = null
    ): PromiseInterface {
        $request = $this->browseForms2UsingGETRequest($folder, $status, $max_return, $offset);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse::class,
            [$this, 'browseForms2UsingGETHandleException']
        );
    }

    /**
     * Create request for operation 'browseForms2UsingGET'
     *
     * @param string $folder
     *   JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39;
     * @param string|null $status
     *   Status filter for draft or approved versions
     * @param string|null $max_return
     *   Maximum number of channels to return.  Max 200, default 20
     * @param string|null $offset
     *   Integer offset for paging
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function browseForms2UsingGETRequest(
        string $folder,
        string $status = null,
        string $max_return = null,
        string $offset = null
    ): Request {

        $resourcePath = '/rest/asset/v1/forms.json';

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'GET',
            $operationHost . $resourcePath,
            // Query.
            [
                'status' => isset($status) ? ObjectSerializer::toQueryValue($status) : null,
                'folder' => ObjectSerializer::toQueryValue($folder),
                'maxReturn' => isset($max_return) ? ObjectSerializer::toQueryValue($max_return) : null,
                'offset' => isset($offset) ? ObjectSerializer::toQueryValue($offset) : null,
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for cloneLpFormsUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function cloneLpFormsUsingPOSTHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Clone Form
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\CloneFormRequest|null $clone_form_request
     *   cloneFormRequest
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse
     */
    public function cloneLpFormsUsingPOST(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\CloneFormRequest $clone_form_request = null
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse {
        list($response) = $this->cloneLpFormsUsingPOSTWithHttpInfo($id, $clone_form_request);
        return $response;
    }

    /**
     * Clone Form
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\CloneFormRequest|null $clone_form_request
     *   cloneFormRequest
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function cloneLpFormsUsingPOSTWithHttpInfo(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\CloneFormRequest $clone_form_request = null
    ): array {
        $request = $this->cloneLpFormsUsingPOSTRequest($id, $clone_form_request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse::class
            );
        } catch (ApiException $e) {
            throw $this->cloneLpFormsUsingPOSTHandleException($e);
        }
    }

    /**
     * Clone Form
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\CloneFormRequest|null $clone_form_request
     *   cloneFormRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cloneLpFormsUsingPOSTAsync(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\CloneFormRequest $clone_form_request = null
    ): PromiseInterface {
        return $this->cloneLpFormsUsingPOSTAsyncWithHttpInfo($id, $clone_form_request)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Clone Form
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\CloneFormRequest|null $clone_form_request
     *   cloneFormRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cloneLpFormsUsingPOSTAsyncWithHttpInfo(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\CloneFormRequest $clone_form_request = null
    ): PromiseInterface {
        $request = $this->cloneLpFormsUsingPOSTRequest($id, $clone_form_request);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse::class,
            [$this, 'cloneLpFormsUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'cloneLpFormsUsingPOST'
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\CloneFormRequest|null $clone_form_request
     *   cloneFormRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function cloneLpFormsUsingPOSTRequest(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\CloneFormRequest $clone_form_request = null
    ): Request {

        $resourcePath = '/rest/asset/v1/form/{id}/clone.json';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            $clone_form_request
        );
    }

    /**
     * Exception handler for createLpFormsUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function createLpFormsUsingPOSTHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Create Form
     *
     * @param \NecLimDul\MarketoRest\Asset\Model\CreateLpFormRequest $create_form_request
     *   createFormRequest
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse
     */
    public function createLpFormsUsingPOST(
        \NecLimDul\MarketoRest\Asset\Model\CreateLpFormRequest $create_form_request
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse {
        list($response) = $this->createLpFormsUsingPOSTWithHttpInfo($create_form_request);
        return $response;
    }

    /**
     * Create Form
     *
     * @param \NecLimDul\MarketoRest\Asset\Model\CreateLpFormRequest $create_form_request
     *   createFormRequest
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function createLpFormsUsingPOSTWithHttpInfo(
        \NecLimDul\MarketoRest\Asset\Model\CreateLpFormRequest $create_form_request
    ): array {
        $request = $this->createLpFormsUsingPOSTRequest($create_form_request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse::class
            );
        } catch (ApiException $e) {
            throw $this->createLpFormsUsingPOSTHandleException($e);
        }
    }

    /**
     * Create Form
     *
     * @param \NecLimDul\MarketoRest\Asset\Model\CreateLpFormRequest $create_form_request
     *   createFormRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createLpFormsUsingPOSTAsync(
        \NecLimDul\MarketoRest\Asset\Model\CreateLpFormRequest $create_form_request
    ): PromiseInterface {
        return $this->createLpFormsUsingPOSTAsyncWithHttpInfo($create_form_request)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Create Form
     *
     * @param \NecLimDul\MarketoRest\Asset\Model\CreateLpFormRequest $create_form_request
     *   createFormRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createLpFormsUsingPOSTAsyncWithHttpInfo(
        \NecLimDul\MarketoRest\Asset\Model\CreateLpFormRequest $create_form_request
    ): PromiseInterface {
        $request = $this->createLpFormsUsingPOSTRequest($create_form_request);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse::class,
            [$this, 'createLpFormsUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'createLpFormsUsingPOST'
     *
     * @param \NecLimDul\MarketoRest\Asset\Model\CreateLpFormRequest $create_form_request
     *   createFormRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createLpFormsUsingPOSTRequest(
        \NecLimDul\MarketoRest\Asset\Model\CreateLpFormRequest $create_form_request
    ): Request {

        $resourcePath = '/rest/asset/v1/forms.json';

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            $create_form_request
        );
    }

    /**
     * Exception handler for deleteFormByIdUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function deleteFormByIdUsingPOSTHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Delete Form
     *
     * @param int $id
     *   id
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse
     */
    public function deleteFormByIdUsingPOST(
        int $id
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse {
        list($response) = $this->deleteFormByIdUsingPOSTWithHttpInfo($id);
        return $response;
    }

    /**
     * Delete Form
     *
     * @param int $id
     *   id
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function deleteFormByIdUsingPOSTWithHttpInfo(
        int $id
    ): array {
        $request = $this->deleteFormByIdUsingPOSTRequest($id);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class
            );
        } catch (ApiException $e) {
            throw $this->deleteFormByIdUsingPOSTHandleException($e);
        }
    }

    /**
     * Delete Form
     *
     * @param int $id
     *   id
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFormByIdUsingPOSTAsync(
        int $id
    ): PromiseInterface {
        return $this->deleteFormByIdUsingPOSTAsyncWithHttpInfo($id)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Delete Form
     *
     * @param int $id
     *   id
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFormByIdUsingPOSTAsyncWithHttpInfo(
        int $id
    ): PromiseInterface {
        $request = $this->deleteFormByIdUsingPOSTRequest($id);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class,
            [$this, 'deleteFormByIdUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'deleteFormByIdUsingPOST'
     *
     * @param int $id
     *   id
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteFormByIdUsingPOSTRequest(
        int $id
    ): Request {

        $resourcePath = '/rest/asset/v1/form/{id}/delete.json';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for discardFormByIdUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function discardFormByIdUsingPOSTHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Discard Form Draft
     *
     * @param int $id
     *   id
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse
     */
    public function discardFormByIdUsingPOST(
        int $id
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse {
        list($response) = $this->discardFormByIdUsingPOSTWithHttpInfo($id);
        return $response;
    }

    /**
     * Discard Form Draft
     *
     * @param int $id
     *   id
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function discardFormByIdUsingPOSTWithHttpInfo(
        int $id
    ): array {
        $request = $this->discardFormByIdUsingPOSTRequest($id);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class
            );
        } catch (ApiException $e) {
            throw $this->discardFormByIdUsingPOSTHandleException($e);
        }
    }

    /**
     * Discard Form Draft
     *
     * @param int $id
     *   id
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function discardFormByIdUsingPOSTAsync(
        int $id
    ): PromiseInterface {
        return $this->discardFormByIdUsingPOSTAsyncWithHttpInfo($id)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Discard Form Draft
     *
     * @param int $id
     *   id
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function discardFormByIdUsingPOSTAsyncWithHttpInfo(
        int $id
    ): PromiseInterface {
        $request = $this->discardFormByIdUsingPOSTRequest($id);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class,
            [$this, 'discardFormByIdUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'discardFormByIdUsingPOST'
     *
     * @param int $id
     *   id
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function discardFormByIdUsingPOSTRequest(
        int $id
    ): Request {

        $resourcePath = '/rest/asset/v1/form/{id}/discardDraft.json';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for getFormUsedByUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function getFormUsedByUsingGETHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfFormUsedByResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Form Used By
     *
     * @param int $id
     *   Id of the form
     * @param int|null $offset
     *   Integer offset for paging
     * @param int|null $max_return
     *   Maximum number of assets to return.  Max 200, default 20
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfFormUsedByResponse
     */
    public function getFormUsedByUsingGET(
        int $id,
        int $offset = null,
        int $max_return = null
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfFormUsedByResponse {
        list($response) = $this->getFormUsedByUsingGETWithHttpInfo($id, $offset, $max_return);
        return $response;
    }

    /**
     * Get Form Used By
     *
     * @param int $id
     *   Id of the form
     * @param int|null $offset
     *   Integer offset for paging
     * @param int|null $max_return
     *   Maximum number of assets to return.  Max 200, default 20
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfFormUsedByResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function getFormUsedByUsingGETWithHttpInfo(
        int $id,
        int $offset = null,
        int $max_return = null
    ): array {
        $request = $this->getFormUsedByUsingGETRequest($id, $offset, $max_return);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfFormUsedByResponse::class
            );
        } catch (ApiException $e) {
            throw $this->getFormUsedByUsingGETHandleException($e);
        }
    }

    /**
     * Get Form Used By
     *
     * @param int $id
     *   Id of the form
     * @param int|null $offset
     *   Integer offset for paging
     * @param int|null $max_return
     *   Maximum number of assets to return.  Max 200, default 20
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFormUsedByUsingGETAsync(
        int $id,
        int $offset = null,
        int $max_return = null
    ): PromiseInterface {
        return $this->getFormUsedByUsingGETAsyncWithHttpInfo($id, $offset, $max_return)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfFormUsedByResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Get Form Used By
     *
     * @param int $id
     *   Id of the form
     * @param int|null $offset
     *   Integer offset for paging
     * @param int|null $max_return
     *   Maximum number of assets to return.  Max 200, default 20
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFormUsedByUsingGETAsyncWithHttpInfo(
        int $id,
        int $offset = null,
        int $max_return = null
    ): PromiseInterface {
        $request = $this->getFormUsedByUsingGETRequest($id, $offset, $max_return);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfFormUsedByResponse::class,
            [$this, 'getFormUsedByUsingGETHandleException']
        );
    }

    /**
     * Create request for operation 'getFormUsedByUsingGET'
     *
     * @param int $id
     *   Id of the form
     * @param int|null $offset
     *   Integer offset for paging
     * @param int|null $max_return
     *   Maximum number of assets to return.  Max 200, default 20
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getFormUsedByUsingGETRequest(
        int $id,
        int $offset = null,
        int $max_return = null
    ): Request {

        $resourcePath = '/rest/asset/v1/form/{id}/usedBy.json';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'GET',
            $operationHost . $resourcePath,
            // Query.
            [
                'offset' => isset($offset) ? ObjectSerializer::toQueryValue($offset) : null,
                'maxReturn' => isset($max_return) ? ObjectSerializer::toQueryValue($max_return) : null,
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for getLpFormByIdUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function getLpFormByIdUsingGETHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Form By Id
     *
     * @param int $id
     *   id
     * @param string|null $status
     *   Status filter for draft or approved versions
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse
     */
    public function getLpFormByIdUsingGET(
        int $id,
        string $status = null
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse {
        list($response) = $this->getLpFormByIdUsingGETWithHttpInfo($id, $status);
        return $response;
    }

    /**
     * Get Form By Id
     *
     * @param int $id
     *   id
     * @param string|null $status
     *   Status filter for draft or approved versions
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function getLpFormByIdUsingGETWithHttpInfo(
        int $id,
        string $status = null
    ): array {
        $request = $this->getLpFormByIdUsingGETRequest($id, $status);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse::class
            );
        } catch (ApiException $e) {
            throw $this->getLpFormByIdUsingGETHandleException($e);
        }
    }

    /**
     * Get Form By Id
     *
     * @param int $id
     *   id
     * @param string|null $status
     *   Status filter for draft or approved versions
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLpFormByIdUsingGETAsync(
        int $id,
        string $status = null
    ): PromiseInterface {
        return $this->getLpFormByIdUsingGETAsyncWithHttpInfo($id, $status)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Get Form By Id
     *
     * @param int $id
     *   id
     * @param string|null $status
     *   Status filter for draft or approved versions
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLpFormByIdUsingGETAsyncWithHttpInfo(
        int $id,
        string $status = null
    ): PromiseInterface {
        $request = $this->getLpFormByIdUsingGETRequest($id, $status);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse::class,
            [$this, 'getLpFormByIdUsingGETHandleException']
        );
    }

    /**
     * Create request for operation 'getLpFormByIdUsingGET'
     *
     * @param int $id
     *   id
     * @param string|null $status
     *   Status filter for draft or approved versions
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLpFormByIdUsingGETRequest(
        int $id,
        string $status = null
    ): Request {

        $resourcePath = '/rest/asset/v1/form/{id}.json';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'GET',
            $operationHost . $resourcePath,
            // Query.
            [
                'status' => isset($status) ? ObjectSerializer::toQueryValue($status) : null,
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for getLpFormByNameUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function getLpFormByNameUsingGETHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Form by Name
     *
     * @param string $name
     *   Name of the form
     * @param string|null $status
     *   Status filter for draft or approved versions
     * @param string|null $folder
     *   JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39;
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse
     */
    public function getLpFormByNameUsingGET(
        string $name,
        string $status = null,
        string $folder = null
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse {
        list($response) = $this->getLpFormByNameUsingGETWithHttpInfo($name, $status, $folder);
        return $response;
    }

    /**
     * Get Form by Name
     *
     * @param string $name
     *   Name of the form
     * @param string|null $status
     *   Status filter for draft or approved versions
     * @param string|null $folder
     *   JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39;
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function getLpFormByNameUsingGETWithHttpInfo(
        string $name,
        string $status = null,
        string $folder = null
    ): array {
        $request = $this->getLpFormByNameUsingGETRequest($name, $status, $folder);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse::class
            );
        } catch (ApiException $e) {
            throw $this->getLpFormByNameUsingGETHandleException($e);
        }
    }

    /**
     * Get Form by Name
     *
     * @param string $name
     *   Name of the form
     * @param string|null $status
     *   Status filter for draft or approved versions
     * @param string|null $folder
     *   JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39;
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLpFormByNameUsingGETAsync(
        string $name,
        string $status = null,
        string $folder = null
    ): PromiseInterface {
        return $this->getLpFormByNameUsingGETAsyncWithHttpInfo($name, $status, $folder)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Get Form by Name
     *
     * @param string $name
     *   Name of the form
     * @param string|null $status
     *   Status filter for draft or approved versions
     * @param string|null $folder
     *   JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39;
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLpFormByNameUsingGETAsyncWithHttpInfo(
        string $name,
        string $status = null,
        string $folder = null
    ): PromiseInterface {
        $request = $this->getLpFormByNameUsingGETRequest($name, $status, $folder);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse::class,
            [$this, 'getLpFormByNameUsingGETHandleException']
        );
    }

    /**
     * Create request for operation 'getLpFormByNameUsingGET'
     *
     * @param string $name
     *   Name of the form
     * @param string|null $status
     *   Status filter for draft or approved versions
     * @param string|null $folder
     *   JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39;
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLpFormByNameUsingGETRequest(
        string $name,
        string $status = null,
        string $folder = null
    ): Request {

        $resourcePath = '/rest/asset/v1/form/byName.json';

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'GET',
            $operationHost . $resourcePath,
            // Query.
            [
                'name' => ObjectSerializer::toQueryValue($name),
                'status' => isset($status) ? ObjectSerializer::toQueryValue($status) : null,
                'folder' => isset($folder) ? ObjectSerializer::toQueryValue($folder) : null,
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for getThankYouPageByIdUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function getThankYouPageByIdUsingGETHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfThankYouPageResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Thank You Page by Form Id
     *
     * @param int $id
     *   id
     * @param string|null $status
     *   Status filter for draft or approved versions
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfThankYouPageResponse
     */
    public function getThankYouPageByIdUsingGET(
        int $id,
        string $status = null
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfThankYouPageResponse {
        list($response) = $this->getThankYouPageByIdUsingGETWithHttpInfo($id, $status);
        return $response;
    }

    /**
     * Get Thank You Page by Form Id
     *
     * @param int $id
     *   id
     * @param string|null $status
     *   Status filter for draft or approved versions
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfThankYouPageResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function getThankYouPageByIdUsingGETWithHttpInfo(
        int $id,
        string $status = null
    ): array {
        $request = $this->getThankYouPageByIdUsingGETRequest($id, $status);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfThankYouPageResponse::class
            );
        } catch (ApiException $e) {
            throw $this->getThankYouPageByIdUsingGETHandleException($e);
        }
    }

    /**
     * Get Thank You Page by Form Id
     *
     * @param int $id
     *   id
     * @param string|null $status
     *   Status filter for draft or approved versions
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getThankYouPageByIdUsingGETAsync(
        int $id,
        string $status = null
    ): PromiseInterface {
        return $this->getThankYouPageByIdUsingGETAsyncWithHttpInfo($id, $status)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfThankYouPageResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Get Thank You Page by Form Id
     *
     * @param int $id
     *   id
     * @param string|null $status
     *   Status filter for draft or approved versions
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getThankYouPageByIdUsingGETAsyncWithHttpInfo(
        int $id,
        string $status = null
    ): PromiseInterface {
        $request = $this->getThankYouPageByIdUsingGETRequest($id, $status);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfThankYouPageResponse::class,
            [$this, 'getThankYouPageByIdUsingGETHandleException']
        );
    }

    /**
     * Create request for operation 'getThankYouPageByIdUsingGET'
     *
     * @param int $id
     *   id
     * @param string|null $status
     *   Status filter for draft or approved versions
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getThankYouPageByIdUsingGETRequest(
        int $id,
        string $status = null
    ): Request {

        $resourcePath = '/rest/asset/v1/form/{id}/thankYouPage.json';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'GET',
            $operationHost . $resourcePath,
            // Query.
            [
                'status' => isset($status) ? ObjectSerializer::toQueryValue($status) : null,
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for updateFormSubmitButtonUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function updateFormSubmitButtonUsingPOSTHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Update Submit Button
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\SubmitButtonRequest $submit_button_request
     *   submitButtonRequest
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse
     */
    public function updateFormSubmitButtonUsingPOST(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\SubmitButtonRequest $submit_button_request
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse {
        list($response) = $this->updateFormSubmitButtonUsingPOSTWithHttpInfo($id, $submit_button_request);
        return $response;
    }

    /**
     * Update Submit Button
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\SubmitButtonRequest $submit_button_request
     *   submitButtonRequest
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function updateFormSubmitButtonUsingPOSTWithHttpInfo(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\SubmitButtonRequest $submit_button_request
    ): array {
        $request = $this->updateFormSubmitButtonUsingPOSTRequest($id, $submit_button_request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse::class
            );
        } catch (ApiException $e) {
            throw $this->updateFormSubmitButtonUsingPOSTHandleException($e);
        }
    }

    /**
     * Update Submit Button
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\SubmitButtonRequest $submit_button_request
     *   submitButtonRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateFormSubmitButtonUsingPOSTAsync(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\SubmitButtonRequest $submit_button_request
    ): PromiseInterface {
        return $this->updateFormSubmitButtonUsingPOSTAsyncWithHttpInfo($id, $submit_button_request)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Update Submit Button
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\SubmitButtonRequest $submit_button_request
     *   submitButtonRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateFormSubmitButtonUsingPOSTAsyncWithHttpInfo(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\SubmitButtonRequest $submit_button_request
    ): PromiseInterface {
        $request = $this->updateFormSubmitButtonUsingPOSTRequest($id, $submit_button_request);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse::class,
            [$this, 'updateFormSubmitButtonUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'updateFormSubmitButtonUsingPOST'
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\SubmitButtonRequest $submit_button_request
     *   submitButtonRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateFormSubmitButtonUsingPOSTRequest(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\SubmitButtonRequest $submit_button_request
    ): Request {

        $resourcePath = '/rest/asset/v1/form/{id}/submitButton.json';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            $submit_button_request
        );
    }

    /**
     * Exception handler for updateFormsUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function updateFormsUsingPOSTHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Update Form Metadata
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\UpdateFormMetaDataRequest $update_form_meta_data_request
     *   updateFormMetaDataRequest
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse
     */
    public function updateFormsUsingPOST(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\UpdateFormMetaDataRequest $update_form_meta_data_request
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse {
        list($response) = $this->updateFormsUsingPOSTWithHttpInfo($id, $update_form_meta_data_request);
        return $response;
    }

    /**
     * Update Form Metadata
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\UpdateFormMetaDataRequest $update_form_meta_data_request
     *   updateFormMetaDataRequest
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function updateFormsUsingPOSTWithHttpInfo(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\UpdateFormMetaDataRequest $update_form_meta_data_request
    ): array {
        $request = $this->updateFormsUsingPOSTRequest($id, $update_form_meta_data_request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse::class
            );
        } catch (ApiException $e) {
            throw $this->updateFormsUsingPOSTHandleException($e);
        }
    }

    /**
     * Update Form Metadata
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\UpdateFormMetaDataRequest $update_form_meta_data_request
     *   updateFormMetaDataRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateFormsUsingPOSTAsync(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\UpdateFormMetaDataRequest $update_form_meta_data_request
    ): PromiseInterface {
        return $this->updateFormsUsingPOSTAsyncWithHttpInfo($id, $update_form_meta_data_request)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Update Form Metadata
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\UpdateFormMetaDataRequest $update_form_meta_data_request
     *   updateFormMetaDataRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateFormsUsingPOSTAsyncWithHttpInfo(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\UpdateFormMetaDataRequest $update_form_meta_data_request
    ): PromiseInterface {
        $request = $this->updateFormsUsingPOSTRequest($id, $update_form_meta_data_request);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse::class,
            [$this, 'updateFormsUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'updateFormsUsingPOST'
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\UpdateFormMetaDataRequest $update_form_meta_data_request
     *   updateFormMetaDataRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateFormsUsingPOSTRequest(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\UpdateFormMetaDataRequest $update_form_meta_data_request
    ): Request {

        $resourcePath = '/rest/asset/v1/form/{id}.json';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            $update_form_meta_data_request
        );
    }

    /**
     * Exception handler for updateThankYouPageByIdUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function updateThankYouPageByIdUsingPOSTHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfThankYouPageResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Update Thank You Page
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\UpdateThankYouPageRequest $thank_you_page_request
     *   thankYouPageRequest
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfThankYouPageResponse
     */
    public function updateThankYouPageByIdUsingPOST(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\UpdateThankYouPageRequest $thank_you_page_request
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfThankYouPageResponse {
        list($response) = $this->updateThankYouPageByIdUsingPOSTWithHttpInfo($id, $thank_you_page_request);
        return $response;
    }

    /**
     * Update Thank You Page
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\UpdateThankYouPageRequest $thank_you_page_request
     *   thankYouPageRequest
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Asset\Model\ResponseOfThankYouPageResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function updateThankYouPageByIdUsingPOSTWithHttpInfo(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\UpdateThankYouPageRequest $thank_you_page_request
    ): array {
        $request = $this->updateThankYouPageByIdUsingPOSTRequest($id, $thank_you_page_request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfThankYouPageResponse::class
            );
        } catch (ApiException $e) {
            throw $this->updateThankYouPageByIdUsingPOSTHandleException($e);
        }
    }

    /**
     * Update Thank You Page
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\UpdateThankYouPageRequest $thank_you_page_request
     *   thankYouPageRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateThankYouPageByIdUsingPOSTAsync(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\UpdateThankYouPageRequest $thank_you_page_request
    ): PromiseInterface {
        return $this->updateThankYouPageByIdUsingPOSTAsyncWithHttpInfo($id, $thank_you_page_request)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Asset\Model\ResponseOfThankYouPageResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Update Thank You Page
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\UpdateThankYouPageRequest $thank_you_page_request
     *   thankYouPageRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateThankYouPageByIdUsingPOSTAsyncWithHttpInfo(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\UpdateThankYouPageRequest $thank_you_page_request
    ): PromiseInterface {
        $request = $this->updateThankYouPageByIdUsingPOSTRequest($id, $thank_you_page_request);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfThankYouPageResponse::class,
            [$this, 'updateThankYouPageByIdUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'updateThankYouPageByIdUsingPOST'
     *
     * @param int $id
     *   id
     * @param \NecLimDul\MarketoRest\Asset\Model\UpdateThankYouPageRequest $thank_you_page_request
     *   thankYouPageRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateThankYouPageByIdUsingPOSTRequest(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\UpdateThankYouPageRequest $thank_you_page_request
    ): Request {

        $resourcePath = '/rest/asset/v1/form/{id}/thankYouPage.json';
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            $thank_you_page_request
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array<string, mixed> of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    /**
     * Make a request.
     *
     * @param \GuzzleHttp\Psr7\Request $request An initialized request object.
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @return \Psr\Http\Message\ResponseInterface
     */
    private function makeRequest(Request $request)
    {
        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            $response = $e->getResponse();
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                (int) $e->getCode(),
                $response ? $response->getHeaders() : [],
                $response ? (string) $response->getBody() : null
            );
        }

        $statusCode = $response->getStatusCode();
        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    (string) $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                (string) $response->getBody()
            );
        }
        return $response;
    }

    /**
     * Make an async request.
     *
     * @param \GuzzleHttp\Psr7\Request $request An initialized request object.
     * @param class-string $returnType The return type.
     * @param callable $exceptionHandler A callback to process HTTP errors.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @return \GuzzleHttp\Promise\PromiseInterface A promise that will return a processed response.
     */
    private function makeAsyncRequest(Request $request, string $returnType, callable $exceptionHandler)
    {
        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function (ResponseInterface $response) use ($returnType) {
                    return $this->responseToReturn($response, $returnType);
                },
                function (RequestException $exception) use ($exceptionHandler) {
                    $response = $exception->getResponse();
                    $e = new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : [],
                        $response ? (string) $response->getBody() : null
                    );
                    throw $exceptionHandler($e);
                }
            );
    }

    /**
     * Convert a response to a return standard return array.
     *
     * @template T
     * @param \Psr\Http\Message\ResponseInterface $response A response from a request with a serialized body.
     * @param string $returnType The primary return type.
     * @phpstan-param class-string<T> $returnType
     *
     * @return array structured array or response and http info.
     * @phpstan-return array{T, int, array<array<string>>}
     */
    private function responseToReturn(ResponseInterface $response, string $returnType)
    {
        return [
            $this->deserializeResponseBody($response->getBody(), $returnType),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    /**
     * Deserialize a response body.
     *
     * @template T
     * @param mixed $responseBody The response body.
     * @param string $returnType The return type.
     * @param array<string, string[]> $headers A list of headers from the response.
     * @phpstan-param class-string<T> $returnType
     *
     * @return mixed Either a string or a stream to be passed to a file object.
     * @phpstan-return T
     * @psalm-return T
     */
    private function deserializeResponseBody($responseBody, string $returnType, array $headers = [])
    {
        return ObjectSerializer::deserialize(
            $returnType === \SplFileObject::class ? $responseBody : (string) $responseBody,
            $returnType,
            $headers
        );
    }
}
