<?php
/**
 * FormsApi
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Asset
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketo Rest API
 *
 * Marketo Rest API
 *
 * OpenAPI spec version: 1.0
 * Contact: developerfeedback@marketo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.26
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace NecLimDul\MarketoRest\Asset\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Query;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\ResponseInterface;
use NecLimDul\MarketoRest\Asset\ApiException;
use NecLimDul\MarketoRest\Asset\Configuration;
use NecLimDul\MarketoRest\Asset\HeaderSelector;
use NecLimDul\MarketoRest\Asset\ObjectSerializer;

/**
 * FormsApi Class Doc Comment
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Asset
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FormsApi
{

    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Exception handler for approveFromUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function approveFromUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse',
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Approve Form Draft
     *
     * @param  int $id id (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse
     */
    public function approveFromUsingPOST($id)
    {
        list($response) = $this->approveFromUsingPOSTWithHttpInfo($id);
        return $response;
    }

    /**
     * Approve Form Draft
     *
     * @param  int $id id (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function approveFromUsingPOSTWithHttpInfo($id)
    {
        $request = $this->approveFromUsingPOSTRequest($id);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse');
        } catch (ApiException $e) {
            throw $this->approveFromUsingPOSTHandleException($e);
        }
    }

    /**
     * Approve Form Draft
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function approveFromUsingPOSTAsync($id)
    {
        return $this->approveFromUsingPOSTAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Approve Form Draft
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function approveFromUsingPOSTAsyncWithHttpInfo($id)
    {
        $request = $this->approveFromUsingPOSTRequest($id);
        return $this->makeAsyncRequest($request, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse', [$this, 'approveFromUsingPOSTHandleException']);
    }

    /**
     * Create request for operation 'approveFromUsingPOST'
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function approveFromUsingPOSTRequest($id)
    {
        // Verify the required parameter 'id' is set.
        if (!isset($id)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling approveFromUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/form/{id}/approveDraft.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Exception handler for browseForms2UsingGET.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function browseForms2UsingGETHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse',
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Forms
     *
     * @param  string $folder JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39; (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     * @param  string $max_return Maximum number of channels to return.  Max 200, default 20 (optional)
     * @param  string $offset Integer offset for paging (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse
     */
    public function browseForms2UsingGET($folder, $status = null, $max_return = null, $offset = null)
    {
        list($response) = $this->browseForms2UsingGETWithHttpInfo($folder, $status, $max_return, $offset);
        return $response;
    }

    /**
     * Get Forms
     *
     * @param  string $folder JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39; (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     * @param  string $max_return Maximum number of channels to return.  Max 200, default 20 (optional)
     * @param  string $offset Integer offset for paging (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function browseForms2UsingGETWithHttpInfo($folder, $status = null, $max_return = null, $offset = null)
    {
        $request = $this->browseForms2UsingGETRequest($folder, $status, $max_return, $offset);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse');
        } catch (ApiException $e) {
            throw $this->browseForms2UsingGETHandleException($e);
        }
    }

    /**
     * Get Forms
     *
     * @param  string $folder JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39; (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     * @param  string $max_return Maximum number of channels to return.  Max 200, default 20 (optional)
     * @param  string $offset Integer offset for paging (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function browseForms2UsingGETAsync($folder, $status = null, $max_return = null, $offset = null)
    {
        return $this->browseForms2UsingGETAsyncWithHttpInfo($folder, $status, $max_return, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Get Forms
     *
     * @param  string $folder JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39; (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     * @param  string $max_return Maximum number of channels to return.  Max 200, default 20 (optional)
     * @param  string $offset Integer offset for paging (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function browseForms2UsingGETAsyncWithHttpInfo($folder, $status = null, $max_return = null, $offset = null)
    {
        $request = $this->browseForms2UsingGETRequest($folder, $status, $max_return, $offset);
        return $this->makeAsyncRequest($request, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse', [$this, 'browseForms2UsingGETHandleException']);
    }

    /**
     * Create request for operation 'browseForms2UsingGET'
     *
     * @param  string $folder JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39; (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     * @param  string $max_return Maximum number of channels to return.  Max 200, default 20 (optional)
     * @param  string $offset Integer offset for paging (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function browseForms2UsingGETRequest($folder, $status = null, $max_return = null, $offset = null)
    {
        // Verify the required parameter 'folder' is set.
        if (!isset($folder)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $folder when calling browseForms2UsingGET'
            );
        }

        $resourcePath = '/rest/asset/v1/forms.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Query parameters.
        if (is_array($status)) {
            $status = ObjectSerializer::serializeCollection($status, '', true);
        }
        $queryParams['status'] = $status;
        if (is_array($folder)) {
            $folder = ObjectSerializer::serializeCollection($folder, '', true);
        }
        $queryParams['folder'] = $folder;
        if (is_array($max_return)) {
            $max_return = ObjectSerializer::serializeCollection($max_return, '', true);
        }
        $queryParams['maxReturn'] = $max_return;
        if (is_array($offset)) {
            $offset = ObjectSerializer::serializeCollection($offset, '', true);
        }
        $queryParams['offset'] = $offset;
        // Remove any null (optional values).
        $queryParams = array_filter($queryParams, function($v) { return $v !== null; });
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Exception handler for cloneLpFormsUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function cloneLpFormsUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse',
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Clone Form
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\CloneFormRequest $clone_form_request cloneFormRequest (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse
     */
    public function cloneLpFormsUsingPOST($id, $clone_form_request = null)
    {
        list($response) = $this->cloneLpFormsUsingPOSTWithHttpInfo($id, $clone_form_request);
        return $response;
    }

    /**
     * Clone Form
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\CloneFormRequest $clone_form_request cloneFormRequest (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cloneLpFormsUsingPOSTWithHttpInfo($id, $clone_form_request = null)
    {
        $request = $this->cloneLpFormsUsingPOSTRequest($id, $clone_form_request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse');
        } catch (ApiException $e) {
            throw $this->cloneLpFormsUsingPOSTHandleException($e);
        }
    }

    /**
     * Clone Form
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\CloneFormRequest $clone_form_request cloneFormRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cloneLpFormsUsingPOSTAsync($id, $clone_form_request = null)
    {
        return $this->cloneLpFormsUsingPOSTAsyncWithHttpInfo($id, $clone_form_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Clone Form
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\CloneFormRequest $clone_form_request cloneFormRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cloneLpFormsUsingPOSTAsyncWithHttpInfo($id, $clone_form_request = null)
    {
        $request = $this->cloneLpFormsUsingPOSTRequest($id, $clone_form_request);
        return $this->makeAsyncRequest($request, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse', [$this, 'cloneLpFormsUsingPOSTHandleException']);
    }

    /**
     * Create request for operation 'cloneLpFormsUsingPOST'
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\CloneFormRequest $clone_form_request cloneFormRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function cloneLpFormsUsingPOSTRequest($id, $clone_form_request = null)
    {
        // Verify the required parameter 'id' is set.
        if (!isset($id)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling cloneLpFormsUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/form/{id}/clone.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );
        // for model (json/xml)
        if (!empty($clone_form_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($clone_form_request));
            } elseif (!is_array($clone_form_request)) {
                $httpBody = (string) $clone_form_request;
            }
            else {
                $httpBody = '';
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Exception handler for createLpFormsUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function createLpFormsUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse',
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Create Form
     *
     * @param  \NecLimDul\MarketoRest\Asset\Model\CreateLpFormRequest $create_form_request createFormRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse
     */
    public function createLpFormsUsingPOST($create_form_request)
    {
        list($response) = $this->createLpFormsUsingPOSTWithHttpInfo($create_form_request);
        return $response;
    }

    /**
     * Create Form
     *
     * @param  \NecLimDul\MarketoRest\Asset\Model\CreateLpFormRequest $create_form_request createFormRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createLpFormsUsingPOSTWithHttpInfo($create_form_request)
    {
        $request = $this->createLpFormsUsingPOSTRequest($create_form_request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse');
        } catch (ApiException $e) {
            throw $this->createLpFormsUsingPOSTHandleException($e);
        }
    }

    /**
     * Create Form
     *
     * @param  \NecLimDul\MarketoRest\Asset\Model\CreateLpFormRequest $create_form_request createFormRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createLpFormsUsingPOSTAsync($create_form_request)
    {
        return $this->createLpFormsUsingPOSTAsyncWithHttpInfo($create_form_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Create Form
     *
     * @param  \NecLimDul\MarketoRest\Asset\Model\CreateLpFormRequest $create_form_request createFormRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createLpFormsUsingPOSTAsyncWithHttpInfo($create_form_request)
    {
        $request = $this->createLpFormsUsingPOSTRequest($create_form_request);
        return $this->makeAsyncRequest($request, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse', [$this, 'createLpFormsUsingPOSTHandleException']);
    }

    /**
     * Create request for operation 'createLpFormsUsingPOST'
     *
     * @param  \NecLimDul\MarketoRest\Asset\Model\CreateLpFormRequest $create_form_request createFormRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createLpFormsUsingPOSTRequest($create_form_request)
    {
        // Verify the required parameter 'create_form_request' is set.
        if (!isset($create_form_request)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_form_request when calling createLpFormsUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/forms.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );
        if ($headers['Content-Type'] === 'application/json') {
          $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($create_form_request));
        } elseif (!is_array($create_form_request)) {
          $httpBody = (string) $create_form_request;
        }
        else {
          $httpBody = '';
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Exception handler for deleteFormByIdUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function deleteFormByIdUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse',
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Delete Form
     *
     * @param  int $id id (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse
     */
    public function deleteFormByIdUsingPOST($id)
    {
        list($response) = $this->deleteFormByIdUsingPOSTWithHttpInfo($id);
        return $response;
    }

    /**
     * Delete Form
     *
     * @param  int $id id (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteFormByIdUsingPOSTWithHttpInfo($id)
    {
        $request = $this->deleteFormByIdUsingPOSTRequest($id);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse');
        } catch (ApiException $e) {
            throw $this->deleteFormByIdUsingPOSTHandleException($e);
        }
    }

    /**
     * Delete Form
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFormByIdUsingPOSTAsync($id)
    {
        return $this->deleteFormByIdUsingPOSTAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Delete Form
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFormByIdUsingPOSTAsyncWithHttpInfo($id)
    {
        $request = $this->deleteFormByIdUsingPOSTRequest($id);
        return $this->makeAsyncRequest($request, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse', [$this, 'deleteFormByIdUsingPOSTHandleException']);
    }

    /**
     * Create request for operation 'deleteFormByIdUsingPOST'
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteFormByIdUsingPOSTRequest($id)
    {
        // Verify the required parameter 'id' is set.
        if (!isset($id)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteFormByIdUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/form/{id}/delete.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Exception handler for discardFormByIdUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function discardFormByIdUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse',
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Discard Form Draft
     *
     * @param  int $id id (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse
     */
    public function discardFormByIdUsingPOST($id)
    {
        list($response) = $this->discardFormByIdUsingPOSTWithHttpInfo($id);
        return $response;
    }

    /**
     * Discard Form Draft
     *
     * @param  int $id id (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function discardFormByIdUsingPOSTWithHttpInfo($id)
    {
        $request = $this->discardFormByIdUsingPOSTRequest($id);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse');
        } catch (ApiException $e) {
            throw $this->discardFormByIdUsingPOSTHandleException($e);
        }
    }

    /**
     * Discard Form Draft
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function discardFormByIdUsingPOSTAsync($id)
    {
        return $this->discardFormByIdUsingPOSTAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Discard Form Draft
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function discardFormByIdUsingPOSTAsyncWithHttpInfo($id)
    {
        $request = $this->discardFormByIdUsingPOSTRequest($id);
        return $this->makeAsyncRequest($request, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse', [$this, 'discardFormByIdUsingPOSTHandleException']);
    }

    /**
     * Create request for operation 'discardFormByIdUsingPOST'
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function discardFormByIdUsingPOSTRequest($id)
    {
        // Verify the required parameter 'id' is set.
        if (!isset($id)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling discardFormByIdUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/form/{id}/discardDraft.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Exception handler for getFormUsedByUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function getFormUsedByUsingGETHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Asset\Model\ResponseOfFormUsedByResponse',
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Form Used By
     *
     * @param  int $id Id of the form (required)
     * @param  int $offset Integer offset for paging (optional)
     * @param  int $max_return Maximum number of assets to return.  Max 200, default 20 (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfFormUsedByResponse
     */
    public function getFormUsedByUsingGET($id, $offset = null, $max_return = null)
    {
        list($response) = $this->getFormUsedByUsingGETWithHttpInfo($id, $offset, $max_return);
        return $response;
    }

    /**
     * Get Form Used By
     *
     * @param  int $id Id of the form (required)
     * @param  int $offset Integer offset for paging (optional)
     * @param  int $max_return Maximum number of assets to return.  Max 200, default 20 (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfFormUsedByResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFormUsedByUsingGETWithHttpInfo($id, $offset = null, $max_return = null)
    {
        $request = $this->getFormUsedByUsingGETRequest($id, $offset, $max_return);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfFormUsedByResponse');
        } catch (ApiException $e) {
            throw $this->getFormUsedByUsingGETHandleException($e);
        }
    }

    /**
     * Get Form Used By
     *
     * @param  int $id Id of the form (required)
     * @param  int $offset Integer offset for paging (optional)
     * @param  int $max_return Maximum number of assets to return.  Max 200, default 20 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFormUsedByUsingGETAsync($id, $offset = null, $max_return = null)
    {
        return $this->getFormUsedByUsingGETAsyncWithHttpInfo($id, $offset, $max_return)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Get Form Used By
     *
     * @param  int $id Id of the form (required)
     * @param  int $offset Integer offset for paging (optional)
     * @param  int $max_return Maximum number of assets to return.  Max 200, default 20 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFormUsedByUsingGETAsyncWithHttpInfo($id, $offset = null, $max_return = null)
    {
        $request = $this->getFormUsedByUsingGETRequest($id, $offset, $max_return);
        return $this->makeAsyncRequest($request, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfFormUsedByResponse', [$this, 'getFormUsedByUsingGETHandleException']);
    }

    /**
     * Create request for operation 'getFormUsedByUsingGET'
     *
     * @param  int $id Id of the form (required)
     * @param  int $offset Integer offset for paging (optional)
     * @param  int $max_return Maximum number of assets to return.  Max 200, default 20 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getFormUsedByUsingGETRequest($id, $offset = null, $max_return = null)
    {
        // Verify the required parameter 'id' is set.
        if (!isset($id)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getFormUsedByUsingGET'
            );
        }

        $resourcePath = '/rest/asset/v1/form/{id}/usedBy.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Query parameters.
        if (is_array($offset)) {
            $offset = ObjectSerializer::serializeCollection($offset, '', true);
        }
        $queryParams['offset'] = $offset;
        if (is_array($max_return)) {
            $max_return = ObjectSerializer::serializeCollection($max_return, '', true);
        }
        $queryParams['maxReturn'] = $max_return;
        // Remove any null (optional values).
        $queryParams = array_filter($queryParams, function($v) { return $v !== null; });

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Exception handler for getLpFormByIdUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function getLpFormByIdUsingGETHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse',
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Form By Id
     *
     * @param  int $id id (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse
     */
    public function getLpFormByIdUsingGET($id, $status = null)
    {
        list($response) = $this->getLpFormByIdUsingGETWithHttpInfo($id, $status);
        return $response;
    }

    /**
     * Get Form By Id
     *
     * @param  int $id id (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLpFormByIdUsingGETWithHttpInfo($id, $status = null)
    {
        $request = $this->getLpFormByIdUsingGETRequest($id, $status);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse');
        } catch (ApiException $e) {
            throw $this->getLpFormByIdUsingGETHandleException($e);
        }
    }

    /**
     * Get Form By Id
     *
     * @param  int $id id (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLpFormByIdUsingGETAsync($id, $status = null)
    {
        return $this->getLpFormByIdUsingGETAsyncWithHttpInfo($id, $status)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Get Form By Id
     *
     * @param  int $id id (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLpFormByIdUsingGETAsyncWithHttpInfo($id, $status = null)
    {
        $request = $this->getLpFormByIdUsingGETRequest($id, $status);
        return $this->makeAsyncRequest($request, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse', [$this, 'getLpFormByIdUsingGETHandleException']);
    }

    /**
     * Create request for operation 'getLpFormByIdUsingGET'
     *
     * @param  int $id id (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLpFormByIdUsingGETRequest($id, $status = null)
    {
        // Verify the required parameter 'id' is set.
        if (!isset($id)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getLpFormByIdUsingGET'
            );
        }

        $resourcePath = '/rest/asset/v1/form/{id}.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Query parameters.
        if (is_array($status)) {
            $status = ObjectSerializer::serializeCollection($status, '', true);
        }
        $queryParams['status'] = $status;
        // Remove any null (optional values).
        $queryParams = array_filter($queryParams, function($v) { return $v !== null; });

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Exception handler for getLpFormByNameUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function getLpFormByNameUsingGETHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse',
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Form by Name
     *
     * @param  string $name Name of the form (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     * @param  string $folder JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39; (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse
     */
    public function getLpFormByNameUsingGET($name, $status = null, $folder = null)
    {
        list($response) = $this->getLpFormByNameUsingGETWithHttpInfo($name, $status, $folder);
        return $response;
    }

    /**
     * Get Form by Name
     *
     * @param  string $name Name of the form (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     * @param  string $folder JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39; (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLpFormByNameUsingGETWithHttpInfo($name, $status = null, $folder = null)
    {
        $request = $this->getLpFormByNameUsingGETRequest($name, $status, $folder);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse');
        } catch (ApiException $e) {
            throw $this->getLpFormByNameUsingGETHandleException($e);
        }
    }

    /**
     * Get Form by Name
     *
     * @param  string $name Name of the form (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     * @param  string $folder JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLpFormByNameUsingGETAsync($name, $status = null, $folder = null)
    {
        return $this->getLpFormByNameUsingGETAsyncWithHttpInfo($name, $status, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Get Form by Name
     *
     * @param  string $name Name of the form (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     * @param  string $folder JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLpFormByNameUsingGETAsyncWithHttpInfo($name, $status = null, $folder = null)
    {
        $request = $this->getLpFormByNameUsingGETRequest($name, $status, $folder);
        return $this->makeAsyncRequest($request, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse', [$this, 'getLpFormByNameUsingGETHandleException']);
    }

    /**
     * Create request for operation 'getLpFormByNameUsingGET'
     *
     * @param  string $name Name of the form (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     * @param  string $folder JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLpFormByNameUsingGETRequest($name, $status = null, $folder = null)
    {
        // Verify the required parameter 'name' is set.
        if (!isset($name)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling getLpFormByNameUsingGET'
            );
        }

        $resourcePath = '/rest/asset/v1/form/byName.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Query parameters.
        if (is_array($name)) {
            $name = ObjectSerializer::serializeCollection($name, '', true);
        }
        $queryParams['name'] = $name;
        if (is_array($status)) {
            $status = ObjectSerializer::serializeCollection($status, '', true);
        }
        $queryParams['status'] = $status;
        if (is_array($folder)) {
            $folder = ObjectSerializer::serializeCollection($folder, '', true);
        }
        $queryParams['folder'] = $folder;
        // Remove any null (optional values).
        $queryParams = array_filter($queryParams, function($v) { return $v !== null; });
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Exception handler for getThankYouPageByIdUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function getThankYouPageByIdUsingGETHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Asset\Model\ResponseOfThankYouPageResponse',
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Thank You Page by Form Id
     *
     * @param  int $id id (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfThankYouPageResponse
     */
    public function getThankYouPageByIdUsingGET($id, $status = null)
    {
        list($response) = $this->getThankYouPageByIdUsingGETWithHttpInfo($id, $status);
        return $response;
    }

    /**
     * Get Thank You Page by Form Id
     *
     * @param  int $id id (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfThankYouPageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getThankYouPageByIdUsingGETWithHttpInfo($id, $status = null)
    {
        $request = $this->getThankYouPageByIdUsingGETRequest($id, $status);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfThankYouPageResponse');
        } catch (ApiException $e) {
            throw $this->getThankYouPageByIdUsingGETHandleException($e);
        }
    }

    /**
     * Get Thank You Page by Form Id
     *
     * @param  int $id id (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getThankYouPageByIdUsingGETAsync($id, $status = null)
    {
        return $this->getThankYouPageByIdUsingGETAsyncWithHttpInfo($id, $status)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Get Thank You Page by Form Id
     *
     * @param  int $id id (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getThankYouPageByIdUsingGETAsyncWithHttpInfo($id, $status = null)
    {
        $request = $this->getThankYouPageByIdUsingGETRequest($id, $status);
        return $this->makeAsyncRequest($request, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfThankYouPageResponse', [$this, 'getThankYouPageByIdUsingGETHandleException']);
    }

    /**
     * Create request for operation 'getThankYouPageByIdUsingGET'
     *
     * @param  int $id id (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getThankYouPageByIdUsingGETRequest($id, $status = null)
    {
        // Verify the required parameter 'id' is set.
        if (!isset($id)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getThankYouPageByIdUsingGET'
            );
        }

        $resourcePath = '/rest/asset/v1/form/{id}/thankYouPage.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Query parameters.
        if (is_array($status)) {
            $status = ObjectSerializer::serializeCollection($status, '', true);
        }
        $queryParams['status'] = $status;
        // Remove any null (optional values).
        $queryParams = array_filter($queryParams, function($v) { return $v !== null; });

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Exception handler for updateFormSubmitButtonUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function updateFormSubmitButtonUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse',
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Update Submit Button
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\SubmitButtonRequest $submit_button_request submitButtonRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse
     */
    public function updateFormSubmitButtonUsingPOST($id, $submit_button_request)
    {
        list($response) = $this->updateFormSubmitButtonUsingPOSTWithHttpInfo($id, $submit_button_request);
        return $response;
    }

    /**
     * Update Submit Button
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\SubmitButtonRequest $submit_button_request submitButtonRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateFormSubmitButtonUsingPOSTWithHttpInfo($id, $submit_button_request)
    {
        $request = $this->updateFormSubmitButtonUsingPOSTRequest($id, $submit_button_request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse');
        } catch (ApiException $e) {
            throw $this->updateFormSubmitButtonUsingPOSTHandleException($e);
        }
    }

    /**
     * Update Submit Button
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\SubmitButtonRequest $submit_button_request submitButtonRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateFormSubmitButtonUsingPOSTAsync($id, $submit_button_request)
    {
        return $this->updateFormSubmitButtonUsingPOSTAsyncWithHttpInfo($id, $submit_button_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Update Submit Button
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\SubmitButtonRequest $submit_button_request submitButtonRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateFormSubmitButtonUsingPOSTAsyncWithHttpInfo($id, $submit_button_request)
    {
        $request = $this->updateFormSubmitButtonUsingPOSTRequest($id, $submit_button_request);
        return $this->makeAsyncRequest($request, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse', [$this, 'updateFormSubmitButtonUsingPOSTHandleException']);
    }

    /**
     * Create request for operation 'updateFormSubmitButtonUsingPOST'
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\SubmitButtonRequest $submit_button_request submitButtonRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateFormSubmitButtonUsingPOSTRequest($id, $submit_button_request)
    {
        // Verify the required parameter 'id' is set.
        if (!isset($id)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateFormSubmitButtonUsingPOST'
            );
        }
        // Verify the required parameter 'submit_button_request' is set.
        if (!isset($submit_button_request)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $submit_button_request when calling updateFormSubmitButtonUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/form/{id}/submitButton.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );
        if ($headers['Content-Type'] === 'application/json') {
          $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($submit_button_request));
        } elseif (!is_array($submit_button_request)) {
          $httpBody = (string) $submit_button_request;
        }
        else {
          $httpBody = '';
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Exception handler for updateFormsUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function updateFormsUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse',
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Update Form Metadata
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\UpdateFormMetaDataRequest $update_form_meta_data_request updateFormMetaDataRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse
     */
    public function updateFormsUsingPOST($id, $update_form_meta_data_request)
    {
        list($response) = $this->updateFormsUsingPOSTWithHttpInfo($id, $update_form_meta_data_request);
        return $response;
    }

    /**
     * Update Form Metadata
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\UpdateFormMetaDataRequest $update_form_meta_data_request updateFormMetaDataRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateFormsUsingPOSTWithHttpInfo($id, $update_form_meta_data_request)
    {
        $request = $this->updateFormsUsingPOSTRequest($id, $update_form_meta_data_request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse');
        } catch (ApiException $e) {
            throw $this->updateFormsUsingPOSTHandleException($e);
        }
    }

    /**
     * Update Form Metadata
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\UpdateFormMetaDataRequest $update_form_meta_data_request updateFormMetaDataRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateFormsUsingPOSTAsync($id, $update_form_meta_data_request)
    {
        return $this->updateFormsUsingPOSTAsyncWithHttpInfo($id, $update_form_meta_data_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Update Form Metadata
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\UpdateFormMetaDataRequest $update_form_meta_data_request updateFormMetaDataRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateFormsUsingPOSTAsyncWithHttpInfo($id, $update_form_meta_data_request)
    {
        $request = $this->updateFormsUsingPOSTRequest($id, $update_form_meta_data_request);
        return $this->makeAsyncRequest($request, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLpFormResponse', [$this, 'updateFormsUsingPOSTHandleException']);
    }

    /**
     * Create request for operation 'updateFormsUsingPOST'
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\UpdateFormMetaDataRequest $update_form_meta_data_request updateFormMetaDataRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateFormsUsingPOSTRequest($id, $update_form_meta_data_request)
    {
        // Verify the required parameter 'id' is set.
        if (!isset($id)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateFormsUsingPOST'
            );
        }
        // Verify the required parameter 'update_form_meta_data_request' is set.
        if (!isset($update_form_meta_data_request)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_form_meta_data_request when calling updateFormsUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/form/{id}.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );
        if ($headers['Content-Type'] === 'application/json') {
          $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($update_form_meta_data_request));
        } elseif (!is_array($update_form_meta_data_request)) {
          $httpBody = (string) $update_form_meta_data_request;
        }
        else {
          $httpBody = '';
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Exception handler for updateThankYouPageByIdUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function updateThankYouPageByIdUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Asset\Model\ResponseOfThankYouPageResponse',
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Update Thank You Page
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\UpdateThankYouPageRequest $thank_you_page_request thankYouPageRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfThankYouPageResponse
     */
    public function updateThankYouPageByIdUsingPOST($id, $thank_you_page_request)
    {
        list($response) = $this->updateThankYouPageByIdUsingPOSTWithHttpInfo($id, $thank_you_page_request);
        return $response;
    }

    /**
     * Update Thank You Page
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\UpdateThankYouPageRequest $thank_you_page_request thankYouPageRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfThankYouPageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateThankYouPageByIdUsingPOSTWithHttpInfo($id, $thank_you_page_request)
    {
        $request = $this->updateThankYouPageByIdUsingPOSTRequest($id, $thank_you_page_request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfThankYouPageResponse');
        } catch (ApiException $e) {
            throw $this->updateThankYouPageByIdUsingPOSTHandleException($e);
        }
    }

    /**
     * Update Thank You Page
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\UpdateThankYouPageRequest $thank_you_page_request thankYouPageRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateThankYouPageByIdUsingPOSTAsync($id, $thank_you_page_request)
    {
        return $this->updateThankYouPageByIdUsingPOSTAsyncWithHttpInfo($id, $thank_you_page_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Update Thank You Page
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\UpdateThankYouPageRequest $thank_you_page_request thankYouPageRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateThankYouPageByIdUsingPOSTAsyncWithHttpInfo($id, $thank_you_page_request)
    {
        $request = $this->updateThankYouPageByIdUsingPOSTRequest($id, $thank_you_page_request);
        return $this->makeAsyncRequest($request, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfThankYouPageResponse', [$this, 'updateThankYouPageByIdUsingPOSTHandleException']);
    }

    /**
     * Create request for operation 'updateThankYouPageByIdUsingPOST'
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\UpdateThankYouPageRequest $thank_you_page_request thankYouPageRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateThankYouPageByIdUsingPOSTRequest($id, $thank_you_page_request)
    {
        // Verify the required parameter 'id' is set.
        if (!isset($id)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateThankYouPageByIdUsingPOST'
            );
        }
        // Verify the required parameter 'thank_you_page_request' is set.
        if (!isset($thank_you_page_request)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $thank_you_page_request when calling updateThankYouPageByIdUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/form/{id}/thankYouPage.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );
        if ($headers['Content-Type'] === 'application/json') {
          $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($thank_you_page_request));
        } elseif (!is_array($thank_you_page_request)) {
          $httpBody = (string) $thank_you_page_request;
        }
        else {
          $httpBody = '';
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    /**
     * Make a request.
     *
     * @param \GuzzleHttp\Psr7\Request $request An initialized request object.
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @return \Psr\Http\Message\ResponseInterface
     */
    private function makeRequest(Request $request) {
        $options = $this->createHttpClientOption();
        try {
           $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            $response = $e->getResponse();
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                (int) $e->getCode(),
                $response ? $response->getHeaders() : null,
                $response ? (string) $response->getBody() : null
            );
        }

        $statusCode = $response->getStatusCode();
        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    (string) $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                (string) $response->getBody()
            );
        }
        return $response;
    }

    /**
     * Make an async request.
     *
     * @param \GuzzleHttp\Psr7\Request $request An initialized request object.
     * @param string $returnType The return type.
     * @param callable $exceptionHandler A callback to process HTTP errors.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @return \GuzzleHttp\Promise\PromiseInterface A promise that will return a processed response.
     */
    private function makeAsyncRequest(Request $request, string $returnType, callable $exceptionHandler)
    {
        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->responseToReturn($response, $returnType);
                },
                function (RequestException $exception) use ($exceptionHandler) {
                    $response = $exception->getResponse();
                    $e = new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                    throw $exceptionHandler($e);
                }
            );
    }

    /**
     * Convert a response to a return standard return array.
     *
     * @param \Psr\Http\Message\ResponseInterface $response A response from a request with a serialized body.
     * @param string $returnType The primary return type.
     *
     * @return array
     */
    private function responseToReturn(ResponseInterface $response, string $returnType) {
        return [
            $this->deserializeResponseBody($response->getBody(), $returnType),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    /**
     * Deserialize a response body.
     *
     * @param mixed $responseBody
     *   The response body.
     * @param string $returnType
     *   The return type.
     * @param array<string, string[]>|null $headers
     *   The a list of headers from the response.
     * @return mixed
     *   Either a string or a stream to be passed to a file object.
     */
    private function deserializeResponseBody($responseBody, string $returnType, ?array $headers = [])
    {
        return ObjectSerializer::deserialize(
            $returnType === '\SplFileObject' ? $responseBody : (string) $responseBody,
            $returnType,
            $headers
        );
    }

}
