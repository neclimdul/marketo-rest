<?php
/**
 * LandingPageTemplatesApi
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Asset
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketo Rest API
 *
 * Marketo Rest API
 *
 * OpenAPI spec version: 1.0
 * Contact: developerfeedback@marketo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.26
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace NecLimDul\MarketoRest\Asset\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Query;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\Promise\PromiseInterface;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\ResponseInterface;
use NecLimDul\MarketoRest\Asset\ApiException;
use NecLimDul\MarketoRest\Asset\Configuration;
use NecLimDul\MarketoRest\Asset\HeaderSelector;
use NecLimDul\MarketoRest\Asset\ObjectSerializer;

/**
 * LandingPageTemplatesApi Class Doc Comment
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Asset
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LandingPageTemplatesApi
{

    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Exception handler for approveLandingPageTemplateUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function approveLandingPageTemplateUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpTemplateResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Approve Landing Page Template Draft
     *
     * @param  int $id id (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpTemplateResponse
     */
    public function approveLandingPageTemplateUsingPOST(
        int $id
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpTemplateResponse
    {
        list($response) = $this->approveLandingPageTemplateUsingPOSTWithHttpInfo($id);
        return $response;
    }

    /**
     * Approve Landing Page Template Draft
     *
     * @param  int $id id (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpTemplateResponse, HTTP status code, HTTP response headers (array of strings)
     * @phpstan-return array{ \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpTemplateResponse, int, array<array<string>>}
     */
    public function approveLandingPageTemplateUsingPOSTWithHttpInfo(
        int $id
    ): array
    {
        $request = $this->approveLandingPageTemplateUsingPOSTRequest($id);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpTemplateResponse::class
            );
        } catch (ApiException $e) {
            throw $this->approveLandingPageTemplateUsingPOSTHandleException($e);
        }
    }

    /**
     * Approve Landing Page Template Draft
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function approveLandingPageTemplateUsingPOSTAsync(
        int $id
    ): PromiseInterface
    {
        return $this->approveLandingPageTemplateUsingPOSTAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Approve Landing Page Template Draft
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function approveLandingPageTemplateUsingPOSTAsyncWithHttpInfo(
        int $id
    ): PromiseInterface
    {
        $request = $this->approveLandingPageTemplateUsingPOSTRequest($id);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpTemplateResponse::class,
            [$this, 'approveLandingPageTemplateUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'approveLandingPageTemplateUsingPOST'
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function approveLandingPageTemplateUsingPOSTRequest(
        int $id
    ): Request
    {

        $resourcePath = '/rest/asset/v1/landingPageTemplate/{id}/approveDraft.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Exception handler for cloneLpTemplateUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function cloneLpTemplateUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpTemplateResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Clone Landing Page Template
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\CloneLpTemplateRequest $clone_lp_template_request cloneLpTemplateRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpTemplateResponse
     */
    public function cloneLpTemplateUsingPOST(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\CloneLpTemplateRequest $clone_lp_template_request
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpTemplateResponse
    {
        list($response) = $this->cloneLpTemplateUsingPOSTWithHttpInfo($id, $clone_lp_template_request);
        return $response;
    }

    /**
     * Clone Landing Page Template
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\CloneLpTemplateRequest $clone_lp_template_request cloneLpTemplateRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpTemplateResponse, HTTP status code, HTTP response headers (array of strings)
     * @phpstan-return array{ \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpTemplateResponse, int, array<array<string>>}
     */
    public function cloneLpTemplateUsingPOSTWithHttpInfo(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\CloneLpTemplateRequest $clone_lp_template_request
    ): array
    {
        $request = $this->cloneLpTemplateUsingPOSTRequest($id, $clone_lp_template_request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpTemplateResponse::class
            );
        } catch (ApiException $e) {
            throw $this->cloneLpTemplateUsingPOSTHandleException($e);
        }
    }

    /**
     * Clone Landing Page Template
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\CloneLpTemplateRequest $clone_lp_template_request cloneLpTemplateRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cloneLpTemplateUsingPOSTAsync(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\CloneLpTemplateRequest $clone_lp_template_request
    ): PromiseInterface
    {
        return $this->cloneLpTemplateUsingPOSTAsyncWithHttpInfo($id, $clone_lp_template_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Clone Landing Page Template
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\CloneLpTemplateRequest $clone_lp_template_request cloneLpTemplateRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cloneLpTemplateUsingPOSTAsyncWithHttpInfo(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\CloneLpTemplateRequest $clone_lp_template_request
    ): PromiseInterface
    {
        $request = $this->cloneLpTemplateUsingPOSTRequest($id, $clone_lp_template_request);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpTemplateResponse::class,
            [$this, 'cloneLpTemplateUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'cloneLpTemplateUsingPOST'
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\CloneLpTemplateRequest $clone_lp_template_request cloneLpTemplateRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function cloneLpTemplateUsingPOSTRequest(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\CloneLpTemplateRequest $clone_lp_template_request
    ): Request
    {

        $resourcePath = '/rest/asset/v1/landingPageTemplate/{id}/clone.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );
        $httpBody = ObjectSerializer::toBodyValue($clone_lp_template_request, $headers['Content-Type'] === 'application/json');


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Exception handler for createLpTemplateUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function createLpTemplateUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpTemplateResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Create Landing Page Template
     *
     * @param  \NecLimDul\MarketoRest\Asset\Model\CreateLpTemplateRequest $create_lp_template_request createLpTemplateRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpTemplateResponse
     */
    public function createLpTemplateUsingPOST(
        \NecLimDul\MarketoRest\Asset\Model\CreateLpTemplateRequest $create_lp_template_request
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpTemplateResponse
    {
        list($response) = $this->createLpTemplateUsingPOSTWithHttpInfo($create_lp_template_request);
        return $response;
    }

    /**
     * Create Landing Page Template
     *
     * @param  \NecLimDul\MarketoRest\Asset\Model\CreateLpTemplateRequest $create_lp_template_request createLpTemplateRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpTemplateResponse, HTTP status code, HTTP response headers (array of strings)
     * @phpstan-return array{ \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpTemplateResponse, int, array<array<string>>}
     */
    public function createLpTemplateUsingPOSTWithHttpInfo(
        \NecLimDul\MarketoRest\Asset\Model\CreateLpTemplateRequest $create_lp_template_request
    ): array
    {
        $request = $this->createLpTemplateUsingPOSTRequest($create_lp_template_request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpTemplateResponse::class
            );
        } catch (ApiException $e) {
            throw $this->createLpTemplateUsingPOSTHandleException($e);
        }
    }

    /**
     * Create Landing Page Template
     *
     * @param  \NecLimDul\MarketoRest\Asset\Model\CreateLpTemplateRequest $create_lp_template_request createLpTemplateRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createLpTemplateUsingPOSTAsync(
        \NecLimDul\MarketoRest\Asset\Model\CreateLpTemplateRequest $create_lp_template_request
    ): PromiseInterface
    {
        return $this->createLpTemplateUsingPOSTAsyncWithHttpInfo($create_lp_template_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Create Landing Page Template
     *
     * @param  \NecLimDul\MarketoRest\Asset\Model\CreateLpTemplateRequest $create_lp_template_request createLpTemplateRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createLpTemplateUsingPOSTAsyncWithHttpInfo(
        \NecLimDul\MarketoRest\Asset\Model\CreateLpTemplateRequest $create_lp_template_request
    ): PromiseInterface
    {
        $request = $this->createLpTemplateUsingPOSTRequest($create_lp_template_request);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpTemplateResponse::class,
            [$this, 'createLpTemplateUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'createLpTemplateUsingPOST'
     *
     * @param  \NecLimDul\MarketoRest\Asset\Model\CreateLpTemplateRequest $create_lp_template_request createLpTemplateRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createLpTemplateUsingPOSTRequest(
        \NecLimDul\MarketoRest\Asset\Model\CreateLpTemplateRequest $create_lp_template_request
    ): Request
    {

        $resourcePath = '/rest/asset/v1/landingPageTemplates.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );
        $httpBody = ObjectSerializer::toBodyValue($create_lp_template_request, $headers['Content-Type'] === 'application/json');


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Exception handler for deleteLpTemplateUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function deleteLpTemplateUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Delete Landing Page Template
     *
     * @param  int $id id (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse
     */
    public function deleteLpTemplateUsingPOST(
        int $id
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse
    {
        list($response) = $this->deleteLpTemplateUsingPOSTWithHttpInfo($id);
        return $response;
    }

    /**
     * Delete Landing Page Template
     *
     * @param  int $id id (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse, HTTP status code, HTTP response headers (array of strings)
     * @phpstan-return array{ \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse, int, array<array<string>>}
     */
    public function deleteLpTemplateUsingPOSTWithHttpInfo(
        int $id
    ): array
    {
        $request = $this->deleteLpTemplateUsingPOSTRequest($id);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class
            );
        } catch (ApiException $e) {
            throw $this->deleteLpTemplateUsingPOSTHandleException($e);
        }
    }

    /**
     * Delete Landing Page Template
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLpTemplateUsingPOSTAsync(
        int $id
    ): PromiseInterface
    {
        return $this->deleteLpTemplateUsingPOSTAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Delete Landing Page Template
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLpTemplateUsingPOSTAsyncWithHttpInfo(
        int $id
    ): PromiseInterface
    {
        $request = $this->deleteLpTemplateUsingPOSTRequest($id);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class,
            [$this, 'deleteLpTemplateUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'deleteLpTemplateUsingPOST'
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteLpTemplateUsingPOSTRequest(
        int $id
    ): Request
    {

        $resourcePath = '/rest/asset/v1/landingPageTemplate/{id}/delete.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Exception handler for discardDraftUsingPOST2.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function discardDraftUsingPOST2HandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Discard Landing Page Template Draft
     *
     * @param  int $id id (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse
     */
    public function discardDraftUsingPOST2(
        int $id
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse
    {
        list($response) = $this->discardDraftUsingPOST2WithHttpInfo($id);
        return $response;
    }

    /**
     * Discard Landing Page Template Draft
     *
     * @param  int $id id (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse, HTTP status code, HTTP response headers (array of strings)
     * @phpstan-return array{ \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse, int, array<array<string>>}
     */
    public function discardDraftUsingPOST2WithHttpInfo(
        int $id
    ): array
    {
        $request = $this->discardDraftUsingPOST2Request($id);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class
            );
        } catch (ApiException $e) {
            throw $this->discardDraftUsingPOST2HandleException($e);
        }
    }

    /**
     * Discard Landing Page Template Draft
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function discardDraftUsingPOST2Async(
        int $id
    ): PromiseInterface
    {
        return $this->discardDraftUsingPOST2AsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Discard Landing Page Template Draft
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function discardDraftUsingPOST2AsyncWithHttpInfo(
        int $id
    ): PromiseInterface
    {
        $request = $this->discardDraftUsingPOST2Request($id);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class,
            [$this, 'discardDraftUsingPOST2HandleException']
        );
    }

    /**
     * Create request for operation 'discardDraftUsingPOST2'
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function discardDraftUsingPOST2Request(
        int $id
    ): Request
    {

        $resourcePath = '/rest/asset/v1/landingPageTemplate/{id}/discardDraft.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Exception handler for getLandingPageTemplateByIdUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function getLandingPageTemplateByIdUsingGETHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpTemplateResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Landing Page Template by Id
     *
     * @param  int $id id (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpTemplateResponse
     */
    public function getLandingPageTemplateByIdUsingGET(
        int $id,
        string $status = null
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpTemplateResponse
    {
        list($response) = $this->getLandingPageTemplateByIdUsingGETWithHttpInfo($id, $status);
        return $response;
    }

    /**
     * Get Landing Page Template by Id
     *
     * @param  int $id id (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpTemplateResponse, HTTP status code, HTTP response headers (array of strings)
     * @phpstan-return array{ \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpTemplateResponse, int, array<array<string>>}
     */
    public function getLandingPageTemplateByIdUsingGETWithHttpInfo(
        int $id,
        string $status = null
    ): array
    {
        $request = $this->getLandingPageTemplateByIdUsingGETRequest($id, $status);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpTemplateResponse::class
            );
        } catch (ApiException $e) {
            throw $this->getLandingPageTemplateByIdUsingGETHandleException($e);
        }
    }

    /**
     * Get Landing Page Template by Id
     *
     * @param  int $id id (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLandingPageTemplateByIdUsingGETAsync(
        int $id,
        string $status = null
    ): PromiseInterface
    {
        return $this->getLandingPageTemplateByIdUsingGETAsyncWithHttpInfo($id, $status)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Get Landing Page Template by Id
     *
     * @param  int $id id (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLandingPageTemplateByIdUsingGETAsyncWithHttpInfo(
        int $id,
        string $status = null
    ): PromiseInterface
    {
        $request = $this->getLandingPageTemplateByIdUsingGETRequest($id, $status);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpTemplateResponse::class,
            [$this, 'getLandingPageTemplateByIdUsingGETHandleException']
        );
    }

    /**
     * Create request for operation 'getLandingPageTemplateByIdUsingGET'
     *
     * @param  int $id id (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLandingPageTemplateByIdUsingGETRequest(
        int $id,
        string $status = null
    ): Request
    {

        $resourcePath = '/rest/asset/v1/landingPageTemplate/{id}.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Query parameters.
        $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        // Remove any null (optional values).
        $queryParams = array_filter($queryParams, function($v) { return $v !== null; });

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Exception handler for getLandingPageTemplateByNameUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function getLandingPageTemplateByNameUsingGETHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpTemplateResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Landing Page Template by Name
     *
     * @param  string $name Name of the landing page template (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpTemplateResponse
     */
    public function getLandingPageTemplateByNameUsingGET(
        string $name
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpTemplateResponse
    {
        list($response) = $this->getLandingPageTemplateByNameUsingGETWithHttpInfo($name);
        return $response;
    }

    /**
     * Get Landing Page Template by Name
     *
     * @param  string $name Name of the landing page template (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpTemplateResponse, HTTP status code, HTTP response headers (array of strings)
     * @phpstan-return array{ \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpTemplateResponse, int, array<array<string>>}
     */
    public function getLandingPageTemplateByNameUsingGETWithHttpInfo(
        string $name
    ): array
    {
        $request = $this->getLandingPageTemplateByNameUsingGETRequest($name);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpTemplateResponse::class
            );
        } catch (ApiException $e) {
            throw $this->getLandingPageTemplateByNameUsingGETHandleException($e);
        }
    }

    /**
     * Get Landing Page Template by Name
     *
     * @param  string $name Name of the landing page template (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLandingPageTemplateByNameUsingGETAsync(
        string $name
    ): PromiseInterface
    {
        return $this->getLandingPageTemplateByNameUsingGETAsyncWithHttpInfo($name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Get Landing Page Template by Name
     *
     * @param  string $name Name of the landing page template (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLandingPageTemplateByNameUsingGETAsyncWithHttpInfo(
        string $name
    ): PromiseInterface
    {
        $request = $this->getLandingPageTemplateByNameUsingGETRequest($name);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpTemplateResponse::class,
            [$this, 'getLandingPageTemplateByNameUsingGETHandleException']
        );
    }

    /**
     * Create request for operation 'getLandingPageTemplateByNameUsingGET'
     *
     * @param  string $name Name of the landing page template (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLandingPageTemplateByNameUsingGETRequest(
        string $name
    ): Request
    {

        $resourcePath = '/rest/asset/v1/landingPageTemplate/byName.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Query parameters.
        $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        // Remove any null (optional values).
        $queryParams = array_filter($queryParams, function($v) { return $v !== null; });
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Exception handler for getLandingPageTemplateContentUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function getLandingPageTemplateContentUsingGETHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpTemplateGetContentResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Landing Page Template Content
     *
     * @param  int $id id (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpTemplateGetContentResponse
     */
    public function getLandingPageTemplateContentUsingGET(
        int $id,
        string $status = null
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpTemplateGetContentResponse
    {
        list($response) = $this->getLandingPageTemplateContentUsingGETWithHttpInfo($id, $status);
        return $response;
    }

    /**
     * Get Landing Page Template Content
     *
     * @param  int $id id (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpTemplateGetContentResponse, HTTP status code, HTTP response headers (array of strings)
     * @phpstan-return array{ \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpTemplateGetContentResponse, int, array<array<string>>}
     */
    public function getLandingPageTemplateContentUsingGETWithHttpInfo(
        int $id,
        string $status = null
    ): array
    {
        $request = $this->getLandingPageTemplateContentUsingGETRequest($id, $status);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpTemplateGetContentResponse::class
            );
        } catch (ApiException $e) {
            throw $this->getLandingPageTemplateContentUsingGETHandleException($e);
        }
    }

    /**
     * Get Landing Page Template Content
     *
     * @param  int $id id (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLandingPageTemplateContentUsingGETAsync(
        int $id,
        string $status = null
    ): PromiseInterface
    {
        return $this->getLandingPageTemplateContentUsingGETAsyncWithHttpInfo($id, $status)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Get Landing Page Template Content
     *
     * @param  int $id id (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLandingPageTemplateContentUsingGETAsyncWithHttpInfo(
        int $id,
        string $status = null
    ): PromiseInterface
    {
        $request = $this->getLandingPageTemplateContentUsingGETRequest($id, $status);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpTemplateGetContentResponse::class,
            [$this, 'getLandingPageTemplateContentUsingGETHandleException']
        );
    }

    /**
     * Create request for operation 'getLandingPageTemplateContentUsingGET'
     *
     * @param  int $id id (required)
     * @param  string $status Status filter for draft or approved versions (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLandingPageTemplateContentUsingGETRequest(
        int $id,
        string $status = null
    ): Request
    {

        $resourcePath = '/rest/asset/v1/landingPageTemplate/{id}/content.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Query parameters.
        $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        // Remove any null (optional values).
        $queryParams = array_filter($queryParams, function($v) { return $v !== null; });

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Exception handler for getLandingPageTemplatesUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function getLandingPageTemplatesUsingGETHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpTemplateResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Landing Page Templates
     *
     * @param  int $max_return Maximum number of channels to return.  Max 200, default 20 (optional)
     * @param  int $offset Integer offset for paging (optional)
     * @param  string $status Status filter for draft or approved versions (optional)
     * @param  string $folder JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39; (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpTemplateResponse
     */
    public function getLandingPageTemplatesUsingGET(
        int $max_return = null,
        int $offset = null,
        string $status = null,
        string $folder = null
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpTemplateResponse
    {
        list($response) = $this->getLandingPageTemplatesUsingGETWithHttpInfo($max_return, $offset, $status, $folder);
        return $response;
    }

    /**
     * Get Landing Page Templates
     *
     * @param  int $max_return Maximum number of channels to return.  Max 200, default 20 (optional)
     * @param  int $offset Integer offset for paging (optional)
     * @param  string $status Status filter for draft or approved versions (optional)
     * @param  string $folder JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39; (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpTemplateResponse, HTTP status code, HTTP response headers (array of strings)
     * @phpstan-return array{ \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpTemplateResponse, int, array<array<string>>}
     */
    public function getLandingPageTemplatesUsingGETWithHttpInfo(
        int $max_return = null,
        int $offset = null,
        string $status = null,
        string $folder = null
    ): array
    {
        $request = $this->getLandingPageTemplatesUsingGETRequest($max_return, $offset, $status, $folder);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpTemplateResponse::class
            );
        } catch (ApiException $e) {
            throw $this->getLandingPageTemplatesUsingGETHandleException($e);
        }
    }

    /**
     * Get Landing Page Templates
     *
     * @param  int $max_return Maximum number of channels to return.  Max 200, default 20 (optional)
     * @param  int $offset Integer offset for paging (optional)
     * @param  string $status Status filter for draft or approved versions (optional)
     * @param  string $folder JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLandingPageTemplatesUsingGETAsync(
        int $max_return = null,
        int $offset = null,
        string $status = null,
        string $folder = null
    ): PromiseInterface
    {
        return $this->getLandingPageTemplatesUsingGETAsyncWithHttpInfo($max_return, $offset, $status, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Get Landing Page Templates
     *
     * @param  int $max_return Maximum number of channels to return.  Max 200, default 20 (optional)
     * @param  int $offset Integer offset for paging (optional)
     * @param  string $status Status filter for draft or approved versions (optional)
     * @param  string $folder JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLandingPageTemplatesUsingGETAsyncWithHttpInfo(
        int $max_return = null,
        int $offset = null,
        string $status = null,
        string $folder = null
    ): PromiseInterface
    {
        $request = $this->getLandingPageTemplatesUsingGETRequest($max_return, $offset, $status, $folder);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpTemplateResponse::class,
            [$this, 'getLandingPageTemplatesUsingGETHandleException']
        );
    }

    /**
     * Create request for operation 'getLandingPageTemplatesUsingGET'
     *
     * @param  int $max_return Maximum number of channels to return.  Max 200, default 20 (optional)
     * @param  int $offset Integer offset for paging (optional)
     * @param  string $status Status filter for draft or approved versions (optional)
     * @param  string $folder JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLandingPageTemplatesUsingGETRequest(
        int $max_return = null,
        int $offset = null,
        string $status = null,
        string $folder = null
    ): Request
    {

        $resourcePath = '/rest/asset/v1/landingPageTemplates.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Query parameters.
        $queryParams['maxReturn'] = ObjectSerializer::toQueryValue($max_return);
        $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        // Remove any null (optional values).
        $queryParams = array_filter($queryParams, function($v) { return $v !== null; });
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Exception handler for unapproveLandingPageTemplateUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function unapproveLandingPageTemplateUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpTemplateResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Unapprove Landing Page Template
     *
     * @param  int $id id (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpTemplateResponse
     */
    public function unapproveLandingPageTemplateUsingPOST(
        int $id
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpTemplateResponse
    {
        list($response) = $this->unapproveLandingPageTemplateUsingPOSTWithHttpInfo($id);
        return $response;
    }

    /**
     * Unapprove Landing Page Template
     *
     * @param  int $id id (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpTemplateResponse, HTTP status code, HTTP response headers (array of strings)
     * @phpstan-return array{ \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpTemplateResponse, int, array<array<string>>}
     */
    public function unapproveLandingPageTemplateUsingPOSTWithHttpInfo(
        int $id
    ): array
    {
        $request = $this->unapproveLandingPageTemplateUsingPOSTRequest($id);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpTemplateResponse::class
            );
        } catch (ApiException $e) {
            throw $this->unapproveLandingPageTemplateUsingPOSTHandleException($e);
        }
    }

    /**
     * Unapprove Landing Page Template
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function unapproveLandingPageTemplateUsingPOSTAsync(
        int $id
    ): PromiseInterface
    {
        return $this->unapproveLandingPageTemplateUsingPOSTAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Unapprove Landing Page Template
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function unapproveLandingPageTemplateUsingPOSTAsyncWithHttpInfo(
        int $id
    ): PromiseInterface
    {
        $request = $this->unapproveLandingPageTemplateUsingPOSTRequest($id);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpTemplateResponse::class,
            [$this, 'unapproveLandingPageTemplateUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'unapproveLandingPageTemplateUsingPOST'
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function unapproveLandingPageTemplateUsingPOSTRequest(
        int $id
    ): Request
    {

        $resourcePath = '/rest/asset/v1/landingPageTemplate/{id}/unapprove.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Exception handler for updateLandingPageTemplateContentUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function updateLandingPageTemplateContentUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Update Landing Page Template Content
     *
     * @param  int $id id (required)
     * @param  string $content content (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse
     */
    public function updateLandingPageTemplateContentUsingPOST(
        int $id,
        string $content
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse
    {
        list($response) = $this->updateLandingPageTemplateContentUsingPOSTWithHttpInfo($id, $content);
        return $response;
    }

    /**
     * Update Landing Page Template Content
     *
     * @param  int $id id (required)
     * @param  string $content content (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse, HTTP status code, HTTP response headers (array of strings)
     * @phpstan-return array{ \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse, int, array<array<string>>}
     */
    public function updateLandingPageTemplateContentUsingPOSTWithHttpInfo(
        int $id,
        string $content
    ): array
    {
        $request = $this->updateLandingPageTemplateContentUsingPOSTRequest($id, $content);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class
            );
        } catch (ApiException $e) {
            throw $this->updateLandingPageTemplateContentUsingPOSTHandleException($e);
        }
    }

    /**
     * Update Landing Page Template Content
     *
     * @param  int $id id (required)
     * @param  string $content content (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLandingPageTemplateContentUsingPOSTAsync(
        int $id,
        string $content
    ): PromiseInterface
    {
        return $this->updateLandingPageTemplateContentUsingPOSTAsyncWithHttpInfo($id, $content)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Update Landing Page Template Content
     *
     * @param  int $id id (required)
     * @param  string $content content (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLandingPageTemplateContentUsingPOSTAsyncWithHttpInfo(
        int $id,
        string $content
    ): PromiseInterface
    {
        $request = $this->updateLandingPageTemplateContentUsingPOSTRequest($id, $content);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse::class,
            [$this, 'updateLandingPageTemplateContentUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'updateLandingPageTemplateContentUsingPOST'
     *
     * @param  int $id id (required)
     * @param  string $content content (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateLandingPageTemplateContentUsingPOSTRequest(
        int $id,
        string $content
    ): Request
    {

        $resourcePath = '/rest/asset/v1/landingPageTemplate/{id}/content.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );

        // Form parameters.
        /** @var string[][] $formParams */
        $formParams = [];
        $multipart = false;
        $formParams['content'] = ObjectSerializer::toFormValue($content);
        // Remove any null (optional values).
        $formParams = array_filter($formParams, function($v) { return $v !== null; });
        /**
         * @psalm-suppress RedundantCondition,TypeDoesNotContainType
         * @phpstan-ignore-next-line
         */
        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }
        if (!empty($formParams)) {
            /**
             * @psalm-suppress RedundantCondition,TypeDoesNotContainType
             * @phpstan-ignore-next-line
             */
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    foreach ((array) $formParamValue as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Exception handler for updateLpTemplateUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function updateLpTemplateUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpTemplateResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Update Landing Page Template Metadata
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\UpdateLpTemplateRequest $update_lp_template_request updateLpTemplateRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpTemplateResponse
     */
    public function updateLpTemplateUsingPOST(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\UpdateLpTemplateRequest $update_lp_template_request
    ): \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpTemplateResponse
    {
        list($response) = $this->updateLpTemplateUsingPOSTWithHttpInfo($id, $update_lp_template_request);
        return $response;
    }

    /**
     * Update Landing Page Template Metadata
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\UpdateLpTemplateRequest $update_lp_template_request updateLpTemplateRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpTemplateResponse, HTTP status code, HTTP response headers (array of strings)
     * @phpstan-return array{ \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpTemplateResponse, int, array<array<string>>}
     */
    public function updateLpTemplateUsingPOSTWithHttpInfo(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\UpdateLpTemplateRequest $update_lp_template_request
    ): array
    {
        $request = $this->updateLpTemplateUsingPOSTRequest($id, $update_lp_template_request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpTemplateResponse::class
            );
        } catch (ApiException $e) {
            throw $this->updateLpTemplateUsingPOSTHandleException($e);
        }
    }

    /**
     * Update Landing Page Template Metadata
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\UpdateLpTemplateRequest $update_lp_template_request updateLpTemplateRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLpTemplateUsingPOSTAsync(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\UpdateLpTemplateRequest $update_lp_template_request
    ): PromiseInterface
    {
        return $this->updateLpTemplateUsingPOSTAsyncWithHttpInfo($id, $update_lp_template_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Update Landing Page Template Metadata
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\UpdateLpTemplateRequest $update_lp_template_request updateLpTemplateRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLpTemplateUsingPOSTAsyncWithHttpInfo(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\UpdateLpTemplateRequest $update_lp_template_request
    ): PromiseInterface
    {
        $request = $this->updateLpTemplateUsingPOSTRequest($id, $update_lp_template_request);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Asset\Model\ResponseOfLpTemplateResponse::class,
            [$this, 'updateLpTemplateUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'updateLpTemplateUsingPOST'
     *
     * @param  int $id id (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\UpdateLpTemplateRequest $update_lp_template_request updateLpTemplateRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateLpTemplateUsingPOSTRequest(
        int $id,
        \NecLimDul\MarketoRest\Asset\Model\UpdateLpTemplateRequest $update_lp_template_request
    ): Request
    {

        $resourcePath = '/rest/asset/v1/landingPageTemplate/{id}.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );
        $httpBody = ObjectSerializer::toBodyValue($update_lp_template_request, $headers['Content-Type'] === 'application/json');


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array<string, mixed> of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    /**
     * Make a request.
     *
     * @param \GuzzleHttp\Psr7\Request $request An initialized request object.
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @return \Psr\Http\Message\ResponseInterface
     */
    private function makeRequest(Request $request) {
        $options = $this->createHttpClientOption();
        try {
           $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            $response = $e->getResponse();
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                (int) $e->getCode(),
                $response ? $response->getHeaders() : null,
                $response ? (string) $response->getBody() : null
            );
        }

        $statusCode = $response->getStatusCode();
        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    (string) $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                (string) $response->getBody()
            );
        }
        return $response;
    }

    /**
     * Make an async request.
     *
     * @param \GuzzleHttp\Psr7\Request $request An initialized request object.
     * @param class-string $returnType The return type.
     * @param callable $exceptionHandler A callback to process HTTP errors.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @return \GuzzleHttp\Promise\PromiseInterface A promise that will return a processed response.
     */
    private function makeAsyncRequest(Request $request, string $returnType, callable $exceptionHandler)
    {
        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->responseToReturn($response, $returnType);
                },
                function (RequestException $exception) use ($exceptionHandler) {
                    $response = $exception->getResponse();
                    $e = new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                    throw $exceptionHandler($e);
                }
            );
    }

    /**
     * Convert a response to a return standard return array.
     *
     * @template T
     * @param \Psr\Http\Message\ResponseInterface $response A response from a request with a serialized body.
     * @param string $returnType The primary return type.
     * @phpstan-param class-string<T> $returnType
     *
     * @return array structured array or response and http info.
     * @phpstan-return array{T, int, array<array<string>>}
     */
    private function responseToReturn(ResponseInterface $response, string $returnType) {
        return [
            $this->deserializeResponseBody($response->getBody(), $returnType),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    /**
     * Deserialize a response body.
     *
     * @template T
     * @param mixed $responseBody The response body.
     * @param string $returnType The return type.
     * @param array<string, string[]>|null $headers A list of headers from the response.
     * @phpstan-param class-string<T> $returnType
     *
     * @return mixed Either a string or a stream to be passed to a file object.
     * @phpstan-return T
     * @psalm-return T
     */
    private function deserializeResponseBody($responseBody, string $returnType, ?array $headers = [])
    {
        return ObjectSerializer::deserialize(
            $returnType === '\SplFileObject' ? $responseBody : (string) $responseBody,
            $returnType,
            $headers
        );
    }

}
