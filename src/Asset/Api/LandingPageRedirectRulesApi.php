<?php
/**
 * LandingPageRedirectRulesApi
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Asset
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketo Rest API
 *
 * Marketo Rest API
 *
 * OpenAPI spec version: 1.0
 * Contact: developerfeedback@marketo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.26
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace NecLimDul\MarketoRest\Asset\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Query;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\ResponseInterface;
use NecLimDul\MarketoRest\Asset\ApiException;
use NecLimDul\MarketoRest\Asset\Configuration;
use NecLimDul\MarketoRest\Asset\HeaderSelector;
use NecLimDul\MarketoRest\Asset\ObjectSerializer;

/**
 * LandingPageRedirectRulesApi Class Doc Comment
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Asset
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LandingPageRedirectRulesApi
{

    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Exception handler for createLandingPageRedirectRuleUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function createLandingPageRedirectRuleUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageRedirectRules',
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Create Landing Page Redirect Rule
     *
     * @param  \NecLimDul\MarketoRest\Asset\Model\CreateLandingPageRedirectRuleRequest $create_landing_page_redirect_rule_request createLandingPageRedirectRuleRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageRedirectRules
     */
    public function createLandingPageRedirectRuleUsingPOST($create_landing_page_redirect_rule_request)
    {
        list($response) = $this->createLandingPageRedirectRuleUsingPOSTWithHttpInfo($create_landing_page_redirect_rule_request);
        return $response;
    }

    /**
     * Create Landing Page Redirect Rule
     *
     * @param  \NecLimDul\MarketoRest\Asset\Model\CreateLandingPageRedirectRuleRequest $create_landing_page_redirect_rule_request createLandingPageRedirectRuleRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageRedirectRules, HTTP status code, HTTP response headers (array of strings)
     */
    public function createLandingPageRedirectRuleUsingPOSTWithHttpInfo($create_landing_page_redirect_rule_request)
    {
        $request = $this->createLandingPageRedirectRuleUsingPOSTRequest($create_landing_page_redirect_rule_request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageRedirectRules');
        } catch (ApiException $e) {
            throw $this->createLandingPageRedirectRuleUsingPOSTHandleException($e);
        }
    }

    /**
     * Create Landing Page Redirect Rule
     *
     * @param  \NecLimDul\MarketoRest\Asset\Model\CreateLandingPageRedirectRuleRequest $create_landing_page_redirect_rule_request createLandingPageRedirectRuleRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createLandingPageRedirectRuleUsingPOSTAsync($create_landing_page_redirect_rule_request)
    {
        return $this->createLandingPageRedirectRuleUsingPOSTAsyncWithHttpInfo($create_landing_page_redirect_rule_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Create Landing Page Redirect Rule
     *
     * @param  \NecLimDul\MarketoRest\Asset\Model\CreateLandingPageRedirectRuleRequest $create_landing_page_redirect_rule_request createLandingPageRedirectRuleRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createLandingPageRedirectRuleUsingPOSTAsyncWithHttpInfo($create_landing_page_redirect_rule_request)
    {
        $request = $this->createLandingPageRedirectRuleUsingPOSTRequest($create_landing_page_redirect_rule_request);
        return $this->makeAsyncRequest($request, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageRedirectRules', [$this, 'createLandingPageRedirectRuleUsingPOSTHandleException']);
    }

    /**
     * Create request for operation 'createLandingPageRedirectRuleUsingPOST'
     *
     * @param  \NecLimDul\MarketoRest\Asset\Model\CreateLandingPageRedirectRuleRequest $create_landing_page_redirect_rule_request createLandingPageRedirectRuleRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createLandingPageRedirectRuleUsingPOSTRequest($create_landing_page_redirect_rule_request)
    {
        // Verify the required parameter 'create_landing_page_redirect_rule_request' is set.
        if (!isset($create_landing_page_redirect_rule_request)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_landing_page_redirect_rule_request when calling createLandingPageRedirectRuleUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/redirectRules.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );
        if ($headers['Content-Type'] === 'application/json') {
          $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($create_landing_page_redirect_rule_request));
        } elseif (!is_array($create_landing_page_redirect_rule_request)) {
          $httpBody = (string) $create_landing_page_redirect_rule_request;
        }
        else {
          $httpBody = '';
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Exception handler for deleteLandingPageRedirectRuleUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function deleteLandingPageRedirectRuleUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse',
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Delete Landing Page Redirect Rule
     *
     * @param  int $id Id of landing page redirect rule (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse
     */
    public function deleteLandingPageRedirectRuleUsingPOST($id)
    {
        list($response) = $this->deleteLandingPageRedirectRuleUsingPOSTWithHttpInfo($id);
        return $response;
    }

    /**
     * Delete Landing Page Redirect Rule
     *
     * @param  int $id Id of landing page redirect rule (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLandingPageRedirectRuleUsingPOSTWithHttpInfo($id)
    {
        $request = $this->deleteLandingPageRedirectRuleUsingPOSTRequest($id);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse');
        } catch (ApiException $e) {
            throw $this->deleteLandingPageRedirectRuleUsingPOSTHandleException($e);
        }
    }

    /**
     * Delete Landing Page Redirect Rule
     *
     * @param  int $id Id of landing page redirect rule (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLandingPageRedirectRuleUsingPOSTAsync($id)
    {
        return $this->deleteLandingPageRedirectRuleUsingPOSTAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Delete Landing Page Redirect Rule
     *
     * @param  int $id Id of landing page redirect rule (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLandingPageRedirectRuleUsingPOSTAsyncWithHttpInfo($id)
    {
        $request = $this->deleteLandingPageRedirectRuleUsingPOSTRequest($id);
        return $this->makeAsyncRequest($request, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfIdResponse', [$this, 'deleteLandingPageRedirectRuleUsingPOSTHandleException']);
    }

    /**
     * Create request for operation 'deleteLandingPageRedirectRuleUsingPOST'
     *
     * @param  int $id Id of landing page redirect rule (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteLandingPageRedirectRuleUsingPOSTRequest($id)
    {
        // Verify the required parameter 'id' is set.
        if (!isset($id)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteLandingPageRedirectRuleUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/redirectRule/{id}/delete.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Exception handler for getLandingPageDomainsUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function getLandingPageDomainsUsingGETHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageDomains',
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Landing Page Domains
     *
     * @param  int $max_return Maximum number of landing page domains and domain aliases to return.  Max 200, default 20 (optional)
     * @param  int $offset Integer offset for paging (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageDomains
     */
    public function getLandingPageDomainsUsingGET($max_return = null, $offset = null)
    {
        list($response) = $this->getLandingPageDomainsUsingGETWithHttpInfo($max_return, $offset);
        return $response;
    }

    /**
     * Get Landing Page Domains
     *
     * @param  int $max_return Maximum number of landing page domains and domain aliases to return.  Max 200, default 20 (optional)
     * @param  int $offset Integer offset for paging (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageDomains, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLandingPageDomainsUsingGETWithHttpInfo($max_return = null, $offset = null)
    {
        $request = $this->getLandingPageDomainsUsingGETRequest($max_return, $offset);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageDomains');
        } catch (ApiException $e) {
            throw $this->getLandingPageDomainsUsingGETHandleException($e);
        }
    }

    /**
     * Get Landing Page Domains
     *
     * @param  int $max_return Maximum number of landing page domains and domain aliases to return.  Max 200, default 20 (optional)
     * @param  int $offset Integer offset for paging (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLandingPageDomainsUsingGETAsync($max_return = null, $offset = null)
    {
        return $this->getLandingPageDomainsUsingGETAsyncWithHttpInfo($max_return, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Get Landing Page Domains
     *
     * @param  int $max_return Maximum number of landing page domains and domain aliases to return.  Max 200, default 20 (optional)
     * @param  int $offset Integer offset for paging (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLandingPageDomainsUsingGETAsyncWithHttpInfo($max_return = null, $offset = null)
    {
        $request = $this->getLandingPageDomainsUsingGETRequest($max_return, $offset);
        return $this->makeAsyncRequest($request, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageDomains', [$this, 'getLandingPageDomainsUsingGETHandleException']);
    }

    /**
     * Create request for operation 'getLandingPageDomainsUsingGET'
     *
     * @param  int $max_return Maximum number of landing page domains and domain aliases to return.  Max 200, default 20 (optional)
     * @param  int $offset Integer offset for paging (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLandingPageDomainsUsingGETRequest($max_return = null, $offset = null)
    {

        $resourcePath = '/rest/asset/v1/landingPageDomains.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Query parameters.
        if (is_array($max_return)) {
            $max_return = ObjectSerializer::serializeCollection($max_return, '', true);
        }
        $queryParams['maxReturn'] = $max_return;
        if (is_array($offset)) {
            $offset = ObjectSerializer::serializeCollection($offset, '', true);
        }
        $queryParams['offset'] = $offset;
        // Remove any null (optional values).
        $queryParams = array_filter($queryParams, function($v) { return $v !== null; });
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Exception handler for getLandingPageRedirectRuleByIdUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function getLandingPageRedirectRuleByIdUsingGETHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageRedirectRules',
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Landing Page Redirect Rule by Id
     *
     * @param  int $id Id of landing page redirect rule (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageRedirectRules
     */
    public function getLandingPageRedirectRuleByIdUsingGET($id)
    {
        list($response) = $this->getLandingPageRedirectRuleByIdUsingGETWithHttpInfo($id);
        return $response;
    }

    /**
     * Get Landing Page Redirect Rule by Id
     *
     * @param  int $id Id of landing page redirect rule (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageRedirectRules, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLandingPageRedirectRuleByIdUsingGETWithHttpInfo($id)
    {
        $request = $this->getLandingPageRedirectRuleByIdUsingGETRequest($id);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageRedirectRules');
        } catch (ApiException $e) {
            throw $this->getLandingPageRedirectRuleByIdUsingGETHandleException($e);
        }
    }

    /**
     * Get Landing Page Redirect Rule by Id
     *
     * @param  int $id Id of landing page redirect rule (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLandingPageRedirectRuleByIdUsingGETAsync($id)
    {
        return $this->getLandingPageRedirectRuleByIdUsingGETAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Get Landing Page Redirect Rule by Id
     *
     * @param  int $id Id of landing page redirect rule (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLandingPageRedirectRuleByIdUsingGETAsyncWithHttpInfo($id)
    {
        $request = $this->getLandingPageRedirectRuleByIdUsingGETRequest($id);
        return $this->makeAsyncRequest($request, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageRedirectRules', [$this, 'getLandingPageRedirectRuleByIdUsingGETHandleException']);
    }

    /**
     * Create request for operation 'getLandingPageRedirectRuleByIdUsingGET'
     *
     * @param  int $id Id of landing page redirect rule (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLandingPageRedirectRuleByIdUsingGETRequest($id)
    {
        // Verify the required parameter 'id' is set.
        if (!isset($id)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getLandingPageRedirectRuleByIdUsingGET'
            );
        }

        $resourcePath = '/rest/asset/v1/redirectRule/{id}.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Exception handler for getLandingPageRedirectRulesUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function getLandingPageRedirectRulesUsingGETHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageRedirectRules',
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Landing Page Redirect Rules
     *
     * @param  int $max_return Maximum number of landing page redirect rules to return.  Max 200, default 20 (optional)
     * @param  int $offset Integer offset for paging (optional)
     * @param  string $redirect_tolanding_page_id Landing page id of landing page to redirect to (optional)
     * @param  string $redirect_to_path Path of landing page to redirect to (optional)
     * @param  string $earliest_updated_at Exclude landing page redirect rules prior to this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description. (optional)
     * @param  string $latest_updated_at Exclude landing page redirect rules after this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description. (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageRedirectRules
     */
    public function getLandingPageRedirectRulesUsingGET($max_return = null, $offset = null, $redirect_tolanding_page_id = null, $redirect_to_path = null, $earliest_updated_at = null, $latest_updated_at = null)
    {
        list($response) = $this->getLandingPageRedirectRulesUsingGETWithHttpInfo($max_return, $offset, $redirect_tolanding_page_id, $redirect_to_path, $earliest_updated_at, $latest_updated_at);
        return $response;
    }

    /**
     * Get Landing Page Redirect Rules
     *
     * @param  int $max_return Maximum number of landing page redirect rules to return.  Max 200, default 20 (optional)
     * @param  int $offset Integer offset for paging (optional)
     * @param  string $redirect_tolanding_page_id Landing page id of landing page to redirect to (optional)
     * @param  string $redirect_to_path Path of landing page to redirect to (optional)
     * @param  string $earliest_updated_at Exclude landing page redirect rules prior to this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description. (optional)
     * @param  string $latest_updated_at Exclude landing page redirect rules after this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description. (optional)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageRedirectRules, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLandingPageRedirectRulesUsingGETWithHttpInfo($max_return = null, $offset = null, $redirect_tolanding_page_id = null, $redirect_to_path = null, $earliest_updated_at = null, $latest_updated_at = null)
    {
        $request = $this->getLandingPageRedirectRulesUsingGETRequest($max_return, $offset, $redirect_tolanding_page_id, $redirect_to_path, $earliest_updated_at, $latest_updated_at);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageRedirectRules');
        } catch (ApiException $e) {
            throw $this->getLandingPageRedirectRulesUsingGETHandleException($e);
        }
    }

    /**
     * Get Landing Page Redirect Rules
     *
     * @param  int $max_return Maximum number of landing page redirect rules to return.  Max 200, default 20 (optional)
     * @param  int $offset Integer offset for paging (optional)
     * @param  string $redirect_tolanding_page_id Landing page id of landing page to redirect to (optional)
     * @param  string $redirect_to_path Path of landing page to redirect to (optional)
     * @param  string $earliest_updated_at Exclude landing page redirect rules prior to this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description. (optional)
     * @param  string $latest_updated_at Exclude landing page redirect rules after this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLandingPageRedirectRulesUsingGETAsync($max_return = null, $offset = null, $redirect_tolanding_page_id = null, $redirect_to_path = null, $earliest_updated_at = null, $latest_updated_at = null)
    {
        return $this->getLandingPageRedirectRulesUsingGETAsyncWithHttpInfo($max_return, $offset, $redirect_tolanding_page_id, $redirect_to_path, $earliest_updated_at, $latest_updated_at)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Get Landing Page Redirect Rules
     *
     * @param  int $max_return Maximum number of landing page redirect rules to return.  Max 200, default 20 (optional)
     * @param  int $offset Integer offset for paging (optional)
     * @param  string $redirect_tolanding_page_id Landing page id of landing page to redirect to (optional)
     * @param  string $redirect_to_path Path of landing page to redirect to (optional)
     * @param  string $earliest_updated_at Exclude landing page redirect rules prior to this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description. (optional)
     * @param  string $latest_updated_at Exclude landing page redirect rules after this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLandingPageRedirectRulesUsingGETAsyncWithHttpInfo($max_return = null, $offset = null, $redirect_tolanding_page_id = null, $redirect_to_path = null, $earliest_updated_at = null, $latest_updated_at = null)
    {
        $request = $this->getLandingPageRedirectRulesUsingGETRequest($max_return, $offset, $redirect_tolanding_page_id, $redirect_to_path, $earliest_updated_at, $latest_updated_at);
        return $this->makeAsyncRequest($request, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageRedirectRules', [$this, 'getLandingPageRedirectRulesUsingGETHandleException']);
    }

    /**
     * Create request for operation 'getLandingPageRedirectRulesUsingGET'
     *
     * @param  int $max_return Maximum number of landing page redirect rules to return.  Max 200, default 20 (optional)
     * @param  int $offset Integer offset for paging (optional)
     * @param  string $redirect_tolanding_page_id Landing page id of landing page to redirect to (optional)
     * @param  string $redirect_to_path Path of landing page to redirect to (optional)
     * @param  string $earliest_updated_at Exclude landing page redirect rules prior to this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description. (optional)
     * @param  string $latest_updated_at Exclude landing page redirect rules after this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLandingPageRedirectRulesUsingGETRequest($max_return = null, $offset = null, $redirect_tolanding_page_id = null, $redirect_to_path = null, $earliest_updated_at = null, $latest_updated_at = null)
    {

        $resourcePath = '/rest/asset/v1/redirectRules.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Query parameters.
        if (is_array($max_return)) {
            $max_return = ObjectSerializer::serializeCollection($max_return, '', true);
        }
        $queryParams['maxReturn'] = $max_return;
        if (is_array($offset)) {
            $offset = ObjectSerializer::serializeCollection($offset, '', true);
        }
        $queryParams['offset'] = $offset;
        if (is_array($redirect_tolanding_page_id)) {
            $redirect_tolanding_page_id = ObjectSerializer::serializeCollection($redirect_tolanding_page_id, '', true);
        }
        $queryParams['redirectTolandingPageId'] = $redirect_tolanding_page_id;
        if (is_array($redirect_to_path)) {
            $redirect_to_path = ObjectSerializer::serializeCollection($redirect_to_path, '', true);
        }
        $queryParams['redirectToPath'] = $redirect_to_path;
        if (is_array($earliest_updated_at)) {
            $earliest_updated_at = ObjectSerializer::serializeCollection($earliest_updated_at, '', true);
        }
        $queryParams['earliestUpdatedAt'] = $earliest_updated_at;
        if (is_array($latest_updated_at)) {
            $latest_updated_at = ObjectSerializer::serializeCollection($latest_updated_at, '', true);
        }
        $queryParams['latestUpdatedAt'] = $latest_updated_at;
        // Remove any null (optional values).
        $queryParams = array_filter($queryParams, function($v) { return $v !== null; });
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Exception handler for updateLandingPageRedirectRuleUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Asset\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Asset\ApiException Processed exception.
     */
    protected function updateLandingPageRedirectRuleUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageRedirectRules',
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Update Landing Page Redirect Rule
     *
     * @param  int $id Id of landing page redirect rule (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\UpdateLandingPageRedirectRuleRequest $update_landing_page_redirect_rule_request updateLandingPageRedirectRuleRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageRedirectRules
     */
    public function updateLandingPageRedirectRuleUsingPOST($id, $update_landing_page_redirect_rule_request)
    {
        list($response) = $this->updateLandingPageRedirectRuleUsingPOSTWithHttpInfo($id, $update_landing_page_redirect_rule_request);
        return $response;
    }

    /**
     * Update Landing Page Redirect Rule
     *
     * @param  int $id Id of landing page redirect rule (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\UpdateLandingPageRedirectRuleRequest $update_landing_page_redirect_rule_request updateLandingPageRedirectRuleRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageRedirectRules, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLandingPageRedirectRuleUsingPOSTWithHttpInfo($id, $update_landing_page_redirect_rule_request)
    {
        $request = $this->updateLandingPageRedirectRuleUsingPOSTRequest($id, $update_landing_page_redirect_rule_request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageRedirectRules');
        } catch (ApiException $e) {
            throw $this->updateLandingPageRedirectRuleUsingPOSTHandleException($e);
        }
    }

    /**
     * Update Landing Page Redirect Rule
     *
     * @param  int $id Id of landing page redirect rule (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\UpdateLandingPageRedirectRuleRequest $update_landing_page_redirect_rule_request updateLandingPageRedirectRuleRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLandingPageRedirectRuleUsingPOSTAsync($id, $update_landing_page_redirect_rule_request)
    {
        return $this->updateLandingPageRedirectRuleUsingPOSTAsyncWithHttpInfo($id, $update_landing_page_redirect_rule_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Update Landing Page Redirect Rule
     *
     * @param  int $id Id of landing page redirect rule (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\UpdateLandingPageRedirectRuleRequest $update_landing_page_redirect_rule_request updateLandingPageRedirectRuleRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLandingPageRedirectRuleUsingPOSTAsyncWithHttpInfo($id, $update_landing_page_redirect_rule_request)
    {
        $request = $this->updateLandingPageRedirectRuleUsingPOSTRequest($id, $update_landing_page_redirect_rule_request);
        return $this->makeAsyncRequest($request, '\NecLimDul\MarketoRest\Asset\Model\ResponseOfLandingPageRedirectRules', [$this, 'updateLandingPageRedirectRuleUsingPOSTHandleException']);
    }

    /**
     * Create request for operation 'updateLandingPageRedirectRuleUsingPOST'
     *
     * @param  int $id Id of landing page redirect rule (required)
     * @param  \NecLimDul\MarketoRest\Asset\Model\UpdateLandingPageRedirectRuleRequest $update_landing_page_redirect_rule_request updateLandingPageRedirectRuleRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateLandingPageRedirectRuleUsingPOSTRequest($id, $update_landing_page_redirect_rule_request)
    {
        // Verify the required parameter 'id' is set.
        if (!isset($id)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateLandingPageRedirectRuleUsingPOST'
            );
        }
        // Verify the required parameter 'update_landing_page_redirect_rule_request' is set.
        if (!isset($update_landing_page_redirect_rule_request)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_landing_page_redirect_rule_request when calling updateLandingPageRedirectRuleUsingPOST'
            );
        }

        $resourcePath = '/rest/asset/v1/redirectRule/{id}.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );
        if ($headers['Content-Type'] === 'application/json') {
          $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($update_landing_page_redirect_rule_request));
        } elseif (!is_array($update_landing_page_redirect_rule_request)) {
          $httpBody = (string) $update_landing_page_redirect_rule_request;
        }
        else {
          $httpBody = '';
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    /**
     * Make a request.
     *
     * @param \GuzzleHttp\Psr7\Request $request An initialized request object.
     *
     * @throws \NecLimDul\MarketoRest\Asset\ApiException on non-2xx response
     * @return \Psr\Http\Message\ResponseInterface
     */
    private function makeRequest(Request $request) {
        $options = $this->createHttpClientOption();
        try {
           $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            $response = $e->getResponse();
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                (int) $e->getCode(),
                $response ? $response->getHeaders() : null,
                $response ? (string) $response->getBody() : null
            );
        }

        $statusCode = $response->getStatusCode();
        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    (string) $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                (string) $response->getBody()
            );
        }
        return $response;
    }

    /**
     * Make an async request.
     *
     * @param \GuzzleHttp\Psr7\Request $request An initialized request object.
     * @param string $returnType The return type.
     * @param callable $exceptionHandler A callback to process HTTP errors.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @return \GuzzleHttp\Promise\PromiseInterface A promise that will return a processed response.
     */
    private function makeAsyncRequest(Request $request, string $returnType, callable $exceptionHandler)
    {
        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->responseToReturn($response, $returnType);
                },
                function (RequestException $exception) use ($exceptionHandler) {
                    $response = $exception->getResponse();
                    $e = new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                    throw $exceptionHandler($e);
                }
            );
    }

    /**
     * Convert a response to a return standard return array.
     *
     * @param \Psr\Http\Message\ResponseInterface $response A response from a request with a serialized body.
     * @param string $returnType The primary return type.
     *
     * @return array
     */
    private function responseToReturn(ResponseInterface $response, string $returnType) {
        return [
            $this->deserializeResponseBody($response->getBody(), $returnType),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    /**
     * Deserialize a response body.
     *
     * @param mixed $responseBody
     *   The response body.
     * @param string $returnType
     *   The return type.
     * @param array<string, string[]>|null $headers
     *   The a list of headers from the response.
     * @return mixed
     *   Either a string or a stream to be passed to a file object.
     */
    private function deserializeResponseBody($responseBody, string $returnType, ?array $headers = [])
    {
        return ObjectSerializer::deserialize(
            $returnType === '\SplFileObject' ? $responseBody : (string) $responseBody,
            $returnType,
            $headers
        );
    }

}
