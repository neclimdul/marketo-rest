<?php
/**
 * ExportProgramMemberFilter
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Lead
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketo Rest API
 *
 * Marketo Rest API
 *
 * OpenAPI spec version: 1.0
 * Contact: developerfeedback@marketo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.28
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace NecLimDul\MarketoRest\Lead\Model;

use \ArrayAccess;
use \NecLimDul\MarketoRest\Lead\ObjectSerializer;

/**
 * ExportProgramMemberFilter Class Doc Comment
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Lead
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 * @implements \ArrayAccess<string,?mixed>
 */
class ExportProgramMemberFilter implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ExportProgramMemberFilter';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'program_id' => 'int',
        'program_ids' => 'int[]',
        'is_exhausted' => 'bool',
        'nurture_cadence' => 'string',
        'status_names' => 'string[]',
        'updated_at' => '\NecLimDul\MarketoRest\Lead\Model\DateRange'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $swaggerFormats = [
        'program_id' => 'int32',
        'program_ids' => 'int32',
        'is_exhausted' => null,
        'nurture_cadence' => null,
        'status_names' => null,
        'updated_at' => null
    ];

    /**
      * Array of additional properties.
      *
      * @var mixed[]
      */
    protected $additionalProperties = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * {@inheritdoc}
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'program_id' => 'programId',
        'program_ids' => 'programIds',
        'is_exhausted' => 'isExhausted',
        'nurture_cadence' => 'nurtureCadence',
        'status_names' => 'statusNames',
        'updated_at' => 'updatedAt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'program_id' => 'setProgramId',
        'program_ids' => 'setProgramIds',
        'is_exhausted' => 'setIsExhausted',
        'nurture_cadence' => 'setNurtureCadence',
        'status_names' => 'setStatusNames',
        'updated_at' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'program_id' => 'getProgramId',
        'program_ids' => 'getProgramIds',
        'is_exhausted' => 'getIsExhausted',
        'nurture_cadence' => 'getNurtureCadence',
        'status_names' => 'getStatusNames',
        'updated_at' => 'getUpdatedAt'
    ];

    const NURTURE_CADENCE_PAUS = 'paus';
    const NURTURE_CADENCE_NORM = 'norm';
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['program_id'] = $data['program_id'] ?? null;
        $this->container['program_ids'] = $data['program_ids'] ?? null;
        $this->container['is_exhausted'] = $data['is_exhausted'] ?? null;
        $this->container['nurture_cadence'] = $data['nurture_cadence'] ?? null;
        $this->container['status_names'] = $data['status_names'] ?? null;
        $this->container['updated_at'] = $data['updated_at'] ?? null;
    }

    /**
     * {@inheritdoc}
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * {@inheritdoc}
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * {@inheritdoc}
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * {@inheritdoc}
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * {@inheritdoc}
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['program_id'] === null) {
            $invalidProperties[] = "'program_id' can't be null";
        }
        if ($this->container['program_ids'] === null) {
            $invalidProperties[] = "'program_ids' can't be null";
        }
        $allowedValues = $this->getNurtureCadenceAllowableValues();
        if (!is_null($this->container['nurture_cadence']) && !in_array($this->container['nurture_cadence'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'nurture_cadence', must be one of '%s'",
                $this->container['nurture_cadence'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * {@inheritdoc}
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }
    

    /**
     * Gets allowable values of the enum.
     *
     * @return scalar[]
     */
    public function getNurtureCadenceAllowableValues()
    {
        return [
            self::NURTURE_CADENCE_PAUS,
            self::NURTURE_CADENCE_NORM,
        ];
    }
    

    /**
     * Gets program_id
     *
     * @return int
     */
    public function getProgramId()
    {
        return $this->container['program_id'];
    }

    /**
     * Sets program_id
     *
     * @param int $program_id Id of program to retrieve members from. Cannot be used in combination with \"programIds\" filter
     *
     * @return self
     */
    public function setProgramId($program_id)
    {
        $this->container['program_id'] = $program_id;

        return $this;
    }

    /**
     * Gets program_ids
     *
     * @return int[]
     */
    public function getProgramIds()
    {
        return $this->container['program_ids'];
    }

    /**
     * Sets program_ids
     *
     * @param int[] $program_ids Array of program ids to retrieve members from. Cannot be used in combination with \"programId\" filter
     *
     * @return self
     */
    public function setProgramIds($program_ids)
    {
        $this->container['program_ids'] = $program_ids;

        return $this;
    }

    /**
     * Gets is_exhausted
     *
     * @return bool|null
     */
    public function getIsExhausted()
    {
        return $this->container['is_exhausted'];
    }

    /**
     * Sets is_exhausted
     *
     * @param bool $is_exhausted Filter program membership records for people who have exhausted content
     *
     * @return self
     */
    public function setIsExhausted($is_exhausted)
    {
        $this->container['is_exhausted'] = $is_exhausted;

        return $this;
    }

    /**
     * Gets nurture_cadence
     *
     * @return string|null
     */
    public function getNurtureCadence()
    {
        return $this->container['nurture_cadence'];
    }

    /**
     * Sets nurture_cadence
     *
     * @param string $nurture_cadence Filter program membership records for a given nurture cadence
     *
     * @return self
     */
    public function setNurtureCadence($nurture_cadence)
    {
        $allowedValues = $this->getNurtureCadenceAllowableValues();
        if (!is_null($nurture_cadence) && !in_array($nurture_cadence, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'nurture_cadence', must be one of '%s'",
                    $nurture_cadence,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['nurture_cadence'] = $nurture_cadence;

        return $this;
    }

    /**
     * Gets status_names
     *
     * @return string[]|null
     */
    public function getStatusNames()
    {
        return $this->container['status_names'];
    }

    /**
     * Sets status_names
     *
     * @param string[] $status_names Array of program member status names.  Can be default and/or user-defined.  Multiple status names are ORed together.
     *
     * @return self
     */
    public function setStatusNames($status_names)
    {
        $this->container['status_names'] = $status_names;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \NecLimDul\MarketoRest\Lead\Model\DateRange|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \NecLimDul\MarketoRest\Lead\Model\DateRange $updated_at Date range to filter program members on
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * {@inheritdoc}
     */
    public function setAdditionalProperties(array $fields)
    {
        $fields = array_diff_key($fields, static::$attributeMap);
        foreach ($this->additionalProperties as $additional_properties) {
            unset($this->container[$additional_properties]);
        }
        $this->container += $fields;
        $keys = array_keys($fields);
        $this->additionalProperties = array_combine($keys, $keys);
    }

    /**
     * {@inheritdoc}
     */
    public function setAdditionalProperty($property, $value)
    {
        if (isset(static::$attributeMap[$property])) {
            throw new \InvalidArgumentException();
        }
        $this->additionalProperties[$property] = $property;
        $this->container[$property] = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function getAdditionalProperties()
    {
        $container = $this->container;
        return array_map(function($key) use ($container) {
            return $container[$key];
        }, $this->additionalProperties);
    }

    /**
     * {@inheritdoc}
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * {@inheritdoc}
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * {@inheritdoc}
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * {@inheritdoc}
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


