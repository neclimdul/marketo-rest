<?php

/**
 * LeadField
 *
 * Marketo Rest API
 *
 * Marketo Rest API
 *
 * OpenAPI spec version: 1.0
 * Contact: developerfeedback@marketo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.26
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Lead
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace NecLimDul\MarketoRest\Lead\Model;

use ArrayAccess;
use NecLimDul\MarketoRest\Lead\ObjectSerializer;

/**
 * LeadField Class Doc Comment
 *
 * @category Class
 * @description Lead field record
 * @package  NecLimDul\MarketoRest\Lead
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class LeadField implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'LeadField';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array
      * @phpstan-var array<string, string|class-string>
      * @psalm-var array<string, string|class-string>
      */
    protected static $swaggerTypes = [
        'display_name' => 'string',
        'name' => 'string',
        'description' => 'string',
        'data_type' => 'string',
        'length' => 'int',
        'is_hidden' => 'bool',
        'is_html_encoding_in_email' => 'bool',
        'is_sensitive' => 'bool',
        'is_custom' => 'bool',
        'is_api_created' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $swaggerFormats = [
        'display_name' => null,
        'name' => null,
        'description' => null,
        'data_type' => null,
        'length' => 'int32',
        'is_hidden' => null,
        'is_html_encoding_in_email' => null,
        'is_sensitive' => null,
        'is_custom' => null,
        'is_api_created' => null
    ];

    /**
      * Array of additional properties.
      *
      * @var mixed[]
      */
    protected $additionalProperties = [];

    /**
     * {@inheritDoc}
     */
    public static function swaggerTypes(): array
    {
        return self::$swaggerTypes;
    }

    /**
     * {@inheritDoc}
     */
    public static function swaggerFormats(): array
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'display_name' => 'displayName',
        'name' => 'name',
        'description' => 'description',
        'data_type' => 'dataType',
        'length' => 'length',
        'is_hidden' => 'isHidden',
        'is_html_encoding_in_email' => 'isHtmlEncodingInEmail',
        'is_sensitive' => 'isSensitive',
        'is_custom' => 'isCustom',
        'is_api_created' => 'isApiCreated'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'display_name' => 'setDisplayName',
        'name' => 'setName',
        'description' => 'setDescription',
        'data_type' => 'setDataType',
        'length' => 'setLength',
        'is_hidden' => 'setIsHidden',
        'is_html_encoding_in_email' => 'setIsHtmlEncodingInEmail',
        'is_sensitive' => 'setIsSensitive',
        'is_custom' => 'setIsCustom',
        'is_api_created' => 'setIsApiCreated'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'display_name' => 'getDisplayName',
        'name' => 'getName',
        'description' => 'getDescription',
        'data_type' => 'getDataType',
        'length' => 'getLength',
        'is_hidden' => 'getIsHidden',
        'is_html_encoding_in_email' => 'getIsHtmlEncodingInEmail',
        'is_sensitive' => 'getIsSensitive',
        'is_custom' => 'getIsCustom',
        'is_api_created' => 'getIsApiCreated'
    ];

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['display_name'] = $data['display_name'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['data_type'] = $data['data_type'] ?? null;
        $this->container['length'] = $data['length'] ?? null;
        $this->container['is_hidden'] = $data['is_hidden'] ?? null;
        $this->container['is_html_encoding_in_email'] = $data['is_html_encoding_in_email'] ?? null;
        $this->container['is_sensitive'] = $data['is_sensitive'] ?? null;
        $this->container['is_custom'] = $data['is_custom'] ?? null;
        $this->container['is_api_created'] = $data['is_api_created'] ?? null;
    }

    /**
     * {@inheritdoc}
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * {@inheritdoc}
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * {@inheritdoc}
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * {@inheritdoc}
     */
    public function getModelName(): string
    {
        return self::$swaggerModelName;
    }

    /**
     * {@inheritdoc}
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['display_name'] === null) {
            $invalidProperties[] = "'display_name' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['data_type'] === null) {
            $invalidProperties[] = "'data_type' can't be null";
        }
        if ($this->container['is_hidden'] === null) {
            $invalidProperties[] = "'is_hidden' can't be null";
        }
        if ($this->container['is_html_encoding_in_email'] === null) {
            $invalidProperties[] = "'is_html_encoding_in_email' can't be null";
        }
        if ($this->container['is_sensitive'] === null) {
            $invalidProperties[] = "'is_sensitive' can't be null";
        }
        if ($this->container['is_custom'] === null) {
            $invalidProperties[] = "'is_custom' can't be null";
        }
        if ($this->container['is_api_created'] === null) {
            $invalidProperties[] = "'is_api_created' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * {@inheritdoc}
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets display_name
     *
     * @return string
     */
    public function getDisplayName(): string
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string $display_name UI display-name of the field
     *
     * @return self<TKey, TValue>
     */
    public function setDisplayName(string $display_name): LeadField
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName(): string
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name API name of the field
     *
     * @return self<TKey, TValue>
     */
    public function setName(string $name): LeadField
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription(): string
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Description of the field
     *
     * @return self<TKey, TValue>
     */
    public function setDescription(string $description): LeadField
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets data_type
     *
     * @return string
     */
    public function getDataType(): string
    {
        return $this->container['data_type'];
    }

    /**
     * Sets data_type
     *
     * @param string $data_type Datatype of the field
     *
     * @return self<TKey, TValue>
     */
    public function setDataType(string $data_type): LeadField
    {
        $this->container['data_type'] = $data_type;

        return $this;
    }

    /**
     * Gets length
     *
     * @return int
     */
    public function getLength(): int
    {
        return $this->container['length'];
    }

    /**
     * Sets length
     *
     * @param int|null $length Max length of the field.  Only applicable to text, string, and text area.
     *
     * @return self<TKey, TValue>
     */
    public function setLength(?int $length): LeadField
    {
        $this->container['length'] = $length;

        return $this;
    }

    /**
     * Gets is_hidden
     *
     * @return bool
     */
    public function getIsHidden(): bool
    {
        return $this->container['is_hidden'];
    }

    /**
     * Sets is_hidden
     *
     * @param bool $is_hidden If set to true, the field is hidden
     *
     * @return self<TKey, TValue>
     */
    public function setIsHidden(bool $is_hidden): LeadField
    {
        $this->container['is_hidden'] = $is_hidden;

        return $this;
    }

    /**
     * Gets is_html_encoding_in_email
     *
     * @return bool
     */
    public function getIsHtmlEncodingInEmail(): bool
    {
        return $this->container['is_html_encoding_in_email'];
    }

    /**
     * Sets is_html_encoding_in_email
     *
     * @param bool $is_html_encoding_in_email If set to true, field is encoded as HTML in email
     *
     * @return self<TKey, TValue>
     */
    public function setIsHtmlEncodingInEmail(bool $is_html_encoding_in_email): LeadField
    {
        $this->container['is_html_encoding_in_email'] = $is_html_encoding_in_email;

        return $this;
    }

    /**
     * Gets is_sensitive
     *
     * @return bool
     */
    public function getIsSensitive(): bool
    {
        return $this->container['is_sensitive'];
    }

    /**
     * Sets is_sensitive
     *
     * @param bool $is_sensitive If set to true, field is marked as sensitive
     *
     * @return self<TKey, TValue>
     */
    public function setIsSensitive(bool $is_sensitive): LeadField
    {
        $this->container['is_sensitive'] = $is_sensitive;

        return $this;
    }

    /**
     * Gets is_custom
     *
     * @return bool
     */
    public function getIsCustom(): bool
    {
        return $this->container['is_custom'];
    }

    /**
     * Sets is_custom
     *
     * @param bool $is_custom If set to true, field is custom
     *
     * @return self<TKey, TValue>
     */
    public function setIsCustom(bool $is_custom): LeadField
    {
        $this->container['is_custom'] = $is_custom;

        return $this;
    }

    /**
     * Gets is_api_created
     *
     * @return bool
     */
    public function getIsApiCreated(): bool
    {
        return $this->container['is_api_created'];
    }

    /**
     * Sets is_api_created
     *
     * @param bool $is_api_created If set to true, field was created using REST API
     *
     * @return self<TKey, TValue>
     */
    public function setIsApiCreated(bool $is_api_created): LeadField
    {
        $this->container['is_api_created'] = $is_api_created;

        return $this;
    }

    /**
     * {@inheritdoc}
     */
    public function setAdditionalProperties(array $fields): void
    {
        $fields = array_diff_key($fields, static::$attributeMap);
        foreach ($this->additionalProperties as $additional_properties) {
            unset($this->container[$additional_properties]);
        }
        $this->container += $fields;
        $keys = array_keys($fields);
        $this->additionalProperties = array_combine($keys, $keys);
    }

    /**
     * {@inheritdoc}
     */
    public function setAdditionalProperty($property, $value): void
    {
        if (isset(static::$attributeMap[$property])) {
            throw new \InvalidArgumentException();
        }
        $this->additionalProperties[$property] = $property;
        $this->container[$property] = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function getAdditionalProperties()
    {
        $container = $this->container;
        $map =
            /**
             * @param array-key $key
             * @return mixed
             */
            function ($key) use ($container) {
                return $container[$key];
            };
        return array_map($map, $this->additionalProperties);
    }

    /**
     * {@inheritdoc}
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * {@inheritdoc}
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * {@inheritdoc}
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * {@inheritdoc}
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     * @throws \JsonException
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT | JSON_THROW_ON_ERROR
        );
    }
}
