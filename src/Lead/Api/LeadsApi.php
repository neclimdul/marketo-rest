<?php

/**
 * LeadsApi
 *
 * Marketo Rest API
 *
 * Marketo Rest API
 *
 * OpenAPI spec version: 1.0
 * Contact: developerfeedback@marketo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.26
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Lead
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace NecLimDul\MarketoRest\Lead\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\Promise\PromiseInterface;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\ResponseInterface;
use NecLimDul\MarketoRest\Lead\ApiException;
use NecLimDul\MarketoRest\Lead\Configuration;
use NecLimDul\MarketoRest\Lead\HeaderSelector;
use NecLimDul\MarketoRest\Lead\ObjectSerializer;

/**
 * LeadsApi Class Doc Comment
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Lead
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LeadsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the spec.
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Exception handler for associateLeadUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function associateLeadUsingPOSTHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Lead\Model\ResponseWithoutResult::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Associate Lead
     *
     * @param int $lead_id
     *   The id of the lead to associate
     * @param string $cookie
     *   The cookie value to associate
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseWithoutResult
     */
    public function associateLeadUsingPOST(
        int $lead_id,
        string $cookie
    ): \NecLimDul\MarketoRest\Lead\Model\ResponseWithoutResult {
        list($response) = $this->associateLeadUsingPOSTWithHttpInfo($lead_id, $cookie);
        return $response;
    }

    /**
     * Associate Lead
     *
     * @param int $lead_id
     *   The id of the lead to associate
     * @param string $cookie
     *   The cookie value to associate
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Lead\Model\ResponseWithoutResult,
     *     int,
     *     array<array<string>>
     * }
     */
    public function associateLeadUsingPOSTWithHttpInfo(
        int $lead_id,
        string $cookie
    ): array {
        $request = $this->associateLeadUsingPOSTRequest($lead_id, $cookie);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Lead\Model\ResponseWithoutResult::class
            );
        } catch (ApiException $e) {
            throw $this->associateLeadUsingPOSTHandleException($e);
        }
    }

    /**
     * Associate Lead
     *
     * @param int $lead_id
     *   The id of the lead to associate
     * @param string $cookie
     *   The cookie value to associate
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function associateLeadUsingPOSTAsync(
        int $lead_id,
        string $cookie
    ): PromiseInterface {
        return $this->associateLeadUsingPOSTAsyncWithHttpInfo($lead_id, $cookie)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Lead\Model\ResponseWithoutResult {
                    return $response[0];
                }
            );
    }

    /**
     * Associate Lead
     *
     * @param int $lead_id
     *   The id of the lead to associate
     * @param string $cookie
     *   The cookie value to associate
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function associateLeadUsingPOSTAsyncWithHttpInfo(
        int $lead_id,
        string $cookie
    ): PromiseInterface {
        $request = $this->associateLeadUsingPOSTRequest($lead_id, $cookie);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Lead\Model\ResponseWithoutResult::class,
            [$this, 'associateLeadUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'associateLeadUsingPOST'
     *
     * @param int $lead_id
     *   The id of the lead to associate
     * @param string $cookie
     *   The cookie value to associate
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function associateLeadUsingPOSTRequest(
        int $lead_id,
        string $cookie
    ): Request {

        $resourcePath = '/rest/v1/leads/{leadId}/associate.json';
        $resourcePath = str_replace(
            '{' . 'leadId' . '}',
            ObjectSerializer::toPathValue($lead_id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
                'cookie' => ObjectSerializer::toQueryValue($cookie),
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for changeLeadProgramStatusUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function changeLeadProgramStatusUsingPOSTHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Lead\Model\ResponseOfChangeLeadProgramStatusOutputData::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Change Lead Program Status
     *
     * @param int $program_id
     *   The id of target program
     * @param \NecLimDul\MarketoRest\Lead\Model\ChangeLeadProgramStatusRequest $change_lead_program_status_request
     *   changeLeadProgramStatusRequest
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfChangeLeadProgramStatusOutputData
     */
    public function changeLeadProgramStatusUsingPOST(
        int $program_id,
        \NecLimDul\MarketoRest\Lead\Model\ChangeLeadProgramStatusRequest $change_lead_program_status_request
    ): \NecLimDul\MarketoRest\Lead\Model\ResponseOfChangeLeadProgramStatusOutputData {
        list($response) = $this->changeLeadProgramStatusUsingPOSTWithHttpInfo($program_id, $change_lead_program_status_request);
        return $response;
    }

    /**
     * Change Lead Program Status
     *
     * @param int $program_id
     *   The id of target program
     * @param \NecLimDul\MarketoRest\Lead\Model\ChangeLeadProgramStatusRequest $change_lead_program_status_request
     *   changeLeadProgramStatusRequest
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Lead\Model\ResponseOfChangeLeadProgramStatusOutputData,
     *     int,
     *     array<array<string>>
     * }
     */
    public function changeLeadProgramStatusUsingPOSTWithHttpInfo(
        int $program_id,
        \NecLimDul\MarketoRest\Lead\Model\ChangeLeadProgramStatusRequest $change_lead_program_status_request
    ): array {
        $request = $this->changeLeadProgramStatusUsingPOSTRequest($program_id, $change_lead_program_status_request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Lead\Model\ResponseOfChangeLeadProgramStatusOutputData::class
            );
        } catch (ApiException $e) {
            throw $this->changeLeadProgramStatusUsingPOSTHandleException($e);
        }
    }

    /**
     * Change Lead Program Status
     *
     * @param int $program_id
     *   The id of target program
     * @param \NecLimDul\MarketoRest\Lead\Model\ChangeLeadProgramStatusRequest $change_lead_program_status_request
     *   changeLeadProgramStatusRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function changeLeadProgramStatusUsingPOSTAsync(
        int $program_id,
        \NecLimDul\MarketoRest\Lead\Model\ChangeLeadProgramStatusRequest $change_lead_program_status_request
    ): PromiseInterface {
        return $this->changeLeadProgramStatusUsingPOSTAsyncWithHttpInfo($program_id, $change_lead_program_status_request)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Lead\Model\ResponseOfChangeLeadProgramStatusOutputData {
                    return $response[0];
                }
            );
    }

    /**
     * Change Lead Program Status
     *
     * @param int $program_id
     *   The id of target program
     * @param \NecLimDul\MarketoRest\Lead\Model\ChangeLeadProgramStatusRequest $change_lead_program_status_request
     *   changeLeadProgramStatusRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function changeLeadProgramStatusUsingPOSTAsyncWithHttpInfo(
        int $program_id,
        \NecLimDul\MarketoRest\Lead\Model\ChangeLeadProgramStatusRequest $change_lead_program_status_request
    ): PromiseInterface {
        $request = $this->changeLeadProgramStatusUsingPOSTRequest($program_id, $change_lead_program_status_request);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Lead\Model\ResponseOfChangeLeadProgramStatusOutputData::class,
            [$this, 'changeLeadProgramStatusUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'changeLeadProgramStatusUsingPOST'
     *
     * @param int $program_id
     *   The id of target program
     * @param \NecLimDul\MarketoRest\Lead\Model\ChangeLeadProgramStatusRequest $change_lead_program_status_request
     *   changeLeadProgramStatusRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function changeLeadProgramStatusUsingPOSTRequest(
        int $program_id,
        \NecLimDul\MarketoRest\Lead\Model\ChangeLeadProgramStatusRequest $change_lead_program_status_request
    ): Request {

        $resourcePath = '/rest/v1/leads/programs/{programId}/status.json';
        $resourcePath = str_replace(
            '{' . 'programId' . '}',
            ObjectSerializer::toPathValue($program_id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            $change_lead_program_status_request
        );
    }

    /**
     * Exception handler for createLeadFieldUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function createLeadFieldUsingPOSTHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Lead\Model\ResponseOfCreateLeadField::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Create Lead Fields
     *
     * @param \NecLimDul\MarketoRest\Lead\Model\CreateLeadFieldRequest $create_lead_field_request
     *   createLeadFieldRequest
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfCreateLeadField
     */
    public function createLeadFieldUsingPOST(
        \NecLimDul\MarketoRest\Lead\Model\CreateLeadFieldRequest $create_lead_field_request
    ): \NecLimDul\MarketoRest\Lead\Model\ResponseOfCreateLeadField {
        list($response) = $this->createLeadFieldUsingPOSTWithHttpInfo($create_lead_field_request);
        return $response;
    }

    /**
     * Create Lead Fields
     *
     * @param \NecLimDul\MarketoRest\Lead\Model\CreateLeadFieldRequest $create_lead_field_request
     *   createLeadFieldRequest
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Lead\Model\ResponseOfCreateLeadField,
     *     int,
     *     array<array<string>>
     * }
     */
    public function createLeadFieldUsingPOSTWithHttpInfo(
        \NecLimDul\MarketoRest\Lead\Model\CreateLeadFieldRequest $create_lead_field_request
    ): array {
        $request = $this->createLeadFieldUsingPOSTRequest($create_lead_field_request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Lead\Model\ResponseOfCreateLeadField::class
            );
        } catch (ApiException $e) {
            throw $this->createLeadFieldUsingPOSTHandleException($e);
        }
    }

    /**
     * Create Lead Fields
     *
     * @param \NecLimDul\MarketoRest\Lead\Model\CreateLeadFieldRequest $create_lead_field_request
     *   createLeadFieldRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createLeadFieldUsingPOSTAsync(
        \NecLimDul\MarketoRest\Lead\Model\CreateLeadFieldRequest $create_lead_field_request
    ): PromiseInterface {
        return $this->createLeadFieldUsingPOSTAsyncWithHttpInfo($create_lead_field_request)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Lead\Model\ResponseOfCreateLeadField {
                    return $response[0];
                }
            );
    }

    /**
     * Create Lead Fields
     *
     * @param \NecLimDul\MarketoRest\Lead\Model\CreateLeadFieldRequest $create_lead_field_request
     *   createLeadFieldRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createLeadFieldUsingPOSTAsyncWithHttpInfo(
        \NecLimDul\MarketoRest\Lead\Model\CreateLeadFieldRequest $create_lead_field_request
    ): PromiseInterface {
        $request = $this->createLeadFieldUsingPOSTRequest($create_lead_field_request);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Lead\Model\ResponseOfCreateLeadField::class,
            [$this, 'createLeadFieldUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'createLeadFieldUsingPOST'
     *
     * @param \NecLimDul\MarketoRest\Lead\Model\CreateLeadFieldRequest $create_lead_field_request
     *   createLeadFieldRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createLeadFieldUsingPOSTRequest(
        \NecLimDul\MarketoRest\Lead\Model\CreateLeadFieldRequest $create_lead_field_request
    ): Request {

        $resourcePath = '/rest/v1/leads/schema/fields.json';

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            $create_lead_field_request
        );
    }

    /**
     * Exception handler for deleteLeadsUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function deleteLeadsUsingPOSTHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Lead\Model\ResponseOfLead::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Delete Leads
     *
     * @param \NecLimDul\MarketoRest\Lead\Model\DeleteLeadRequest|null $delete_lead_request
     *   deleteLeadRequest
     * @param int[]|null $id
     *   Parameter can be specified if the request body is empty. Multiple lead ids can be specified. e.g. id&#x3D;1,2,3,2342
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfLead
     */
    public function deleteLeadsUsingPOST(
        \NecLimDul\MarketoRest\Lead\Model\DeleteLeadRequest $delete_lead_request = null,
        array $id = null
    ): \NecLimDul\MarketoRest\Lead\Model\ResponseOfLead {
        list($response) = $this->deleteLeadsUsingPOSTWithHttpInfo($delete_lead_request, $id);
        return $response;
    }

    /**
     * Delete Leads
     *
     * @param \NecLimDul\MarketoRest\Lead\Model\DeleteLeadRequest|null $delete_lead_request
     *   deleteLeadRequest
     * @param int[]|null $id
     *   Parameter can be specified if the request body is empty. Multiple lead ids can be specified. e.g. id&#x3D;1,2,3,2342
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Lead\Model\ResponseOfLead,
     *     int,
     *     array<array<string>>
     * }
     */
    public function deleteLeadsUsingPOSTWithHttpInfo(
        \NecLimDul\MarketoRest\Lead\Model\DeleteLeadRequest $delete_lead_request = null,
        array $id = null
    ): array {
        $request = $this->deleteLeadsUsingPOSTRequest($delete_lead_request, $id);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Lead\Model\ResponseOfLead::class
            );
        } catch (ApiException $e) {
            throw $this->deleteLeadsUsingPOSTHandleException($e);
        }
    }

    /**
     * Delete Leads
     *
     * @param \NecLimDul\MarketoRest\Lead\Model\DeleteLeadRequest|null $delete_lead_request
     *   deleteLeadRequest
     * @param int[]|null $id
     *   Parameter can be specified if the request body is empty. Multiple lead ids can be specified. e.g. id&#x3D;1,2,3,2342
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLeadsUsingPOSTAsync(
        \NecLimDul\MarketoRest\Lead\Model\DeleteLeadRequest $delete_lead_request = null,
        array $id = null
    ): PromiseInterface {
        return $this->deleteLeadsUsingPOSTAsyncWithHttpInfo($delete_lead_request, $id)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Lead\Model\ResponseOfLead {
                    return $response[0];
                }
            );
    }

    /**
     * Delete Leads
     *
     * @param \NecLimDul\MarketoRest\Lead\Model\DeleteLeadRequest|null $delete_lead_request
     *   deleteLeadRequest
     * @param int[]|null $id
     *   Parameter can be specified if the request body is empty. Multiple lead ids can be specified. e.g. id&#x3D;1,2,3,2342
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLeadsUsingPOSTAsyncWithHttpInfo(
        \NecLimDul\MarketoRest\Lead\Model\DeleteLeadRequest $delete_lead_request = null,
        array $id = null
    ): PromiseInterface {
        $request = $this->deleteLeadsUsingPOSTRequest($delete_lead_request, $id);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Lead\Model\ResponseOfLead::class,
            [$this, 'deleteLeadsUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'deleteLeadsUsingPOST'
     *
     * @param \NecLimDul\MarketoRest\Lead\Model\DeleteLeadRequest|null $delete_lead_request
     *   deleteLeadRequest
     * @param int[]|null $id
     *   Parameter can be specified if the request body is empty. Multiple lead ids can be specified. e.g. id&#x3D;1,2,3,2342
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteLeadsUsingPOSTRequest(
        \NecLimDul\MarketoRest\Lead\Model\DeleteLeadRequest $delete_lead_request = null,
        array $id = null
    ): Request {

        $resourcePath = '/rest/v1/leads/delete.json';

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
                'id' => ObjectSerializer::toQueryValue($id),
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            $delete_lead_request
        );
    }

    /**
     * Exception handler for describeProgramMemberUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function describeProgramMemberUsingGETHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Lead\Model\ResponseOfProgramMemberAttributes::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Describe Program Member
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfProgramMemberAttributes
     */
    public function describeProgramMemberUsingGET(): \NecLimDul\MarketoRest\Lead\Model\ResponseOfProgramMemberAttributes
    {
        list($response) = $this->describeProgramMemberUsingGETWithHttpInfo();
        return $response;
    }

    /**
     * Describe Program Member
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Lead\Model\ResponseOfProgramMemberAttributes,
     *     int,
     *     array<array<string>>
     * }
     */
    public function describeProgramMemberUsingGETWithHttpInfo(): array
    {
        $request = $this->describeProgramMemberUsingGETRequest();
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Lead\Model\ResponseOfProgramMemberAttributes::class
            );
        } catch (ApiException $e) {
            throw $this->describeProgramMemberUsingGETHandleException($e);
        }
    }

    /**
     * Describe Program Member
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function describeProgramMemberUsingGETAsync(): PromiseInterface
    {
        return $this->describeProgramMemberUsingGETAsyncWithHttpInfo()
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Lead\Model\ResponseOfProgramMemberAttributes {
                    return $response[0];
                }
            );
    }

    /**
     * Describe Program Member
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function describeProgramMemberUsingGETAsyncWithHttpInfo(): PromiseInterface
    {
        $request = $this->describeProgramMemberUsingGETRequest();
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Lead\Model\ResponseOfProgramMemberAttributes::class,
            [$this, 'describeProgramMemberUsingGETHandleException']
        );
    }

    /**
     * Create request for operation 'describeProgramMemberUsingGET'
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function describeProgramMemberUsingGETRequest(): Request
    {

        $resourcePath = '/rest/v1/program/members/describe.json';

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'GET',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for describeUsingGET2.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function describeUsingGET2HandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadAttribute::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Describe Lead
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadAttribute
     */
    public function describeUsingGET2(): \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadAttribute
    {
        list($response) = $this->describeUsingGET2WithHttpInfo();
        return $response;
    }

    /**
     * Describe Lead
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadAttribute,
     *     int,
     *     array<array<string>>
     * }
     */
    public function describeUsingGET2WithHttpInfo(): array
    {
        $request = $this->describeUsingGET2Request();
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadAttribute::class
            );
        } catch (ApiException $e) {
            throw $this->describeUsingGET2HandleException($e);
        }
    }

    /**
     * Describe Lead
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function describeUsingGET2Async(): PromiseInterface
    {
        return $this->describeUsingGET2AsyncWithHttpInfo()
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadAttribute {
                    return $response[0];
                }
            );
    }

    /**
     * Describe Lead
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function describeUsingGET2AsyncWithHttpInfo(): PromiseInterface
    {
        $request = $this->describeUsingGET2Request();
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadAttribute::class,
            [$this, 'describeUsingGET2HandleException']
        );
    }

    /**
     * Create request for operation 'describeUsingGET2'
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function describeUsingGET2Request(): Request
    {

        $resourcePath = '/rest/v1/leads/describe.json';

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'GET',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for describeUsingGET6.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function describeUsingGET6HandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadAttribute2::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Describe Lead2
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadAttribute2
     */
    public function describeUsingGET6(): \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadAttribute2
    {
        list($response) = $this->describeUsingGET6WithHttpInfo();
        return $response;
    }

    /**
     * Describe Lead2
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadAttribute2,
     *     int,
     *     array<array<string>>
     * }
     */
    public function describeUsingGET6WithHttpInfo(): array
    {
        $request = $this->describeUsingGET6Request();
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadAttribute2::class
            );
        } catch (ApiException $e) {
            throw $this->describeUsingGET6HandleException($e);
        }
    }

    /**
     * Describe Lead2
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function describeUsingGET6Async(): PromiseInterface
    {
        return $this->describeUsingGET6AsyncWithHttpInfo()
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadAttribute2 {
                    return $response[0];
                }
            );
    }

    /**
     * Describe Lead2
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function describeUsingGET6AsyncWithHttpInfo(): PromiseInterface
    {
        $request = $this->describeUsingGET6Request();
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadAttribute2::class,
            [$this, 'describeUsingGET6HandleException']
        );
    }

    /**
     * Create request for operation 'describeUsingGET6'
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function describeUsingGET6Request(): Request
    {

        $resourcePath = '/rest/v1/leads/describe2.json';

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'GET',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for getLeadByIdUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function getLeadByIdUsingGETHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Lead\Model\ResponseOfLead::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Lead by Id
     *
     * @param int $lead_id
     *   The Marketo lead id
     * @param string[]|null $fields
     *   Comma separated list of field names. If omitted, the following default fields will be returned: email, updatedAt, createdAt, lastName, firstName, and id.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfLead
     */
    public function getLeadByIdUsingGET(
        int $lead_id,
        array $fields = null
    ): \NecLimDul\MarketoRest\Lead\Model\ResponseOfLead {
        list($response) = $this->getLeadByIdUsingGETWithHttpInfo($lead_id, $fields);
        return $response;
    }

    /**
     * Get Lead by Id
     *
     * @param int $lead_id
     *   The Marketo lead id
     * @param string[]|null $fields
     *   Comma separated list of field names. If omitted, the following default fields will be returned: email, updatedAt, createdAt, lastName, firstName, and id.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Lead\Model\ResponseOfLead,
     *     int,
     *     array<array<string>>
     * }
     */
    public function getLeadByIdUsingGETWithHttpInfo(
        int $lead_id,
        array $fields = null
    ): array {
        $request = $this->getLeadByIdUsingGETRequest($lead_id, $fields);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Lead\Model\ResponseOfLead::class
            );
        } catch (ApiException $e) {
            throw $this->getLeadByIdUsingGETHandleException($e);
        }
    }

    /**
     * Get Lead by Id
     *
     * @param int $lead_id
     *   The Marketo lead id
     * @param string[]|null $fields
     *   Comma separated list of field names. If omitted, the following default fields will be returned: email, updatedAt, createdAt, lastName, firstName, and id.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLeadByIdUsingGETAsync(
        int $lead_id,
        array $fields = null
    ): PromiseInterface {
        return $this->getLeadByIdUsingGETAsyncWithHttpInfo($lead_id, $fields)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Lead\Model\ResponseOfLead {
                    return $response[0];
                }
            );
    }

    /**
     * Get Lead by Id
     *
     * @param int $lead_id
     *   The Marketo lead id
     * @param string[]|null $fields
     *   Comma separated list of field names. If omitted, the following default fields will be returned: email, updatedAt, createdAt, lastName, firstName, and id.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLeadByIdUsingGETAsyncWithHttpInfo(
        int $lead_id,
        array $fields = null
    ): PromiseInterface {
        $request = $this->getLeadByIdUsingGETRequest($lead_id, $fields);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Lead\Model\ResponseOfLead::class,
            [$this, 'getLeadByIdUsingGETHandleException']
        );
    }

    /**
     * Create request for operation 'getLeadByIdUsingGET'
     *
     * @param int $lead_id
     *   The Marketo lead id
     * @param string[]|null $fields
     *   Comma separated list of field names. If omitted, the following default fields will be returned: email, updatedAt, createdAt, lastName, firstName, and id.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLeadByIdUsingGETRequest(
        int $lead_id,
        array $fields = null
    ): Request {

        $resourcePath = '/rest/v1/lead/{leadId}.json';
        $resourcePath = str_replace(
            '{' . 'leadId' . '}',
            ObjectSerializer::toPathValue($lead_id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'GET',
            $operationHost . $resourcePath,
            // Query.
            [
                'fields' => ObjectSerializer::toQueryValue($fields),
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for getLeadFieldByNameUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function getLeadFieldByNameUsingGETHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadField::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Lead Field by Name
     *
     * @param string $field_api_name
     *   The API name of lead field
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadField
     */
    public function getLeadFieldByNameUsingGET(
        string $field_api_name
    ): \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadField {
        list($response) = $this->getLeadFieldByNameUsingGETWithHttpInfo($field_api_name);
        return $response;
    }

    /**
     * Get Lead Field by Name
     *
     * @param string $field_api_name
     *   The API name of lead field
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadField,
     *     int,
     *     array<array<string>>
     * }
     */
    public function getLeadFieldByNameUsingGETWithHttpInfo(
        string $field_api_name
    ): array {
        $request = $this->getLeadFieldByNameUsingGETRequest($field_api_name);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadField::class
            );
        } catch (ApiException $e) {
            throw $this->getLeadFieldByNameUsingGETHandleException($e);
        }
    }

    /**
     * Get Lead Field by Name
     *
     * @param string $field_api_name
     *   The API name of lead field
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLeadFieldByNameUsingGETAsync(
        string $field_api_name
    ): PromiseInterface {
        return $this->getLeadFieldByNameUsingGETAsyncWithHttpInfo($field_api_name)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadField {
                    return $response[0];
                }
            );
    }

    /**
     * Get Lead Field by Name
     *
     * @param string $field_api_name
     *   The API name of lead field
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLeadFieldByNameUsingGETAsyncWithHttpInfo(
        string $field_api_name
    ): PromiseInterface {
        $request = $this->getLeadFieldByNameUsingGETRequest($field_api_name);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadField::class,
            [$this, 'getLeadFieldByNameUsingGETHandleException']
        );
    }

    /**
     * Create request for operation 'getLeadFieldByNameUsingGET'
     *
     * @param string $field_api_name
     *   The API name of lead field
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLeadFieldByNameUsingGETRequest(
        string $field_api_name
    ): Request {

        $resourcePath = '/rest/v1/leads/schema/fields/{fieldApiName}.json';
        $resourcePath = str_replace(
            '{' . 'fieldApiName' . '}',
            ObjectSerializer::toPathValue($field_api_name),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'GET',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for getLeadFieldsUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function getLeadFieldsUsingGETHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadField::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Lead Fields
     *
     * @param int|null $batch_size
     *   The batch size to return. The max and default value is 300.
     * @param string|null $next_page_token
     *   A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter. See Paging Tokens for more info.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadField
     */
    public function getLeadFieldsUsingGET(
        int $batch_size = null,
        string $next_page_token = null
    ): \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadField {
        list($response) = $this->getLeadFieldsUsingGETWithHttpInfo($batch_size, $next_page_token);
        return $response;
    }

    /**
     * Get Lead Fields
     *
     * @param int|null $batch_size
     *   The batch size to return. The max and default value is 300.
     * @param string|null $next_page_token
     *   A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter. See Paging Tokens for more info.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadField,
     *     int,
     *     array<array<string>>
     * }
     */
    public function getLeadFieldsUsingGETWithHttpInfo(
        int $batch_size = null,
        string $next_page_token = null
    ): array {
        $request = $this->getLeadFieldsUsingGETRequest($batch_size, $next_page_token);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadField::class
            );
        } catch (ApiException $e) {
            throw $this->getLeadFieldsUsingGETHandleException($e);
        }
    }

    /**
     * Get Lead Fields
     *
     * @param int|null $batch_size
     *   The batch size to return. The max and default value is 300.
     * @param string|null $next_page_token
     *   A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter. See Paging Tokens for more info.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLeadFieldsUsingGETAsync(
        int $batch_size = null,
        string $next_page_token = null
    ): PromiseInterface {
        return $this->getLeadFieldsUsingGETAsyncWithHttpInfo($batch_size, $next_page_token)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadField {
                    return $response[0];
                }
            );
    }

    /**
     * Get Lead Fields
     *
     * @param int|null $batch_size
     *   The batch size to return. The max and default value is 300.
     * @param string|null $next_page_token
     *   A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter. See Paging Tokens for more info.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLeadFieldsUsingGETAsyncWithHttpInfo(
        int $batch_size = null,
        string $next_page_token = null
    ): PromiseInterface {
        $request = $this->getLeadFieldsUsingGETRequest($batch_size, $next_page_token);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadField::class,
            [$this, 'getLeadFieldsUsingGETHandleException']
        );
    }

    /**
     * Create request for operation 'getLeadFieldsUsingGET'
     *
     * @param int|null $batch_size
     *   The batch size to return. The max and default value is 300.
     * @param string|null $next_page_token
     *   A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter. See Paging Tokens for more info.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLeadFieldsUsingGETRequest(
        int $batch_size = null,
        string $next_page_token = null
    ): Request {

        $resourcePath = '/rest/v1/leads/schema/fields.json';

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'GET',
            $operationHost . $resourcePath,
            // Query.
            [
                'batchSize' => ObjectSerializer::toQueryValue($batch_size),
                'nextPageToken' => ObjectSerializer::toQueryValue($next_page_token),
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for getLeadPartitionsUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function getLeadPartitionsUsingGETHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadPartition::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Lead Partitions
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadPartition
     */
    public function getLeadPartitionsUsingGET(): \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadPartition
    {
        list($response) = $this->getLeadPartitionsUsingGETWithHttpInfo();
        return $response;
    }

    /**
     * Get Lead Partitions
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadPartition,
     *     int,
     *     array<array<string>>
     * }
     */
    public function getLeadPartitionsUsingGETWithHttpInfo(): array
    {
        $request = $this->getLeadPartitionsUsingGETRequest();
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadPartition::class
            );
        } catch (ApiException $e) {
            throw $this->getLeadPartitionsUsingGETHandleException($e);
        }
    }

    /**
     * Get Lead Partitions
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLeadPartitionsUsingGETAsync(): PromiseInterface
    {
        return $this->getLeadPartitionsUsingGETAsyncWithHttpInfo()
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadPartition {
                    return $response[0];
                }
            );
    }

    /**
     * Get Lead Partitions
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLeadPartitionsUsingGETAsyncWithHttpInfo(): PromiseInterface
    {
        $request = $this->getLeadPartitionsUsingGETRequest();
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadPartition::class,
            [$this, 'getLeadPartitionsUsingGETHandleException']
        );
    }

    /**
     * Create request for operation 'getLeadPartitionsUsingGET'
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLeadPartitionsUsingGETRequest(): Request
    {

        $resourcePath = '/rest/v1/leads/partitions.json';

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'GET',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for getLeadsByFilterUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function getLeadsByFilterUsingGETHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Lead\Model\ResponseOfLead::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Leads by Filter Type
     *
     * @param string $filter_type
     *   The lead field to filter on.  Any custom field (string, email, or integer types only), and any of the following fields are supported: cookies, email, facebookId, id, leadPartitionId, linkedInId, sfdcAccountId, sfdcContactId, sfdcLeadId, sfdcLeadOwnerId, sfdcOpptyId, twitterId.&lt;br&gt;&lt;br&gt;A comprehensive list of fields can be obtained via the &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/endpoint-reference/lead-database-endpoint-reference/#/Leads/describeUsingGET_6\&quot;&gt;Describe Lead2&lt;/a&gt; endpoint.
     * @param string[] $filter_values
     *   A comma-separated list of values to filter on in the specified fields.
     * @param string[]|null $fields
     *   A comma-separated list of lead fields to return for each record
     * @param int|null $batch_size
     *   The batch size to return.  The max and default value is 300.
     * @param string|null $next_page_token
     *   A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfLead
     */
    public function getLeadsByFilterUsingGET(
        string $filter_type,
        array $filter_values,
        array $fields = null,
        int $batch_size = null,
        string $next_page_token = null
    ): \NecLimDul\MarketoRest\Lead\Model\ResponseOfLead {
        list($response) = $this->getLeadsByFilterUsingGETWithHttpInfo($filter_type, $filter_values, $fields, $batch_size, $next_page_token);
        return $response;
    }

    /**
     * Get Leads by Filter Type
     *
     * @param string $filter_type
     *   The lead field to filter on.  Any custom field (string, email, or integer types only), and any of the following fields are supported: cookies, email, facebookId, id, leadPartitionId, linkedInId, sfdcAccountId, sfdcContactId, sfdcLeadId, sfdcLeadOwnerId, sfdcOpptyId, twitterId.&lt;br&gt;&lt;br&gt;A comprehensive list of fields can be obtained via the &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/endpoint-reference/lead-database-endpoint-reference/#/Leads/describeUsingGET_6\&quot;&gt;Describe Lead2&lt;/a&gt; endpoint.
     * @param string[] $filter_values
     *   A comma-separated list of values to filter on in the specified fields.
     * @param string[]|null $fields
     *   A comma-separated list of lead fields to return for each record
     * @param int|null $batch_size
     *   The batch size to return.  The max and default value is 300.
     * @param string|null $next_page_token
     *   A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Lead\Model\ResponseOfLead,
     *     int,
     *     array<array<string>>
     * }
     */
    public function getLeadsByFilterUsingGETWithHttpInfo(
        string $filter_type,
        array $filter_values,
        array $fields = null,
        int $batch_size = null,
        string $next_page_token = null
    ): array {
        $request = $this->getLeadsByFilterUsingGETRequest($filter_type, $filter_values, $fields, $batch_size, $next_page_token);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Lead\Model\ResponseOfLead::class
            );
        } catch (ApiException $e) {
            throw $this->getLeadsByFilterUsingGETHandleException($e);
        }
    }

    /**
     * Get Leads by Filter Type
     *
     * @param string $filter_type
     *   The lead field to filter on.  Any custom field (string, email, or integer types only), and any of the following fields are supported: cookies, email, facebookId, id, leadPartitionId, linkedInId, sfdcAccountId, sfdcContactId, sfdcLeadId, sfdcLeadOwnerId, sfdcOpptyId, twitterId.&lt;br&gt;&lt;br&gt;A comprehensive list of fields can be obtained via the &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/endpoint-reference/lead-database-endpoint-reference/#/Leads/describeUsingGET_6\&quot;&gt;Describe Lead2&lt;/a&gt; endpoint.
     * @param string[] $filter_values
     *   A comma-separated list of values to filter on in the specified fields.
     * @param string[]|null $fields
     *   A comma-separated list of lead fields to return for each record
     * @param int|null $batch_size
     *   The batch size to return.  The max and default value is 300.
     * @param string|null $next_page_token
     *   A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLeadsByFilterUsingGETAsync(
        string $filter_type,
        array $filter_values,
        array $fields = null,
        int $batch_size = null,
        string $next_page_token = null
    ): PromiseInterface {
        return $this->getLeadsByFilterUsingGETAsyncWithHttpInfo($filter_type, $filter_values, $fields, $batch_size, $next_page_token)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Lead\Model\ResponseOfLead {
                    return $response[0];
                }
            );
    }

    /**
     * Get Leads by Filter Type
     *
     * @param string $filter_type
     *   The lead field to filter on.  Any custom field (string, email, or integer types only), and any of the following fields are supported: cookies, email, facebookId, id, leadPartitionId, linkedInId, sfdcAccountId, sfdcContactId, sfdcLeadId, sfdcLeadOwnerId, sfdcOpptyId, twitterId.&lt;br&gt;&lt;br&gt;A comprehensive list of fields can be obtained via the &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/endpoint-reference/lead-database-endpoint-reference/#/Leads/describeUsingGET_6\&quot;&gt;Describe Lead2&lt;/a&gt; endpoint.
     * @param string[] $filter_values
     *   A comma-separated list of values to filter on in the specified fields.
     * @param string[]|null $fields
     *   A comma-separated list of lead fields to return for each record
     * @param int|null $batch_size
     *   The batch size to return.  The max and default value is 300.
     * @param string|null $next_page_token
     *   A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLeadsByFilterUsingGETAsyncWithHttpInfo(
        string $filter_type,
        array $filter_values,
        array $fields = null,
        int $batch_size = null,
        string $next_page_token = null
    ): PromiseInterface {
        $request = $this->getLeadsByFilterUsingGETRequest($filter_type, $filter_values, $fields, $batch_size, $next_page_token);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Lead\Model\ResponseOfLead::class,
            [$this, 'getLeadsByFilterUsingGETHandleException']
        );
    }

    /**
     * Create request for operation 'getLeadsByFilterUsingGET'
     *
     * @param string $filter_type
     *   The lead field to filter on.  Any custom field (string, email, or integer types only), and any of the following fields are supported: cookies, email, facebookId, id, leadPartitionId, linkedInId, sfdcAccountId, sfdcContactId, sfdcLeadId, sfdcLeadOwnerId, sfdcOpptyId, twitterId.&lt;br&gt;&lt;br&gt;A comprehensive list of fields can be obtained via the &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/endpoint-reference/lead-database-endpoint-reference/#/Leads/describeUsingGET_6\&quot;&gt;Describe Lead2&lt;/a&gt; endpoint.
     * @param string[] $filter_values
     *   A comma-separated list of values to filter on in the specified fields.
     * @param string[]|null $fields
     *   A comma-separated list of lead fields to return for each record
     * @param int|null $batch_size
     *   The batch size to return.  The max and default value is 300.
     * @param string|null $next_page_token
     *   A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLeadsByFilterUsingGETRequest(
        string $filter_type,
        array $filter_values,
        array $fields = null,
        int $batch_size = null,
        string $next_page_token = null
    ): Request {
        // Verify the required parameter 'filter_values' is set.
        if (empty($filter_values)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $filter_values when calling getLeadsByFilterUsingGET'
            );
        }

        $resourcePath = '/rest/v1/leads.json';

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'GET',
            $operationHost . $resourcePath,
            // Query.
            [
                'filterType' => ObjectSerializer::toQueryValue($filter_type),
                'filterValues' => ObjectSerializer::toQueryValue($filter_values),
                'fields' => ObjectSerializer::toQueryValue($fields),
                'batchSize' => ObjectSerializer::toQueryValue($batch_size),
                'nextPageToken' => ObjectSerializer::toQueryValue($next_page_token),
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for getLeadsByProgramIdUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function getLeadsByProgramIdUsingGETHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Lead\Model\ResponseOfLead::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Leads by Program Id
     *
     * @param int $program_id
     *   The id of the program to retrieve from
     * @param string[]|null $fields
     *   A comma-separated list of fields to be returned for each record
     * @param int|null $batch_size
     *   The batch size to return.  The max and default value is 300.
     * @param string|null $next_page_token
     *   A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfLead
     */
    public function getLeadsByProgramIdUsingGET(
        int $program_id,
        array $fields = null,
        int $batch_size = null,
        string $next_page_token = null
    ): \NecLimDul\MarketoRest\Lead\Model\ResponseOfLead {
        list($response) = $this->getLeadsByProgramIdUsingGETWithHttpInfo($program_id, $fields, $batch_size, $next_page_token);
        return $response;
    }

    /**
     * Get Leads by Program Id
     *
     * @param int $program_id
     *   The id of the program to retrieve from
     * @param string[]|null $fields
     *   A comma-separated list of fields to be returned for each record
     * @param int|null $batch_size
     *   The batch size to return.  The max and default value is 300.
     * @param string|null $next_page_token
     *   A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Lead\Model\ResponseOfLead,
     *     int,
     *     array<array<string>>
     * }
     */
    public function getLeadsByProgramIdUsingGETWithHttpInfo(
        int $program_id,
        array $fields = null,
        int $batch_size = null,
        string $next_page_token = null
    ): array {
        $request = $this->getLeadsByProgramIdUsingGETRequest($program_id, $fields, $batch_size, $next_page_token);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Lead\Model\ResponseOfLead::class
            );
        } catch (ApiException $e) {
            throw $this->getLeadsByProgramIdUsingGETHandleException($e);
        }
    }

    /**
     * Get Leads by Program Id
     *
     * @param int $program_id
     *   The id of the program to retrieve from
     * @param string[]|null $fields
     *   A comma-separated list of fields to be returned for each record
     * @param int|null $batch_size
     *   The batch size to return.  The max and default value is 300.
     * @param string|null $next_page_token
     *   A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLeadsByProgramIdUsingGETAsync(
        int $program_id,
        array $fields = null,
        int $batch_size = null,
        string $next_page_token = null
    ): PromiseInterface {
        return $this->getLeadsByProgramIdUsingGETAsyncWithHttpInfo($program_id, $fields, $batch_size, $next_page_token)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Lead\Model\ResponseOfLead {
                    return $response[0];
                }
            );
    }

    /**
     * Get Leads by Program Id
     *
     * @param int $program_id
     *   The id of the program to retrieve from
     * @param string[]|null $fields
     *   A comma-separated list of fields to be returned for each record
     * @param int|null $batch_size
     *   The batch size to return.  The max and default value is 300.
     * @param string|null $next_page_token
     *   A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLeadsByProgramIdUsingGETAsyncWithHttpInfo(
        int $program_id,
        array $fields = null,
        int $batch_size = null,
        string $next_page_token = null
    ): PromiseInterface {
        $request = $this->getLeadsByProgramIdUsingGETRequest($program_id, $fields, $batch_size, $next_page_token);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Lead\Model\ResponseOfLead::class,
            [$this, 'getLeadsByProgramIdUsingGETHandleException']
        );
    }

    /**
     * Create request for operation 'getLeadsByProgramIdUsingGET'
     *
     * @param int $program_id
     *   The id of the program to retrieve from
     * @param string[]|null $fields
     *   A comma-separated list of fields to be returned for each record
     * @param int|null $batch_size
     *   The batch size to return.  The max and default value is 300.
     * @param string|null $next_page_token
     *   A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLeadsByProgramIdUsingGETRequest(
        int $program_id,
        array $fields = null,
        int $batch_size = null,
        string $next_page_token = null
    ): Request {

        $resourcePath = '/rest/v1/leads/programs/{programId}.json';
        $resourcePath = str_replace(
            '{' . 'programId' . '}',
            ObjectSerializer::toPathValue($program_id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'GET',
            $operationHost . $resourcePath,
            // Query.
            [
                'fields' => ObjectSerializer::toQueryValue($fields),
                'batchSize' => ObjectSerializer::toQueryValue($batch_size),
                'nextPageToken' => ObjectSerializer::toQueryValue($next_page_token),
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for getListMembershipUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function getListMembershipUsingGETHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Lead\Model\ResponseOfLists::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Lists by Lead Id
     *
     * @param int $lead_id
     *   The Marketo lead id
     * @param string|null $next_page_token
     *   A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info.
     * @param int|null $batch_size
     *   Maximum number of records to return.  Maximum and default is 300.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfLists
     */
    public function getListMembershipUsingGET(
        int $lead_id,
        string $next_page_token = null,
        int $batch_size = null
    ): \NecLimDul\MarketoRest\Lead\Model\ResponseOfLists {
        list($response) = $this->getListMembershipUsingGETWithHttpInfo($lead_id, $next_page_token, $batch_size);
        return $response;
    }

    /**
     * Get Lists by Lead Id
     *
     * @param int $lead_id
     *   The Marketo lead id
     * @param string|null $next_page_token
     *   A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info.
     * @param int|null $batch_size
     *   Maximum number of records to return.  Maximum and default is 300.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Lead\Model\ResponseOfLists,
     *     int,
     *     array<array<string>>
     * }
     */
    public function getListMembershipUsingGETWithHttpInfo(
        int $lead_id,
        string $next_page_token = null,
        int $batch_size = null
    ): array {
        $request = $this->getListMembershipUsingGETRequest($lead_id, $next_page_token, $batch_size);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Lead\Model\ResponseOfLists::class
            );
        } catch (ApiException $e) {
            throw $this->getListMembershipUsingGETHandleException($e);
        }
    }

    /**
     * Get Lists by Lead Id
     *
     * @param int $lead_id
     *   The Marketo lead id
     * @param string|null $next_page_token
     *   A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info.
     * @param int|null $batch_size
     *   Maximum number of records to return.  Maximum and default is 300.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getListMembershipUsingGETAsync(
        int $lead_id,
        string $next_page_token = null,
        int $batch_size = null
    ): PromiseInterface {
        return $this->getListMembershipUsingGETAsyncWithHttpInfo($lead_id, $next_page_token, $batch_size)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Lead\Model\ResponseOfLists {
                    return $response[0];
                }
            );
    }

    /**
     * Get Lists by Lead Id
     *
     * @param int $lead_id
     *   The Marketo lead id
     * @param string|null $next_page_token
     *   A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info.
     * @param int|null $batch_size
     *   Maximum number of records to return.  Maximum and default is 300.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getListMembershipUsingGETAsyncWithHttpInfo(
        int $lead_id,
        string $next_page_token = null,
        int $batch_size = null
    ): PromiseInterface {
        $request = $this->getListMembershipUsingGETRequest($lead_id, $next_page_token, $batch_size);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Lead\Model\ResponseOfLists::class,
            [$this, 'getListMembershipUsingGETHandleException']
        );
    }

    /**
     * Create request for operation 'getListMembershipUsingGET'
     *
     * @param int $lead_id
     *   The Marketo lead id
     * @param string|null $next_page_token
     *   A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info.
     * @param int|null $batch_size
     *   Maximum number of records to return.  Maximum and default is 300.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getListMembershipUsingGETRequest(
        int $lead_id,
        string $next_page_token = null,
        int $batch_size = null
    ): Request {

        $resourcePath = '/rest/v1/leads/{leadId}/listMembership.json';
        $resourcePath = str_replace(
            '{' . 'leadId' . '}',
            ObjectSerializer::toPathValue($lead_id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'GET',
            $operationHost . $resourcePath,
            // Query.
            [
                'nextPageToken' => ObjectSerializer::toQueryValue($next_page_token),
                'batchSize' => ObjectSerializer::toQueryValue($batch_size),
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for getProgramMembershipUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function getProgramMembershipUsingGETHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Lead\Model\ResponseOfPrograms::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Programs by Lead Id
     *
     * @param int $lead_id
     *   The Marketo lead id
     * @param string|null $next_page_token
     *   A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info.
     * @param int|null $batch_size
     *   Maximum number of records to return.  Maximum and default is 300.
     * @param string|null $earliest_updated_at
     *   Exclude programs prior to this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description.
     * @param string|null $latest_updated_at
     *   Exclude programs after this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description.
     * @param string|null $filter_type
     *   Set to \&quot;programId\&quot; to filter a set of programs.
     * @param string[]|null $filter_values
     *   Comma-separated list of program ids to match against
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfPrograms
     */
    public function getProgramMembershipUsingGET(
        int $lead_id,
        string $next_page_token = null,
        int $batch_size = null,
        string $earliest_updated_at = null,
        string $latest_updated_at = null,
        string $filter_type = null,
        array $filter_values = null
    ): \NecLimDul\MarketoRest\Lead\Model\ResponseOfPrograms {
        list($response) = $this->getProgramMembershipUsingGETWithHttpInfo($lead_id, $next_page_token, $batch_size, $earliest_updated_at, $latest_updated_at, $filter_type, $filter_values);
        return $response;
    }

    /**
     * Get Programs by Lead Id
     *
     * @param int $lead_id
     *   The Marketo lead id
     * @param string|null $next_page_token
     *   A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info.
     * @param int|null $batch_size
     *   Maximum number of records to return.  Maximum and default is 300.
     * @param string|null $earliest_updated_at
     *   Exclude programs prior to this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description.
     * @param string|null $latest_updated_at
     *   Exclude programs after this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description.
     * @param string|null $filter_type
     *   Set to \&quot;programId\&quot; to filter a set of programs.
     * @param string[]|null $filter_values
     *   Comma-separated list of program ids to match against
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Lead\Model\ResponseOfPrograms,
     *     int,
     *     array<array<string>>
     * }
     */
    public function getProgramMembershipUsingGETWithHttpInfo(
        int $lead_id,
        string $next_page_token = null,
        int $batch_size = null,
        string $earliest_updated_at = null,
        string $latest_updated_at = null,
        string $filter_type = null,
        array $filter_values = null
    ): array {
        $request = $this->getProgramMembershipUsingGETRequest($lead_id, $next_page_token, $batch_size, $earliest_updated_at, $latest_updated_at, $filter_type, $filter_values);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Lead\Model\ResponseOfPrograms::class
            );
        } catch (ApiException $e) {
            throw $this->getProgramMembershipUsingGETHandleException($e);
        }
    }

    /**
     * Get Programs by Lead Id
     *
     * @param int $lead_id
     *   The Marketo lead id
     * @param string|null $next_page_token
     *   A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info.
     * @param int|null $batch_size
     *   Maximum number of records to return.  Maximum and default is 300.
     * @param string|null $earliest_updated_at
     *   Exclude programs prior to this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description.
     * @param string|null $latest_updated_at
     *   Exclude programs after this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description.
     * @param string|null $filter_type
     *   Set to \&quot;programId\&quot; to filter a set of programs.
     * @param string[]|null $filter_values
     *   Comma-separated list of program ids to match against
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProgramMembershipUsingGETAsync(
        int $lead_id,
        string $next_page_token = null,
        int $batch_size = null,
        string $earliest_updated_at = null,
        string $latest_updated_at = null,
        string $filter_type = null,
        array $filter_values = null
    ): PromiseInterface {
        return $this->getProgramMembershipUsingGETAsyncWithHttpInfo($lead_id, $next_page_token, $batch_size, $earliest_updated_at, $latest_updated_at, $filter_type, $filter_values)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Lead\Model\ResponseOfPrograms {
                    return $response[0];
                }
            );
    }

    /**
     * Get Programs by Lead Id
     *
     * @param int $lead_id
     *   The Marketo lead id
     * @param string|null $next_page_token
     *   A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info.
     * @param int|null $batch_size
     *   Maximum number of records to return.  Maximum and default is 300.
     * @param string|null $earliest_updated_at
     *   Exclude programs prior to this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description.
     * @param string|null $latest_updated_at
     *   Exclude programs after this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description.
     * @param string|null $filter_type
     *   Set to \&quot;programId\&quot; to filter a set of programs.
     * @param string[]|null $filter_values
     *   Comma-separated list of program ids to match against
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProgramMembershipUsingGETAsyncWithHttpInfo(
        int $lead_id,
        string $next_page_token = null,
        int $batch_size = null,
        string $earliest_updated_at = null,
        string $latest_updated_at = null,
        string $filter_type = null,
        array $filter_values = null
    ): PromiseInterface {
        $request = $this->getProgramMembershipUsingGETRequest($lead_id, $next_page_token, $batch_size, $earliest_updated_at, $latest_updated_at, $filter_type, $filter_values);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Lead\Model\ResponseOfPrograms::class,
            [$this, 'getProgramMembershipUsingGETHandleException']
        );
    }

    /**
     * Create request for operation 'getProgramMembershipUsingGET'
     *
     * @param int $lead_id
     *   The Marketo lead id
     * @param string|null $next_page_token
     *   A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info.
     * @param int|null $batch_size
     *   Maximum number of records to return.  Maximum and default is 300.
     * @param string|null $earliest_updated_at
     *   Exclude programs prior to this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description.
     * @param string|null $latest_updated_at
     *   Exclude programs after this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description.
     * @param string|null $filter_type
     *   Set to \&quot;programId\&quot; to filter a set of programs.
     * @param string[]|null $filter_values
     *   Comma-separated list of program ids to match against
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getProgramMembershipUsingGETRequest(
        int $lead_id,
        string $next_page_token = null,
        int $batch_size = null,
        string $earliest_updated_at = null,
        string $latest_updated_at = null,
        string $filter_type = null,
        array $filter_values = null
    ): Request {

        $resourcePath = '/rest/v1/leads/{leadId}/programMembership.json';
        $resourcePath = str_replace(
            '{' . 'leadId' . '}',
            ObjectSerializer::toPathValue($lead_id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'GET',
            $operationHost . $resourcePath,
            // Query.
            [
                'nextPageToken' => ObjectSerializer::toQueryValue($next_page_token),
                'batchSize' => ObjectSerializer::toQueryValue($batch_size),
                'earliestUpdatedAt' => ObjectSerializer::toQueryValue($earliest_updated_at),
                'latestUpdatedAt' => ObjectSerializer::toQueryValue($latest_updated_at),
                'filterType' => ObjectSerializer::toQueryValue($filter_type),
                'filterValues' => ObjectSerializer::toQueryValue($filter_values),
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for getSmartCampaignMembershipUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function getSmartCampaignMembershipUsingGETHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Lead\Model\ResponseOfSmartCampaigns::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Smart Campaigns by Lead Id
     *
     * @param int $lead_id
     *   The Marketo lead id
     * @param string|null $next_page_token
     *   A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info.
     * @param int|null $batch_size
     *   Maximum number of records to return.  Maximum and default is 300.
     * @param string|null $earliest_updated_at
     *   Exclude smart campaigns prior to this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description.
     * @param string|null $latest_updated_at
     *   Exclude smart campaigns after this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfSmartCampaigns
     */
    public function getSmartCampaignMembershipUsingGET(
        int $lead_id,
        string $next_page_token = null,
        int $batch_size = null,
        string $earliest_updated_at = null,
        string $latest_updated_at = null
    ): \NecLimDul\MarketoRest\Lead\Model\ResponseOfSmartCampaigns {
        list($response) = $this->getSmartCampaignMembershipUsingGETWithHttpInfo($lead_id, $next_page_token, $batch_size, $earliest_updated_at, $latest_updated_at);
        return $response;
    }

    /**
     * Get Smart Campaigns by Lead Id
     *
     * @param int $lead_id
     *   The Marketo lead id
     * @param string|null $next_page_token
     *   A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info.
     * @param int|null $batch_size
     *   Maximum number of records to return.  Maximum and default is 300.
     * @param string|null $earliest_updated_at
     *   Exclude smart campaigns prior to this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description.
     * @param string|null $latest_updated_at
     *   Exclude smart campaigns after this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Lead\Model\ResponseOfSmartCampaigns,
     *     int,
     *     array<array<string>>
     * }
     */
    public function getSmartCampaignMembershipUsingGETWithHttpInfo(
        int $lead_id,
        string $next_page_token = null,
        int $batch_size = null,
        string $earliest_updated_at = null,
        string $latest_updated_at = null
    ): array {
        $request = $this->getSmartCampaignMembershipUsingGETRequest($lead_id, $next_page_token, $batch_size, $earliest_updated_at, $latest_updated_at);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Lead\Model\ResponseOfSmartCampaigns::class
            );
        } catch (ApiException $e) {
            throw $this->getSmartCampaignMembershipUsingGETHandleException($e);
        }
    }

    /**
     * Get Smart Campaigns by Lead Id
     *
     * @param int $lead_id
     *   The Marketo lead id
     * @param string|null $next_page_token
     *   A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info.
     * @param int|null $batch_size
     *   Maximum number of records to return.  Maximum and default is 300.
     * @param string|null $earliest_updated_at
     *   Exclude smart campaigns prior to this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description.
     * @param string|null $latest_updated_at
     *   Exclude smart campaigns after this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSmartCampaignMembershipUsingGETAsync(
        int $lead_id,
        string $next_page_token = null,
        int $batch_size = null,
        string $earliest_updated_at = null,
        string $latest_updated_at = null
    ): PromiseInterface {
        return $this->getSmartCampaignMembershipUsingGETAsyncWithHttpInfo($lead_id, $next_page_token, $batch_size, $earliest_updated_at, $latest_updated_at)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Lead\Model\ResponseOfSmartCampaigns {
                    return $response[0];
                }
            );
    }

    /**
     * Get Smart Campaigns by Lead Id
     *
     * @param int $lead_id
     *   The Marketo lead id
     * @param string|null $next_page_token
     *   A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info.
     * @param int|null $batch_size
     *   Maximum number of records to return.  Maximum and default is 300.
     * @param string|null $earliest_updated_at
     *   Exclude smart campaigns prior to this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description.
     * @param string|null $latest_updated_at
     *   Exclude smart campaigns after this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSmartCampaignMembershipUsingGETAsyncWithHttpInfo(
        int $lead_id,
        string $next_page_token = null,
        int $batch_size = null,
        string $earliest_updated_at = null,
        string $latest_updated_at = null
    ): PromiseInterface {
        $request = $this->getSmartCampaignMembershipUsingGETRequest($lead_id, $next_page_token, $batch_size, $earliest_updated_at, $latest_updated_at);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Lead\Model\ResponseOfSmartCampaigns::class,
            [$this, 'getSmartCampaignMembershipUsingGETHandleException']
        );
    }

    /**
     * Create request for operation 'getSmartCampaignMembershipUsingGET'
     *
     * @param int $lead_id
     *   The Marketo lead id
     * @param string|null $next_page_token
     *   A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info.
     * @param int|null $batch_size
     *   Maximum number of records to return.  Maximum and default is 300.
     * @param string|null $earliest_updated_at
     *   Exclude smart campaigns prior to this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description.
     * @param string|null $latest_updated_at
     *   Exclude smart campaigns after this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSmartCampaignMembershipUsingGETRequest(
        int $lead_id,
        string $next_page_token = null,
        int $batch_size = null,
        string $earliest_updated_at = null,
        string $latest_updated_at = null
    ): Request {

        $resourcePath = '/rest/v1/leads/{leadId}/smartCampaignMembership.json';
        $resourcePath = str_replace(
            '{' . 'leadId' . '}',
            ObjectSerializer::toPathValue($lead_id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'GET',
            $operationHost . $resourcePath,
            // Query.
            [
                'nextPageToken' => ObjectSerializer::toQueryValue($next_page_token),
                'batchSize' => ObjectSerializer::toQueryValue($batch_size),
                'earliestUpdatedAt' => ObjectSerializer::toQueryValue($earliest_updated_at),
                'latestUpdatedAt' => ObjectSerializer::toQueryValue($latest_updated_at),
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for mergeLeadsUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function mergeLeadsUsingPOSTHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Lead\Model\ResponseWithoutResult::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Merge Leads
     *
     * @param int $lead_id
     *   The id of the winning lead record
     * @param int|null $lead_id2
     *   The id of the losing record
     * @param int[]|null $lead_ids
     *   A comma-separated list of ids of losing records
     * @param bool|null $merge_in_crm
     *   If set, will attempt to merge the designated records in a natively-synched CRM.  Only valid for instances with are natively synched to SFDC.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseWithoutResult
     */
    public function mergeLeadsUsingPOST(
        int $lead_id,
        int $lead_id2 = null,
        array $lead_ids = null,
        bool $merge_in_crm = null
    ): \NecLimDul\MarketoRest\Lead\Model\ResponseWithoutResult {
        list($response) = $this->mergeLeadsUsingPOSTWithHttpInfo($lead_id, $lead_id2, $lead_ids, $merge_in_crm);
        return $response;
    }

    /**
     * Merge Leads
     *
     * @param int $lead_id
     *   The id of the winning lead record
     * @param int|null $lead_id2
     *   The id of the losing record
     * @param int[]|null $lead_ids
     *   A comma-separated list of ids of losing records
     * @param bool|null $merge_in_crm
     *   If set, will attempt to merge the designated records in a natively-synched CRM.  Only valid for instances with are natively synched to SFDC.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Lead\Model\ResponseWithoutResult,
     *     int,
     *     array<array<string>>
     * }
     */
    public function mergeLeadsUsingPOSTWithHttpInfo(
        int $lead_id,
        int $lead_id2 = null,
        array $lead_ids = null,
        bool $merge_in_crm = null
    ): array {
        $request = $this->mergeLeadsUsingPOSTRequest($lead_id, $lead_id2, $lead_ids, $merge_in_crm);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Lead\Model\ResponseWithoutResult::class
            );
        } catch (ApiException $e) {
            throw $this->mergeLeadsUsingPOSTHandleException($e);
        }
    }

    /**
     * Merge Leads
     *
     * @param int $lead_id
     *   The id of the winning lead record
     * @param int|null $lead_id2
     *   The id of the losing record
     * @param int[]|null $lead_ids
     *   A comma-separated list of ids of losing records
     * @param bool|null $merge_in_crm
     *   If set, will attempt to merge the designated records in a natively-synched CRM.  Only valid for instances with are natively synched to SFDC.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mergeLeadsUsingPOSTAsync(
        int $lead_id,
        int $lead_id2 = null,
        array $lead_ids = null,
        bool $merge_in_crm = null
    ): PromiseInterface {
        return $this->mergeLeadsUsingPOSTAsyncWithHttpInfo($lead_id, $lead_id2, $lead_ids, $merge_in_crm)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Lead\Model\ResponseWithoutResult {
                    return $response[0];
                }
            );
    }

    /**
     * Merge Leads
     *
     * @param int $lead_id
     *   The id of the winning lead record
     * @param int|null $lead_id2
     *   The id of the losing record
     * @param int[]|null $lead_ids
     *   A comma-separated list of ids of losing records
     * @param bool|null $merge_in_crm
     *   If set, will attempt to merge the designated records in a natively-synched CRM.  Only valid for instances with are natively synched to SFDC.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mergeLeadsUsingPOSTAsyncWithHttpInfo(
        int $lead_id,
        int $lead_id2 = null,
        array $lead_ids = null,
        bool $merge_in_crm = null
    ): PromiseInterface {
        $request = $this->mergeLeadsUsingPOSTRequest($lead_id, $lead_id2, $lead_ids, $merge_in_crm);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Lead\Model\ResponseWithoutResult::class,
            [$this, 'mergeLeadsUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'mergeLeadsUsingPOST'
     *
     * @param int $lead_id
     *   The id of the winning lead record
     * @param int|null $lead_id2
     *   The id of the losing record
     * @param int[]|null $lead_ids
     *   A comma-separated list of ids of losing records
     * @param bool|null $merge_in_crm
     *   If set, will attempt to merge the designated records in a natively-synched CRM.  Only valid for instances with are natively synched to SFDC.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function mergeLeadsUsingPOSTRequest(
        int $lead_id,
        int $lead_id2 = null,
        array $lead_ids = null,
        bool $merge_in_crm = null
    ): Request {

        $resourcePath = '/rest/v1/leads/{leadId}/merge.json';
        $resourcePath = str_replace(
            '{' . 'leadId' . '}',
            ObjectSerializer::toPathValue($lead_id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
                'leadId' => ObjectSerializer::toQueryValue($lead_id2),
                'leadIds' => ObjectSerializer::toQueryValue($lead_ids),
                'mergeInCRM' => ObjectSerializer::toQueryValue($merge_in_crm),
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for pushToMarketoUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function pushToMarketoUsingPOSTHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Lead\Model\ResponseOfPushLeadToMarketo::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Push Lead to Marketo
     *
     * @param \NecLimDul\MarketoRest\Lead\Model\PushLeadToMarketoRequest $push_lead_to_marketo_request
     *   pushLeadToMarketoRequest
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfPushLeadToMarketo
     */
    public function pushToMarketoUsingPOST(
        \NecLimDul\MarketoRest\Lead\Model\PushLeadToMarketoRequest $push_lead_to_marketo_request
    ): \NecLimDul\MarketoRest\Lead\Model\ResponseOfPushLeadToMarketo {
        list($response) = $this->pushToMarketoUsingPOSTWithHttpInfo($push_lead_to_marketo_request);
        return $response;
    }

    /**
     * Push Lead to Marketo
     *
     * @param \NecLimDul\MarketoRest\Lead\Model\PushLeadToMarketoRequest $push_lead_to_marketo_request
     *   pushLeadToMarketoRequest
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Lead\Model\ResponseOfPushLeadToMarketo,
     *     int,
     *     array<array<string>>
     * }
     */
    public function pushToMarketoUsingPOSTWithHttpInfo(
        \NecLimDul\MarketoRest\Lead\Model\PushLeadToMarketoRequest $push_lead_to_marketo_request
    ): array {
        $request = $this->pushToMarketoUsingPOSTRequest($push_lead_to_marketo_request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Lead\Model\ResponseOfPushLeadToMarketo::class
            );
        } catch (ApiException $e) {
            throw $this->pushToMarketoUsingPOSTHandleException($e);
        }
    }

    /**
     * Push Lead to Marketo
     *
     * @param \NecLimDul\MarketoRest\Lead\Model\PushLeadToMarketoRequest $push_lead_to_marketo_request
     *   pushLeadToMarketoRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pushToMarketoUsingPOSTAsync(
        \NecLimDul\MarketoRest\Lead\Model\PushLeadToMarketoRequest $push_lead_to_marketo_request
    ): PromiseInterface {
        return $this->pushToMarketoUsingPOSTAsyncWithHttpInfo($push_lead_to_marketo_request)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Lead\Model\ResponseOfPushLeadToMarketo {
                    return $response[0];
                }
            );
    }

    /**
     * Push Lead to Marketo
     *
     * @param \NecLimDul\MarketoRest\Lead\Model\PushLeadToMarketoRequest $push_lead_to_marketo_request
     *   pushLeadToMarketoRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pushToMarketoUsingPOSTAsyncWithHttpInfo(
        \NecLimDul\MarketoRest\Lead\Model\PushLeadToMarketoRequest $push_lead_to_marketo_request
    ): PromiseInterface {
        $request = $this->pushToMarketoUsingPOSTRequest($push_lead_to_marketo_request);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Lead\Model\ResponseOfPushLeadToMarketo::class,
            [$this, 'pushToMarketoUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'pushToMarketoUsingPOST'
     *
     * @param \NecLimDul\MarketoRest\Lead\Model\PushLeadToMarketoRequest $push_lead_to_marketo_request
     *   pushLeadToMarketoRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function pushToMarketoUsingPOSTRequest(
        \NecLimDul\MarketoRest\Lead\Model\PushLeadToMarketoRequest $push_lead_to_marketo_request
    ): Request {

        $resourcePath = '/rest/v1/leads/push.json';

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            $push_lead_to_marketo_request
        );
    }

    /**
     * Exception handler for submitFormUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function submitFormUsingPOSTHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Lead\Model\ResponseOfSubmitForm::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Submit Form
     *
     * @param \NecLimDul\MarketoRest\Lead\Model\SubmitFormRequest $submit_form_request
     *   submitFormRequest
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfSubmitForm
     */
    public function submitFormUsingPOST(
        \NecLimDul\MarketoRest\Lead\Model\SubmitFormRequest $submit_form_request
    ): \NecLimDul\MarketoRest\Lead\Model\ResponseOfSubmitForm {
        list($response) = $this->submitFormUsingPOSTWithHttpInfo($submit_form_request);
        return $response;
    }

    /**
     * Submit Form
     *
     * @param \NecLimDul\MarketoRest\Lead\Model\SubmitFormRequest $submit_form_request
     *   submitFormRequest
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Lead\Model\ResponseOfSubmitForm,
     *     int,
     *     array<array<string>>
     * }
     */
    public function submitFormUsingPOSTWithHttpInfo(
        \NecLimDul\MarketoRest\Lead\Model\SubmitFormRequest $submit_form_request
    ): array {
        $request = $this->submitFormUsingPOSTRequest($submit_form_request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Lead\Model\ResponseOfSubmitForm::class
            );
        } catch (ApiException $e) {
            throw $this->submitFormUsingPOSTHandleException($e);
        }
    }

    /**
     * Submit Form
     *
     * @param \NecLimDul\MarketoRest\Lead\Model\SubmitFormRequest $submit_form_request
     *   submitFormRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function submitFormUsingPOSTAsync(
        \NecLimDul\MarketoRest\Lead\Model\SubmitFormRequest $submit_form_request
    ): PromiseInterface {
        return $this->submitFormUsingPOSTAsyncWithHttpInfo($submit_form_request)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Lead\Model\ResponseOfSubmitForm {
                    return $response[0];
                }
            );
    }

    /**
     * Submit Form
     *
     * @param \NecLimDul\MarketoRest\Lead\Model\SubmitFormRequest $submit_form_request
     *   submitFormRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function submitFormUsingPOSTAsyncWithHttpInfo(
        \NecLimDul\MarketoRest\Lead\Model\SubmitFormRequest $submit_form_request
    ): PromiseInterface {
        $request = $this->submitFormUsingPOSTRequest($submit_form_request);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Lead\Model\ResponseOfSubmitForm::class,
            [$this, 'submitFormUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'submitFormUsingPOST'
     *
     * @param \NecLimDul\MarketoRest\Lead\Model\SubmitFormRequest $submit_form_request
     *   submitFormRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function submitFormUsingPOSTRequest(
        \NecLimDul\MarketoRest\Lead\Model\SubmitFormRequest $submit_form_request
    ): Request {

        $resourcePath = '/rest/v1/leads/submitForm.json';

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            $submit_form_request
        );
    }

    /**
     * Exception handler for syncLeadUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function syncLeadUsingPOSTHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Lead\Model\ResponseOfLead::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Sync Leads
     *
     * @param \NecLimDul\MarketoRest\Lead\Model\SyncLeadRequest $sync_lead_request
     *   syncLeadRequest
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfLead
     */
    public function syncLeadUsingPOST(
        \NecLimDul\MarketoRest\Lead\Model\SyncLeadRequest $sync_lead_request
    ): \NecLimDul\MarketoRest\Lead\Model\ResponseOfLead {
        list($response) = $this->syncLeadUsingPOSTWithHttpInfo($sync_lead_request);
        return $response;
    }

    /**
     * Sync Leads
     *
     * @param \NecLimDul\MarketoRest\Lead\Model\SyncLeadRequest $sync_lead_request
     *   syncLeadRequest
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Lead\Model\ResponseOfLead,
     *     int,
     *     array<array<string>>
     * }
     */
    public function syncLeadUsingPOSTWithHttpInfo(
        \NecLimDul\MarketoRest\Lead\Model\SyncLeadRequest $sync_lead_request
    ): array {
        $request = $this->syncLeadUsingPOSTRequest($sync_lead_request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Lead\Model\ResponseOfLead::class
            );
        } catch (ApiException $e) {
            throw $this->syncLeadUsingPOSTHandleException($e);
        }
    }

    /**
     * Sync Leads
     *
     * @param \NecLimDul\MarketoRest\Lead\Model\SyncLeadRequest $sync_lead_request
     *   syncLeadRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function syncLeadUsingPOSTAsync(
        \NecLimDul\MarketoRest\Lead\Model\SyncLeadRequest $sync_lead_request
    ): PromiseInterface {
        return $this->syncLeadUsingPOSTAsyncWithHttpInfo($sync_lead_request)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Lead\Model\ResponseOfLead {
                    return $response[0];
                }
            );
    }

    /**
     * Sync Leads
     *
     * @param \NecLimDul\MarketoRest\Lead\Model\SyncLeadRequest $sync_lead_request
     *   syncLeadRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function syncLeadUsingPOSTAsyncWithHttpInfo(
        \NecLimDul\MarketoRest\Lead\Model\SyncLeadRequest $sync_lead_request
    ): PromiseInterface {
        $request = $this->syncLeadUsingPOSTRequest($sync_lead_request);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Lead\Model\ResponseOfLead::class,
            [$this, 'syncLeadUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'syncLeadUsingPOST'
     *
     * @param \NecLimDul\MarketoRest\Lead\Model\SyncLeadRequest $sync_lead_request
     *   syncLeadRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function syncLeadUsingPOSTRequest(
        \NecLimDul\MarketoRest\Lead\Model\SyncLeadRequest $sync_lead_request
    ): Request {

        $resourcePath = '/rest/v1/leads.json';

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            $sync_lead_request
        );
    }

    /**
     * Exception handler for updateLeadFieldUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function updateLeadFieldUsingPOSTHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Lead\Model\ResponseOfUpdateLeadField::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Update Lead Field
     *
     * @param string $field_api_name
     *   The API name of lead field
     * @param \NecLimDul\MarketoRest\Lead\Model\UpdateLeadFieldRequest $update_lead_field_request
     *   updateLeadFieldRequest
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfUpdateLeadField
     */
    public function updateLeadFieldUsingPOST(
        string $field_api_name,
        \NecLimDul\MarketoRest\Lead\Model\UpdateLeadFieldRequest $update_lead_field_request
    ): \NecLimDul\MarketoRest\Lead\Model\ResponseOfUpdateLeadField {
        list($response) = $this->updateLeadFieldUsingPOSTWithHttpInfo($field_api_name, $update_lead_field_request);
        return $response;
    }

    /**
     * Update Lead Field
     *
     * @param string $field_api_name
     *   The API name of lead field
     * @param \NecLimDul\MarketoRest\Lead\Model\UpdateLeadFieldRequest $update_lead_field_request
     *   updateLeadFieldRequest
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Lead\Model\ResponseOfUpdateLeadField,
     *     int,
     *     array<array<string>>
     * }
     */
    public function updateLeadFieldUsingPOSTWithHttpInfo(
        string $field_api_name,
        \NecLimDul\MarketoRest\Lead\Model\UpdateLeadFieldRequest $update_lead_field_request
    ): array {
        $request = $this->updateLeadFieldUsingPOSTRequest($field_api_name, $update_lead_field_request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Lead\Model\ResponseOfUpdateLeadField::class
            );
        } catch (ApiException $e) {
            throw $this->updateLeadFieldUsingPOSTHandleException($e);
        }
    }

    /**
     * Update Lead Field
     *
     * @param string $field_api_name
     *   The API name of lead field
     * @param \NecLimDul\MarketoRest\Lead\Model\UpdateLeadFieldRequest $update_lead_field_request
     *   updateLeadFieldRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLeadFieldUsingPOSTAsync(
        string $field_api_name,
        \NecLimDul\MarketoRest\Lead\Model\UpdateLeadFieldRequest $update_lead_field_request
    ): PromiseInterface {
        return $this->updateLeadFieldUsingPOSTAsyncWithHttpInfo($field_api_name, $update_lead_field_request)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Lead\Model\ResponseOfUpdateLeadField {
                    return $response[0];
                }
            );
    }

    /**
     * Update Lead Field
     *
     * @param string $field_api_name
     *   The API name of lead field
     * @param \NecLimDul\MarketoRest\Lead\Model\UpdateLeadFieldRequest $update_lead_field_request
     *   updateLeadFieldRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLeadFieldUsingPOSTAsyncWithHttpInfo(
        string $field_api_name,
        \NecLimDul\MarketoRest\Lead\Model\UpdateLeadFieldRequest $update_lead_field_request
    ): PromiseInterface {
        $request = $this->updateLeadFieldUsingPOSTRequest($field_api_name, $update_lead_field_request);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Lead\Model\ResponseOfUpdateLeadField::class,
            [$this, 'updateLeadFieldUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'updateLeadFieldUsingPOST'
     *
     * @param string $field_api_name
     *   The API name of lead field
     * @param \NecLimDul\MarketoRest\Lead\Model\UpdateLeadFieldRequest $update_lead_field_request
     *   updateLeadFieldRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateLeadFieldUsingPOSTRequest(
        string $field_api_name,
        \NecLimDul\MarketoRest\Lead\Model\UpdateLeadFieldRequest $update_lead_field_request
    ): Request {

        $resourcePath = '/rest/v1/leads/schema/fields/{fieldApiName}.json';
        $resourcePath = str_replace(
            '{' . 'fieldApiName' . '}',
            ObjectSerializer::toPathValue($field_api_name),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            $update_lead_field_request
        );
    }

    /**
     * Exception handler for updatePartitionsUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function updatePartitionsUsingPOSTHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Lead\Model\ResponseOfLead::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Update Lead Partition
     *
     * @param \NecLimDul\MarketoRest\Lead\Model\UpdateLeadPartitionRequest $update_lead_partition_request
     *   updateLeadPartitionRequest
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfLead
     */
    public function updatePartitionsUsingPOST(
        \NecLimDul\MarketoRest\Lead\Model\UpdateLeadPartitionRequest $update_lead_partition_request
    ): \NecLimDul\MarketoRest\Lead\Model\ResponseOfLead {
        list($response) = $this->updatePartitionsUsingPOSTWithHttpInfo($update_lead_partition_request);
        return $response;
    }

    /**
     * Update Lead Partition
     *
     * @param \NecLimDul\MarketoRest\Lead\Model\UpdateLeadPartitionRequest $update_lead_partition_request
     *   updateLeadPartitionRequest
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Lead\Model\ResponseOfLead,
     *     int,
     *     array<array<string>>
     * }
     */
    public function updatePartitionsUsingPOSTWithHttpInfo(
        \NecLimDul\MarketoRest\Lead\Model\UpdateLeadPartitionRequest $update_lead_partition_request
    ): array {
        $request = $this->updatePartitionsUsingPOSTRequest($update_lead_partition_request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Lead\Model\ResponseOfLead::class
            );
        } catch (ApiException $e) {
            throw $this->updatePartitionsUsingPOSTHandleException($e);
        }
    }

    /**
     * Update Lead Partition
     *
     * @param \NecLimDul\MarketoRest\Lead\Model\UpdateLeadPartitionRequest $update_lead_partition_request
     *   updateLeadPartitionRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePartitionsUsingPOSTAsync(
        \NecLimDul\MarketoRest\Lead\Model\UpdateLeadPartitionRequest $update_lead_partition_request
    ): PromiseInterface {
        return $this->updatePartitionsUsingPOSTAsyncWithHttpInfo($update_lead_partition_request)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Lead\Model\ResponseOfLead {
                    return $response[0];
                }
            );
    }

    /**
     * Update Lead Partition
     *
     * @param \NecLimDul\MarketoRest\Lead\Model\UpdateLeadPartitionRequest $update_lead_partition_request
     *   updateLeadPartitionRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePartitionsUsingPOSTAsyncWithHttpInfo(
        \NecLimDul\MarketoRest\Lead\Model\UpdateLeadPartitionRequest $update_lead_partition_request
    ): PromiseInterface {
        $request = $this->updatePartitionsUsingPOSTRequest($update_lead_partition_request);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Lead\Model\ResponseOfLead::class,
            [$this, 'updatePartitionsUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'updatePartitionsUsingPOST'
     *
     * @param \NecLimDul\MarketoRest\Lead\Model\UpdateLeadPartitionRequest $update_lead_partition_request
     *   updateLeadPartitionRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updatePartitionsUsingPOSTRequest(
        \NecLimDul\MarketoRest\Lead\Model\UpdateLeadPartitionRequest $update_lead_partition_request
    ): Request {

        $resourcePath = '/rest/v1/leads/partitions.json';

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            $update_lead_partition_request
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array<string, mixed> of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    /**
     * Make a request.
     *
     * @param \GuzzleHttp\Psr7\Request $request An initialized request object.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @return \Psr\Http\Message\ResponseInterface
     */
    private function makeRequest(Request $request)
    {
        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            $response = $e->getResponse();
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                (int) $e->getCode(),
                $response ? $response->getHeaders() : [],
                $response ? (string) $response->getBody() : null
            );
        }

        $statusCode = $response->getStatusCode();
        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    (string) $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                (string) $response->getBody()
            );
        }
        return $response;
    }

    /**
     * Make an async request.
     *
     * @param \GuzzleHttp\Psr7\Request $request An initialized request object.
     * @param class-string $returnType The return type.
     * @param callable $exceptionHandler A callback to process HTTP errors.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @return \GuzzleHttp\Promise\PromiseInterface A promise that will return a processed response.
     */
    private function makeAsyncRequest(Request $request, string $returnType, callable $exceptionHandler)
    {
        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function (ResponseInterface $response) use ($returnType) {
                    return $this->responseToReturn($response, $returnType);
                },
                function (RequestException $exception) use ($exceptionHandler) {
                    $response = $exception->getResponse();
                    $e = new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : [],
                        $response ? (string) $response->getBody() : null
                    );
                    throw $exceptionHandler($e);
                }
            );
    }

    /**
     * Convert a response to a return standard return array.
     *
     * @template T
     * @param \Psr\Http\Message\ResponseInterface $response A response from a request with a serialized body.
     * @param string $returnType The primary return type.
     * @phpstan-param class-string<T> $returnType
     *
     * @return array structured array or response and http info.
     * @phpstan-return array{T, int, array<array<string>>}
     */
    private function responseToReturn(ResponseInterface $response, string $returnType)
    {
        return [
            $this->deserializeResponseBody($response->getBody(), $returnType),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    /**
     * Deserialize a response body.
     *
     * @template T
     * @param mixed $responseBody The response body.
     * @param string $returnType The return type.
     * @param array<string, string[]> $headers A list of headers from the response.
     * @phpstan-param class-string<T> $returnType
     *
     * @return mixed Either a string or a stream to be passed to a file object.
     * @phpstan-return T
     * @psalm-return T
     */
    private function deserializeResponseBody($responseBody, string $returnType, array $headers = [])
    {
        return ObjectSerializer::deserialize(
            $returnType === \SplFileObject::class ? $responseBody : (string) $responseBody,
            $returnType,
            $headers
        );
    }
}
