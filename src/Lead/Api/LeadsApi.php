<?php
/**
 * LeadsApi
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Lead
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketo Rest API
 *
 * Marketo Rest API
 *
 * OpenAPI spec version: 1.0
 * Contact: developerfeedback@marketo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace NecLimDul\MarketoRest\Lead\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Query;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\ResponseInterface;
use NecLimDul\MarketoRest\Lead\ApiException;
use NecLimDul\MarketoRest\Lead\Configuration;
use NecLimDul\MarketoRest\Lead\HeaderSelector;
use NecLimDul\MarketoRest\Lead\ObjectSerializer;

/**
 * LeadsApi Class Doc Comment
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Lead
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LeadsApi
{

    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation associateLeadUsingPOST
     *
     * Associate Lead
     *
     * @param  int $lead_id The id of the lead to associate (required)
     * @param  string $cookie The cookie value to associate (required)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseWithoutResult
     */
    public function associateLeadUsingPOST($lead_id, $cookie)
    {
        list($response) = $this->associateLeadUsingPOSTWithHttpInfo($lead_id, $cookie);
        return $response;
    }

    /**
     * Operation associateLeadUsingPOSTWithHttpInfo
     *
     * Associate Lead
     *
     * @param  int $lead_id The id of the lead to associate (required)
     * @param  string $cookie The cookie value to associate (required)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Lead\Model\ResponseWithoutResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function associateLeadUsingPOSTWithHttpInfo($lead_id, $cookie)
    {
        $request = $this->associateLeadUsingPOSTRequest($lead_id, $cookie);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseWithoutResult');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseWithoutResult');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Lead\Model\ResponseWithoutResult',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation associateLeadUsingPOSTAsync
     *
     * Associate Lead
     *
     * @param  int $lead_id The id of the lead to associate (required)
     * @param  string $cookie The cookie value to associate (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function associateLeadUsingPOSTAsync($lead_id, $cookie)
    {
        return $this->associateLeadUsingPOSTAsyncWithHttpInfo($lead_id, $cookie)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation associateLeadUsingPOSTAsyncWithHttpInfo
     *
     * Associate Lead
     *
     * @param  int $lead_id The id of the lead to associate (required)
     * @param  string $cookie The cookie value to associate (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function associateLeadUsingPOSTAsyncWithHttpInfo($lead_id, $cookie)
    {
        $request = $this->associateLeadUsingPOSTRequest($lead_id, $cookie);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseWithoutResult');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'associateLeadUsingPOST'
     *
     * @param  int $lead_id The id of the lead to associate (required)
     * @param  string $cookie The cookie value to associate (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function associateLeadUsingPOSTRequest($lead_id, $cookie)
    {
        // Verify the required parameter 'lead_id' is set.
        if ($lead_id === null || (is_array($lead_id) && empty($lead_id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lead_id when calling associateLeadUsingPOST'
            );
        }
        // Verify the required parameter 'cookie' is set.
        if ($cookie === null || (is_array($cookie) && empty($cookie))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cookie when calling associateLeadUsingPOST'
            );
        }

        $resourcePath = '/rest/v1/leads/{leadId}/associate.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Query parameters.
        if (is_array($cookie)) {
            $cookie = ObjectSerializer::serializeCollection($cookie, '', true);
        }
        $queryParams['cookie'] = $cookie;
        // Remove any null (optional values).
        $queryParams = array_filter($queryParams, function($v) { return $v !== null; });

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'leadId' . '}',
            ObjectSerializer::toPathValue($lead_id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation changeLeadProgramStatusUsingPOST
     *
     * Change Lead Program Status
     *
     * @param  int $program_id programId (required)
     * @param  \NecLimDul\MarketoRest\Lead\Model\ChangeLeadProgramStatusRequest $change_lead_program_status_request changeLeadProgramStatusRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfChangeLeadProgramStatusOutputData
     */
    public function changeLeadProgramStatusUsingPOST($program_id, $change_lead_program_status_request)
    {
        list($response) = $this->changeLeadProgramStatusUsingPOSTWithHttpInfo($program_id, $change_lead_program_status_request);
        return $response;
    }

    /**
     * Operation changeLeadProgramStatusUsingPOSTWithHttpInfo
     *
     * Change Lead Program Status
     *
     * @param  int $program_id programId (required)
     * @param  \NecLimDul\MarketoRest\Lead\Model\ChangeLeadProgramStatusRequest $change_lead_program_status_request changeLeadProgramStatusRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Lead\Model\ResponseOfChangeLeadProgramStatusOutputData, HTTP status code, HTTP response headers (array of strings)
     */
    public function changeLeadProgramStatusUsingPOSTWithHttpInfo($program_id, $change_lead_program_status_request)
    {
        $request = $this->changeLeadProgramStatusUsingPOSTRequest($program_id, $change_lead_program_status_request);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfChangeLeadProgramStatusOutputData');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfChangeLeadProgramStatusOutputData');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Lead\Model\ResponseOfChangeLeadProgramStatusOutputData',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation changeLeadProgramStatusUsingPOSTAsync
     *
     * Change Lead Program Status
     *
     * @param  int $program_id programId (required)
     * @param  \NecLimDul\MarketoRest\Lead\Model\ChangeLeadProgramStatusRequest $change_lead_program_status_request changeLeadProgramStatusRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function changeLeadProgramStatusUsingPOSTAsync($program_id, $change_lead_program_status_request)
    {
        return $this->changeLeadProgramStatusUsingPOSTAsyncWithHttpInfo($program_id, $change_lead_program_status_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation changeLeadProgramStatusUsingPOSTAsyncWithHttpInfo
     *
     * Change Lead Program Status
     *
     * @param  int $program_id programId (required)
     * @param  \NecLimDul\MarketoRest\Lead\Model\ChangeLeadProgramStatusRequest $change_lead_program_status_request changeLeadProgramStatusRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function changeLeadProgramStatusUsingPOSTAsyncWithHttpInfo($program_id, $change_lead_program_status_request)
    {
        $request = $this->changeLeadProgramStatusUsingPOSTRequest($program_id, $change_lead_program_status_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfChangeLeadProgramStatusOutputData');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'changeLeadProgramStatusUsingPOST'
     *
     * @param  int $program_id programId (required)
     * @param  \NecLimDul\MarketoRest\Lead\Model\ChangeLeadProgramStatusRequest $change_lead_program_status_request changeLeadProgramStatusRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function changeLeadProgramStatusUsingPOSTRequest($program_id, $change_lead_program_status_request)
    {
        // Verify the required parameter 'program_id' is set.
        if ($program_id === null || (is_array($program_id) && empty($program_id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $program_id when calling changeLeadProgramStatusUsingPOST'
            );
        }
        // Verify the required parameter 'change_lead_program_status_request' is set.
        if ($change_lead_program_status_request === null || (is_array($change_lead_program_status_request) && empty($change_lead_program_status_request))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $change_lead_program_status_request when calling changeLeadProgramStatusUsingPOST'
            );
        }

        $resourcePath = '/rest/v1/leads/programs/{programId}/status.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'programId' . '}',
            ObjectSerializer::toPathValue($program_id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );

        // for model (json/xml)
        if (!empty($change_lead_program_status_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($change_lead_program_status_request));
            } elseif (!is_array($change_lead_program_status_request)) {
                $httpBody = (string) $change_lead_program_status_request;
            }
            else {
                $httpBody = '';
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteLeadsUsingPOST
     *
     * Delete Leads
     *
     * @param  \NecLimDul\MarketoRest\Lead\Model\DeleteLeadRequest $delete_lead_request deleteLeadRequest (optional)
     * @param  int[] $id Parameter can be specified if the request body is empty. Multiple lead ids can be specified. e.g. id&#x3D;1,2,3,2342 (optional)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfLead
     */
    public function deleteLeadsUsingPOST($delete_lead_request = null, $id = null)
    {
        list($response) = $this->deleteLeadsUsingPOSTWithHttpInfo($delete_lead_request, $id);
        return $response;
    }

    /**
     * Operation deleteLeadsUsingPOSTWithHttpInfo
     *
     * Delete Leads
     *
     * @param  \NecLimDul\MarketoRest\Lead\Model\DeleteLeadRequest $delete_lead_request deleteLeadRequest (optional)
     * @param  int[] $id Parameter can be specified if the request body is empty. Multiple lead ids can be specified. e.g. id&#x3D;1,2,3,2342 (optional)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Lead\Model\ResponseOfLead, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLeadsUsingPOSTWithHttpInfo($delete_lead_request = null, $id = null)
    {
        $request = $this->deleteLeadsUsingPOSTRequest($delete_lead_request, $id);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfLead');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfLead');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Lead\Model\ResponseOfLead',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteLeadsUsingPOSTAsync
     *
     * Delete Leads
     *
     * @param  \NecLimDul\MarketoRest\Lead\Model\DeleteLeadRequest $delete_lead_request deleteLeadRequest (optional)
     * @param  int[] $id Parameter can be specified if the request body is empty. Multiple lead ids can be specified. e.g. id&#x3D;1,2,3,2342 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLeadsUsingPOSTAsync($delete_lead_request = null, $id = null)
    {
        return $this->deleteLeadsUsingPOSTAsyncWithHttpInfo($delete_lead_request, $id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteLeadsUsingPOSTAsyncWithHttpInfo
     *
     * Delete Leads
     *
     * @param  \NecLimDul\MarketoRest\Lead\Model\DeleteLeadRequest $delete_lead_request deleteLeadRequest (optional)
     * @param  int[] $id Parameter can be specified if the request body is empty. Multiple lead ids can be specified. e.g. id&#x3D;1,2,3,2342 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLeadsUsingPOSTAsyncWithHttpInfo($delete_lead_request = null, $id = null)
    {
        $request = $this->deleteLeadsUsingPOSTRequest($delete_lead_request, $id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfLead');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteLeadsUsingPOST'
     *
     * @param  \NecLimDul\MarketoRest\Lead\Model\DeleteLeadRequest $delete_lead_request deleteLeadRequest (optional)
     * @param  int[] $id Parameter can be specified if the request body is empty. Multiple lead ids can be specified. e.g. id&#x3D;1,2,3,2342 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteLeadsUsingPOSTRequest($delete_lead_request = null, $id = null)
    {

        $resourcePath = '/rest/v1/leads/delete.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Query parameters.
        if (is_array($id)) {
            $id = ObjectSerializer::serializeCollection($id, 'multi', true);
        }
        $queryParams['id'] = $id;
        // Remove any null (optional values).
        $queryParams = array_filter($queryParams, function($v) { return $v !== null; });
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );

        // for model (json/xml)
        if (!empty($delete_lead_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($delete_lead_request));
            } elseif (!is_array($delete_lead_request)) {
                $httpBody = (string) $delete_lead_request;
            }
            else {
                $httpBody = '';
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation describeProgramMemberUsingGET
     *
     * Describe Program Member
     *
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfProgramMemberAttributes
     */
    public function describeProgramMemberUsingGET()
    {
        list($response) = $this->describeProgramMemberUsingGETWithHttpInfo();
        return $response;
    }

    /**
     * Operation describeProgramMemberUsingGETWithHttpInfo
     *
     * Describe Program Member
     *
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Lead\Model\ResponseOfProgramMemberAttributes, HTTP status code, HTTP response headers (array of strings)
     */
    public function describeProgramMemberUsingGETWithHttpInfo()
    {
        $request = $this->describeProgramMemberUsingGETRequest();

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfProgramMemberAttributes');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfProgramMemberAttributes');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Lead\Model\ResponseOfProgramMemberAttributes',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation describeProgramMemberUsingGETAsync
     *
     * Describe Program Member
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function describeProgramMemberUsingGETAsync()
    {
        return $this->describeProgramMemberUsingGETAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation describeProgramMemberUsingGETAsyncWithHttpInfo
     *
     * Describe Program Member
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function describeProgramMemberUsingGETAsyncWithHttpInfo()
    {
        $request = $this->describeProgramMemberUsingGETRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfProgramMemberAttributes');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'describeProgramMemberUsingGET'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function describeProgramMemberUsingGETRequest()
    {

        $resourcePath = '/rest/v1/program/members/describe.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation describeUsingGET2
     *
     * Describe Lead
     *
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadAttribute
     */
    public function describeUsingGET2()
    {
        list($response) = $this->describeUsingGET2WithHttpInfo();
        return $response;
    }

    /**
     * Operation describeUsingGET2WithHttpInfo
     *
     * Describe Lead
     *
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadAttribute, HTTP status code, HTTP response headers (array of strings)
     */
    public function describeUsingGET2WithHttpInfo()
    {
        $request = $this->describeUsingGET2Request();

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadAttribute');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadAttribute');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadAttribute',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation describeUsingGET2Async
     *
     * Describe Lead
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function describeUsingGET2Async()
    {
        return $this->describeUsingGET2AsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation describeUsingGET2AsyncWithHttpInfo
     *
     * Describe Lead
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function describeUsingGET2AsyncWithHttpInfo()
    {
        $request = $this->describeUsingGET2Request();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadAttribute');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'describeUsingGET2'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function describeUsingGET2Request()
    {

        $resourcePath = '/rest/v1/leads/describe.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation describeUsingGET6
     *
     * Describe Lead2
     *
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadAttribute2
     */
    public function describeUsingGET6()
    {
        list($response) = $this->describeUsingGET6WithHttpInfo();
        return $response;
    }

    /**
     * Operation describeUsingGET6WithHttpInfo
     *
     * Describe Lead2
     *
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadAttribute2, HTTP status code, HTTP response headers (array of strings)
     */
    public function describeUsingGET6WithHttpInfo()
    {
        $request = $this->describeUsingGET6Request();

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadAttribute2');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadAttribute2');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadAttribute2',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation describeUsingGET6Async
     *
     * Describe Lead2
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function describeUsingGET6Async()
    {
        return $this->describeUsingGET6AsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation describeUsingGET6AsyncWithHttpInfo
     *
     * Describe Lead2
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function describeUsingGET6AsyncWithHttpInfo()
    {
        $request = $this->describeUsingGET6Request();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadAttribute2');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'describeUsingGET6'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function describeUsingGET6Request()
    {

        $resourcePath = '/rest/v1/leads/describe2.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLeadByIdUsingGET
     *
     * Get Lead by Id
     *
     * @param  int $lead_id The Marketo lead id (required)
     * @param  string[] $fields Comma separated list of field names. If omitted, the following default fields will be returned: email, updatedAt, createdAt, lastName, firstName, and id. (optional)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfLead
     */
    public function getLeadByIdUsingGET($lead_id, $fields = null)
    {
        list($response) = $this->getLeadByIdUsingGETWithHttpInfo($lead_id, $fields);
        return $response;
    }

    /**
     * Operation getLeadByIdUsingGETWithHttpInfo
     *
     * Get Lead by Id
     *
     * @param  int $lead_id The Marketo lead id (required)
     * @param  string[] $fields Comma separated list of field names. If omitted, the following default fields will be returned: email, updatedAt, createdAt, lastName, firstName, and id. (optional)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Lead\Model\ResponseOfLead, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLeadByIdUsingGETWithHttpInfo($lead_id, $fields = null)
    {
        $request = $this->getLeadByIdUsingGETRequest($lead_id, $fields);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfLead');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfLead');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Lead\Model\ResponseOfLead',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLeadByIdUsingGETAsync
     *
     * Get Lead by Id
     *
     * @param  int $lead_id The Marketo lead id (required)
     * @param  string[] $fields Comma separated list of field names. If omitted, the following default fields will be returned: email, updatedAt, createdAt, lastName, firstName, and id. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLeadByIdUsingGETAsync($lead_id, $fields = null)
    {
        return $this->getLeadByIdUsingGETAsyncWithHttpInfo($lead_id, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLeadByIdUsingGETAsyncWithHttpInfo
     *
     * Get Lead by Id
     *
     * @param  int $lead_id The Marketo lead id (required)
     * @param  string[] $fields Comma separated list of field names. If omitted, the following default fields will be returned: email, updatedAt, createdAt, lastName, firstName, and id. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLeadByIdUsingGETAsyncWithHttpInfo($lead_id, $fields = null)
    {
        $request = $this->getLeadByIdUsingGETRequest($lead_id, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfLead');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLeadByIdUsingGET'
     *
     * @param  int $lead_id The Marketo lead id (required)
     * @param  string[] $fields Comma separated list of field names. If omitted, the following default fields will be returned: email, updatedAt, createdAt, lastName, firstName, and id. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLeadByIdUsingGETRequest($lead_id, $fields = null)
    {
        // Verify the required parameter 'lead_id' is set.
        if ($lead_id === null || (is_array($lead_id) && empty($lead_id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lead_id when calling getLeadByIdUsingGET'
            );
        }

        $resourcePath = '/rest/v1/lead/{leadId}.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Query parameters.
        if (is_array($fields)) {
            $fields = ObjectSerializer::serializeCollection($fields, 'multi', true);
        }
        $queryParams['fields'] = $fields;
        // Remove any null (optional values).
        $queryParams = array_filter($queryParams, function($v) { return $v !== null; });

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'leadId' . '}',
            ObjectSerializer::toPathValue($lead_id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLeadPartitionsUsingGET
     *
     * Get Lead Partitions
     *
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadPartition
     */
    public function getLeadPartitionsUsingGET()
    {
        list($response) = $this->getLeadPartitionsUsingGETWithHttpInfo();
        return $response;
    }

    /**
     * Operation getLeadPartitionsUsingGETWithHttpInfo
     *
     * Get Lead Partitions
     *
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadPartition, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLeadPartitionsUsingGETWithHttpInfo()
    {
        $request = $this->getLeadPartitionsUsingGETRequest();

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadPartition');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadPartition');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadPartition',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLeadPartitionsUsingGETAsync
     *
     * Get Lead Partitions
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLeadPartitionsUsingGETAsync()
    {
        return $this->getLeadPartitionsUsingGETAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLeadPartitionsUsingGETAsyncWithHttpInfo
     *
     * Get Lead Partitions
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLeadPartitionsUsingGETAsyncWithHttpInfo()
    {
        $request = $this->getLeadPartitionsUsingGETRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadPartition');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLeadPartitionsUsingGET'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLeadPartitionsUsingGETRequest()
    {

        $resourcePath = '/rest/v1/leads/partitions.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLeadsByFilterUsingGET
     *
     * Get Leads by Filter Type
     *
     * @param  string $filter_type The lead field to filter on.  Any custom field (string, email, or integer types only), and any of the following fields are supported: cookies, email, facebookId, id, leadPartitionId, linkedInId, sfdcAccountId, sfdcContactId, sfdcLeadId, sfdcLeadOwnerId, sfdcOpptyId, twitterId.&lt;br&gt;&lt;br&gt;A comprehensive list of fields can be obtained via the &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/endpoint-reference/lead-database-endpoint-reference/#!/Leads/describeUsingGET_6\&quot;&gt;Describe Lead2&lt;/a&gt; endpoint. (required)
     * @param  string[] $filter_values A comma-separated list of values to filter on in the specified fields. (required)
     * @param  string[] $fields A comma-separated list of lead fields to return for each record (optional)
     * @param  int $batch_size The batch size to return.  The max and default value is 300. (optional)
     * @param  string $next_page_token A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info. (optional)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfLead
     */
    public function getLeadsByFilterUsingGET($filter_type, $filter_values, $fields = null, $batch_size = null, $next_page_token = null)
    {
        list($response) = $this->getLeadsByFilterUsingGETWithHttpInfo($filter_type, $filter_values, $fields, $batch_size, $next_page_token);
        return $response;
    }

    /**
     * Operation getLeadsByFilterUsingGETWithHttpInfo
     *
     * Get Leads by Filter Type
     *
     * @param  string $filter_type The lead field to filter on.  Any custom field (string, email, or integer types only), and any of the following fields are supported: cookies, email, facebookId, id, leadPartitionId, linkedInId, sfdcAccountId, sfdcContactId, sfdcLeadId, sfdcLeadOwnerId, sfdcOpptyId, twitterId.&lt;br&gt;&lt;br&gt;A comprehensive list of fields can be obtained via the &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/endpoint-reference/lead-database-endpoint-reference/#!/Leads/describeUsingGET_6\&quot;&gt;Describe Lead2&lt;/a&gt; endpoint. (required)
     * @param  string[] $filter_values A comma-separated list of values to filter on in the specified fields. (required)
     * @param  string[] $fields A comma-separated list of lead fields to return for each record (optional)
     * @param  int $batch_size The batch size to return.  The max and default value is 300. (optional)
     * @param  string $next_page_token A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info. (optional)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Lead\Model\ResponseOfLead, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLeadsByFilterUsingGETWithHttpInfo($filter_type, $filter_values, $fields = null, $batch_size = null, $next_page_token = null)
    {
        $request = $this->getLeadsByFilterUsingGETRequest($filter_type, $filter_values, $fields, $batch_size, $next_page_token);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfLead');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfLead');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Lead\Model\ResponseOfLead',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLeadsByFilterUsingGETAsync
     *
     * Get Leads by Filter Type
     *
     * @param  string $filter_type The lead field to filter on.  Any custom field (string, email, or integer types only), and any of the following fields are supported: cookies, email, facebookId, id, leadPartitionId, linkedInId, sfdcAccountId, sfdcContactId, sfdcLeadId, sfdcLeadOwnerId, sfdcOpptyId, twitterId.&lt;br&gt;&lt;br&gt;A comprehensive list of fields can be obtained via the &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/endpoint-reference/lead-database-endpoint-reference/#!/Leads/describeUsingGET_6\&quot;&gt;Describe Lead2&lt;/a&gt; endpoint. (required)
     * @param  string[] $filter_values A comma-separated list of values to filter on in the specified fields. (required)
     * @param  string[] $fields A comma-separated list of lead fields to return for each record (optional)
     * @param  int $batch_size The batch size to return.  The max and default value is 300. (optional)
     * @param  string $next_page_token A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLeadsByFilterUsingGETAsync($filter_type, $filter_values, $fields = null, $batch_size = null, $next_page_token = null)
    {
        return $this->getLeadsByFilterUsingGETAsyncWithHttpInfo($filter_type, $filter_values, $fields, $batch_size, $next_page_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLeadsByFilterUsingGETAsyncWithHttpInfo
     *
     * Get Leads by Filter Type
     *
     * @param  string $filter_type The lead field to filter on.  Any custom field (string, email, or integer types only), and any of the following fields are supported: cookies, email, facebookId, id, leadPartitionId, linkedInId, sfdcAccountId, sfdcContactId, sfdcLeadId, sfdcLeadOwnerId, sfdcOpptyId, twitterId.&lt;br&gt;&lt;br&gt;A comprehensive list of fields can be obtained via the &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/endpoint-reference/lead-database-endpoint-reference/#!/Leads/describeUsingGET_6\&quot;&gt;Describe Lead2&lt;/a&gt; endpoint. (required)
     * @param  string[] $filter_values A comma-separated list of values to filter on in the specified fields. (required)
     * @param  string[] $fields A comma-separated list of lead fields to return for each record (optional)
     * @param  int $batch_size The batch size to return.  The max and default value is 300. (optional)
     * @param  string $next_page_token A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLeadsByFilterUsingGETAsyncWithHttpInfo($filter_type, $filter_values, $fields = null, $batch_size = null, $next_page_token = null)
    {
        $request = $this->getLeadsByFilterUsingGETRequest($filter_type, $filter_values, $fields, $batch_size, $next_page_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfLead');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLeadsByFilterUsingGET'
     *
     * @param  string $filter_type The lead field to filter on.  Any custom field (string, email, or integer types only), and any of the following fields are supported: cookies, email, facebookId, id, leadPartitionId, linkedInId, sfdcAccountId, sfdcContactId, sfdcLeadId, sfdcLeadOwnerId, sfdcOpptyId, twitterId.&lt;br&gt;&lt;br&gt;A comprehensive list of fields can be obtained via the &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/endpoint-reference/lead-database-endpoint-reference/#!/Leads/describeUsingGET_6\&quot;&gt;Describe Lead2&lt;/a&gt; endpoint. (required)
     * @param  string[] $filter_values A comma-separated list of values to filter on in the specified fields. (required)
     * @param  string[] $fields A comma-separated list of lead fields to return for each record (optional)
     * @param  int $batch_size The batch size to return.  The max and default value is 300. (optional)
     * @param  string $next_page_token A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLeadsByFilterUsingGETRequest($filter_type, $filter_values, $fields = null, $batch_size = null, $next_page_token = null)
    {
        // Verify the required parameter 'filter_type' is set.
        if ($filter_type === null || (is_array($filter_type) && empty($filter_type))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $filter_type when calling getLeadsByFilterUsingGET'
            );
        }
        // Verify the required parameter 'filter_values' is set.
        if ($filter_values === null || (is_array($filter_values) && empty($filter_values))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $filter_values when calling getLeadsByFilterUsingGET'
            );
        }

        $resourcePath = '/rest/v1/leads.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Query parameters.
        if (is_array($filter_type)) {
            $filter_type = ObjectSerializer::serializeCollection($filter_type, '', true);
        }
        $queryParams['filterType'] = $filter_type;
        if (is_array($filter_values)) {
            $filter_values = ObjectSerializer::serializeCollection($filter_values, 'multi', true);
        }
        $queryParams['filterValues'] = $filter_values;
        if (is_array($fields)) {
            $fields = ObjectSerializer::serializeCollection($fields, 'multi', true);
        }
        $queryParams['fields'] = $fields;
        if (is_array($batch_size)) {
            $batch_size = ObjectSerializer::serializeCollection($batch_size, '', true);
        }
        $queryParams['batchSize'] = $batch_size;
        if (is_array($next_page_token)) {
            $next_page_token = ObjectSerializer::serializeCollection($next_page_token, '', true);
        }
        $queryParams['nextPageToken'] = $next_page_token;
        // Remove any null (optional values).
        $queryParams = array_filter($queryParams, function($v) { return $v !== null; });
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLeadsByProgramIdUsingGET
     *
     * Get Leads by Program Id
     *
     * @param  int $program_id The id of the program to retrieve from (required)
     * @param  string[] $fields A comma-separated list of fields to be returned for each record (optional)
     * @param  int $batch_size The batch size to return.  The max and default value is 300. (optional)
     * @param  string $next_page_token A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info. (optional)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfLead
     */
    public function getLeadsByProgramIdUsingGET($program_id, $fields = null, $batch_size = null, $next_page_token = null)
    {
        list($response) = $this->getLeadsByProgramIdUsingGETWithHttpInfo($program_id, $fields, $batch_size, $next_page_token);
        return $response;
    }

    /**
     * Operation getLeadsByProgramIdUsingGETWithHttpInfo
     *
     * Get Leads by Program Id
     *
     * @param  int $program_id The id of the program to retrieve from (required)
     * @param  string[] $fields A comma-separated list of fields to be returned for each record (optional)
     * @param  int $batch_size The batch size to return.  The max and default value is 300. (optional)
     * @param  string $next_page_token A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info. (optional)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Lead\Model\ResponseOfLead, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLeadsByProgramIdUsingGETWithHttpInfo($program_id, $fields = null, $batch_size = null, $next_page_token = null)
    {
        $request = $this->getLeadsByProgramIdUsingGETRequest($program_id, $fields, $batch_size, $next_page_token);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfLead');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfLead');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Lead\Model\ResponseOfLead',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLeadsByProgramIdUsingGETAsync
     *
     * Get Leads by Program Id
     *
     * @param  int $program_id The id of the program to retrieve from (required)
     * @param  string[] $fields A comma-separated list of fields to be returned for each record (optional)
     * @param  int $batch_size The batch size to return.  The max and default value is 300. (optional)
     * @param  string $next_page_token A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLeadsByProgramIdUsingGETAsync($program_id, $fields = null, $batch_size = null, $next_page_token = null)
    {
        return $this->getLeadsByProgramIdUsingGETAsyncWithHttpInfo($program_id, $fields, $batch_size, $next_page_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLeadsByProgramIdUsingGETAsyncWithHttpInfo
     *
     * Get Leads by Program Id
     *
     * @param  int $program_id The id of the program to retrieve from (required)
     * @param  string[] $fields A comma-separated list of fields to be returned for each record (optional)
     * @param  int $batch_size The batch size to return.  The max and default value is 300. (optional)
     * @param  string $next_page_token A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLeadsByProgramIdUsingGETAsyncWithHttpInfo($program_id, $fields = null, $batch_size = null, $next_page_token = null)
    {
        $request = $this->getLeadsByProgramIdUsingGETRequest($program_id, $fields, $batch_size, $next_page_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfLead');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLeadsByProgramIdUsingGET'
     *
     * @param  int $program_id The id of the program to retrieve from (required)
     * @param  string[] $fields A comma-separated list of fields to be returned for each record (optional)
     * @param  int $batch_size The batch size to return.  The max and default value is 300. (optional)
     * @param  string $next_page_token A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLeadsByProgramIdUsingGETRequest($program_id, $fields = null, $batch_size = null, $next_page_token = null)
    {
        // Verify the required parameter 'program_id' is set.
        if ($program_id === null || (is_array($program_id) && empty($program_id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $program_id when calling getLeadsByProgramIdUsingGET'
            );
        }

        $resourcePath = '/rest/v1/leads/programs/{programId}.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Query parameters.
        if (is_array($fields)) {
            $fields = ObjectSerializer::serializeCollection($fields, 'multi', true);
        }
        $queryParams['fields'] = $fields;
        if (is_array($batch_size)) {
            $batch_size = ObjectSerializer::serializeCollection($batch_size, '', true);
        }
        $queryParams['batchSize'] = $batch_size;
        if (is_array($next_page_token)) {
            $next_page_token = ObjectSerializer::serializeCollection($next_page_token, '', true);
        }
        $queryParams['nextPageToken'] = $next_page_token;
        // Remove any null (optional values).
        $queryParams = array_filter($queryParams, function($v) { return $v !== null; });

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'programId' . '}',
            ObjectSerializer::toPathValue($program_id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getListMembershipUsingGET
     *
     * Get Lists by Lead Id
     *
     * @param  int $lead_id The Marketo lead id (required)
     * @param  string $next_page_token A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info. (optional)
     * @param  int $batch_size Maximum number of records to return.  Maximum and default is 300. (optional)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfLists
     */
    public function getListMembershipUsingGET($lead_id, $next_page_token = null, $batch_size = null)
    {
        list($response) = $this->getListMembershipUsingGETWithHttpInfo($lead_id, $next_page_token, $batch_size);
        return $response;
    }

    /**
     * Operation getListMembershipUsingGETWithHttpInfo
     *
     * Get Lists by Lead Id
     *
     * @param  int $lead_id The Marketo lead id (required)
     * @param  string $next_page_token A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info. (optional)
     * @param  int $batch_size Maximum number of records to return.  Maximum and default is 300. (optional)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Lead\Model\ResponseOfLists, HTTP status code, HTTP response headers (array of strings)
     */
    public function getListMembershipUsingGETWithHttpInfo($lead_id, $next_page_token = null, $batch_size = null)
    {
        $request = $this->getListMembershipUsingGETRequest($lead_id, $next_page_token, $batch_size);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfLists');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfLists');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Lead\Model\ResponseOfLists',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getListMembershipUsingGETAsync
     *
     * Get Lists by Lead Id
     *
     * @param  int $lead_id The Marketo lead id (required)
     * @param  string $next_page_token A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info. (optional)
     * @param  int $batch_size Maximum number of records to return.  Maximum and default is 300. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getListMembershipUsingGETAsync($lead_id, $next_page_token = null, $batch_size = null)
    {
        return $this->getListMembershipUsingGETAsyncWithHttpInfo($lead_id, $next_page_token, $batch_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getListMembershipUsingGETAsyncWithHttpInfo
     *
     * Get Lists by Lead Id
     *
     * @param  int $lead_id The Marketo lead id (required)
     * @param  string $next_page_token A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info. (optional)
     * @param  int $batch_size Maximum number of records to return.  Maximum and default is 300. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getListMembershipUsingGETAsyncWithHttpInfo($lead_id, $next_page_token = null, $batch_size = null)
    {
        $request = $this->getListMembershipUsingGETRequest($lead_id, $next_page_token, $batch_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfLists');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'getListMembershipUsingGET'
     *
     * @param  int $lead_id The Marketo lead id (required)
     * @param  string $next_page_token A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info. (optional)
     * @param  int $batch_size Maximum number of records to return.  Maximum and default is 300. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getListMembershipUsingGETRequest($lead_id, $next_page_token = null, $batch_size = null)
    {
        // Verify the required parameter 'lead_id' is set.
        if ($lead_id === null || (is_array($lead_id) && empty($lead_id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lead_id when calling getListMembershipUsingGET'
            );
        }

        $resourcePath = '/rest/v1/leads/{leadId}/listMembership.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Query parameters.
        if (is_array($next_page_token)) {
            $next_page_token = ObjectSerializer::serializeCollection($next_page_token, '', true);
        }
        $queryParams['nextPageToken'] = $next_page_token;
        if (is_array($batch_size)) {
            $batch_size = ObjectSerializer::serializeCollection($batch_size, '', true);
        }
        $queryParams['batchSize'] = $batch_size;
        // Remove any null (optional values).
        $queryParams = array_filter($queryParams, function($v) { return $v !== null; });

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'leadId' . '}',
            ObjectSerializer::toPathValue($lead_id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProgramMembershipUsingGET
     *
     * Get Programs by Lead Id
     *
     * @param  int $lead_id The Marketo lead id (required)
     * @param  string $next_page_token A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info. (optional)
     * @param  int $batch_size Maximum number of records to return.  Maximum and default is 300. (optional)
     * @param  string $earliest_updated_at Exclude programs prior to this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description. (optional)
     * @param  string $latest_updated_at Exclude programs after this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description. (optional)
     * @param  string $filter_type Set to \&quot;programId\&quot; to filter a set of programs. (optional)
     * @param  string[] $filter_values Comma-separated list of program ids to match against (optional)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfPrograms
     */
    public function getProgramMembershipUsingGET($lead_id, $next_page_token = null, $batch_size = null, $earliest_updated_at = null, $latest_updated_at = null, $filter_type = null, $filter_values = null)
    {
        list($response) = $this->getProgramMembershipUsingGETWithHttpInfo($lead_id, $next_page_token, $batch_size, $earliest_updated_at, $latest_updated_at, $filter_type, $filter_values);
        return $response;
    }

    /**
     * Operation getProgramMembershipUsingGETWithHttpInfo
     *
     * Get Programs by Lead Id
     *
     * @param  int $lead_id The Marketo lead id (required)
     * @param  string $next_page_token A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info. (optional)
     * @param  int $batch_size Maximum number of records to return.  Maximum and default is 300. (optional)
     * @param  string $earliest_updated_at Exclude programs prior to this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description. (optional)
     * @param  string $latest_updated_at Exclude programs after this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description. (optional)
     * @param  string $filter_type Set to \&quot;programId\&quot; to filter a set of programs. (optional)
     * @param  string[] $filter_values Comma-separated list of program ids to match against (optional)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Lead\Model\ResponseOfPrograms, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProgramMembershipUsingGETWithHttpInfo($lead_id, $next_page_token = null, $batch_size = null, $earliest_updated_at = null, $latest_updated_at = null, $filter_type = null, $filter_values = null)
    {
        $request = $this->getProgramMembershipUsingGETRequest($lead_id, $next_page_token, $batch_size, $earliest_updated_at, $latest_updated_at, $filter_type, $filter_values);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfPrograms');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfPrograms');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Lead\Model\ResponseOfPrograms',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProgramMembershipUsingGETAsync
     *
     * Get Programs by Lead Id
     *
     * @param  int $lead_id The Marketo lead id (required)
     * @param  string $next_page_token A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info. (optional)
     * @param  int $batch_size Maximum number of records to return.  Maximum and default is 300. (optional)
     * @param  string $earliest_updated_at Exclude programs prior to this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description. (optional)
     * @param  string $latest_updated_at Exclude programs after this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description. (optional)
     * @param  string $filter_type Set to \&quot;programId\&quot; to filter a set of programs. (optional)
     * @param  string[] $filter_values Comma-separated list of program ids to match against (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProgramMembershipUsingGETAsync($lead_id, $next_page_token = null, $batch_size = null, $earliest_updated_at = null, $latest_updated_at = null, $filter_type = null, $filter_values = null)
    {
        return $this->getProgramMembershipUsingGETAsyncWithHttpInfo($lead_id, $next_page_token, $batch_size, $earliest_updated_at, $latest_updated_at, $filter_type, $filter_values)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProgramMembershipUsingGETAsyncWithHttpInfo
     *
     * Get Programs by Lead Id
     *
     * @param  int $lead_id The Marketo lead id (required)
     * @param  string $next_page_token A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info. (optional)
     * @param  int $batch_size Maximum number of records to return.  Maximum and default is 300. (optional)
     * @param  string $earliest_updated_at Exclude programs prior to this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description. (optional)
     * @param  string $latest_updated_at Exclude programs after this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description. (optional)
     * @param  string $filter_type Set to \&quot;programId\&quot; to filter a set of programs. (optional)
     * @param  string[] $filter_values Comma-separated list of program ids to match against (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProgramMembershipUsingGETAsyncWithHttpInfo($lead_id, $next_page_token = null, $batch_size = null, $earliest_updated_at = null, $latest_updated_at = null, $filter_type = null, $filter_values = null)
    {
        $request = $this->getProgramMembershipUsingGETRequest($lead_id, $next_page_token, $batch_size, $earliest_updated_at, $latest_updated_at, $filter_type, $filter_values);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfPrograms');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProgramMembershipUsingGET'
     *
     * @param  int $lead_id The Marketo lead id (required)
     * @param  string $next_page_token A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info. (optional)
     * @param  int $batch_size Maximum number of records to return.  Maximum and default is 300. (optional)
     * @param  string $earliest_updated_at Exclude programs prior to this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description. (optional)
     * @param  string $latest_updated_at Exclude programs after this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description. (optional)
     * @param  string $filter_type Set to \&quot;programId\&quot; to filter a set of programs. (optional)
     * @param  string[] $filter_values Comma-separated list of program ids to match against (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getProgramMembershipUsingGETRequest($lead_id, $next_page_token = null, $batch_size = null, $earliest_updated_at = null, $latest_updated_at = null, $filter_type = null, $filter_values = null)
    {
        // Verify the required parameter 'lead_id' is set.
        if ($lead_id === null || (is_array($lead_id) && empty($lead_id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lead_id when calling getProgramMembershipUsingGET'
            );
        }

        $resourcePath = '/rest/v1/leads/{leadId}/programMembership.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Query parameters.
        if (is_array($next_page_token)) {
            $next_page_token = ObjectSerializer::serializeCollection($next_page_token, '', true);
        }
        $queryParams['nextPageToken'] = $next_page_token;
        if (is_array($batch_size)) {
            $batch_size = ObjectSerializer::serializeCollection($batch_size, '', true);
        }
        $queryParams['batchSize'] = $batch_size;
        if (is_array($earliest_updated_at)) {
            $earliest_updated_at = ObjectSerializer::serializeCollection($earliest_updated_at, '', true);
        }
        $queryParams['earliestUpdatedAt'] = $earliest_updated_at;
        if (is_array($latest_updated_at)) {
            $latest_updated_at = ObjectSerializer::serializeCollection($latest_updated_at, '', true);
        }
        $queryParams['latestUpdatedAt'] = $latest_updated_at;
        if (is_array($filter_type)) {
            $filter_type = ObjectSerializer::serializeCollection($filter_type, '', true);
        }
        $queryParams['filterType'] = $filter_type;
        if (is_array($filter_values)) {
            $filter_values = ObjectSerializer::serializeCollection($filter_values, 'multi', true);
        }
        $queryParams['filterValues'] = $filter_values;
        // Remove any null (optional values).
        $queryParams = array_filter($queryParams, function($v) { return $v !== null; });

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'leadId' . '}',
            ObjectSerializer::toPathValue($lead_id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSmartCampaignMembershipUsingGET
     *
     * Get Smart Campaigns by Lead Id
     *
     * @param  int $lead_id The Marketo lead id (required)
     * @param  string $next_page_token A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info. (optional)
     * @param  int $batch_size Maximum number of records to return.  Maximum and default is 300. (optional)
     * @param  string $earliest_updated_at Exclude smart campaigns prior to this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description. (optional)
     * @param  string $latest_updated_at Exclude smart campaigns after this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description. (optional)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfSmartCampaigns
     */
    public function getSmartCampaignMembershipUsingGET($lead_id, $next_page_token = null, $batch_size = null, $earliest_updated_at = null, $latest_updated_at = null)
    {
        list($response) = $this->getSmartCampaignMembershipUsingGETWithHttpInfo($lead_id, $next_page_token, $batch_size, $earliest_updated_at, $latest_updated_at);
        return $response;
    }

    /**
     * Operation getSmartCampaignMembershipUsingGETWithHttpInfo
     *
     * Get Smart Campaigns by Lead Id
     *
     * @param  int $lead_id The Marketo lead id (required)
     * @param  string $next_page_token A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info. (optional)
     * @param  int $batch_size Maximum number of records to return.  Maximum and default is 300. (optional)
     * @param  string $earliest_updated_at Exclude smart campaigns prior to this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description. (optional)
     * @param  string $latest_updated_at Exclude smart campaigns after this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description. (optional)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Lead\Model\ResponseOfSmartCampaigns, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSmartCampaignMembershipUsingGETWithHttpInfo($lead_id, $next_page_token = null, $batch_size = null, $earliest_updated_at = null, $latest_updated_at = null)
    {
        $request = $this->getSmartCampaignMembershipUsingGETRequest($lead_id, $next_page_token, $batch_size, $earliest_updated_at, $latest_updated_at);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfSmartCampaigns');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfSmartCampaigns');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Lead\Model\ResponseOfSmartCampaigns',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSmartCampaignMembershipUsingGETAsync
     *
     * Get Smart Campaigns by Lead Id
     *
     * @param  int $lead_id The Marketo lead id (required)
     * @param  string $next_page_token A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info. (optional)
     * @param  int $batch_size Maximum number of records to return.  Maximum and default is 300. (optional)
     * @param  string $earliest_updated_at Exclude smart campaigns prior to this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description. (optional)
     * @param  string $latest_updated_at Exclude smart campaigns after this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSmartCampaignMembershipUsingGETAsync($lead_id, $next_page_token = null, $batch_size = null, $earliest_updated_at = null, $latest_updated_at = null)
    {
        return $this->getSmartCampaignMembershipUsingGETAsyncWithHttpInfo($lead_id, $next_page_token, $batch_size, $earliest_updated_at, $latest_updated_at)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSmartCampaignMembershipUsingGETAsyncWithHttpInfo
     *
     * Get Smart Campaigns by Lead Id
     *
     * @param  int $lead_id The Marketo lead id (required)
     * @param  string $next_page_token A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info. (optional)
     * @param  int $batch_size Maximum number of records to return.  Maximum and default is 300. (optional)
     * @param  string $earliest_updated_at Exclude smart campaigns prior to this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description. (optional)
     * @param  string $latest_updated_at Exclude smart campaigns after this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSmartCampaignMembershipUsingGETAsyncWithHttpInfo($lead_id, $next_page_token = null, $batch_size = null, $earliest_updated_at = null, $latest_updated_at = null)
    {
        $request = $this->getSmartCampaignMembershipUsingGETRequest($lead_id, $next_page_token, $batch_size, $earliest_updated_at, $latest_updated_at);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfSmartCampaigns');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSmartCampaignMembershipUsingGET'
     *
     * @param  int $lead_id The Marketo lead id (required)
     * @param  string $next_page_token A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info. (optional)
     * @param  int $batch_size Maximum number of records to return.  Maximum and default is 300. (optional)
     * @param  string $earliest_updated_at Exclude smart campaigns prior to this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description. (optional)
     * @param  string $latest_updated_at Exclude smart campaigns after this date. Must be valid ISO-8601 string.  See &lt;a href&#x3D;\&quot;http://developers.marketo.com/rest-api/lead-database/fields/field-types/\&quot;&gt;Datetime&lt;/a&gt; field type description. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSmartCampaignMembershipUsingGETRequest($lead_id, $next_page_token = null, $batch_size = null, $earliest_updated_at = null, $latest_updated_at = null)
    {
        // Verify the required parameter 'lead_id' is set.
        if ($lead_id === null || (is_array($lead_id) && empty($lead_id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lead_id when calling getSmartCampaignMembershipUsingGET'
            );
        }

        $resourcePath = '/rest/v1/leads/{leadId}/smartCampaignMembership.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Query parameters.
        if (is_array($next_page_token)) {
            $next_page_token = ObjectSerializer::serializeCollection($next_page_token, '', true);
        }
        $queryParams['nextPageToken'] = $next_page_token;
        if (is_array($batch_size)) {
            $batch_size = ObjectSerializer::serializeCollection($batch_size, '', true);
        }
        $queryParams['batchSize'] = $batch_size;
        if (is_array($earliest_updated_at)) {
            $earliest_updated_at = ObjectSerializer::serializeCollection($earliest_updated_at, '', true);
        }
        $queryParams['earliestUpdatedAt'] = $earliest_updated_at;
        if (is_array($latest_updated_at)) {
            $latest_updated_at = ObjectSerializer::serializeCollection($latest_updated_at, '', true);
        }
        $queryParams['latestUpdatedAt'] = $latest_updated_at;
        // Remove any null (optional values).
        $queryParams = array_filter($queryParams, function($v) { return $v !== null; });

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'leadId' . '}',
            ObjectSerializer::toPathValue($lead_id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mergeLeadsUsingPOST
     *
     * Merge Leads
     *
     * @param  int $lead_id The id of the winning lead record (required)
     * @param  int $lead_id2 The id of the losing record (optional)
     * @param  int[] $lead_ids A comma-separated list of ids of losing records (optional)
     * @param  bool $merge_in_crm If set, will attempt to merge the designated records in a natively-synched CRM.  Only valid for instances with are natively synched to SFDC. (optional)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseWithoutResult
     */
    public function mergeLeadsUsingPOST($lead_id, $lead_id2 = null, $lead_ids = null, $merge_in_crm = null)
    {
        list($response) = $this->mergeLeadsUsingPOSTWithHttpInfo($lead_id, $lead_id2, $lead_ids, $merge_in_crm);
        return $response;
    }

    /**
     * Operation mergeLeadsUsingPOSTWithHttpInfo
     *
     * Merge Leads
     *
     * @param  int $lead_id The id of the winning lead record (required)
     * @param  int $lead_id2 The id of the losing record (optional)
     * @param  int[] $lead_ids A comma-separated list of ids of losing records (optional)
     * @param  bool $merge_in_crm If set, will attempt to merge the designated records in a natively-synched CRM.  Only valid for instances with are natively synched to SFDC. (optional)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Lead\Model\ResponseWithoutResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function mergeLeadsUsingPOSTWithHttpInfo($lead_id, $lead_id2 = null, $lead_ids = null, $merge_in_crm = null)
    {
        $request = $this->mergeLeadsUsingPOSTRequest($lead_id, $lead_id2, $lead_ids, $merge_in_crm);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseWithoutResult');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseWithoutResult');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Lead\Model\ResponseWithoutResult',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation mergeLeadsUsingPOSTAsync
     *
     * Merge Leads
     *
     * @param  int $lead_id The id of the winning lead record (required)
     * @param  int $lead_id2 The id of the losing record (optional)
     * @param  int[] $lead_ids A comma-separated list of ids of losing records (optional)
     * @param  bool $merge_in_crm If set, will attempt to merge the designated records in a natively-synched CRM.  Only valid for instances with are natively synched to SFDC. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mergeLeadsUsingPOSTAsync($lead_id, $lead_id2 = null, $lead_ids = null, $merge_in_crm = null)
    {
        return $this->mergeLeadsUsingPOSTAsyncWithHttpInfo($lead_id, $lead_id2, $lead_ids, $merge_in_crm)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mergeLeadsUsingPOSTAsyncWithHttpInfo
     *
     * Merge Leads
     *
     * @param  int $lead_id The id of the winning lead record (required)
     * @param  int $lead_id2 The id of the losing record (optional)
     * @param  int[] $lead_ids A comma-separated list of ids of losing records (optional)
     * @param  bool $merge_in_crm If set, will attempt to merge the designated records in a natively-synched CRM.  Only valid for instances with are natively synched to SFDC. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mergeLeadsUsingPOSTAsyncWithHttpInfo($lead_id, $lead_id2 = null, $lead_ids = null, $merge_in_crm = null)
    {
        $request = $this->mergeLeadsUsingPOSTRequest($lead_id, $lead_id2, $lead_ids, $merge_in_crm);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseWithoutResult');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'mergeLeadsUsingPOST'
     *
     * @param  int $lead_id The id of the winning lead record (required)
     * @param  int $lead_id2 The id of the losing record (optional)
     * @param  int[] $lead_ids A comma-separated list of ids of losing records (optional)
     * @param  bool $merge_in_crm If set, will attempt to merge the designated records in a natively-synched CRM.  Only valid for instances with are natively synched to SFDC. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function mergeLeadsUsingPOSTRequest($lead_id, $lead_id2 = null, $lead_ids = null, $merge_in_crm = null)
    {
        // Verify the required parameter 'lead_id' is set.
        if ($lead_id === null || (is_array($lead_id) && empty($lead_id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lead_id when calling mergeLeadsUsingPOST'
            );
        }

        $resourcePath = '/rest/v1/leads/{leadId}/merge.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Query parameters.
        if (is_array($lead_id2)) {
            $lead_id2 = ObjectSerializer::serializeCollection($lead_id2, '', true);
        }
        $queryParams['leadId'] = $lead_id2;
        if (is_array($lead_ids)) {
            $lead_ids = ObjectSerializer::serializeCollection($lead_ids, 'multi', true);
        }
        $queryParams['leadIds'] = $lead_ids;
        if (is_array($merge_in_crm)) {
            $merge_in_crm = ObjectSerializer::serializeCollection($merge_in_crm, '', true);
        }
        $queryParams['mergeInCRM'] = $merge_in_crm;
        // Remove any null (optional values).
        $queryParams = array_filter($queryParams, function($v) { return $v !== null; });

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'leadId' . '}',
            ObjectSerializer::toPathValue($lead_id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pushToMarketoUsingPOST
     *
     * Push Lead to Marketo
     *
     * @param  \NecLimDul\MarketoRest\Lead\Model\PushLeadToMarketoRequest $push_lead_to_marketo_request pushLeadToMarketoRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfPushLeadToMarketo
     */
    public function pushToMarketoUsingPOST($push_lead_to_marketo_request)
    {
        list($response) = $this->pushToMarketoUsingPOSTWithHttpInfo($push_lead_to_marketo_request);
        return $response;
    }

    /**
     * Operation pushToMarketoUsingPOSTWithHttpInfo
     *
     * Push Lead to Marketo
     *
     * @param  \NecLimDul\MarketoRest\Lead\Model\PushLeadToMarketoRequest $push_lead_to_marketo_request pushLeadToMarketoRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Lead\Model\ResponseOfPushLeadToMarketo, HTTP status code, HTTP response headers (array of strings)
     */
    public function pushToMarketoUsingPOSTWithHttpInfo($push_lead_to_marketo_request)
    {
        $request = $this->pushToMarketoUsingPOSTRequest($push_lead_to_marketo_request);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfPushLeadToMarketo');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfPushLeadToMarketo');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Lead\Model\ResponseOfPushLeadToMarketo',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation pushToMarketoUsingPOSTAsync
     *
     * Push Lead to Marketo
     *
     * @param  \NecLimDul\MarketoRest\Lead\Model\PushLeadToMarketoRequest $push_lead_to_marketo_request pushLeadToMarketoRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pushToMarketoUsingPOSTAsync($push_lead_to_marketo_request)
    {
        return $this->pushToMarketoUsingPOSTAsyncWithHttpInfo($push_lead_to_marketo_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pushToMarketoUsingPOSTAsyncWithHttpInfo
     *
     * Push Lead to Marketo
     *
     * @param  \NecLimDul\MarketoRest\Lead\Model\PushLeadToMarketoRequest $push_lead_to_marketo_request pushLeadToMarketoRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pushToMarketoUsingPOSTAsyncWithHttpInfo($push_lead_to_marketo_request)
    {
        $request = $this->pushToMarketoUsingPOSTRequest($push_lead_to_marketo_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfPushLeadToMarketo');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'pushToMarketoUsingPOST'
     *
     * @param  \NecLimDul\MarketoRest\Lead\Model\PushLeadToMarketoRequest $push_lead_to_marketo_request pushLeadToMarketoRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function pushToMarketoUsingPOSTRequest($push_lead_to_marketo_request)
    {
        // Verify the required parameter 'push_lead_to_marketo_request' is set.
        if ($push_lead_to_marketo_request === null || (is_array($push_lead_to_marketo_request) && empty($push_lead_to_marketo_request))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $push_lead_to_marketo_request when calling pushToMarketoUsingPOST'
            );
        }

        $resourcePath = '/rest/v1/leads/push.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );

        // for model (json/xml)
        if (!empty($push_lead_to_marketo_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($push_lead_to_marketo_request));
            } elseif (!is_array($push_lead_to_marketo_request)) {
                $httpBody = (string) $push_lead_to_marketo_request;
            }
            else {
                $httpBody = '';
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation submitFormUsingPOST
     *
     * Submit Form
     *
     * @param  \NecLimDul\MarketoRest\Lead\Model\SubmitFormRequest $submit_form_request submitFormRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfSubmitForm
     */
    public function submitFormUsingPOST($submit_form_request)
    {
        list($response) = $this->submitFormUsingPOSTWithHttpInfo($submit_form_request);
        return $response;
    }

    /**
     * Operation submitFormUsingPOSTWithHttpInfo
     *
     * Submit Form
     *
     * @param  \NecLimDul\MarketoRest\Lead\Model\SubmitFormRequest $submit_form_request submitFormRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Lead\Model\ResponseOfSubmitForm, HTTP status code, HTTP response headers (array of strings)
     */
    public function submitFormUsingPOSTWithHttpInfo($submit_form_request)
    {
        $request = $this->submitFormUsingPOSTRequest($submit_form_request);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfSubmitForm');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfSubmitForm');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Lead\Model\ResponseOfSubmitForm',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation submitFormUsingPOSTAsync
     *
     * Submit Form
     *
     * @param  \NecLimDul\MarketoRest\Lead\Model\SubmitFormRequest $submit_form_request submitFormRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function submitFormUsingPOSTAsync($submit_form_request)
    {
        return $this->submitFormUsingPOSTAsyncWithHttpInfo($submit_form_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation submitFormUsingPOSTAsyncWithHttpInfo
     *
     * Submit Form
     *
     * @param  \NecLimDul\MarketoRest\Lead\Model\SubmitFormRequest $submit_form_request submitFormRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function submitFormUsingPOSTAsyncWithHttpInfo($submit_form_request)
    {
        $request = $this->submitFormUsingPOSTRequest($submit_form_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfSubmitForm');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'submitFormUsingPOST'
     *
     * @param  \NecLimDul\MarketoRest\Lead\Model\SubmitFormRequest $submit_form_request submitFormRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function submitFormUsingPOSTRequest($submit_form_request)
    {
        // Verify the required parameter 'submit_form_request' is set.
        if ($submit_form_request === null || (is_array($submit_form_request) && empty($submit_form_request))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $submit_form_request when calling submitFormUsingPOST'
            );
        }

        $resourcePath = '/rest/v1/leads/submitForm.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );

        // for model (json/xml)
        if (!empty($submit_form_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($submit_form_request));
            } elseif (!is_array($submit_form_request)) {
                $httpBody = (string) $submit_form_request;
            }
            else {
                $httpBody = '';
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation syncLeadUsingPOST
     *
     * Sync Leads
     *
     * @param  \NecLimDul\MarketoRest\Lead\Model\SyncLeadRequest $sync_lead_request syncLeadRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfLead
     */
    public function syncLeadUsingPOST($sync_lead_request)
    {
        list($response) = $this->syncLeadUsingPOSTWithHttpInfo($sync_lead_request);
        return $response;
    }

    /**
     * Operation syncLeadUsingPOSTWithHttpInfo
     *
     * Sync Leads
     *
     * @param  \NecLimDul\MarketoRest\Lead\Model\SyncLeadRequest $sync_lead_request syncLeadRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Lead\Model\ResponseOfLead, HTTP status code, HTTP response headers (array of strings)
     */
    public function syncLeadUsingPOSTWithHttpInfo($sync_lead_request)
    {
        $request = $this->syncLeadUsingPOSTRequest($sync_lead_request);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfLead');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfLead');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Lead\Model\ResponseOfLead',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation syncLeadUsingPOSTAsync
     *
     * Sync Leads
     *
     * @param  \NecLimDul\MarketoRest\Lead\Model\SyncLeadRequest $sync_lead_request syncLeadRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function syncLeadUsingPOSTAsync($sync_lead_request)
    {
        return $this->syncLeadUsingPOSTAsyncWithHttpInfo($sync_lead_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation syncLeadUsingPOSTAsyncWithHttpInfo
     *
     * Sync Leads
     *
     * @param  \NecLimDul\MarketoRest\Lead\Model\SyncLeadRequest $sync_lead_request syncLeadRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function syncLeadUsingPOSTAsyncWithHttpInfo($sync_lead_request)
    {
        $request = $this->syncLeadUsingPOSTRequest($sync_lead_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfLead');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'syncLeadUsingPOST'
     *
     * @param  \NecLimDul\MarketoRest\Lead\Model\SyncLeadRequest $sync_lead_request syncLeadRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function syncLeadUsingPOSTRequest($sync_lead_request)
    {
        // Verify the required parameter 'sync_lead_request' is set.
        if ($sync_lead_request === null || (is_array($sync_lead_request) && empty($sync_lead_request))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sync_lead_request when calling syncLeadUsingPOST'
            );
        }

        $resourcePath = '/rest/v1/leads.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );

        // for model (json/xml)
        if (!empty($sync_lead_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($sync_lead_request));
            } elseif (!is_array($sync_lead_request)) {
                $httpBody = (string) $sync_lead_request;
            }
            else {
                $httpBody = '';
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updatePartitionsUsingPOST
     *
     * Update Lead Partition
     *
     * @param  \NecLimDul\MarketoRest\Lead\Model\UpdateLeadPartitionRequest $update_lead_partition_request updateLeadPartitionRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfLead
     */
    public function updatePartitionsUsingPOST($update_lead_partition_request)
    {
        list($response) = $this->updatePartitionsUsingPOSTWithHttpInfo($update_lead_partition_request);
        return $response;
    }

    /**
     * Operation updatePartitionsUsingPOSTWithHttpInfo
     *
     * Update Lead Partition
     *
     * @param  \NecLimDul\MarketoRest\Lead\Model\UpdateLeadPartitionRequest $update_lead_partition_request updateLeadPartitionRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Lead\Model\ResponseOfLead, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePartitionsUsingPOSTWithHttpInfo($update_lead_partition_request)
    {
        $request = $this->updatePartitionsUsingPOSTRequest($update_lead_partition_request);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfLead');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfLead');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Lead\Model\ResponseOfLead',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updatePartitionsUsingPOSTAsync
     *
     * Update Lead Partition
     *
     * @param  \NecLimDul\MarketoRest\Lead\Model\UpdateLeadPartitionRequest $update_lead_partition_request updateLeadPartitionRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePartitionsUsingPOSTAsync($update_lead_partition_request)
    {
        return $this->updatePartitionsUsingPOSTAsyncWithHttpInfo($update_lead_partition_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updatePartitionsUsingPOSTAsyncWithHttpInfo
     *
     * Update Lead Partition
     *
     * @param  \NecLimDul\MarketoRest\Lead\Model\UpdateLeadPartitionRequest $update_lead_partition_request updateLeadPartitionRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePartitionsUsingPOSTAsyncWithHttpInfo($update_lead_partition_request)
    {
        $request = $this->updatePartitionsUsingPOSTRequest($update_lead_partition_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfLead');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'updatePartitionsUsingPOST'
     *
     * @param  \NecLimDul\MarketoRest\Lead\Model\UpdateLeadPartitionRequest $update_lead_partition_request updateLeadPartitionRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updatePartitionsUsingPOSTRequest($update_lead_partition_request)
    {
        // Verify the required parameter 'update_lead_partition_request' is set.
        if ($update_lead_partition_request === null || (is_array($update_lead_partition_request) && empty($update_lead_partition_request))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_lead_partition_request when calling updatePartitionsUsingPOST'
            );
        }

        $resourcePath = '/rest/v1/leads/partitions.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );

        // for model (json/xml)
        if (!empty($update_lead_partition_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($update_lead_partition_request));
            } elseif (!is_array($update_lead_partition_request)) {
                $httpBody = (string) $update_lead_partition_request;
            }
            else {
                $httpBody = '';
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    /**
     * Make a request.
     *
     * @param \GuzzleHttp\Psr7\Request $request
     *   An initialized request object.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @return \Psr\Http\Message\ResponseInterface
     */
    private function makeRequest(Request $request) {
        $options = $this->createHttpClientOption();
        try {
           $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            $response = $e->getResponse();
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                (int) $e->getCode(),
                $response ? $response->getHeaders() : null,
                $response ? (string) $response->getBody() : null
            );
        }

        $statusCode = $response->getStatusCode();
        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    (string) $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                (string) $response->getBody()
            );
        }
        return $response;
    }

    /**
     * Convert a response to a return standard return array.
     *
     * @param \Psr\Http\Message\ResponseInterface $response
     *   A response from a request with a serialized body.
     * @param string $returnType
     *   The return type.
     *
     * @return array
     */
    private function responseToReturn(ResponseInterface $response, string $returnType) {
        return [
            $this->deserializeResponseBody($response->getBody(), $returnType),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    /**
     * Deserialize a response body.
     *
     * @param mixed $responseBody
     *   The response body.
     * @param string $returnType
     *   The return type.
     * @param array|null $headers
     *   The a list of headers from the response.
     * @return mixed
     *   Either a string or a stream to be passed to a file object.
     */
    private function deserializeResponseBody($responseBody, $returnType, $headers = [])
    {
        return ObjectSerializer::deserialize(
            $returnType === '\SplFileObject' ? $responseBody : (string) $responseBody,
            $returnType,
            $headers
        );
    }

}
