<?php

/**
 * ProgramMembersApi
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Lead
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketo Rest API
 *
 * Marketo Rest API
 *
 * OpenAPI spec version: 1.0
 * Contact: developerfeedback@marketo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.26
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace NecLimDul\MarketoRest\Lead\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\Promise\PromiseInterface;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\ResponseInterface;
use NecLimDul\MarketoRest\Lead\ApiException;
use NecLimDul\MarketoRest\Lead\Configuration;
use NecLimDul\MarketoRest\Lead\HeaderSelector;
use NecLimDul\MarketoRest\Lead\ObjectSerializer;

/**
 * ProgramMembersApi Class Doc Comment
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Lead
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProgramMembersApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the spec.
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Exception handler for createProgramMemberFieldUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function createProgramMemberFieldUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Lead\Model\ResponseOfCreateLeadField::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Create Program Member Fields
     *
     * @param \NecLimDul\MarketoRest\Lead\Model\CreateLeadFieldRequest $create_lead_field_request
     *   createLeadFieldRequest
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfCreateLeadField
     */
    public function createProgramMemberFieldUsingPOST(
        \NecLimDul\MarketoRest\Lead\Model\CreateLeadFieldRequest $create_lead_field_request
    ): \NecLimDul\MarketoRest\Lead\Model\ResponseOfCreateLeadField {
        list($response) = $this->createProgramMemberFieldUsingPOSTWithHttpInfo($create_lead_field_request);
        return $response;
    }

    /**
     * Create Program Member Fields
     *
     * @param \NecLimDul\MarketoRest\Lead\Model\CreateLeadFieldRequest $create_lead_field_request
     *   createLeadFieldRequest
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Lead\Model\ResponseOfCreateLeadField,
     *     int,
     *     array<array<string>>
     * }
     */
    public function createProgramMemberFieldUsingPOSTWithHttpInfo(
        \NecLimDul\MarketoRest\Lead\Model\CreateLeadFieldRequest $create_lead_field_request
    ): array {
        $request = $this->createProgramMemberFieldUsingPOSTRequest($create_lead_field_request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Lead\Model\ResponseOfCreateLeadField::class
            );
        } catch (ApiException $e) {
            throw $this->createProgramMemberFieldUsingPOSTHandleException($e);
        }
    }

    /**
     * Create Program Member Fields
     *
     * @param \NecLimDul\MarketoRest\Lead\Model\CreateLeadFieldRequest $create_lead_field_request
     *   createLeadFieldRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createProgramMemberFieldUsingPOSTAsync(
        \NecLimDul\MarketoRest\Lead\Model\CreateLeadFieldRequest $create_lead_field_request
    ): PromiseInterface {
        return $this->createProgramMemberFieldUsingPOSTAsyncWithHttpInfo($create_lead_field_request)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Lead\Model\ResponseOfCreateLeadField {
                    return $response[0];
                }
            );
    }

    /**
     * Create Program Member Fields
     *
     * @param \NecLimDul\MarketoRest\Lead\Model\CreateLeadFieldRequest $create_lead_field_request
     *   createLeadFieldRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createProgramMemberFieldUsingPOSTAsyncWithHttpInfo(
        \NecLimDul\MarketoRest\Lead\Model\CreateLeadFieldRequest $create_lead_field_request
    ): PromiseInterface {
        $request = $this->createProgramMemberFieldUsingPOSTRequest($create_lead_field_request);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Lead\Model\ResponseOfCreateLeadField::class,
            [$this, 'createProgramMemberFieldUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'createProgramMemberFieldUsingPOST'
     *
     * @param \NecLimDul\MarketoRest\Lead\Model\CreateLeadFieldRequest $create_lead_field_request
     *   createLeadFieldRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createProgramMemberFieldUsingPOSTRequest(
        \NecLimDul\MarketoRest\Lead\Model\CreateLeadFieldRequest $create_lead_field_request
    ): Request {

        $resourcePath = '/rest/v1/programs/members/schema/fields.json';

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            $create_lead_field_request
        );
    }

    /**
     * Exception handler for deleteProgramMemberUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function deleteProgramMemberUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Lead\Model\ResponseOfProgramMemberDelete::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Delete Program Members
     *
     * @param int $program_id
     *   The id of target program.
     * @param \NecLimDul\MarketoRest\Lead\Model\DeleteProgramMemberRequest $delete_program_member_request
     *   deleteProgramMemberRequest
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfProgramMemberDelete
     */
    public function deleteProgramMemberUsingPOST(
        int $program_id,
        \NecLimDul\MarketoRest\Lead\Model\DeleteProgramMemberRequest $delete_program_member_request
    ): \NecLimDul\MarketoRest\Lead\Model\ResponseOfProgramMemberDelete {
        list($response) = $this->deleteProgramMemberUsingPOSTWithHttpInfo($program_id, $delete_program_member_request);
        return $response;
    }

    /**
     * Delete Program Members
     *
     * @param int $program_id
     *   The id of target program.
     * @param \NecLimDul\MarketoRest\Lead\Model\DeleteProgramMemberRequest $delete_program_member_request
     *   deleteProgramMemberRequest
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Lead\Model\ResponseOfProgramMemberDelete,
     *     int,
     *     array<array<string>>
     * }
     */
    public function deleteProgramMemberUsingPOSTWithHttpInfo(
        int $program_id,
        \NecLimDul\MarketoRest\Lead\Model\DeleteProgramMemberRequest $delete_program_member_request
    ): array {
        $request = $this->deleteProgramMemberUsingPOSTRequest($program_id, $delete_program_member_request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Lead\Model\ResponseOfProgramMemberDelete::class
            );
        } catch (ApiException $e) {
            throw $this->deleteProgramMemberUsingPOSTHandleException($e);
        }
    }

    /**
     * Delete Program Members
     *
     * @param int $program_id
     *   The id of target program.
     * @param \NecLimDul\MarketoRest\Lead\Model\DeleteProgramMemberRequest $delete_program_member_request
     *   deleteProgramMemberRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteProgramMemberUsingPOSTAsync(
        int $program_id,
        \NecLimDul\MarketoRest\Lead\Model\DeleteProgramMemberRequest $delete_program_member_request
    ): PromiseInterface {
        return $this->deleteProgramMemberUsingPOSTAsyncWithHttpInfo($program_id, $delete_program_member_request)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Lead\Model\ResponseOfProgramMemberDelete {
                    return $response[0];
                }
            );
    }

    /**
     * Delete Program Members
     *
     * @param int $program_id
     *   The id of target program.
     * @param \NecLimDul\MarketoRest\Lead\Model\DeleteProgramMemberRequest $delete_program_member_request
     *   deleteProgramMemberRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteProgramMemberUsingPOSTAsyncWithHttpInfo(
        int $program_id,
        \NecLimDul\MarketoRest\Lead\Model\DeleteProgramMemberRequest $delete_program_member_request
    ): PromiseInterface {
        $request = $this->deleteProgramMemberUsingPOSTRequest($program_id, $delete_program_member_request);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Lead\Model\ResponseOfProgramMemberDelete::class,
            [$this, 'deleteProgramMemberUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'deleteProgramMemberUsingPOST'
     *
     * @param int $program_id
     *   The id of target program.
     * @param \NecLimDul\MarketoRest\Lead\Model\DeleteProgramMemberRequest $delete_program_member_request
     *   deleteProgramMemberRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteProgramMemberUsingPOSTRequest(
        int $program_id,
        \NecLimDul\MarketoRest\Lead\Model\DeleteProgramMemberRequest $delete_program_member_request
    ): Request {

        $resourcePath = '/rest/v1/programs/{programId}/members/delete.json';
        $resourcePath = str_replace(
            '{' . 'programId' . '}',
            ObjectSerializer::toPathValue($program_id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            $delete_program_member_request
        );
    }

    /**
     * Exception handler for describeProgramMemberUsingGET2.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function describeProgramMemberUsingGET2HandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Lead\Model\ResponseOfProgramMemberAttributes2::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Describe Program Member
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfProgramMemberAttributes2
     */
    public function describeProgramMemberUsingGET2(): \NecLimDul\MarketoRest\Lead\Model\ResponseOfProgramMemberAttributes2
    {
        list($response) = $this->describeProgramMemberUsingGET2WithHttpInfo();
        return $response;
    }

    /**
     * Describe Program Member
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Lead\Model\ResponseOfProgramMemberAttributes2,
     *     int,
     *     array<array<string>>
     * }
     */
    public function describeProgramMemberUsingGET2WithHttpInfo(): array
    {
        $request = $this->describeProgramMemberUsingGET2Request();
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Lead\Model\ResponseOfProgramMemberAttributes2::class
            );
        } catch (ApiException $e) {
            throw $this->describeProgramMemberUsingGET2HandleException($e);
        }
    }

    /**
     * Describe Program Member
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function describeProgramMemberUsingGET2Async(): PromiseInterface
    {
        return $this->describeProgramMemberUsingGET2AsyncWithHttpInfo()
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Lead\Model\ResponseOfProgramMemberAttributes2 {
                    return $response[0];
                }
            );
    }

    /**
     * Describe Program Member
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function describeProgramMemberUsingGET2AsyncWithHttpInfo(): PromiseInterface
    {
        $request = $this->describeProgramMemberUsingGET2Request();
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Lead\Model\ResponseOfProgramMemberAttributes2::class,
            [$this, 'describeProgramMemberUsingGET2HandleException']
        );
    }

    /**
     * Create request for operation 'describeProgramMemberUsingGET2'
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function describeProgramMemberUsingGET2Request(): Request
    {

        $resourcePath = '/rest/v1/programs/members/describe.json';

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'GET',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for getProgramMemberFieldByNameUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function getProgramMemberFieldByNameUsingGETHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadField::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Program Member Field by Name
     *
     * @param string $field_api_name
     *   The API name of program member field
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadField
     */
    public function getProgramMemberFieldByNameUsingGET(
        string $field_api_name
    ): \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadField {
        list($response) = $this->getProgramMemberFieldByNameUsingGETWithHttpInfo($field_api_name);
        return $response;
    }

    /**
     * Get Program Member Field by Name
     *
     * @param string $field_api_name
     *   The API name of program member field
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadField,
     *     int,
     *     array<array<string>>
     * }
     */
    public function getProgramMemberFieldByNameUsingGETWithHttpInfo(
        string $field_api_name
    ): array {
        $request = $this->getProgramMemberFieldByNameUsingGETRequest($field_api_name);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadField::class
            );
        } catch (ApiException $e) {
            throw $this->getProgramMemberFieldByNameUsingGETHandleException($e);
        }
    }

    /**
     * Get Program Member Field by Name
     *
     * @param string $field_api_name
     *   The API name of program member field
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProgramMemberFieldByNameUsingGETAsync(
        string $field_api_name
    ): PromiseInterface {
        return $this->getProgramMemberFieldByNameUsingGETAsyncWithHttpInfo($field_api_name)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadField {
                    return $response[0];
                }
            );
    }

    /**
     * Get Program Member Field by Name
     *
     * @param string $field_api_name
     *   The API name of program member field
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProgramMemberFieldByNameUsingGETAsyncWithHttpInfo(
        string $field_api_name
    ): PromiseInterface {
        $request = $this->getProgramMemberFieldByNameUsingGETRequest($field_api_name);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadField::class,
            [$this, 'getProgramMemberFieldByNameUsingGETHandleException']
        );
    }

    /**
     * Create request for operation 'getProgramMemberFieldByNameUsingGET'
     *
     * @param string $field_api_name
     *   The API name of program member field
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getProgramMemberFieldByNameUsingGETRequest(
        string $field_api_name
    ): Request {

        $resourcePath = '/rest/v1/programs/members/schema/fields/{fieldApiName}.json';
        $resourcePath = str_replace(
            '{' . 'fieldApiName' . '}',
            ObjectSerializer::toPathValue($field_api_name),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'GET',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for getProgramMemberFieldsUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function getProgramMemberFieldsUsingGETHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadField::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Program Member Fields
     *
     * @param int|null $batch_size
     *   The batch size to return. The max and default value is 300.
     * @param string|null $next_page_token
     *   A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter. See Paging Tokens for more info.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadField
     */
    public function getProgramMemberFieldsUsingGET(
        int $batch_size = null,
        string $next_page_token = null
    ): \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadField {
        list($response) = $this->getProgramMemberFieldsUsingGETWithHttpInfo($batch_size, $next_page_token);
        return $response;
    }

    /**
     * Get Program Member Fields
     *
     * @param int|null $batch_size
     *   The batch size to return. The max and default value is 300.
     * @param string|null $next_page_token
     *   A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter. See Paging Tokens for more info.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadField,
     *     int,
     *     array<array<string>>
     * }
     */
    public function getProgramMemberFieldsUsingGETWithHttpInfo(
        int $batch_size = null,
        string $next_page_token = null
    ): array {
        $request = $this->getProgramMemberFieldsUsingGETRequest($batch_size, $next_page_token);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadField::class
            );
        } catch (ApiException $e) {
            throw $this->getProgramMemberFieldsUsingGETHandleException($e);
        }
    }

    /**
     * Get Program Member Fields
     *
     * @param int|null $batch_size
     *   The batch size to return. The max and default value is 300.
     * @param string|null $next_page_token
     *   A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter. See Paging Tokens for more info.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProgramMemberFieldsUsingGETAsync(
        int $batch_size = null,
        string $next_page_token = null
    ): PromiseInterface {
        return $this->getProgramMemberFieldsUsingGETAsyncWithHttpInfo($batch_size, $next_page_token)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadField {
                    return $response[0];
                }
            );
    }

    /**
     * Get Program Member Fields
     *
     * @param int|null $batch_size
     *   The batch size to return. The max and default value is 300.
     * @param string|null $next_page_token
     *   A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter. See Paging Tokens for more info.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProgramMemberFieldsUsingGETAsyncWithHttpInfo(
        int $batch_size = null,
        string $next_page_token = null
    ): PromiseInterface {
        $request = $this->getProgramMemberFieldsUsingGETRequest($batch_size, $next_page_token);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadField::class,
            [$this, 'getProgramMemberFieldsUsingGETHandleException']
        );
    }

    /**
     * Create request for operation 'getProgramMemberFieldsUsingGET'
     *
     * @param int|null $batch_size
     *   The batch size to return. The max and default value is 300.
     * @param string|null $next_page_token
     *   A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter. See Paging Tokens for more info.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getProgramMemberFieldsUsingGETRequest(
        int $batch_size = null,
        string $next_page_token = null
    ): Request {

        $resourcePath = '/rest/v1/programs/members/schema/fields.json';

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'GET',
            $operationHost . $resourcePath,
            // Query.
            [
                'batchSize' => ObjectSerializer::toQueryValue($batch_size),
                'nextPageToken' => ObjectSerializer::toQueryValue($next_page_token),
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for getProgramMembersUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function getProgramMembersUsingGETHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Lead\Model\ResponseOfProgramMember::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Program Members
     *
     * @param int $program_id
     *   The id of target program.
     * @param string $filter_type
     *   The program member field to filter on.  Any custom field (string or integer types only), \&quot;updatedAt\&quot;, or any searchable field.  Searchable fields can be obtained via the &lt;a href&#x3D;\&quot;/rest-api/endpoint-reference/lead-database-endpoint-reference/#/Leads/describeProgramMemberUsingGET2\&quot;&gt;Describe Program Member&lt;/a&gt; endpoint.
     * @param string[] $filter_values
     *   A comma-separated list of values to filter on in the specified fields.
     * @param string|null $start_at
     *   When using filterType&#x3D;updatedAt, the start of date range filter (ISO 8601-format)
     * @param string|null $end_at
     *   When using filterType&#x3D;updatedAt, the end of date range filter (ISO 8601-format)
     * @param string[]|null $fields
     *   A comma-separated list of lead fields to return for each record.
     * @param int|null $batch_size
     *   The batch size to return.  The max and default value is 300.
     * @param string|null $next_page_token
     *   A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfProgramMember
     */
    public function getProgramMembersUsingGET(
        int $program_id,
        string $filter_type,
        array $filter_values,
        string $start_at = null,
        string $end_at = null,
        array $fields = null,
        int $batch_size = null,
        string $next_page_token = null
    ): \NecLimDul\MarketoRest\Lead\Model\ResponseOfProgramMember {
        list($response) = $this->getProgramMembersUsingGETWithHttpInfo($program_id, $filter_type, $filter_values, $start_at, $end_at, $fields, $batch_size, $next_page_token);
        return $response;
    }

    /**
     * Get Program Members
     *
     * @param int $program_id
     *   The id of target program.
     * @param string $filter_type
     *   The program member field to filter on.  Any custom field (string or integer types only), \&quot;updatedAt\&quot;, or any searchable field.  Searchable fields can be obtained via the &lt;a href&#x3D;\&quot;/rest-api/endpoint-reference/lead-database-endpoint-reference/#/Leads/describeProgramMemberUsingGET2\&quot;&gt;Describe Program Member&lt;/a&gt; endpoint.
     * @param string[] $filter_values
     *   A comma-separated list of values to filter on in the specified fields.
     * @param string|null $start_at
     *   When using filterType&#x3D;updatedAt, the start of date range filter (ISO 8601-format)
     * @param string|null $end_at
     *   When using filterType&#x3D;updatedAt, the end of date range filter (ISO 8601-format)
     * @param string[]|null $fields
     *   A comma-separated list of lead fields to return for each record.
     * @param int|null $batch_size
     *   The batch size to return.  The max and default value is 300.
     * @param string|null $next_page_token
     *   A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Lead\Model\ResponseOfProgramMember,
     *     int,
     *     array<array<string>>
     * }
     */
    public function getProgramMembersUsingGETWithHttpInfo(
        int $program_id,
        string $filter_type,
        array $filter_values,
        string $start_at = null,
        string $end_at = null,
        array $fields = null,
        int $batch_size = null,
        string $next_page_token = null
    ): array {
        $request = $this->getProgramMembersUsingGETRequest($program_id, $filter_type, $filter_values, $start_at, $end_at, $fields, $batch_size, $next_page_token);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Lead\Model\ResponseOfProgramMember::class
            );
        } catch (ApiException $e) {
            throw $this->getProgramMembersUsingGETHandleException($e);
        }
    }

    /**
     * Get Program Members
     *
     * @param int $program_id
     *   The id of target program.
     * @param string $filter_type
     *   The program member field to filter on.  Any custom field (string or integer types only), \&quot;updatedAt\&quot;, or any searchable field.  Searchable fields can be obtained via the &lt;a href&#x3D;\&quot;/rest-api/endpoint-reference/lead-database-endpoint-reference/#/Leads/describeProgramMemberUsingGET2\&quot;&gt;Describe Program Member&lt;/a&gt; endpoint.
     * @param string[] $filter_values
     *   A comma-separated list of values to filter on in the specified fields.
     * @param string|null $start_at
     *   When using filterType&#x3D;updatedAt, the start of date range filter (ISO 8601-format)
     * @param string|null $end_at
     *   When using filterType&#x3D;updatedAt, the end of date range filter (ISO 8601-format)
     * @param string[]|null $fields
     *   A comma-separated list of lead fields to return for each record.
     * @param int|null $batch_size
     *   The batch size to return.  The max and default value is 300.
     * @param string|null $next_page_token
     *   A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProgramMembersUsingGETAsync(
        int $program_id,
        string $filter_type,
        array $filter_values,
        string $start_at = null,
        string $end_at = null,
        array $fields = null,
        int $batch_size = null,
        string $next_page_token = null
    ): PromiseInterface {
        return $this->getProgramMembersUsingGETAsyncWithHttpInfo($program_id, $filter_type, $filter_values, $start_at, $end_at, $fields, $batch_size, $next_page_token)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Lead\Model\ResponseOfProgramMember {
                    return $response[0];
                }
            );
    }

    /**
     * Get Program Members
     *
     * @param int $program_id
     *   The id of target program.
     * @param string $filter_type
     *   The program member field to filter on.  Any custom field (string or integer types only), \&quot;updatedAt\&quot;, or any searchable field.  Searchable fields can be obtained via the &lt;a href&#x3D;\&quot;/rest-api/endpoint-reference/lead-database-endpoint-reference/#/Leads/describeProgramMemberUsingGET2\&quot;&gt;Describe Program Member&lt;/a&gt; endpoint.
     * @param string[] $filter_values
     *   A comma-separated list of values to filter on in the specified fields.
     * @param string|null $start_at
     *   When using filterType&#x3D;updatedAt, the start of date range filter (ISO 8601-format)
     * @param string|null $end_at
     *   When using filterType&#x3D;updatedAt, the end of date range filter (ISO 8601-format)
     * @param string[]|null $fields
     *   A comma-separated list of lead fields to return for each record.
     * @param int|null $batch_size
     *   The batch size to return.  The max and default value is 300.
     * @param string|null $next_page_token
     *   A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProgramMembersUsingGETAsyncWithHttpInfo(
        int $program_id,
        string $filter_type,
        array $filter_values,
        string $start_at = null,
        string $end_at = null,
        array $fields = null,
        int $batch_size = null,
        string $next_page_token = null
    ): PromiseInterface {
        $request = $this->getProgramMembersUsingGETRequest($program_id, $filter_type, $filter_values, $start_at, $end_at, $fields, $batch_size, $next_page_token);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Lead\Model\ResponseOfProgramMember::class,
            [$this, 'getProgramMembersUsingGETHandleException']
        );
    }

    /**
     * Create request for operation 'getProgramMembersUsingGET'
     *
     * @param int $program_id
     *   The id of target program.
     * @param string $filter_type
     *   The program member field to filter on.  Any custom field (string or integer types only), \&quot;updatedAt\&quot;, or any searchable field.  Searchable fields can be obtained via the &lt;a href&#x3D;\&quot;/rest-api/endpoint-reference/lead-database-endpoint-reference/#/Leads/describeProgramMemberUsingGET2\&quot;&gt;Describe Program Member&lt;/a&gt; endpoint.
     * @param string[] $filter_values
     *   A comma-separated list of values to filter on in the specified fields.
     * @param string|null $start_at
     *   When using filterType&#x3D;updatedAt, the start of date range filter (ISO 8601-format)
     * @param string|null $end_at
     *   When using filterType&#x3D;updatedAt, the end of date range filter (ISO 8601-format)
     * @param string[]|null $fields
     *   A comma-separated list of lead fields to return for each record.
     * @param int|null $batch_size
     *   The batch size to return.  The max and default value is 300.
     * @param string|null $next_page_token
     *   A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getProgramMembersUsingGETRequest(
        int $program_id,
        string $filter_type,
        array $filter_values,
        string $start_at = null,
        string $end_at = null,
        array $fields = null,
        int $batch_size = null,
        string $next_page_token = null
    ): Request {
        // Verify the required parameter 'filter_values' is set.
        if (empty($filter_values)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $filter_values when calling getProgramMembersUsingGET'
            );
        }

        $resourcePath = '/rest/v1/programs/{programId}/members.json';
        $resourcePath = str_replace(
            '{' . 'programId' . '}',
            ObjectSerializer::toPathValue($program_id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'GET',
            $operationHost . $resourcePath,
            // Query.
            [
                'filterType' => ObjectSerializer::toQueryValue($filter_type),
                'filterValues' => ObjectSerializer::toQueryValue($filter_values),
                'startAt' => ObjectSerializer::toQueryValue($start_at),
                'endAt' => ObjectSerializer::toQueryValue($end_at),
                'fields' => ObjectSerializer::toQueryValue($fields),
                'batchSize' => ObjectSerializer::toQueryValue($batch_size),
                'nextPageToken' => ObjectSerializer::toQueryValue($next_page_token),
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for syncProgramMemberDataUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function syncProgramMemberDataUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Lead\Model\ResponseOfProgramMemberData::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Sync Program Member Data
     *
     * @param int $program_id
     *   The id of target program.
     * @param \NecLimDul\MarketoRest\Lead\Model\SyncProgramMemberDataRequest $sync_program_member_data_request
     *   syncProgramMemberDataRequest
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfProgramMemberData
     */
    public function syncProgramMemberDataUsingPOST(
        int $program_id,
        \NecLimDul\MarketoRest\Lead\Model\SyncProgramMemberDataRequest $sync_program_member_data_request
    ): \NecLimDul\MarketoRest\Lead\Model\ResponseOfProgramMemberData {
        list($response) = $this->syncProgramMemberDataUsingPOSTWithHttpInfo($program_id, $sync_program_member_data_request);
        return $response;
    }

    /**
     * Sync Program Member Data
     *
     * @param int $program_id
     *   The id of target program.
     * @param \NecLimDul\MarketoRest\Lead\Model\SyncProgramMemberDataRequest $sync_program_member_data_request
     *   syncProgramMemberDataRequest
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Lead\Model\ResponseOfProgramMemberData,
     *     int,
     *     array<array<string>>
     * }
     */
    public function syncProgramMemberDataUsingPOSTWithHttpInfo(
        int $program_id,
        \NecLimDul\MarketoRest\Lead\Model\SyncProgramMemberDataRequest $sync_program_member_data_request
    ): array {
        $request = $this->syncProgramMemberDataUsingPOSTRequest($program_id, $sync_program_member_data_request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Lead\Model\ResponseOfProgramMemberData::class
            );
        } catch (ApiException $e) {
            throw $this->syncProgramMemberDataUsingPOSTHandleException($e);
        }
    }

    /**
     * Sync Program Member Data
     *
     * @param int $program_id
     *   The id of target program.
     * @param \NecLimDul\MarketoRest\Lead\Model\SyncProgramMemberDataRequest $sync_program_member_data_request
     *   syncProgramMemberDataRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function syncProgramMemberDataUsingPOSTAsync(
        int $program_id,
        \NecLimDul\MarketoRest\Lead\Model\SyncProgramMemberDataRequest $sync_program_member_data_request
    ): PromiseInterface {
        return $this->syncProgramMemberDataUsingPOSTAsyncWithHttpInfo($program_id, $sync_program_member_data_request)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Lead\Model\ResponseOfProgramMemberData {
                    return $response[0];
                }
            );
    }

    /**
     * Sync Program Member Data
     *
     * @param int $program_id
     *   The id of target program.
     * @param \NecLimDul\MarketoRest\Lead\Model\SyncProgramMemberDataRequest $sync_program_member_data_request
     *   syncProgramMemberDataRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function syncProgramMemberDataUsingPOSTAsyncWithHttpInfo(
        int $program_id,
        \NecLimDul\MarketoRest\Lead\Model\SyncProgramMemberDataRequest $sync_program_member_data_request
    ): PromiseInterface {
        $request = $this->syncProgramMemberDataUsingPOSTRequest($program_id, $sync_program_member_data_request);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Lead\Model\ResponseOfProgramMemberData::class,
            [$this, 'syncProgramMemberDataUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'syncProgramMemberDataUsingPOST'
     *
     * @param int $program_id
     *   The id of target program.
     * @param \NecLimDul\MarketoRest\Lead\Model\SyncProgramMemberDataRequest $sync_program_member_data_request
     *   syncProgramMemberDataRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function syncProgramMemberDataUsingPOSTRequest(
        int $program_id,
        \NecLimDul\MarketoRest\Lead\Model\SyncProgramMemberDataRequest $sync_program_member_data_request
    ): Request {

        $resourcePath = '/rest/v1/programs/{programId}/members.json';
        $resourcePath = str_replace(
            '{' . 'programId' . '}',
            ObjectSerializer::toPathValue($program_id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            $sync_program_member_data_request
        );
    }

    /**
     * Exception handler for syncProgramMemberStatusUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function syncProgramMemberStatusUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Lead\Model\ResponseOfProgramMemberStatus::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Sync Program Member Status
     *
     * @param int $program_id
     *   The id of target program.
     * @param \NecLimDul\MarketoRest\Lead\Model\SyncProgramMemberStatusRequest $sync_program_member_status_request
     *   syncProgramMemberStatusRequest
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfProgramMemberStatus
     */
    public function syncProgramMemberStatusUsingPOST(
        int $program_id,
        \NecLimDul\MarketoRest\Lead\Model\SyncProgramMemberStatusRequest $sync_program_member_status_request
    ): \NecLimDul\MarketoRest\Lead\Model\ResponseOfProgramMemberStatus {
        list($response) = $this->syncProgramMemberStatusUsingPOSTWithHttpInfo($program_id, $sync_program_member_status_request);
        return $response;
    }

    /**
     * Sync Program Member Status
     *
     * @param int $program_id
     *   The id of target program.
     * @param \NecLimDul\MarketoRest\Lead\Model\SyncProgramMemberStatusRequest $sync_program_member_status_request
     *   syncProgramMemberStatusRequest
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Lead\Model\ResponseOfProgramMemberStatus,
     *     int,
     *     array<array<string>>
     * }
     */
    public function syncProgramMemberStatusUsingPOSTWithHttpInfo(
        int $program_id,
        \NecLimDul\MarketoRest\Lead\Model\SyncProgramMemberStatusRequest $sync_program_member_status_request
    ): array {
        $request = $this->syncProgramMemberStatusUsingPOSTRequest($program_id, $sync_program_member_status_request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Lead\Model\ResponseOfProgramMemberStatus::class
            );
        } catch (ApiException $e) {
            throw $this->syncProgramMemberStatusUsingPOSTHandleException($e);
        }
    }

    /**
     * Sync Program Member Status
     *
     * @param int $program_id
     *   The id of target program.
     * @param \NecLimDul\MarketoRest\Lead\Model\SyncProgramMemberStatusRequest $sync_program_member_status_request
     *   syncProgramMemberStatusRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function syncProgramMemberStatusUsingPOSTAsync(
        int $program_id,
        \NecLimDul\MarketoRest\Lead\Model\SyncProgramMemberStatusRequest $sync_program_member_status_request
    ): PromiseInterface {
        return $this->syncProgramMemberStatusUsingPOSTAsyncWithHttpInfo($program_id, $sync_program_member_status_request)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Lead\Model\ResponseOfProgramMemberStatus {
                    return $response[0];
                }
            );
    }

    /**
     * Sync Program Member Status
     *
     * @param int $program_id
     *   The id of target program.
     * @param \NecLimDul\MarketoRest\Lead\Model\SyncProgramMemberStatusRequest $sync_program_member_status_request
     *   syncProgramMemberStatusRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function syncProgramMemberStatusUsingPOSTAsyncWithHttpInfo(
        int $program_id,
        \NecLimDul\MarketoRest\Lead\Model\SyncProgramMemberStatusRequest $sync_program_member_status_request
    ): PromiseInterface {
        $request = $this->syncProgramMemberStatusUsingPOSTRequest($program_id, $sync_program_member_status_request);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Lead\Model\ResponseOfProgramMemberStatus::class,
            [$this, 'syncProgramMemberStatusUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'syncProgramMemberStatusUsingPOST'
     *
     * @param int $program_id
     *   The id of target program.
     * @param \NecLimDul\MarketoRest\Lead\Model\SyncProgramMemberStatusRequest $sync_program_member_status_request
     *   syncProgramMemberStatusRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function syncProgramMemberStatusUsingPOSTRequest(
        int $program_id,
        \NecLimDul\MarketoRest\Lead\Model\SyncProgramMemberStatusRequest $sync_program_member_status_request
    ): Request {

        $resourcePath = '/rest/v1/programs/{programId}/members/status.json';
        $resourcePath = str_replace(
            '{' . 'programId' . '}',
            ObjectSerializer::toPathValue($program_id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            $sync_program_member_status_request
        );
    }

    /**
     * Exception handler for updateProgramMemberFieldUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function updateProgramMemberFieldUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Lead\Model\ResponseOfUpdateLeadField::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Update Program Member Field
     *
     * @param string $field_api_name
     *   The API name of program member field
     * @param \NecLimDul\MarketoRest\Lead\Model\UpdateLeadFieldRequest $update_lead_field_request
     *   updateLeadFieldRequest
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfUpdateLeadField
     */
    public function updateProgramMemberFieldUsingPOST(
        string $field_api_name,
        \NecLimDul\MarketoRest\Lead\Model\UpdateLeadFieldRequest $update_lead_field_request
    ): \NecLimDul\MarketoRest\Lead\Model\ResponseOfUpdateLeadField {
        list($response) = $this->updateProgramMemberFieldUsingPOSTWithHttpInfo($field_api_name, $update_lead_field_request);
        return $response;
    }

    /**
     * Update Program Member Field
     *
     * @param string $field_api_name
     *   The API name of program member field
     * @param \NecLimDul\MarketoRest\Lead\Model\UpdateLeadFieldRequest $update_lead_field_request
     *   updateLeadFieldRequest
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Lead\Model\ResponseOfUpdateLeadField,
     *     int,
     *     array<array<string>>
     * }
     */
    public function updateProgramMemberFieldUsingPOSTWithHttpInfo(
        string $field_api_name,
        \NecLimDul\MarketoRest\Lead\Model\UpdateLeadFieldRequest $update_lead_field_request
    ): array {
        $request = $this->updateProgramMemberFieldUsingPOSTRequest($field_api_name, $update_lead_field_request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Lead\Model\ResponseOfUpdateLeadField::class
            );
        } catch (ApiException $e) {
            throw $this->updateProgramMemberFieldUsingPOSTHandleException($e);
        }
    }

    /**
     * Update Program Member Field
     *
     * @param string $field_api_name
     *   The API name of program member field
     * @param \NecLimDul\MarketoRest\Lead\Model\UpdateLeadFieldRequest $update_lead_field_request
     *   updateLeadFieldRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateProgramMemberFieldUsingPOSTAsync(
        string $field_api_name,
        \NecLimDul\MarketoRest\Lead\Model\UpdateLeadFieldRequest $update_lead_field_request
    ): PromiseInterface {
        return $this->updateProgramMemberFieldUsingPOSTAsyncWithHttpInfo($field_api_name, $update_lead_field_request)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Lead\Model\ResponseOfUpdateLeadField {
                    return $response[0];
                }
            );
    }

    /**
     * Update Program Member Field
     *
     * @param string $field_api_name
     *   The API name of program member field
     * @param \NecLimDul\MarketoRest\Lead\Model\UpdateLeadFieldRequest $update_lead_field_request
     *   updateLeadFieldRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateProgramMemberFieldUsingPOSTAsyncWithHttpInfo(
        string $field_api_name,
        \NecLimDul\MarketoRest\Lead\Model\UpdateLeadFieldRequest $update_lead_field_request
    ): PromiseInterface {
        $request = $this->updateProgramMemberFieldUsingPOSTRequest($field_api_name, $update_lead_field_request);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Lead\Model\ResponseOfUpdateLeadField::class,
            [$this, 'updateProgramMemberFieldUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'updateProgramMemberFieldUsingPOST'
     *
     * @param string $field_api_name
     *   The API name of program member field
     * @param \NecLimDul\MarketoRest\Lead\Model\UpdateLeadFieldRequest $update_lead_field_request
     *   updateLeadFieldRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateProgramMemberFieldUsingPOSTRequest(
        string $field_api_name,
        \NecLimDul\MarketoRest\Lead\Model\UpdateLeadFieldRequest $update_lead_field_request
    ): Request {

        $resourcePath = '/rest/v1/programs/members/schema/fields/{fieldApiName}.json';
        $resourcePath = str_replace(
            '{' . 'fieldApiName' . '}',
            ObjectSerializer::toPathValue($field_api_name),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            $update_lead_field_request
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array<string, mixed> of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    /**
     * Make a request.
     *
     * @param \GuzzleHttp\Psr7\Request $request An initialized request object.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @return \Psr\Http\Message\ResponseInterface
     */
    private function makeRequest(Request $request)
    {
        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            $response = $e->getResponse();
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                (int) $e->getCode(),
                $response ? $response->getHeaders() : [],
                $response ? (string) $response->getBody() : null
            );
        }

        $statusCode = $response->getStatusCode();
        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    (string) $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                (string) $response->getBody()
            );
        }
        return $response;
    }

    /**
     * Make an async request.
     *
     * @param \GuzzleHttp\Psr7\Request $request An initialized request object.
     * @param class-string $returnType The return type.
     * @param callable $exceptionHandler A callback to process HTTP errors.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @return \GuzzleHttp\Promise\PromiseInterface A promise that will return a processed response.
     */
    private function makeAsyncRequest(Request $request, string $returnType, callable $exceptionHandler)
    {
        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function (ResponseInterface $response) use ($returnType) {
                    return $this->responseToReturn($response, $returnType);
                },
                function (RequestException $exception) use ($exceptionHandler) {
                    $response = $exception->getResponse();
                    $e = new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : [],
                        $response ? (string) $response->getBody() : null
                    );
                    throw $exceptionHandler($e);
                }
            );
    }

    /**
     * Convert a response to a return standard return array.
     *
     * @template T
     * @param \Psr\Http\Message\ResponseInterface $response A response from a request with a serialized body.
     * @param string $returnType The primary return type.
     * @phpstan-param class-string<T> $returnType
     *
     * @return array structured array or response and http info.
     * @phpstan-return array{T, int, array<array<string>>}
     */
    private function responseToReturn(ResponseInterface $response, string $returnType)
    {
        return [
            $this->deserializeResponseBody($response->getBody(), $returnType),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    /**
     * Deserialize a response body.
     *
     * @template T
     * @param mixed $responseBody The response body.
     * @param string $returnType The return type.
     * @param array<string, string[]> $headers A list of headers from the response.
     * @phpstan-param class-string<T> $returnType
     *
     * @return mixed Either a string or a stream to be passed to a file object.
     * @phpstan-return T
     * @psalm-return T
     */
    private function deserializeResponseBody($responseBody, string $returnType, array $headers = [])
    {
        return ObjectSerializer::deserialize(
            $returnType === \SplFileObject::class ? $responseBody : (string) $responseBody,
            $returnType,
            $headers
        );
    }
}
