<?php
/**
 * StaticListsApi
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Lead
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketo Rest API
 *
 * Marketo Rest API
 *
 * OpenAPI spec version: 1.0
 * Contact: developerfeedback@marketo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.26
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace NecLimDul\MarketoRest\Lead\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Query;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\Promise\PromiseInterface;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\ResponseInterface;
use NecLimDul\MarketoRest\Lead\ApiException;
use NecLimDul\MarketoRest\Lead\Configuration;
use NecLimDul\MarketoRest\Lead\HeaderSelector;
use NecLimDul\MarketoRest\Lead\ObjectSerializer;

/**
 * StaticListsApi Class Doc Comment
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Lead
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class StaticListsApi
{

    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Exception handler for addLeadsToListUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function addLeadsToListUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Lead\Model\ResponseOfListOperationOutputData::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Add to List
     *
     * @param  int $list_id Id of target list (required)
     * @param  \NecLimDul\MarketoRest\Lead\Model\ListOperationRequest $list_operation_request Optional JSON request body for submitting leads (optional)
     * @param  int[] $id Comma-separated list of lead ids to add to the list (optional)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfListOperationOutputData
     */
    public function addLeadsToListUsingPOST(
        int $list_id,
        \NecLimDul\MarketoRest\Lead\Model\ListOperationRequest $list_operation_request = null,
        array $id = null
    ): \NecLimDul\MarketoRest\Lead\Model\ResponseOfListOperationOutputData
    {
        list($response) = $this->addLeadsToListUsingPOSTWithHttpInfo($list_id, $list_operation_request, $id);
        return $response;
    }

    /**
     * Add to List
     *
     * @param  int $list_id Id of target list (required)
     * @param  \NecLimDul\MarketoRest\Lead\Model\ListOperationRequest $list_operation_request Optional JSON request body for submitting leads (optional)
     * @param  int[] $id Comma-separated list of lead ids to add to the list (optional)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Lead\Model\ResponseOfListOperationOutputData, HTTP status code, HTTP response headers (array of strings)
     * @phpstan-return array{ \NecLimDul\MarketoRest\Lead\Model\ResponseOfListOperationOutputData, int, array<array<string>>}
     */
    public function addLeadsToListUsingPOSTWithHttpInfo(
        int $list_id,
        \NecLimDul\MarketoRest\Lead\Model\ListOperationRequest $list_operation_request = null,
        array $id = null
    ): array
    {
        $request = $this->addLeadsToListUsingPOSTRequest($list_id, $list_operation_request, $id);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Lead\Model\ResponseOfListOperationOutputData::class
            );
        } catch (ApiException $e) {
            throw $this->addLeadsToListUsingPOSTHandleException($e);
        }
    }

    /**
     * Add to List
     *
     * @param  int $list_id Id of target list (required)
     * @param  \NecLimDul\MarketoRest\Lead\Model\ListOperationRequest $list_operation_request Optional JSON request body for submitting leads (optional)
     * @param  int[] $id Comma-separated list of lead ids to add to the list (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addLeadsToListUsingPOSTAsync(
        int $list_id,
        \NecLimDul\MarketoRest\Lead\Model\ListOperationRequest $list_operation_request = null,
        array $id = null
    ): PromiseInterface
    {
        return $this->addLeadsToListUsingPOSTAsyncWithHttpInfo($list_id, $list_operation_request, $id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Add to List
     *
     * @param  int $list_id Id of target list (required)
     * @param  \NecLimDul\MarketoRest\Lead\Model\ListOperationRequest $list_operation_request Optional JSON request body for submitting leads (optional)
     * @param  int[] $id Comma-separated list of lead ids to add to the list (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addLeadsToListUsingPOSTAsyncWithHttpInfo(
        int $list_id,
        \NecLimDul\MarketoRest\Lead\Model\ListOperationRequest $list_operation_request = null,
        array $id = null
    ): PromiseInterface
    {
        $request = $this->addLeadsToListUsingPOSTRequest($list_id, $list_operation_request, $id);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Lead\Model\ResponseOfListOperationOutputData::class,
            [$this, 'addLeadsToListUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'addLeadsToListUsingPOST'
     *
     * @param  int $list_id Id of target list (required)
     * @param  \NecLimDul\MarketoRest\Lead\Model\ListOperationRequest $list_operation_request Optional JSON request body for submitting leads (optional)
     * @param  int[] $id Comma-separated list of lead ids to add to the list (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addLeadsToListUsingPOSTRequest(
        int $list_id,
        \NecLimDul\MarketoRest\Lead\Model\ListOperationRequest $list_operation_request = null,
        array $id = null
    ): Request
    {

        $resourcePath = '/rest/v1/lists/{listId}/leads.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Query parameters.
        $queryParams['id'] = ObjectSerializer::toQueryValue($id);
        // Remove any null (optional values).
        $queryParams = array_filter($queryParams, function($v) { return $v !== null; });

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'listId' . '}',
            ObjectSerializer::toPathValue($list_id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );
        // for model (json/xml)
        if (!empty($list_operation_request)) {
            $httpBody = ObjectSerializer::toBodyValue($list_operation_request, $headers['Content-Type'] === 'application/json');
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Exception handler for areLeadsMemberOfListUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function areLeadsMemberOfListUsingGETHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Lead\Model\ResponseOfListOperationOutputData::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Member of List
     *
     * @param  int $list_id Id of the static list to check against (required)
     * @param  \NecLimDul\MarketoRest\Lead\Model\ListOperationRequest $list_operation_request Optional JSON request body (optional)
     * @param  int[] $id Comma-separated list of lead ids to check (optional)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfListOperationOutputData
     */
    public function areLeadsMemberOfListUsingGET(
        int $list_id,
        \NecLimDul\MarketoRest\Lead\Model\ListOperationRequest $list_operation_request = null,
        array $id = null
    ): \NecLimDul\MarketoRest\Lead\Model\ResponseOfListOperationOutputData
    {
        list($response) = $this->areLeadsMemberOfListUsingGETWithHttpInfo($list_id, $list_operation_request, $id);
        return $response;
    }

    /**
     * Member of List
     *
     * @param  int $list_id Id of the static list to check against (required)
     * @param  \NecLimDul\MarketoRest\Lead\Model\ListOperationRequest $list_operation_request Optional JSON request body (optional)
     * @param  int[] $id Comma-separated list of lead ids to check (optional)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Lead\Model\ResponseOfListOperationOutputData, HTTP status code, HTTP response headers (array of strings)
     * @phpstan-return array{ \NecLimDul\MarketoRest\Lead\Model\ResponseOfListOperationOutputData, int, array<array<string>>}
     */
    public function areLeadsMemberOfListUsingGETWithHttpInfo(
        int $list_id,
        \NecLimDul\MarketoRest\Lead\Model\ListOperationRequest $list_operation_request = null,
        array $id = null
    ): array
    {
        $request = $this->areLeadsMemberOfListUsingGETRequest($list_id, $list_operation_request, $id);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Lead\Model\ResponseOfListOperationOutputData::class
            );
        } catch (ApiException $e) {
            throw $this->areLeadsMemberOfListUsingGETHandleException($e);
        }
    }

    /**
     * Member of List
     *
     * @param  int $list_id Id of the static list to check against (required)
     * @param  \NecLimDul\MarketoRest\Lead\Model\ListOperationRequest $list_operation_request Optional JSON request body (optional)
     * @param  int[] $id Comma-separated list of lead ids to check (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function areLeadsMemberOfListUsingGETAsync(
        int $list_id,
        \NecLimDul\MarketoRest\Lead\Model\ListOperationRequest $list_operation_request = null,
        array $id = null
    ): PromiseInterface
    {
        return $this->areLeadsMemberOfListUsingGETAsyncWithHttpInfo($list_id, $list_operation_request, $id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Member of List
     *
     * @param  int $list_id Id of the static list to check against (required)
     * @param  \NecLimDul\MarketoRest\Lead\Model\ListOperationRequest $list_operation_request Optional JSON request body (optional)
     * @param  int[] $id Comma-separated list of lead ids to check (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function areLeadsMemberOfListUsingGETAsyncWithHttpInfo(
        int $list_id,
        \NecLimDul\MarketoRest\Lead\Model\ListOperationRequest $list_operation_request = null,
        array $id = null
    ): PromiseInterface
    {
        $request = $this->areLeadsMemberOfListUsingGETRequest($list_id, $list_operation_request, $id);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Lead\Model\ResponseOfListOperationOutputData::class,
            [$this, 'areLeadsMemberOfListUsingGETHandleException']
        );
    }

    /**
     * Create request for operation 'areLeadsMemberOfListUsingGET'
     *
     * @param  int $list_id Id of the static list to check against (required)
     * @param  \NecLimDul\MarketoRest\Lead\Model\ListOperationRequest $list_operation_request Optional JSON request body (optional)
     * @param  int[] $id Comma-separated list of lead ids to check (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function areLeadsMemberOfListUsingGETRequest(
        int $list_id,
        \NecLimDul\MarketoRest\Lead\Model\ListOperationRequest $list_operation_request = null,
        array $id = null
    ): Request
    {

        $resourcePath = '/rest/v1/lists/{listId}/leads/ismember.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Query parameters.
        $queryParams['id'] = ObjectSerializer::toQueryValue($id);
        // Remove any null (optional values).
        $queryParams = array_filter($queryParams, function($v) { return $v !== null; });

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'listId' . '}',
            ObjectSerializer::toPathValue($list_id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );
        // for model (json/xml)
        if (!empty($list_operation_request)) {
            $httpBody = ObjectSerializer::toBodyValue($list_operation_request, $headers['Content-Type'] === 'application/json');
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Exception handler for getLeadsByListIdUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function getLeadsByListIdUsingGETHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadByListId::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Leads By List Id
     *
     * @param  int $list_id Id of the static list to retrieve records from (required)
     * @param  string[] $fields Comma-separated list of lead fields to return for each record.  If unset will return email, updatedAt, createdAt, lastName, firstName and id (optional)
     * @param  int $batch_size The batch size to return.  The max and default value is 300. (optional)
     * @param  string $next_page_token A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info. (optional)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadByListId
     */
    public function getLeadsByListIdUsingGET(
        int $list_id,
        array $fields = null,
        int $batch_size = null,
        string $next_page_token = null
    ): \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadByListId
    {
        list($response) = $this->getLeadsByListIdUsingGETWithHttpInfo($list_id, $fields, $batch_size, $next_page_token);
        return $response;
    }

    /**
     * Get Leads By List Id
     *
     * @param  int $list_id Id of the static list to retrieve records from (required)
     * @param  string[] $fields Comma-separated list of lead fields to return for each record.  If unset will return email, updatedAt, createdAt, lastName, firstName and id (optional)
     * @param  int $batch_size The batch size to return.  The max and default value is 300. (optional)
     * @param  string $next_page_token A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info. (optional)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadByListId, HTTP status code, HTTP response headers (array of strings)
     * @phpstan-return array{ \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadByListId, int, array<array<string>>}
     */
    public function getLeadsByListIdUsingGETWithHttpInfo(
        int $list_id,
        array $fields = null,
        int $batch_size = null,
        string $next_page_token = null
    ): array
    {
        $request = $this->getLeadsByListIdUsingGETRequest($list_id, $fields, $batch_size, $next_page_token);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadByListId::class
            );
        } catch (ApiException $e) {
            throw $this->getLeadsByListIdUsingGETHandleException($e);
        }
    }

    /**
     * Get Leads By List Id
     *
     * @param  int $list_id Id of the static list to retrieve records from (required)
     * @param  string[] $fields Comma-separated list of lead fields to return for each record.  If unset will return email, updatedAt, createdAt, lastName, firstName and id (optional)
     * @param  int $batch_size The batch size to return.  The max and default value is 300. (optional)
     * @param  string $next_page_token A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLeadsByListIdUsingGETAsync(
        int $list_id,
        array $fields = null,
        int $batch_size = null,
        string $next_page_token = null
    ): PromiseInterface
    {
        return $this->getLeadsByListIdUsingGETAsyncWithHttpInfo($list_id, $fields, $batch_size, $next_page_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Get Leads By List Id
     *
     * @param  int $list_id Id of the static list to retrieve records from (required)
     * @param  string[] $fields Comma-separated list of lead fields to return for each record.  If unset will return email, updatedAt, createdAt, lastName, firstName and id (optional)
     * @param  int $batch_size The batch size to return.  The max and default value is 300. (optional)
     * @param  string $next_page_token A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLeadsByListIdUsingGETAsyncWithHttpInfo(
        int $list_id,
        array $fields = null,
        int $batch_size = null,
        string $next_page_token = null
    ): PromiseInterface
    {
        $request = $this->getLeadsByListIdUsingGETRequest($list_id, $fields, $batch_size, $next_page_token);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadByListId::class,
            [$this, 'getLeadsByListIdUsingGETHandleException']
        );
    }

    /**
     * Create request for operation 'getLeadsByListIdUsingGET'
     *
     * @param  int $list_id Id of the static list to retrieve records from (required)
     * @param  string[] $fields Comma-separated list of lead fields to return for each record.  If unset will return email, updatedAt, createdAt, lastName, firstName and id (optional)
     * @param  int $batch_size The batch size to return.  The max and default value is 300. (optional)
     * @param  string $next_page_token A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLeadsByListIdUsingGETRequest(
        int $list_id,
        array $fields = null,
        int $batch_size = null,
        string $next_page_token = null
    ): Request
    {

        $resourcePath = '/rest/v1/list/{listId}/leads.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Query parameters.
        $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        $queryParams['batchSize'] = ObjectSerializer::toQueryValue($batch_size);
        $queryParams['nextPageToken'] = ObjectSerializer::toQueryValue($next_page_token);
        // Remove any null (optional values).
        $queryParams = array_filter($queryParams, function($v) { return $v !== null; });

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'listId' . '}',
            ObjectSerializer::toPathValue($list_id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Exception handler for getLeadsByListIdUsingGET1.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function getLeadsByListIdUsingGET1HandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Lead\Model\ResponseOfLead::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Leads By List Id
     *
     * @param  int $list_id Id of the static list to retrieve records from (required)
     * @param  string[] $fields Comma-separated list of lead fields to return for each record.  If unset will return email, updatedAt, createdAt, lastName, firstName and id (optional)
     * @param  int $batch_size The batch size to return.  The max and default value is 300. (optional)
     * @param  string $next_page_token A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info. (optional)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfLead
     */
    public function getLeadsByListIdUsingGET1(
        int $list_id,
        array $fields = null,
        int $batch_size = null,
        string $next_page_token = null
    ): \NecLimDul\MarketoRest\Lead\Model\ResponseOfLead
    {
        list($response) = $this->getLeadsByListIdUsingGET1WithHttpInfo($list_id, $fields, $batch_size, $next_page_token);
        return $response;
    }

    /**
     * Get Leads By List Id
     *
     * @param  int $list_id Id of the static list to retrieve records from (required)
     * @param  string[] $fields Comma-separated list of lead fields to return for each record.  If unset will return email, updatedAt, createdAt, lastName, firstName and id (optional)
     * @param  int $batch_size The batch size to return.  The max and default value is 300. (optional)
     * @param  string $next_page_token A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info. (optional)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Lead\Model\ResponseOfLead, HTTP status code, HTTP response headers (array of strings)
     * @phpstan-return array{ \NecLimDul\MarketoRest\Lead\Model\ResponseOfLead, int, array<array<string>>}
     */
    public function getLeadsByListIdUsingGET1WithHttpInfo(
        int $list_id,
        array $fields = null,
        int $batch_size = null,
        string $next_page_token = null
    ): array
    {
        $request = $this->getLeadsByListIdUsingGET1Request($list_id, $fields, $batch_size, $next_page_token);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Lead\Model\ResponseOfLead::class
            );
        } catch (ApiException $e) {
            throw $this->getLeadsByListIdUsingGET1HandleException($e);
        }
    }

    /**
     * Get Leads By List Id
     *
     * @param  int $list_id Id of the static list to retrieve records from (required)
     * @param  string[] $fields Comma-separated list of lead fields to return for each record.  If unset will return email, updatedAt, createdAt, lastName, firstName and id (optional)
     * @param  int $batch_size The batch size to return.  The max and default value is 300. (optional)
     * @param  string $next_page_token A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLeadsByListIdUsingGET1Async(
        int $list_id,
        array $fields = null,
        int $batch_size = null,
        string $next_page_token = null
    ): PromiseInterface
    {
        return $this->getLeadsByListIdUsingGET1AsyncWithHttpInfo($list_id, $fields, $batch_size, $next_page_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Get Leads By List Id
     *
     * @param  int $list_id Id of the static list to retrieve records from (required)
     * @param  string[] $fields Comma-separated list of lead fields to return for each record.  If unset will return email, updatedAt, createdAt, lastName, firstName and id (optional)
     * @param  int $batch_size The batch size to return.  The max and default value is 300. (optional)
     * @param  string $next_page_token A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLeadsByListIdUsingGET1AsyncWithHttpInfo(
        int $list_id,
        array $fields = null,
        int $batch_size = null,
        string $next_page_token = null
    ): PromiseInterface
    {
        $request = $this->getLeadsByListIdUsingGET1Request($list_id, $fields, $batch_size, $next_page_token);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Lead\Model\ResponseOfLead::class,
            [$this, 'getLeadsByListIdUsingGET1HandleException']
        );
    }

    /**
     * Create request for operation 'getLeadsByListIdUsingGET1'
     *
     * @param  int $list_id Id of the static list to retrieve records from (required)
     * @param  string[] $fields Comma-separated list of lead fields to return for each record.  If unset will return email, updatedAt, createdAt, lastName, firstName and id (optional)
     * @param  int $batch_size The batch size to return.  The max and default value is 300. (optional)
     * @param  string $next_page_token A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLeadsByListIdUsingGET1Request(
        int $list_id,
        array $fields = null,
        int $batch_size = null,
        string $next_page_token = null
    ): Request
    {

        $resourcePath = '/rest/v1/lists/{listId}/leads.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Query parameters.
        $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        $queryParams['batchSize'] = ObjectSerializer::toQueryValue($batch_size);
        $queryParams['nextPageToken'] = ObjectSerializer::toQueryValue($next_page_token);
        // Remove any null (optional values).
        $queryParams = array_filter($queryParams, function($v) { return $v !== null; });

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'listId' . '}',
            ObjectSerializer::toPathValue($list_id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Exception handler for getListByIdUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function getListByIdUsingGETHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Lead\Model\ResponseOfStaticList::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get List by Id
     *
     * @param  int $list_id Id of the static list to retrieve records from (required)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfStaticList
     */
    public function getListByIdUsingGET(
        int $list_id
    ): \NecLimDul\MarketoRest\Lead\Model\ResponseOfStaticList
    {
        list($response) = $this->getListByIdUsingGETWithHttpInfo($list_id);
        return $response;
    }

    /**
     * Get List by Id
     *
     * @param  int $list_id Id of the static list to retrieve records from (required)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Lead\Model\ResponseOfStaticList, HTTP status code, HTTP response headers (array of strings)
     * @phpstan-return array{ \NecLimDul\MarketoRest\Lead\Model\ResponseOfStaticList, int, array<array<string>>}
     */
    public function getListByIdUsingGETWithHttpInfo(
        int $list_id
    ): array
    {
        $request = $this->getListByIdUsingGETRequest($list_id);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Lead\Model\ResponseOfStaticList::class
            );
        } catch (ApiException $e) {
            throw $this->getListByIdUsingGETHandleException($e);
        }
    }

    /**
     * Get List by Id
     *
     * @param  int $list_id Id of the static list to retrieve records from (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getListByIdUsingGETAsync(
        int $list_id
    ): PromiseInterface
    {
        return $this->getListByIdUsingGETAsyncWithHttpInfo($list_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Get List by Id
     *
     * @param  int $list_id Id of the static list to retrieve records from (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getListByIdUsingGETAsyncWithHttpInfo(
        int $list_id
    ): PromiseInterface
    {
        $request = $this->getListByIdUsingGETRequest($list_id);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Lead\Model\ResponseOfStaticList::class,
            [$this, 'getListByIdUsingGETHandleException']
        );
    }

    /**
     * Create request for operation 'getListByIdUsingGET'
     *
     * @param  int $list_id Id of the static list to retrieve records from (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getListByIdUsingGETRequest(
        int $list_id
    ): Request
    {

        $resourcePath = '/rest/v1/lists/{listId}.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'listId' . '}',
            ObjectSerializer::toPathValue($list_id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Exception handler for getListsUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function getListsUsingGETHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Lead\Model\ResponseOfStaticList::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Lists
     *
     * @param  int[] $id Comma-separated list of static list ids to return (optional)
     * @param  string[] $name Comma-separated list of static list names to return (optional)
     * @param  string[] $program_name Comma-separated list of program names.  If set will return all static lists that are children of the given programs (optional)
     * @param  string[] $workspace_name Comma-separated list of workspace names.  If set will return all static lists that are children of the given workspaces (optional)
     * @param  int $batch_size The batch size to return.  The max and default value is 300. (optional)
     * @param  string $next_page_token A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info. (optional)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfStaticList
     */
    public function getListsUsingGET(
        array $id = null,
        array $name = null,
        array $program_name = null,
        array $workspace_name = null,
        int $batch_size = null,
        string $next_page_token = null
    ): \NecLimDul\MarketoRest\Lead\Model\ResponseOfStaticList
    {
        list($response) = $this->getListsUsingGETWithHttpInfo($id, $name, $program_name, $workspace_name, $batch_size, $next_page_token);
        return $response;
    }

    /**
     * Get Lists
     *
     * @param  int[] $id Comma-separated list of static list ids to return (optional)
     * @param  string[] $name Comma-separated list of static list names to return (optional)
     * @param  string[] $program_name Comma-separated list of program names.  If set will return all static lists that are children of the given programs (optional)
     * @param  string[] $workspace_name Comma-separated list of workspace names.  If set will return all static lists that are children of the given workspaces (optional)
     * @param  int $batch_size The batch size to return.  The max and default value is 300. (optional)
     * @param  string $next_page_token A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info. (optional)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Lead\Model\ResponseOfStaticList, HTTP status code, HTTP response headers (array of strings)
     * @phpstan-return array{ \NecLimDul\MarketoRest\Lead\Model\ResponseOfStaticList, int, array<array<string>>}
     */
    public function getListsUsingGETWithHttpInfo(
        array $id = null,
        array $name = null,
        array $program_name = null,
        array $workspace_name = null,
        int $batch_size = null,
        string $next_page_token = null
    ): array
    {
        $request = $this->getListsUsingGETRequest($id, $name, $program_name, $workspace_name, $batch_size, $next_page_token);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Lead\Model\ResponseOfStaticList::class
            );
        } catch (ApiException $e) {
            throw $this->getListsUsingGETHandleException($e);
        }
    }

    /**
     * Get Lists
     *
     * @param  int[] $id Comma-separated list of static list ids to return (optional)
     * @param  string[] $name Comma-separated list of static list names to return (optional)
     * @param  string[] $program_name Comma-separated list of program names.  If set will return all static lists that are children of the given programs (optional)
     * @param  string[] $workspace_name Comma-separated list of workspace names.  If set will return all static lists that are children of the given workspaces (optional)
     * @param  int $batch_size The batch size to return.  The max and default value is 300. (optional)
     * @param  string $next_page_token A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getListsUsingGETAsync(
        array $id = null,
        array $name = null,
        array $program_name = null,
        array $workspace_name = null,
        int $batch_size = null,
        string $next_page_token = null
    ): PromiseInterface
    {
        return $this->getListsUsingGETAsyncWithHttpInfo($id, $name, $program_name, $workspace_name, $batch_size, $next_page_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Get Lists
     *
     * @param  int[] $id Comma-separated list of static list ids to return (optional)
     * @param  string[] $name Comma-separated list of static list names to return (optional)
     * @param  string[] $program_name Comma-separated list of program names.  If set will return all static lists that are children of the given programs (optional)
     * @param  string[] $workspace_name Comma-separated list of workspace names.  If set will return all static lists that are children of the given workspaces (optional)
     * @param  int $batch_size The batch size to return.  The max and default value is 300. (optional)
     * @param  string $next_page_token A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getListsUsingGETAsyncWithHttpInfo(
        array $id = null,
        array $name = null,
        array $program_name = null,
        array $workspace_name = null,
        int $batch_size = null,
        string $next_page_token = null
    ): PromiseInterface
    {
        $request = $this->getListsUsingGETRequest($id, $name, $program_name, $workspace_name, $batch_size, $next_page_token);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Lead\Model\ResponseOfStaticList::class,
            [$this, 'getListsUsingGETHandleException']
        );
    }

    /**
     * Create request for operation 'getListsUsingGET'
     *
     * @param  int[] $id Comma-separated list of static list ids to return (optional)
     * @param  string[] $name Comma-separated list of static list names to return (optional)
     * @param  string[] $program_name Comma-separated list of program names.  If set will return all static lists that are children of the given programs (optional)
     * @param  string[] $workspace_name Comma-separated list of workspace names.  If set will return all static lists that are children of the given workspaces (optional)
     * @param  int $batch_size The batch size to return.  The max and default value is 300. (optional)
     * @param  string $next_page_token A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getListsUsingGETRequest(
        array $id = null,
        array $name = null,
        array $program_name = null,
        array $workspace_name = null,
        int $batch_size = null,
        string $next_page_token = null
    ): Request
    {

        $resourcePath = '/rest/v1/lists.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Query parameters.
        $queryParams['id'] = ObjectSerializer::toQueryValue($id);
        $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        $queryParams['programName'] = ObjectSerializer::toQueryValue($program_name);
        $queryParams['workspaceName'] = ObjectSerializer::toQueryValue($workspace_name);
        $queryParams['batchSize'] = ObjectSerializer::toQueryValue($batch_size);
        $queryParams['nextPageToken'] = ObjectSerializer::toQueryValue($next_page_token);
        // Remove any null (optional values).
        $queryParams = array_filter($queryParams, function($v) { return $v !== null; });
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Exception handler for removeLeadsFromListUsingDELETE.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function removeLeadsFromListUsingDELETEHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Lead\Model\ResponseOfListOperationOutputData::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Remove from List
     *
     * @param  int $list_id Id of static list to remove leads from (required)
     * @param  \NecLimDul\MarketoRest\Lead\Model\ListOperationRequest $list_operation_request listOperationRequest (required)
     * @param  int[] $id id (required)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfListOperationOutputData
     */
    public function removeLeadsFromListUsingDELETE(
        int $list_id,
        \NecLimDul\MarketoRest\Lead\Model\ListOperationRequest $list_operation_request,
        array $id
    ): \NecLimDul\MarketoRest\Lead\Model\ResponseOfListOperationOutputData
    {
        list($response) = $this->removeLeadsFromListUsingDELETEWithHttpInfo($list_id, $list_operation_request, $id);
        return $response;
    }

    /**
     * Remove from List
     *
     * @param  int $list_id Id of static list to remove leads from (required)
     * @param  \NecLimDul\MarketoRest\Lead\Model\ListOperationRequest $list_operation_request listOperationRequest (required)
     * @param  int[] $id id (required)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Lead\Model\ResponseOfListOperationOutputData, HTTP status code, HTTP response headers (array of strings)
     * @phpstan-return array{ \NecLimDul\MarketoRest\Lead\Model\ResponseOfListOperationOutputData, int, array<array<string>>}
     */
    public function removeLeadsFromListUsingDELETEWithHttpInfo(
        int $list_id,
        \NecLimDul\MarketoRest\Lead\Model\ListOperationRequest $list_operation_request,
        array $id
    ): array
    {
        $request = $this->removeLeadsFromListUsingDELETERequest($list_id, $list_operation_request, $id);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Lead\Model\ResponseOfListOperationOutputData::class
            );
        } catch (ApiException $e) {
            throw $this->removeLeadsFromListUsingDELETEHandleException($e);
        }
    }

    /**
     * Remove from List
     *
     * @param  int $list_id Id of static list to remove leads from (required)
     * @param  \NecLimDul\MarketoRest\Lead\Model\ListOperationRequest $list_operation_request listOperationRequest (required)
     * @param  int[] $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeLeadsFromListUsingDELETEAsync(
        int $list_id,
        \NecLimDul\MarketoRest\Lead\Model\ListOperationRequest $list_operation_request,
        array $id
    ): PromiseInterface
    {
        return $this->removeLeadsFromListUsingDELETEAsyncWithHttpInfo($list_id, $list_operation_request, $id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Remove from List
     *
     * @param  int $list_id Id of static list to remove leads from (required)
     * @param  \NecLimDul\MarketoRest\Lead\Model\ListOperationRequest $list_operation_request listOperationRequest (required)
     * @param  int[] $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeLeadsFromListUsingDELETEAsyncWithHttpInfo(
        int $list_id,
        \NecLimDul\MarketoRest\Lead\Model\ListOperationRequest $list_operation_request,
        array $id
    ): PromiseInterface
    {
        $request = $this->removeLeadsFromListUsingDELETERequest($list_id, $list_operation_request, $id);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Lead\Model\ResponseOfListOperationOutputData::class,
            [$this, 'removeLeadsFromListUsingDELETEHandleException']
        );
    }

    /**
     * Create request for operation 'removeLeadsFromListUsingDELETE'
     *
     * @param  int $list_id Id of static list to remove leads from (required)
     * @param  \NecLimDul\MarketoRest\Lead\Model\ListOperationRequest $list_operation_request listOperationRequest (required)
     * @param  int[] $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function removeLeadsFromListUsingDELETERequest(
        int $list_id,
        \NecLimDul\MarketoRest\Lead\Model\ListOperationRequest $list_operation_request,
        array $id
    ): Request
    {
        // Verify the required parameter 'id' is set.
        if (empty($id)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling removeLeadsFromListUsingDELETE'
            );
        }

        $resourcePath = '/rest/v1/lists/{listId}/leads.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Query parameters.
        $queryParams['id'] = ObjectSerializer::toQueryValue($id);
        // Remove any null (optional values).
        $queryParams = array_filter($queryParams, function($v) { return $v !== null; });

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'listId' . '}',
            ObjectSerializer::toPathValue($list_id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );
        $httpBody = ObjectSerializer::toBodyValue($list_operation_request, $headers['Content-Type'] === 'application/json');


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array<string, mixed> of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    /**
     * Make a request.
     *
     * @param \GuzzleHttp\Psr7\Request $request An initialized request object.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @return \Psr\Http\Message\ResponseInterface
     */
    private function makeRequest(Request $request) {
        $options = $this->createHttpClientOption();
        try {
           $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            $response = $e->getResponse();
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                (int) $e->getCode(),
                $response ? $response->getHeaders() : null,
                $response ? (string) $response->getBody() : null
            );
        }

        $statusCode = $response->getStatusCode();
        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    (string) $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                (string) $response->getBody()
            );
        }
        return $response;
    }

    /**
     * Make an async request.
     *
     * @param \GuzzleHttp\Psr7\Request $request An initialized request object.
     * @param class-string $returnType The return type.
     * @param callable $exceptionHandler A callback to process HTTP errors.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @return \GuzzleHttp\Promise\PromiseInterface A promise that will return a processed response.
     */
    private function makeAsyncRequest(Request $request, string $returnType, callable $exceptionHandler)
    {
        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->responseToReturn($response, $returnType);
                },
                function (RequestException $exception) use ($exceptionHandler) {
                    $response = $exception->getResponse();
                    $e = new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                    throw $exceptionHandler($e);
                }
            );
    }

    /**
     * Convert a response to a return standard return array.
     *
     * @template T
     * @param \Psr\Http\Message\ResponseInterface $response A response from a request with a serialized body.
     * @param string $returnType The primary return type.
     * @phpstan-param class-string<T> $returnType
     *
     * @return array structured array or response and http info.
     * @phpstan-return array{T, int, array<array<string>>}
     */
    private function responseToReturn(ResponseInterface $response, string $returnType) {
        return [
            $this->deserializeResponseBody($response->getBody(), $returnType),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    /**
     * Deserialize a response body.
     *
     * @template T
     * @param mixed $responseBody The response body.
     * @param string $returnType The return type.
     * @param array<string, string[]>|null $headers A list of headers from the response.
     * @phpstan-param class-string<T> $returnType
     *
     * @return mixed Either a string or a stream to be passed to a file object.
     * @phpstan-return T
     * @psalm-return T
     */
    private function deserializeResponseBody($responseBody, string $returnType, ?array $headers = [])
    {
        return ObjectSerializer::deserialize(
            $returnType === '\SplFileObject' ? $responseBody : (string) $responseBody,
            $returnType,
            $headers
        );
    }

}
