<?php

/**
 * BulkImportProgramMembersApi
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Lead
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketo Rest API
 *
 * Marketo Rest API
 *
 * OpenAPI spec version: 1.0
 * Contact: developerfeedback@marketo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.26
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace NecLimDul\MarketoRest\Lead\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\Promise\PromiseInterface;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\ResponseInterface;
use NecLimDul\MarketoRest\Lead\ApiException;
use NecLimDul\MarketoRest\Lead\Configuration;
use NecLimDul\MarketoRest\Lead\HeaderSelector;
use NecLimDul\MarketoRest\Lead\ObjectSerializer;

/**
 * BulkImportProgramMembersApi Class Doc Comment
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Lead
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BulkImportProgramMembersApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the spec.
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Exception handler for getImportProgramMemberFailuresUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function getImportProgramMemberFailuresUsingGETHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Lead\Model\ObservableOfInputStreamContent::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Import Program Member Failures
     *
     * @param int $batch_id
     *   Id of the import batch job.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ObservableOfInputStreamContent
     */
    public function getImportProgramMemberFailuresUsingGET(
        int $batch_id
    ): \NecLimDul\MarketoRest\Lead\Model\ObservableOfInputStreamContent {
        list($response) = $this->getImportProgramMemberFailuresUsingGETWithHttpInfo($batch_id);
        return $response;
    }

    /**
     * Get Import Program Member Failures
     *
     * @param int $batch_id
     *   Id of the import batch job.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Lead\Model\ObservableOfInputStreamContent,
     *     int,
     *     array<array<string>>
     * }
     */
    public function getImportProgramMemberFailuresUsingGETWithHttpInfo(
        int $batch_id
    ): array {
        $request = $this->getImportProgramMemberFailuresUsingGETRequest($batch_id);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Lead\Model\ObservableOfInputStreamContent::class
            );
        } catch (ApiException $e) {
            throw $this->getImportProgramMemberFailuresUsingGETHandleException($e);
        }
    }

    /**
     * Get Import Program Member Failures
     *
     * @param int $batch_id
     *   Id of the import batch job.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getImportProgramMemberFailuresUsingGETAsync(
        int $batch_id
    ): PromiseInterface {
        return $this->getImportProgramMemberFailuresUsingGETAsyncWithHttpInfo($batch_id)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Lead\Model\ObservableOfInputStreamContent {
                    return $response[0];
                }
            );
    }

    /**
     * Get Import Program Member Failures
     *
     * @param int $batch_id
     *   Id of the import batch job.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getImportProgramMemberFailuresUsingGETAsyncWithHttpInfo(
        int $batch_id
    ): PromiseInterface {
        $request = $this->getImportProgramMemberFailuresUsingGETRequest($batch_id);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Lead\Model\ObservableOfInputStreamContent::class,
            [$this, 'getImportProgramMemberFailuresUsingGETHandleException']
        );
    }

    /**
     * Create request for operation 'getImportProgramMemberFailuresUsingGET'
     *
     * @param int $batch_id
     *   Id of the import batch job.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getImportProgramMemberFailuresUsingGETRequest(
        int $batch_id
    ): Request {

        $resourcePath = '/bulk/v1/program/members/import/{batchId}/failures.json';
        $resourcePath = str_replace(
            '{' . 'batchId' . '}',
            ObjectSerializer::toPathValue($batch_id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'GET',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for getImportProgramMemberStatusUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function getImportProgramMemberStatusUsingGETHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Lead\Model\ResponseOfImportProgramMemberResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Import Program Member Status
     *
     * @param int $batch_id
     *   Id of the import batch job.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfImportProgramMemberResponse
     */
    public function getImportProgramMemberStatusUsingGET(
        int $batch_id
    ): \NecLimDul\MarketoRest\Lead\Model\ResponseOfImportProgramMemberResponse {
        list($response) = $this->getImportProgramMemberStatusUsingGETWithHttpInfo($batch_id);
        return $response;
    }

    /**
     * Get Import Program Member Status
     *
     * @param int $batch_id
     *   Id of the import batch job.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Lead\Model\ResponseOfImportProgramMemberResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function getImportProgramMemberStatusUsingGETWithHttpInfo(
        int $batch_id
    ): array {
        $request = $this->getImportProgramMemberStatusUsingGETRequest($batch_id);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Lead\Model\ResponseOfImportProgramMemberResponse::class
            );
        } catch (ApiException $e) {
            throw $this->getImportProgramMemberStatusUsingGETHandleException($e);
        }
    }

    /**
     * Get Import Program Member Status
     *
     * @param int $batch_id
     *   Id of the import batch job.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getImportProgramMemberStatusUsingGETAsync(
        int $batch_id
    ): PromiseInterface {
        return $this->getImportProgramMemberStatusUsingGETAsyncWithHttpInfo($batch_id)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Lead\Model\ResponseOfImportProgramMemberResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Get Import Program Member Status
     *
     * @param int $batch_id
     *   Id of the import batch job.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getImportProgramMemberStatusUsingGETAsyncWithHttpInfo(
        int $batch_id
    ): PromiseInterface {
        $request = $this->getImportProgramMemberStatusUsingGETRequest($batch_id);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Lead\Model\ResponseOfImportProgramMemberResponse::class,
            [$this, 'getImportProgramMemberStatusUsingGETHandleException']
        );
    }

    /**
     * Create request for operation 'getImportProgramMemberStatusUsingGET'
     *
     * @param int $batch_id
     *   Id of the import batch job.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getImportProgramMemberStatusUsingGETRequest(
        int $batch_id
    ): Request {

        $resourcePath = '/bulk/v1/program/members/import/{batchId}/status.json';
        $resourcePath = str_replace(
            '{' . 'batchId' . '}',
            ObjectSerializer::toPathValue($batch_id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'GET',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for getImportProgramMemberWarningsUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function getImportProgramMemberWarningsUsingGETHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Lead\Model\ObservableOfInputStreamContent::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Import Program Member Warnings
     *
     * @param int $batch_id
     *   Id of the import batch job.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ObservableOfInputStreamContent
     */
    public function getImportProgramMemberWarningsUsingGET(
        int $batch_id
    ): \NecLimDul\MarketoRest\Lead\Model\ObservableOfInputStreamContent {
        list($response) = $this->getImportProgramMemberWarningsUsingGETWithHttpInfo($batch_id);
        return $response;
    }

    /**
     * Get Import Program Member Warnings
     *
     * @param int $batch_id
     *   Id of the import batch job.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Lead\Model\ObservableOfInputStreamContent,
     *     int,
     *     array<array<string>>
     * }
     */
    public function getImportProgramMemberWarningsUsingGETWithHttpInfo(
        int $batch_id
    ): array {
        $request = $this->getImportProgramMemberWarningsUsingGETRequest($batch_id);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Lead\Model\ObservableOfInputStreamContent::class
            );
        } catch (ApiException $e) {
            throw $this->getImportProgramMemberWarningsUsingGETHandleException($e);
        }
    }

    /**
     * Get Import Program Member Warnings
     *
     * @param int $batch_id
     *   Id of the import batch job.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getImportProgramMemberWarningsUsingGETAsync(
        int $batch_id
    ): PromiseInterface {
        return $this->getImportProgramMemberWarningsUsingGETAsyncWithHttpInfo($batch_id)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Lead\Model\ObservableOfInputStreamContent {
                    return $response[0];
                }
            );
    }

    /**
     * Get Import Program Member Warnings
     *
     * @param int $batch_id
     *   Id of the import batch job.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getImportProgramMemberWarningsUsingGETAsyncWithHttpInfo(
        int $batch_id
    ): PromiseInterface {
        $request = $this->getImportProgramMemberWarningsUsingGETRequest($batch_id);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Lead\Model\ObservableOfInputStreamContent::class,
            [$this, 'getImportProgramMemberWarningsUsingGETHandleException']
        );
    }

    /**
     * Create request for operation 'getImportProgramMemberWarningsUsingGET'
     *
     * @param int $batch_id
     *   Id of the import batch job.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getImportProgramMemberWarningsUsingGETRequest(
        int $batch_id
    ): Request {

        $resourcePath = '/bulk/v1/program/members/import/{batchId}/warnings.json';
        $resourcePath = str_replace(
            '{' . 'batchId' . '}',
            ObjectSerializer::toPathValue($batch_id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'GET',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for importProgramMemberUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function importProgramMemberUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Lead\Model\ResponseOfImportProgramMemberResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Import Program Members
     *
     * @param string $program_id
     *   Id of the program to add members to.
     * @param string $program_member_status
     *   Program member status for members being added.
     * @param string $format
     *   Import file format.
     * @param \SplFileObject $file
     *   File containing the data records to import.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfImportProgramMemberResponse
     */
    public function importProgramMemberUsingPOST(
        string $program_id,
        string $program_member_status,
        string $format,
        \SplFileObject $file
    ): \NecLimDul\MarketoRest\Lead\Model\ResponseOfImportProgramMemberResponse {
        list($response) = $this->importProgramMemberUsingPOSTWithHttpInfo($program_id, $program_member_status, $format, $file);
        return $response;
    }

    /**
     * Import Program Members
     *
     * @param string $program_id
     *   Id of the program to add members to.
     * @param string $program_member_status
     *   Program member status for members being added.
     * @param string $format
     *   Import file format.
     * @param \SplFileObject $file
     *   File containing the data records to import.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Lead\Model\ResponseOfImportProgramMemberResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function importProgramMemberUsingPOSTWithHttpInfo(
        string $program_id,
        string $program_member_status,
        string $format,
        \SplFileObject $file
    ): array {
        $request = $this->importProgramMemberUsingPOSTRequest($program_id, $program_member_status, $format, $file);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Lead\Model\ResponseOfImportProgramMemberResponse::class
            );
        } catch (ApiException $e) {
            throw $this->importProgramMemberUsingPOSTHandleException($e);
        }
    }

    /**
     * Import Program Members
     *
     * @param string $program_id
     *   Id of the program to add members to.
     * @param string $program_member_status
     *   Program member status for members being added.
     * @param string $format
     *   Import file format.
     * @param \SplFileObject $file
     *   File containing the data records to import.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function importProgramMemberUsingPOSTAsync(
        string $program_id,
        string $program_member_status,
        string $format,
        \SplFileObject $file
    ): PromiseInterface {
        return $this->importProgramMemberUsingPOSTAsyncWithHttpInfo($program_id, $program_member_status, $format, $file)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Lead\Model\ResponseOfImportProgramMemberResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Import Program Members
     *
     * @param string $program_id
     *   Id of the program to add members to.
     * @param string $program_member_status
     *   Program member status for members being added.
     * @param string $format
     *   Import file format.
     * @param \SplFileObject $file
     *   File containing the data records to import.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function importProgramMemberUsingPOSTAsyncWithHttpInfo(
        string $program_id,
        string $program_member_status,
        string $format,
        \SplFileObject $file
    ): PromiseInterface {
        $request = $this->importProgramMemberUsingPOSTRequest($program_id, $program_member_status, $format, $file);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Lead\Model\ResponseOfImportProgramMemberResponse::class,
            [$this, 'importProgramMemberUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'importProgramMemberUsingPOST'
     *
     * @param string $program_id
     *   Id of the program to add members to.
     * @param string $program_member_status
     *   Program member status for members being added.
     * @param string $format
     *   Import file format.
     * @param \SplFileObject $file
     *   File containing the data records to import.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function importProgramMemberUsingPOSTRequest(
        string $program_id,
        string $program_member_status,
        string $format,
        \SplFileObject $file
    ): Request {

        $resourcePath = '/bulk/v1/program/{programId}/members/import.json';
        $resourcePath = str_replace(
            '{' . 'programId' . '}',
            ObjectSerializer::toPathValue($program_id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['multipart/form-data']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
                'programMemberStatus' => ObjectSerializer::toQueryValue($program_member_status),
                'format' => ObjectSerializer::toQueryValue($format),
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
                'file' => ObjectSerializer::fileToFormValue($file),
            ],
            ''
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array<string, mixed> of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    /**
     * Make a request.
     *
     * @param \GuzzleHttp\Psr7\Request $request An initialized request object.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @return \Psr\Http\Message\ResponseInterface
     */
    private function makeRequest(Request $request)
    {
        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            $response = $e->getResponse();
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                (int) $e->getCode(),
                $response ? $response->getHeaders() : [],
                $response ? (string) $response->getBody() : null
            );
        }

        $statusCode = $response->getStatusCode();
        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    (string) $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                (string) $response->getBody()
            );
        }
        return $response;
    }

    /**
     * Make an async request.
     *
     * @param \GuzzleHttp\Psr7\Request $request An initialized request object.
     * @param class-string $returnType The return type.
     * @param callable $exceptionHandler A callback to process HTTP errors.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @return \GuzzleHttp\Promise\PromiseInterface A promise that will return a processed response.
     */
    private function makeAsyncRequest(Request $request, string $returnType, callable $exceptionHandler)
    {
        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function (ResponseInterface $response) use ($returnType) {
                    return $this->responseToReturn($response, $returnType);
                },
                function (RequestException $exception) use ($exceptionHandler) {
                    $response = $exception->getResponse();
                    $e = new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : [],
                        $response ? (string) $response->getBody() : null
                    );
                    throw $exceptionHandler($e);
                }
            );
    }

    /**
     * Convert a response to a return standard return array.
     *
     * @template T
     * @param \Psr\Http\Message\ResponseInterface $response A response from a request with a serialized body.
     * @param string $returnType The primary return type.
     * @phpstan-param class-string<T> $returnType
     *
     * @return array structured array or response and http info.
     * @phpstan-return array{T, int, array<array<string>>}
     */
    private function responseToReturn(ResponseInterface $response, string $returnType)
    {
        return [
            $this->deserializeResponseBody($response->getBody(), $returnType),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    /**
     * Deserialize a response body.
     *
     * @template T
     * @param mixed $responseBody The response body.
     * @param string $returnType The return type.
     * @param array<string, string[]> $headers A list of headers from the response.
     * @phpstan-param class-string<T> $returnType
     *
     * @return mixed Either a string or a stream to be passed to a file object.
     * @phpstan-return T
     * @psalm-return T
     */
    private function deserializeResponseBody($responseBody, string $returnType, array $headers = [])
    {
        return ObjectSerializer::deserialize(
            $returnType === \SplFileObject::class ? $responseBody : (string) $responseBody,
            $returnType,
            $headers
        );
    }
}
