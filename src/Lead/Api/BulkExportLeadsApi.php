<?php

/**
 * BulkExportLeadsApi
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Lead
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketo Rest API
 *
 * Marketo Rest API
 *
 * OpenAPI spec version: 1.0
 * Contact: developerfeedback@marketo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.26
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace NecLimDul\MarketoRest\Lead\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\Promise\PromiseInterface;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\ResponseInterface;
use NecLimDul\MarketoRest\Lead\ApiException;
use NecLimDul\MarketoRest\Lead\Configuration;
use NecLimDul\MarketoRest\Lead\HeaderSelector;
use NecLimDul\MarketoRest\Lead\ObjectSerializer;

/**
 * BulkExportLeadsApi Class Doc Comment
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Lead
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BulkExportLeadsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the spec.
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Exception handler for cancelExportLeadsUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function cancelExportLeadsUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Lead\Model\ResponseOfExportResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Cancel Export Lead Job
     *
     * @param string $export_id
     *   Id of export batch job.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfExportResponse
     */
    public function cancelExportLeadsUsingPOST(
        string $export_id
    ): \NecLimDul\MarketoRest\Lead\Model\ResponseOfExportResponse {
        list($response) = $this->cancelExportLeadsUsingPOSTWithHttpInfo($export_id);
        return $response;
    }

    /**
     * Cancel Export Lead Job
     *
     * @param string $export_id
     *   Id of export batch job.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Lead\Model\ResponseOfExportResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function cancelExportLeadsUsingPOSTWithHttpInfo(
        string $export_id
    ): array {
        $request = $this->cancelExportLeadsUsingPOSTRequest($export_id);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Lead\Model\ResponseOfExportResponse::class
            );
        } catch (ApiException $e) {
            throw $this->cancelExportLeadsUsingPOSTHandleException($e);
        }
    }

    /**
     * Cancel Export Lead Job
     *
     * @param string $export_id
     *   Id of export batch job.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelExportLeadsUsingPOSTAsync(
        string $export_id
    ): PromiseInterface {
        return $this->cancelExportLeadsUsingPOSTAsyncWithHttpInfo($export_id)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Lead\Model\ResponseOfExportResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Cancel Export Lead Job
     *
     * @param string $export_id
     *   Id of export batch job.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelExportLeadsUsingPOSTAsyncWithHttpInfo(
        string $export_id
    ): PromiseInterface {
        $request = $this->cancelExportLeadsUsingPOSTRequest($export_id);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Lead\Model\ResponseOfExportResponse::class,
            [$this, 'cancelExportLeadsUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'cancelExportLeadsUsingPOST'
     *
     * @param string $export_id
     *   Id of export batch job.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function cancelExportLeadsUsingPOSTRequest(
        string $export_id
    ): Request {

        $resourcePath = '/bulk/v1/leads/export/{exportId}/cancel.json';
        $resourcePath = str_replace(
            '{' . 'exportId' . '}',
            ObjectSerializer::toPathValue($export_id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for createExportLeadsUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function createExportLeadsUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Lead\Model\ResponseOfExportResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Create Export Lead Job
     *
     * @param \NecLimDul\MarketoRest\Lead\Model\ExportLeadRequest|null $export_lead_request
     *   exportLeadRequest&lt;br&gt;&lt;br&gt;ColumnHeaderNames: A JSON object containing key-value pairs of field and column header names.&lt;br&gt;&lt;br&gt;Example:&lt;br&gt;&lt;code&gt;\&quot;columnHeaderNames\&quot;:{&lt;br&gt;  \&quot;firstName\&quot;:\&quot;First Name\&quot;,&lt;br&gt;  \&quot;lastName\&quot;:\&quot;Last Name\&quot;,&lt;br&gt;  \&quot;email\&quot;:\&quot;Email Address\&quot;&lt;br&gt;}&lt;/code&gt;&lt;br&gt;
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfExportResponse
     */
    public function createExportLeadsUsingPOST(
        \NecLimDul\MarketoRest\Lead\Model\ExportLeadRequest $export_lead_request = null
    ): \NecLimDul\MarketoRest\Lead\Model\ResponseOfExportResponse {
        list($response) = $this->createExportLeadsUsingPOSTWithHttpInfo($export_lead_request);
        return $response;
    }

    /**
     * Create Export Lead Job
     *
     * @param \NecLimDul\MarketoRest\Lead\Model\ExportLeadRequest|null $export_lead_request
     *   exportLeadRequest&lt;br&gt;&lt;br&gt;ColumnHeaderNames: A JSON object containing key-value pairs of field and column header names.&lt;br&gt;&lt;br&gt;Example:&lt;br&gt;&lt;code&gt;\&quot;columnHeaderNames\&quot;:{&lt;br&gt;  \&quot;firstName\&quot;:\&quot;First Name\&quot;,&lt;br&gt;  \&quot;lastName\&quot;:\&quot;Last Name\&quot;,&lt;br&gt;  \&quot;email\&quot;:\&quot;Email Address\&quot;&lt;br&gt;}&lt;/code&gt;&lt;br&gt;
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Lead\Model\ResponseOfExportResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function createExportLeadsUsingPOSTWithHttpInfo(
        \NecLimDul\MarketoRest\Lead\Model\ExportLeadRequest $export_lead_request = null
    ): array {
        $request = $this->createExportLeadsUsingPOSTRequest($export_lead_request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Lead\Model\ResponseOfExportResponse::class
            );
        } catch (ApiException $e) {
            throw $this->createExportLeadsUsingPOSTHandleException($e);
        }
    }

    /**
     * Create Export Lead Job
     *
     * @param \NecLimDul\MarketoRest\Lead\Model\ExportLeadRequest|null $export_lead_request
     *   exportLeadRequest&lt;br&gt;&lt;br&gt;ColumnHeaderNames: A JSON object containing key-value pairs of field and column header names.&lt;br&gt;&lt;br&gt;Example:&lt;br&gt;&lt;code&gt;\&quot;columnHeaderNames\&quot;:{&lt;br&gt;  \&quot;firstName\&quot;:\&quot;First Name\&quot;,&lt;br&gt;  \&quot;lastName\&quot;:\&quot;Last Name\&quot;,&lt;br&gt;  \&quot;email\&quot;:\&quot;Email Address\&quot;&lt;br&gt;}&lt;/code&gt;&lt;br&gt;
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createExportLeadsUsingPOSTAsync(
        \NecLimDul\MarketoRest\Lead\Model\ExportLeadRequest $export_lead_request = null
    ): PromiseInterface {
        return $this->createExportLeadsUsingPOSTAsyncWithHttpInfo($export_lead_request)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Lead\Model\ResponseOfExportResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Create Export Lead Job
     *
     * @param \NecLimDul\MarketoRest\Lead\Model\ExportLeadRequest|null $export_lead_request
     *   exportLeadRequest&lt;br&gt;&lt;br&gt;ColumnHeaderNames: A JSON object containing key-value pairs of field and column header names.&lt;br&gt;&lt;br&gt;Example:&lt;br&gt;&lt;code&gt;\&quot;columnHeaderNames\&quot;:{&lt;br&gt;  \&quot;firstName\&quot;:\&quot;First Name\&quot;,&lt;br&gt;  \&quot;lastName\&quot;:\&quot;Last Name\&quot;,&lt;br&gt;  \&quot;email\&quot;:\&quot;Email Address\&quot;&lt;br&gt;}&lt;/code&gt;&lt;br&gt;
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createExportLeadsUsingPOSTAsyncWithHttpInfo(
        \NecLimDul\MarketoRest\Lead\Model\ExportLeadRequest $export_lead_request = null
    ): PromiseInterface {
        $request = $this->createExportLeadsUsingPOSTRequest($export_lead_request);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Lead\Model\ResponseOfExportResponse::class,
            [$this, 'createExportLeadsUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'createExportLeadsUsingPOST'
     *
     * @param \NecLimDul\MarketoRest\Lead\Model\ExportLeadRequest|null $export_lead_request
     *   exportLeadRequest&lt;br&gt;&lt;br&gt;ColumnHeaderNames: A JSON object containing key-value pairs of field and column header names.&lt;br&gt;&lt;br&gt;Example:&lt;br&gt;&lt;code&gt;\&quot;columnHeaderNames\&quot;:{&lt;br&gt;  \&quot;firstName\&quot;:\&quot;First Name\&quot;,&lt;br&gt;  \&quot;lastName\&quot;:\&quot;Last Name\&quot;,&lt;br&gt;  \&quot;email\&quot;:\&quot;Email Address\&quot;&lt;br&gt;}&lt;/code&gt;&lt;br&gt;
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createExportLeadsUsingPOSTRequest(
        \NecLimDul\MarketoRest\Lead\Model\ExportLeadRequest $export_lead_request = null
    ): Request {

        $resourcePath = '/bulk/v1/leads/export/create.json';

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            $export_lead_request
        );
    }

    /**
     * Exception handler for enqueueExportLeadsUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function enqueueExportLeadsUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Lead\Model\ResponseOfExportResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Enqueue Export Lead Job
     *
     * @param string $export_id
     *   Id of export batch job.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfExportResponse
     */
    public function enqueueExportLeadsUsingPOST(
        string $export_id
    ): \NecLimDul\MarketoRest\Lead\Model\ResponseOfExportResponse {
        list($response) = $this->enqueueExportLeadsUsingPOSTWithHttpInfo($export_id);
        return $response;
    }

    /**
     * Enqueue Export Lead Job
     *
     * @param string $export_id
     *   Id of export batch job.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Lead\Model\ResponseOfExportResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function enqueueExportLeadsUsingPOSTWithHttpInfo(
        string $export_id
    ): array {
        $request = $this->enqueueExportLeadsUsingPOSTRequest($export_id);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Lead\Model\ResponseOfExportResponse::class
            );
        } catch (ApiException $e) {
            throw $this->enqueueExportLeadsUsingPOSTHandleException($e);
        }
    }

    /**
     * Enqueue Export Lead Job
     *
     * @param string $export_id
     *   Id of export batch job.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function enqueueExportLeadsUsingPOSTAsync(
        string $export_id
    ): PromiseInterface {
        return $this->enqueueExportLeadsUsingPOSTAsyncWithHttpInfo($export_id)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Lead\Model\ResponseOfExportResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Enqueue Export Lead Job
     *
     * @param string $export_id
     *   Id of export batch job.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function enqueueExportLeadsUsingPOSTAsyncWithHttpInfo(
        string $export_id
    ): PromiseInterface {
        $request = $this->enqueueExportLeadsUsingPOSTRequest($export_id);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Lead\Model\ResponseOfExportResponse::class,
            [$this, 'enqueueExportLeadsUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'enqueueExportLeadsUsingPOST'
     *
     * @param string $export_id
     *   Id of export batch job.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function enqueueExportLeadsUsingPOSTRequest(
        string $export_id
    ): Request {

        $resourcePath = '/bulk/v1/leads/export/{exportId}/enqueue.json';
        $resourcePath = str_replace(
            '{' . 'exportId' . '}',
            ObjectSerializer::toPathValue($export_id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for getExportLeadsFileUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function getExportLeadsFileUsingGETHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Lead\Model\ObservableOfInputStreamRangeContent::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Export Lead File
     *
     * @param string $export_id
     *   Id of export batch job.
     * @param string|null $range
     *   To support partial retrieval of extracted data, the HTTP header \&quot;Range\&quot; of type \&quot;bytes\&quot; may be specified.  See RFC 2616 \&quot;Range Retrieval Requests\&quot; for more information. If the header is not set, the entire contents will be returned.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ObservableOfInputStreamRangeContent
     */
    public function getExportLeadsFileUsingGET(
        string $export_id,
        string $range = null
    ): \NecLimDul\MarketoRest\Lead\Model\ObservableOfInputStreamRangeContent {
        list($response) = $this->getExportLeadsFileUsingGETWithHttpInfo($export_id, $range);
        return $response;
    }

    /**
     * Get Export Lead File
     *
     * @param string $export_id
     *   Id of export batch job.
     * @param string|null $range
     *   To support partial retrieval of extracted data, the HTTP header \&quot;Range\&quot; of type \&quot;bytes\&quot; may be specified.  See RFC 2616 \&quot;Range Retrieval Requests\&quot; for more information. If the header is not set, the entire contents will be returned.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Lead\Model\ObservableOfInputStreamRangeContent,
     *     int,
     *     array<array<string>>
     * }
     */
    public function getExportLeadsFileUsingGETWithHttpInfo(
        string $export_id,
        string $range = null
    ): array {
        $request = $this->getExportLeadsFileUsingGETRequest($export_id, $range);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Lead\Model\ObservableOfInputStreamRangeContent::class
            );
        } catch (ApiException $e) {
            throw $this->getExportLeadsFileUsingGETHandleException($e);
        }
    }

    /**
     * Get Export Lead File
     *
     * @param string $export_id
     *   Id of export batch job.
     * @param string|null $range
     *   To support partial retrieval of extracted data, the HTTP header \&quot;Range\&quot; of type \&quot;bytes\&quot; may be specified.  See RFC 2616 \&quot;Range Retrieval Requests\&quot; for more information. If the header is not set, the entire contents will be returned.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getExportLeadsFileUsingGETAsync(
        string $export_id,
        string $range = null
    ): PromiseInterface {
        return $this->getExportLeadsFileUsingGETAsyncWithHttpInfo($export_id, $range)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Lead\Model\ObservableOfInputStreamRangeContent {
                    return $response[0];
                }
            );
    }

    /**
     * Get Export Lead File
     *
     * @param string $export_id
     *   Id of export batch job.
     * @param string|null $range
     *   To support partial retrieval of extracted data, the HTTP header \&quot;Range\&quot; of type \&quot;bytes\&quot; may be specified.  See RFC 2616 \&quot;Range Retrieval Requests\&quot; for more information. If the header is not set, the entire contents will be returned.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getExportLeadsFileUsingGETAsyncWithHttpInfo(
        string $export_id,
        string $range = null
    ): PromiseInterface {
        $request = $this->getExportLeadsFileUsingGETRequest($export_id, $range);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Lead\Model\ObservableOfInputStreamRangeContent::class,
            [$this, 'getExportLeadsFileUsingGETHandleException']
        );
    }

    /**
     * Create request for operation 'getExportLeadsFileUsingGET'
     *
     * @param string $export_id
     *   Id of export batch job.
     * @param string|null $range
     *   To support partial retrieval of extracted data, the HTTP header \&quot;Range\&quot; of type \&quot;bytes\&quot; may be specified.  See RFC 2616 \&quot;Range Retrieval Requests\&quot; for more information. If the header is not set, the entire contents will be returned.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getExportLeadsFileUsingGETRequest(
        string $export_id,
        string $range = null
    ): Request {

        $resourcePath = '/bulk/v1/leads/export/{exportId}/file.json';
        $resourcePath = str_replace(
            '{' . 'exportId' . '}',
            ObjectSerializer::toPathValue($export_id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'GET',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                    'Range' => isset($range) ? ObjectSerializer::toHeaderValue($range) : null,
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for getExportLeadsStatusUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function getExportLeadsStatusUsingGETHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Lead\Model\ResponseOfExportResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Export Lead Job Status
     *
     * @param string $export_id
     *   Id of export batch job.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfExportResponse
     */
    public function getExportLeadsStatusUsingGET(
        string $export_id
    ): \NecLimDul\MarketoRest\Lead\Model\ResponseOfExportResponse {
        list($response) = $this->getExportLeadsStatusUsingGETWithHttpInfo($export_id);
        return $response;
    }

    /**
     * Get Export Lead Job Status
     *
     * @param string $export_id
     *   Id of export batch job.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Lead\Model\ResponseOfExportResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function getExportLeadsStatusUsingGETWithHttpInfo(
        string $export_id
    ): array {
        $request = $this->getExportLeadsStatusUsingGETRequest($export_id);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Lead\Model\ResponseOfExportResponse::class
            );
        } catch (ApiException $e) {
            throw $this->getExportLeadsStatusUsingGETHandleException($e);
        }
    }

    /**
     * Get Export Lead Job Status
     *
     * @param string $export_id
     *   Id of export batch job.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getExportLeadsStatusUsingGETAsync(
        string $export_id
    ): PromiseInterface {
        return $this->getExportLeadsStatusUsingGETAsyncWithHttpInfo($export_id)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Lead\Model\ResponseOfExportResponse {
                    return $response[0];
                }
            );
    }

    /**
     * Get Export Lead Job Status
     *
     * @param string $export_id
     *   Id of export batch job.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getExportLeadsStatusUsingGETAsyncWithHttpInfo(
        string $export_id
    ): PromiseInterface {
        $request = $this->getExportLeadsStatusUsingGETRequest($export_id);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Lead\Model\ResponseOfExportResponse::class,
            [$this, 'getExportLeadsStatusUsingGETHandleException']
        );
    }

    /**
     * Create request for operation 'getExportLeadsStatusUsingGET'
     *
     * @param string $export_id
     *   Id of export batch job.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getExportLeadsStatusUsingGETRequest(
        string $export_id
    ): Request {

        $resourcePath = '/bulk/v1/leads/export/{exportId}/status.json';
        $resourcePath = str_replace(
            '{' . 'exportId' . '}',
            ObjectSerializer::toPathValue($export_id),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'GET',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for getExportLeadsUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function getExportLeadsUsingGETHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Lead\Model\ResponseOfExportResponseWithToken::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Export Lead Jobs
     *
     * @param string[]|null $status
     *   Comma separated list of statuses to filter on.
     * @param int|null $batch_size
     *   The batch size to return. The max and default value is 300.
     * @param string|null $next_page_token
     *   A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter. See Paging Tokens for more info.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfExportResponseWithToken
     */
    public function getExportLeadsUsingGET(
        array $status = null,
        int $batch_size = null,
        string $next_page_token = null
    ): \NecLimDul\MarketoRest\Lead\Model\ResponseOfExportResponseWithToken {
        list($response) = $this->getExportLeadsUsingGETWithHttpInfo($status, $batch_size, $next_page_token);
        return $response;
    }

    /**
     * Get Export Lead Jobs
     *
     * @param string[]|null $status
     *   Comma separated list of statuses to filter on.
     * @param int|null $batch_size
     *   The batch size to return. The max and default value is 300.
     * @param string|null $next_page_token
     *   A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter. See Paging Tokens for more info.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Lead\Model\ResponseOfExportResponseWithToken,
     *     int,
     *     array<array<string>>
     * }
     */
    public function getExportLeadsUsingGETWithHttpInfo(
        array $status = null,
        int $batch_size = null,
        string $next_page_token = null
    ): array {
        $request = $this->getExportLeadsUsingGETRequest($status, $batch_size, $next_page_token);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Lead\Model\ResponseOfExportResponseWithToken::class
            );
        } catch (ApiException $e) {
            throw $this->getExportLeadsUsingGETHandleException($e);
        }
    }

    /**
     * Get Export Lead Jobs
     *
     * @param string[]|null $status
     *   Comma separated list of statuses to filter on.
     * @param int|null $batch_size
     *   The batch size to return. The max and default value is 300.
     * @param string|null $next_page_token
     *   A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter. See Paging Tokens for more info.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getExportLeadsUsingGETAsync(
        array $status = null,
        int $batch_size = null,
        string $next_page_token = null
    ): PromiseInterface {
        return $this->getExportLeadsUsingGETAsyncWithHttpInfo($status, $batch_size, $next_page_token)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Lead\Model\ResponseOfExportResponseWithToken {
                    return $response[0];
                }
            );
    }

    /**
     * Get Export Lead Jobs
     *
     * @param string[]|null $status
     *   Comma separated list of statuses to filter on.
     * @param int|null $batch_size
     *   The batch size to return. The max and default value is 300.
     * @param string|null $next_page_token
     *   A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter. See Paging Tokens for more info.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getExportLeadsUsingGETAsyncWithHttpInfo(
        array $status = null,
        int $batch_size = null,
        string $next_page_token = null
    ): PromiseInterface {
        $request = $this->getExportLeadsUsingGETRequest($status, $batch_size, $next_page_token);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Lead\Model\ResponseOfExportResponseWithToken::class,
            [$this, 'getExportLeadsUsingGETHandleException']
        );
    }

    /**
     * Create request for operation 'getExportLeadsUsingGET'
     *
     * @param string[]|null $status
     *   Comma separated list of statuses to filter on.
     * @param int|null $batch_size
     *   The batch size to return. The max and default value is 300.
     * @param string|null $next_page_token
     *   A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter. See Paging Tokens for more info.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getExportLeadsUsingGETRequest(
        array $status = null,
        int $batch_size = null,
        string $next_page_token = null
    ): Request {

        $resourcePath = '/bulk/v1/leads/export.json';

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'GET',
            $operationHost . $resourcePath,
            // Query.
            [
                'status' => ObjectSerializer::toQueryValue($status),
                'batchSize' => ObjectSerializer::toQueryValue($batch_size),
                'nextPageToken' => ObjectSerializer::toQueryValue($next_page_token),
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array<string, mixed> of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    /**
     * Make a request.
     *
     * @param \GuzzleHttp\Psr7\Request $request An initialized request object.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @return \Psr\Http\Message\ResponseInterface
     */
    private function makeRequest(Request $request)
    {
        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            $response = $e->getResponse();
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                (int) $e->getCode(),
                $response ? $response->getHeaders() : [],
                $response ? (string) $response->getBody() : null
            );
        }

        $statusCode = $response->getStatusCode();
        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    (string) $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                (string) $response->getBody()
            );
        }
        return $response;
    }

    /**
     * Make an async request.
     *
     * @param \GuzzleHttp\Psr7\Request $request An initialized request object.
     * @param class-string $returnType The return type.
     * @param callable $exceptionHandler A callback to process HTTP errors.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @return \GuzzleHttp\Promise\PromiseInterface A promise that will return a processed response.
     */
    private function makeAsyncRequest(Request $request, string $returnType, callable $exceptionHandler)
    {
        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function (ResponseInterface $response) use ($returnType) {
                    return $this->responseToReturn($response, $returnType);
                },
                function (RequestException $exception) use ($exceptionHandler) {
                    $response = $exception->getResponse();
                    $e = new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : [],
                        $response ? (string) $response->getBody() : null
                    );
                    throw $exceptionHandler($e);
                }
            );
    }

    /**
     * Convert a response to a return standard return array.
     *
     * @template T
     * @param \Psr\Http\Message\ResponseInterface $response A response from a request with a serialized body.
     * @param string $returnType The primary return type.
     * @phpstan-param class-string<T> $returnType
     *
     * @return array structured array or response and http info.
     * @phpstan-return array{T, int, array<array<string>>}
     */
    private function responseToReturn(ResponseInterface $response, string $returnType)
    {
        return [
            $this->deserializeResponseBody($response->getBody(), $returnType),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    /**
     * Deserialize a response body.
     *
     * @template T
     * @param mixed $responseBody The response body.
     * @param string $returnType The return type.
     * @param array<string, string[]> $headers A list of headers from the response.
     * @phpstan-param class-string<T> $returnType
     *
     * @return mixed Either a string or a stream to be passed to a file object.
     * @phpstan-return T
     * @psalm-return T
     */
    private function deserializeResponseBody($responseBody, string $returnType, array $headers = [])
    {
        return ObjectSerializer::deserialize(
            $returnType === \SplFileObject::class ? $responseBody : (string) $responseBody,
            $returnType,
            $headers
        );
    }
}
