<?php
/**
 * NamedAccountListsApi
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Lead
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketo Rest API
 *
 * Marketo Rest API
 *
 * OpenAPI spec version: 1.0
 * Contact: developerfeedback@marketo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.26
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace NecLimDul\MarketoRest\Lead\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Query;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\ResponseInterface;
use NecLimDul\MarketoRest\Lead\ApiException;
use NecLimDul\MarketoRest\Lead\Configuration;
use NecLimDul\MarketoRest\Lead\HeaderSelector;
use NecLimDul\MarketoRest\Lead\ObjectSerializer;

/**
 * NamedAccountListsApi Class Doc Comment
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Lead
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class NamedAccountListsApi
{

    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Exception handler for addNamedAccountListMembersUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function addNamedAccountListMembersUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Lead\Model\ResponseOfNamedAccount',
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Add Named Account List Members
     *
     * @param  string $id Id of target named account list (required)
     * @param  \NecLimDul\MarketoRest\Lead\Model\AddNamedAccountListMemberRequest $add_named_account_list_member_request addNamedAccountListMemberRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfNamedAccount
     */
    public function addNamedAccountListMembersUsingPOST($id, $add_named_account_list_member_request)
    {
        list($response) = $this->addNamedAccountListMembersUsingPOSTWithHttpInfo($id, $add_named_account_list_member_request);
        return $response;
    }

    /**
     * Add Named Account List Members
     *
     * @param  string $id Id of target named account list (required)
     * @param  \NecLimDul\MarketoRest\Lead\Model\AddNamedAccountListMemberRequest $add_named_account_list_member_request addNamedAccountListMemberRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Lead\Model\ResponseOfNamedAccount, HTTP status code, HTTP response headers (array of strings)
     */
    public function addNamedAccountListMembersUsingPOSTWithHttpInfo($id, $add_named_account_list_member_request)
    {
        $request = $this->addNamedAccountListMembersUsingPOSTRequest($id, $add_named_account_list_member_request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfNamedAccount');
        } catch (ApiException $e) {
            throw $this->addNamedAccountListMembersUsingPOSTHandleException($e);
        }
    }

    /**
     * Add Named Account List Members
     *
     * @param  string $id Id of target named account list (required)
     * @param  \NecLimDul\MarketoRest\Lead\Model\AddNamedAccountListMemberRequest $add_named_account_list_member_request addNamedAccountListMemberRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addNamedAccountListMembersUsingPOSTAsync($id, $add_named_account_list_member_request)
    {
        return $this->addNamedAccountListMembersUsingPOSTAsyncWithHttpInfo($id, $add_named_account_list_member_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Add Named Account List Members
     *
     * @param  string $id Id of target named account list (required)
     * @param  \NecLimDul\MarketoRest\Lead\Model\AddNamedAccountListMemberRequest $add_named_account_list_member_request addNamedAccountListMemberRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addNamedAccountListMembersUsingPOSTAsyncWithHttpInfo($id, $add_named_account_list_member_request)
    {
        $request = $this->addNamedAccountListMembersUsingPOSTRequest($id, $add_named_account_list_member_request);
        return $this->makeAsyncRequest($request, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfNamedAccount', [$this, 'addNamedAccountListMembersUsingPOSTHandleException']);
    }

    /**
     * Create request for operation 'addNamedAccountListMembersUsingPOST'
     *
     * @param  string $id Id of target named account list (required)
     * @param  \NecLimDul\MarketoRest\Lead\Model\AddNamedAccountListMemberRequest $add_named_account_list_member_request addNamedAccountListMemberRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addNamedAccountListMembersUsingPOSTRequest(
        string $id,
        \NecLimDul\MarketoRest\Lead\Model\AddNamedAccountListMemberRequest $add_named_account_list_member_request
    ): Request
    {

        $resourcePath = '/rest/v1/namedAccountList/{id}/namedAccounts.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );
        $httpBody = ObjectSerializer::toBodyValue($add_named_account_list_member_request, $headers['Content-Type'] === 'application/json');


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Exception handler for deleteNamedAccountListsUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function deleteNamedAccountListsUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Lead\Model\ResponseOfNamedAccountList',
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Delete Named Account Lists
     *
     * @param  \NecLimDul\MarketoRest\Lead\Model\DeleteNamedAccountListRequest $delete_named_account_list_request deleteNamedAccountListRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfNamedAccountList
     */
    public function deleteNamedAccountListsUsingPOST($delete_named_account_list_request)
    {
        list($response) = $this->deleteNamedAccountListsUsingPOSTWithHttpInfo($delete_named_account_list_request);
        return $response;
    }

    /**
     * Delete Named Account Lists
     *
     * @param  \NecLimDul\MarketoRest\Lead\Model\DeleteNamedAccountListRequest $delete_named_account_list_request deleteNamedAccountListRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Lead\Model\ResponseOfNamedAccountList, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteNamedAccountListsUsingPOSTWithHttpInfo($delete_named_account_list_request)
    {
        $request = $this->deleteNamedAccountListsUsingPOSTRequest($delete_named_account_list_request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfNamedAccountList');
        } catch (ApiException $e) {
            throw $this->deleteNamedAccountListsUsingPOSTHandleException($e);
        }
    }

    /**
     * Delete Named Account Lists
     *
     * @param  \NecLimDul\MarketoRest\Lead\Model\DeleteNamedAccountListRequest $delete_named_account_list_request deleteNamedAccountListRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteNamedAccountListsUsingPOSTAsync($delete_named_account_list_request)
    {
        return $this->deleteNamedAccountListsUsingPOSTAsyncWithHttpInfo($delete_named_account_list_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Delete Named Account Lists
     *
     * @param  \NecLimDul\MarketoRest\Lead\Model\DeleteNamedAccountListRequest $delete_named_account_list_request deleteNamedAccountListRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteNamedAccountListsUsingPOSTAsyncWithHttpInfo($delete_named_account_list_request)
    {
        $request = $this->deleteNamedAccountListsUsingPOSTRequest($delete_named_account_list_request);
        return $this->makeAsyncRequest($request, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfNamedAccountList', [$this, 'deleteNamedAccountListsUsingPOSTHandleException']);
    }

    /**
     * Create request for operation 'deleteNamedAccountListsUsingPOST'
     *
     * @param  \NecLimDul\MarketoRest\Lead\Model\DeleteNamedAccountListRequest $delete_named_account_list_request deleteNamedAccountListRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteNamedAccountListsUsingPOSTRequest(
        \NecLimDul\MarketoRest\Lead\Model\DeleteNamedAccountListRequest $delete_named_account_list_request
    ): Request
    {

        $resourcePath = '/rest/v1/namedAccountLists/delete.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );
        $httpBody = ObjectSerializer::toBodyValue($delete_named_account_list_request, $headers['Content-Type'] === 'application/json');


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Exception handler for getNamedAccountListMembersUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function getNamedAccountListMembersUsingGETHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Lead\Model\ResponseOfNamedAccount',
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Named Account List Members
     *
     * @param  string $id Id of the named account list (required)
     * @param  string[] $fields Comma-separated list of fields to include in the response (optional)
     * @param  int $batch_size The batch size to return.  The max and default value is 300. (optional)
     * @param  string $next_page_token A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info. (optional)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfNamedAccount
     */
    public function getNamedAccountListMembersUsingGET($id, $fields = null, $batch_size = null, $next_page_token = null)
    {
        list($response) = $this->getNamedAccountListMembersUsingGETWithHttpInfo($id, $fields, $batch_size, $next_page_token);
        return $response;
    }

    /**
     * Get Named Account List Members
     *
     * @param  string $id Id of the named account list (required)
     * @param  string[] $fields Comma-separated list of fields to include in the response (optional)
     * @param  int $batch_size The batch size to return.  The max and default value is 300. (optional)
     * @param  string $next_page_token A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info. (optional)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Lead\Model\ResponseOfNamedAccount, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNamedAccountListMembersUsingGETWithHttpInfo($id, $fields = null, $batch_size = null, $next_page_token = null)
    {
        $request = $this->getNamedAccountListMembersUsingGETRequest($id, $fields, $batch_size, $next_page_token);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfNamedAccount');
        } catch (ApiException $e) {
            throw $this->getNamedAccountListMembersUsingGETHandleException($e);
        }
    }

    /**
     * Get Named Account List Members
     *
     * @param  string $id Id of the named account list (required)
     * @param  string[] $fields Comma-separated list of fields to include in the response (optional)
     * @param  int $batch_size The batch size to return.  The max and default value is 300. (optional)
     * @param  string $next_page_token A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNamedAccountListMembersUsingGETAsync($id, $fields = null, $batch_size = null, $next_page_token = null)
    {
        return $this->getNamedAccountListMembersUsingGETAsyncWithHttpInfo($id, $fields, $batch_size, $next_page_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Get Named Account List Members
     *
     * @param  string $id Id of the named account list (required)
     * @param  string[] $fields Comma-separated list of fields to include in the response (optional)
     * @param  int $batch_size The batch size to return.  The max and default value is 300. (optional)
     * @param  string $next_page_token A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNamedAccountListMembersUsingGETAsyncWithHttpInfo($id, $fields = null, $batch_size = null, $next_page_token = null)
    {
        $request = $this->getNamedAccountListMembersUsingGETRequest($id, $fields, $batch_size, $next_page_token);
        return $this->makeAsyncRequest($request, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfNamedAccount', [$this, 'getNamedAccountListMembersUsingGETHandleException']);
    }

    /**
     * Create request for operation 'getNamedAccountListMembersUsingGET'
     *
     * @param  string $id Id of the named account list (required)
     * @param  string[] $fields Comma-separated list of fields to include in the response (optional)
     * @param  int $batch_size The batch size to return.  The max and default value is 300. (optional)
     * @param  string $next_page_token A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getNamedAccountListMembersUsingGETRequest(
        string $id,
        array $fields = null,
        int $batch_size = null,
        string $next_page_token = null
    ): Request
    {

        $resourcePath = '/rest/v1/namedAccountList/{id}/namedAccounts.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Query parameters.
        $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        $queryParams['batchSize'] = ObjectSerializer::toQueryValue($batch_size);
        $queryParams['nextPageToken'] = ObjectSerializer::toQueryValue($next_page_token);
        // Remove any null (optional values).
        $queryParams = array_filter($queryParams, function($v) { return $v !== null; });

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Exception handler for getNamedAccountListsUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function getNamedAccountListsUsingGETHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Lead\Model\ResponseOfNamedAccountList',
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Named Account Lists
     *
     * @param  string $filter_type The named account list field to filter on (\&quot;dedupeFields\&quot; or \&quot;idFields\&quot;). (required)
     * @param  string[] $filter_values Comma-separated list of values to match against (required)
     * @param  int $batch_size The batch size to return.  The max and default value is 300. (optional)
     * @param  string $next_page_token A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info. (optional)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfNamedAccountList
     */
    public function getNamedAccountListsUsingGET($filter_type, $filter_values, $batch_size = null, $next_page_token = null)
    {
        list($response) = $this->getNamedAccountListsUsingGETWithHttpInfo($filter_type, $filter_values, $batch_size, $next_page_token);
        return $response;
    }

    /**
     * Get Named Account Lists
     *
     * @param  string $filter_type The named account list field to filter on (\&quot;dedupeFields\&quot; or \&quot;idFields\&quot;). (required)
     * @param  string[] $filter_values Comma-separated list of values to match against (required)
     * @param  int $batch_size The batch size to return.  The max and default value is 300. (optional)
     * @param  string $next_page_token A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info. (optional)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Lead\Model\ResponseOfNamedAccountList, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNamedAccountListsUsingGETWithHttpInfo($filter_type, $filter_values, $batch_size = null, $next_page_token = null)
    {
        $request = $this->getNamedAccountListsUsingGETRequest($filter_type, $filter_values, $batch_size, $next_page_token);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfNamedAccountList');
        } catch (ApiException $e) {
            throw $this->getNamedAccountListsUsingGETHandleException($e);
        }
    }

    /**
     * Get Named Account Lists
     *
     * @param  string $filter_type The named account list field to filter on (\&quot;dedupeFields\&quot; or \&quot;idFields\&quot;). (required)
     * @param  string[] $filter_values Comma-separated list of values to match against (required)
     * @param  int $batch_size The batch size to return.  The max and default value is 300. (optional)
     * @param  string $next_page_token A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNamedAccountListsUsingGETAsync($filter_type, $filter_values, $batch_size = null, $next_page_token = null)
    {
        return $this->getNamedAccountListsUsingGETAsyncWithHttpInfo($filter_type, $filter_values, $batch_size, $next_page_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Get Named Account Lists
     *
     * @param  string $filter_type The named account list field to filter on (\&quot;dedupeFields\&quot; or \&quot;idFields\&quot;). (required)
     * @param  string[] $filter_values Comma-separated list of values to match against (required)
     * @param  int $batch_size The batch size to return.  The max and default value is 300. (optional)
     * @param  string $next_page_token A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNamedAccountListsUsingGETAsyncWithHttpInfo($filter_type, $filter_values, $batch_size = null, $next_page_token = null)
    {
        $request = $this->getNamedAccountListsUsingGETRequest($filter_type, $filter_values, $batch_size, $next_page_token);
        return $this->makeAsyncRequest($request, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfNamedAccountList', [$this, 'getNamedAccountListsUsingGETHandleException']);
    }

    /**
     * Create request for operation 'getNamedAccountListsUsingGET'
     *
     * @param  string $filter_type The named account list field to filter on (\&quot;dedupeFields\&quot; or \&quot;idFields\&quot;). (required)
     * @param  string[] $filter_values Comma-separated list of values to match against (required)
     * @param  int $batch_size The batch size to return.  The max and default value is 300. (optional)
     * @param  string $next_page_token A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getNamedAccountListsUsingGETRequest(
        string $filter_type,
        array $filter_values,
        int $batch_size = null,
        string $next_page_token = null
    ): Request
    {
        // Verify the required parameter 'filter_values' is set.
        if (empty($filter_values)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $filter_values when calling getNamedAccountListsUsingGET'
            );
        }

        $resourcePath = '/rest/v1/namedAccountLists.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Query parameters.
        $queryParams['filterType'] = ObjectSerializer::toQueryValue($filter_type);
        $queryParams['filterValues'] = ObjectSerializer::toQueryValue($filter_values);
        $queryParams['batchSize'] = ObjectSerializer::toQueryValue($batch_size);
        $queryParams['nextPageToken'] = ObjectSerializer::toQueryValue($next_page_token);
        // Remove any null (optional values).
        $queryParams = array_filter($queryParams, function($v) { return $v !== null; });
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Exception handler for removeNamedAccountListMembersUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function removeNamedAccountListMembersUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Lead\Model\ResponseOfNamedAccount',
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Remove Named Account List Members
     *
     * @param  string $id Id of target named account list (required)
     * @param  \NecLimDul\MarketoRest\Lead\Model\RemoveNamedAccountListMemberRequest $remove_named_account_list_member_request removeNamedAccountListMemberRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfNamedAccount
     */
    public function removeNamedAccountListMembersUsingPOST($id, $remove_named_account_list_member_request)
    {
        list($response) = $this->removeNamedAccountListMembersUsingPOSTWithHttpInfo($id, $remove_named_account_list_member_request);
        return $response;
    }

    /**
     * Remove Named Account List Members
     *
     * @param  string $id Id of target named account list (required)
     * @param  \NecLimDul\MarketoRest\Lead\Model\RemoveNamedAccountListMemberRequest $remove_named_account_list_member_request removeNamedAccountListMemberRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Lead\Model\ResponseOfNamedAccount, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeNamedAccountListMembersUsingPOSTWithHttpInfo($id, $remove_named_account_list_member_request)
    {
        $request = $this->removeNamedAccountListMembersUsingPOSTRequest($id, $remove_named_account_list_member_request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfNamedAccount');
        } catch (ApiException $e) {
            throw $this->removeNamedAccountListMembersUsingPOSTHandleException($e);
        }
    }

    /**
     * Remove Named Account List Members
     *
     * @param  string $id Id of target named account list (required)
     * @param  \NecLimDul\MarketoRest\Lead\Model\RemoveNamedAccountListMemberRequest $remove_named_account_list_member_request removeNamedAccountListMemberRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeNamedAccountListMembersUsingPOSTAsync($id, $remove_named_account_list_member_request)
    {
        return $this->removeNamedAccountListMembersUsingPOSTAsyncWithHttpInfo($id, $remove_named_account_list_member_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Remove Named Account List Members
     *
     * @param  string $id Id of target named account list (required)
     * @param  \NecLimDul\MarketoRest\Lead\Model\RemoveNamedAccountListMemberRequest $remove_named_account_list_member_request removeNamedAccountListMemberRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeNamedAccountListMembersUsingPOSTAsyncWithHttpInfo($id, $remove_named_account_list_member_request)
    {
        $request = $this->removeNamedAccountListMembersUsingPOSTRequest($id, $remove_named_account_list_member_request);
        return $this->makeAsyncRequest($request, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfNamedAccount', [$this, 'removeNamedAccountListMembersUsingPOSTHandleException']);
    }

    /**
     * Create request for operation 'removeNamedAccountListMembersUsingPOST'
     *
     * @param  string $id Id of target named account list (required)
     * @param  \NecLimDul\MarketoRest\Lead\Model\RemoveNamedAccountListMemberRequest $remove_named_account_list_member_request removeNamedAccountListMemberRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function removeNamedAccountListMembersUsingPOSTRequest(
        string $id,
        \NecLimDul\MarketoRest\Lead\Model\RemoveNamedAccountListMemberRequest $remove_named_account_list_member_request
    ): Request
    {

        $resourcePath = '/rest/v1/namedAccountList/{id}/namedAccounts/remove.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'id' . '}',
            ObjectSerializer::toPathValue($id),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );
        $httpBody = ObjectSerializer::toBodyValue($remove_named_account_list_member_request, $headers['Content-Type'] === 'application/json');


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Exception handler for syncNamedAccountListsUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function syncNamedAccountListsUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Lead\Model\ResponseOfNamedAccountList',
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Sync Named Account Lists
     *
     * @param  \NecLimDul\MarketoRest\Lead\Model\SyncNamedAccountListRequest $sync_named_account_list_request syncNamedAccountListRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfNamedAccountList
     */
    public function syncNamedAccountListsUsingPOST($sync_named_account_list_request)
    {
        list($response) = $this->syncNamedAccountListsUsingPOSTWithHttpInfo($sync_named_account_list_request);
        return $response;
    }

    /**
     * Sync Named Account Lists
     *
     * @param  \NecLimDul\MarketoRest\Lead\Model\SyncNamedAccountListRequest $sync_named_account_list_request syncNamedAccountListRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Lead\Model\ResponseOfNamedAccountList, HTTP status code, HTTP response headers (array of strings)
     */
    public function syncNamedAccountListsUsingPOSTWithHttpInfo($sync_named_account_list_request)
    {
        $request = $this->syncNamedAccountListsUsingPOSTRequest($sync_named_account_list_request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfNamedAccountList');
        } catch (ApiException $e) {
            throw $this->syncNamedAccountListsUsingPOSTHandleException($e);
        }
    }

    /**
     * Sync Named Account Lists
     *
     * @param  \NecLimDul\MarketoRest\Lead\Model\SyncNamedAccountListRequest $sync_named_account_list_request syncNamedAccountListRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function syncNamedAccountListsUsingPOSTAsync($sync_named_account_list_request)
    {
        return $this->syncNamedAccountListsUsingPOSTAsyncWithHttpInfo($sync_named_account_list_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Sync Named Account Lists
     *
     * @param  \NecLimDul\MarketoRest\Lead\Model\SyncNamedAccountListRequest $sync_named_account_list_request syncNamedAccountListRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function syncNamedAccountListsUsingPOSTAsyncWithHttpInfo($sync_named_account_list_request)
    {
        $request = $this->syncNamedAccountListsUsingPOSTRequest($sync_named_account_list_request);
        return $this->makeAsyncRequest($request, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfNamedAccountList', [$this, 'syncNamedAccountListsUsingPOSTHandleException']);
    }

    /**
     * Create request for operation 'syncNamedAccountListsUsingPOST'
     *
     * @param  \NecLimDul\MarketoRest\Lead\Model\SyncNamedAccountListRequest $sync_named_account_list_request syncNamedAccountListRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function syncNamedAccountListsUsingPOSTRequest(
        \NecLimDul\MarketoRest\Lead\Model\SyncNamedAccountListRequest $sync_named_account_list_request
    ): Request
    {

        $resourcePath = '/rest/v1/namedAccountLists.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );
        $httpBody = ObjectSerializer::toBodyValue($sync_named_account_list_request, $headers['Content-Type'] === 'application/json');


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    /**
     * Make a request.
     *
     * @param \GuzzleHttp\Psr7\Request $request An initialized request object.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @return \Psr\Http\Message\ResponseInterface
     */
    private function makeRequest(Request $request) {
        $options = $this->createHttpClientOption();
        try {
           $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            $response = $e->getResponse();
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                (int) $e->getCode(),
                $response ? $response->getHeaders() : null,
                $response ? (string) $response->getBody() : null
            );
        }

        $statusCode = $response->getStatusCode();
        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    (string) $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                (string) $response->getBody()
            );
        }
        return $response;
    }

    /**
     * Make an async request.
     *
     * @param \GuzzleHttp\Psr7\Request $request An initialized request object.
     * @param string $returnType The return type.
     * @param callable $exceptionHandler A callback to process HTTP errors.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @return \GuzzleHttp\Promise\PromiseInterface A promise that will return a processed response.
     */
    private function makeAsyncRequest(Request $request, string $returnType, callable $exceptionHandler)
    {
        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->responseToReturn($response, $returnType);
                },
                function (RequestException $exception) use ($exceptionHandler) {
                    $response = $exception->getResponse();
                    $e = new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                    throw $exceptionHandler($e);
                }
            );
    }

    /**
     * Convert a response to a return standard return array.
     *
     * @param \Psr\Http\Message\ResponseInterface $response A response from a request with a serialized body.
     * @param string $returnType The primary return type.
     *
     * @return array
     */
    private function responseToReturn(ResponseInterface $response, string $returnType) {
        return [
            $this->deserializeResponseBody($response->getBody(), $returnType),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    /**
     * Deserialize a response body.
     *
     * @param mixed $responseBody
     *   The response body.
     * @param string $returnType
     *   The return type.
     * @param array<string, string[]>|null $headers
     *   The a list of headers from the response.
     * @return mixed
     *   Either a string or a stream to be passed to a file object.
     */
    private function deserializeResponseBody($responseBody, string $returnType, ?array $headers = [])
    {
        return ObjectSerializer::deserialize(
            $returnType === '\SplFileObject' ? $responseBody : (string) $responseBody,
            $returnType,
            $headers
        );
    }

}
