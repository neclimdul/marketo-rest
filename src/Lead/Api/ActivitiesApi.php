<?php

/**
 * ActivitiesApi
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Lead
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketo Rest API
 *
 * Marketo Rest API
 *
 * OpenAPI spec version: 1.0
 * Contact: developerfeedback@marketo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.26
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace NecLimDul\MarketoRest\Lead\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\Promise\PromiseInterface;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\ResponseInterface;
use NecLimDul\MarketoRest\Lead\ApiException;
use NecLimDul\MarketoRest\Lead\Configuration;
use NecLimDul\MarketoRest\Lead\HeaderSelector;
use NecLimDul\MarketoRest\Lead\ObjectSerializer;

/**
 * ActivitiesApi Class Doc Comment
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Lead
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ActivitiesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the spec.
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Exception handler for addCustomActivityUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function addCustomActivityUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivity::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Add Custom Activities
     *
     * @param \NecLimDul\MarketoRest\Lead\Model\CustomActivityRequest $custom_activity_request
     *   customActivityRequest
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivity
     */
    public function addCustomActivityUsingPOST(
        \NecLimDul\MarketoRest\Lead\Model\CustomActivityRequest $custom_activity_request
    ): \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivity {
        list($response) = $this->addCustomActivityUsingPOSTWithHttpInfo($custom_activity_request);
        return $response;
    }

    /**
     * Add Custom Activities
     *
     * @param \NecLimDul\MarketoRest\Lead\Model\CustomActivityRequest $custom_activity_request
     *   customActivityRequest
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivity,
     *     int,
     *     array<array<string>>
     * }
     */
    public function addCustomActivityUsingPOSTWithHttpInfo(
        \NecLimDul\MarketoRest\Lead\Model\CustomActivityRequest $custom_activity_request
    ): array {
        $request = $this->addCustomActivityUsingPOSTRequest($custom_activity_request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivity::class
            );
        } catch (ApiException $e) {
            throw $this->addCustomActivityUsingPOSTHandleException($e);
        }
    }

    /**
     * Add Custom Activities
     *
     * @param \NecLimDul\MarketoRest\Lead\Model\CustomActivityRequest $custom_activity_request
     *   customActivityRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addCustomActivityUsingPOSTAsync(
        \NecLimDul\MarketoRest\Lead\Model\CustomActivityRequest $custom_activity_request
    ): PromiseInterface {
        return $this->addCustomActivityUsingPOSTAsyncWithHttpInfo($custom_activity_request)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivity {
                    return $response[0];
                }
            );
    }

    /**
     * Add Custom Activities
     *
     * @param \NecLimDul\MarketoRest\Lead\Model\CustomActivityRequest $custom_activity_request
     *   customActivityRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addCustomActivityUsingPOSTAsyncWithHttpInfo(
        \NecLimDul\MarketoRest\Lead\Model\CustomActivityRequest $custom_activity_request
    ): PromiseInterface {
        $request = $this->addCustomActivityUsingPOSTRequest($custom_activity_request);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivity::class,
            [$this, 'addCustomActivityUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'addCustomActivityUsingPOST'
     *
     * @param \NecLimDul\MarketoRest\Lead\Model\CustomActivityRequest $custom_activity_request
     *   customActivityRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addCustomActivityUsingPOSTRequest(
        \NecLimDul\MarketoRest\Lead\Model\CustomActivityRequest $custom_activity_request
    ): Request {

        $resourcePath = '/rest/v1/activities/external.json';

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            $custom_activity_request
        );
    }

    /**
     * Exception handler for approveCustomActivityTypeUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function approveCustomActivityTypeUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Approve Custom Activity Type
     *
     * @param string $api_name
     *   API Name of the activity type
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType
     */
    public function approveCustomActivityTypeUsingPOST(
        string $api_name
    ): \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType {
        list($response) = $this->approveCustomActivityTypeUsingPOSTWithHttpInfo($api_name);
        return $response;
    }

    /**
     * Approve Custom Activity Type
     *
     * @param string $api_name
     *   API Name of the activity type
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType,
     *     int,
     *     array<array<string>>
     * }
     */
    public function approveCustomActivityTypeUsingPOSTWithHttpInfo(
        string $api_name
    ): array {
        $request = $this->approveCustomActivityTypeUsingPOSTRequest($api_name);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType::class
            );
        } catch (ApiException $e) {
            throw $this->approveCustomActivityTypeUsingPOSTHandleException($e);
        }
    }

    /**
     * Approve Custom Activity Type
     *
     * @param string $api_name
     *   API Name of the activity type
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function approveCustomActivityTypeUsingPOSTAsync(
        string $api_name
    ): PromiseInterface {
        return $this->approveCustomActivityTypeUsingPOSTAsyncWithHttpInfo($api_name)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType {
                    return $response[0];
                }
            );
    }

    /**
     * Approve Custom Activity Type
     *
     * @param string $api_name
     *   API Name of the activity type
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function approveCustomActivityTypeUsingPOSTAsyncWithHttpInfo(
        string $api_name
    ): PromiseInterface {
        $request = $this->approveCustomActivityTypeUsingPOSTRequest($api_name);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType::class,
            [$this, 'approveCustomActivityTypeUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'approveCustomActivityTypeUsingPOST'
     *
     * @param string $api_name
     *   API Name of the activity type
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function approveCustomActivityTypeUsingPOSTRequest(
        string $api_name
    ): Request {

        $resourcePath = '/rest/v1/activities/external/type/{apiName}/approve.json';
        $resourcePath = str_replace(
            '{' . 'apiName' . '}',
            ObjectSerializer::toPathValue($api_name),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for createCustomActivityTypeAttributesUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function createCustomActivityTypeAttributesUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Create Custom Activity Type Attributes
     *
     * @param string $api_name
     *   API Name of the activity type
     * @param \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeAttributeRequest $custom_activity_type_attribute_request
     *   customActivityTypeAttributeRequest
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType
     */
    public function createCustomActivityTypeAttributesUsingPOST(
        string $api_name,
        \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeAttributeRequest $custom_activity_type_attribute_request
    ): \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType {
        list($response) = $this->createCustomActivityTypeAttributesUsingPOSTWithHttpInfo($api_name, $custom_activity_type_attribute_request);
        return $response;
    }

    /**
     * Create Custom Activity Type Attributes
     *
     * @param string $api_name
     *   API Name of the activity type
     * @param \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeAttributeRequest $custom_activity_type_attribute_request
     *   customActivityTypeAttributeRequest
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType,
     *     int,
     *     array<array<string>>
     * }
     */
    public function createCustomActivityTypeAttributesUsingPOSTWithHttpInfo(
        string $api_name,
        \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeAttributeRequest $custom_activity_type_attribute_request
    ): array {
        $request = $this->createCustomActivityTypeAttributesUsingPOSTRequest($api_name, $custom_activity_type_attribute_request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType::class
            );
        } catch (ApiException $e) {
            throw $this->createCustomActivityTypeAttributesUsingPOSTHandleException($e);
        }
    }

    /**
     * Create Custom Activity Type Attributes
     *
     * @param string $api_name
     *   API Name of the activity type
     * @param \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeAttributeRequest $custom_activity_type_attribute_request
     *   customActivityTypeAttributeRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCustomActivityTypeAttributesUsingPOSTAsync(
        string $api_name,
        \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeAttributeRequest $custom_activity_type_attribute_request
    ): PromiseInterface {
        return $this->createCustomActivityTypeAttributesUsingPOSTAsyncWithHttpInfo($api_name, $custom_activity_type_attribute_request)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType {
                    return $response[0];
                }
            );
    }

    /**
     * Create Custom Activity Type Attributes
     *
     * @param string $api_name
     *   API Name of the activity type
     * @param \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeAttributeRequest $custom_activity_type_attribute_request
     *   customActivityTypeAttributeRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCustomActivityTypeAttributesUsingPOSTAsyncWithHttpInfo(
        string $api_name,
        \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeAttributeRequest $custom_activity_type_attribute_request
    ): PromiseInterface {
        $request = $this->createCustomActivityTypeAttributesUsingPOSTRequest($api_name, $custom_activity_type_attribute_request);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType::class,
            [$this, 'createCustomActivityTypeAttributesUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'createCustomActivityTypeAttributesUsingPOST'
     *
     * @param string $api_name
     *   API Name of the activity type
     * @param \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeAttributeRequest $custom_activity_type_attribute_request
     *   customActivityTypeAttributeRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createCustomActivityTypeAttributesUsingPOSTRequest(
        string $api_name,
        \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeAttributeRequest $custom_activity_type_attribute_request
    ): Request {

        $resourcePath = '/rest/v1/activities/external/type/{apiName}/attributes/create.json';
        $resourcePath = str_replace(
            '{' . 'apiName' . '}',
            ObjectSerializer::toPathValue($api_name),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            $custom_activity_type_attribute_request
        );
    }

    /**
     * Exception handler for createCustomActivityTypeUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function createCustomActivityTypeUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Create Custom Activity Type
     *
     * @param \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeRequest $custom_activity_type_request
     *   customActivityTypeRequest
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType
     */
    public function createCustomActivityTypeUsingPOST(
        \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeRequest $custom_activity_type_request
    ): \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType {
        list($response) = $this->createCustomActivityTypeUsingPOSTWithHttpInfo($custom_activity_type_request);
        return $response;
    }

    /**
     * Create Custom Activity Type
     *
     * @param \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeRequest $custom_activity_type_request
     *   customActivityTypeRequest
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType,
     *     int,
     *     array<array<string>>
     * }
     */
    public function createCustomActivityTypeUsingPOSTWithHttpInfo(
        \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeRequest $custom_activity_type_request
    ): array {
        $request = $this->createCustomActivityTypeUsingPOSTRequest($custom_activity_type_request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType::class
            );
        } catch (ApiException $e) {
            throw $this->createCustomActivityTypeUsingPOSTHandleException($e);
        }
    }

    /**
     * Create Custom Activity Type
     *
     * @param \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeRequest $custom_activity_type_request
     *   customActivityTypeRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCustomActivityTypeUsingPOSTAsync(
        \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeRequest $custom_activity_type_request
    ): PromiseInterface {
        return $this->createCustomActivityTypeUsingPOSTAsyncWithHttpInfo($custom_activity_type_request)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType {
                    return $response[0];
                }
            );
    }

    /**
     * Create Custom Activity Type
     *
     * @param \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeRequest $custom_activity_type_request
     *   customActivityTypeRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCustomActivityTypeUsingPOSTAsyncWithHttpInfo(
        \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeRequest $custom_activity_type_request
    ): PromiseInterface {
        $request = $this->createCustomActivityTypeUsingPOSTRequest($custom_activity_type_request);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType::class,
            [$this, 'createCustomActivityTypeUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'createCustomActivityTypeUsingPOST'
     *
     * @param \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeRequest $custom_activity_type_request
     *   customActivityTypeRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createCustomActivityTypeUsingPOSTRequest(
        \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeRequest $custom_activity_type_request
    ): Request {

        $resourcePath = '/rest/v1/activities/external/type.json';

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            $custom_activity_type_request
        );
    }

    /**
     * Exception handler for deleteCustomActivityTypeAttributesUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function deleteCustomActivityTypeAttributesUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Delete Custom Activity Type Attributes
     *
     * @param string $api_name
     *   API Name of the activity type
     * @param \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeAttributeRequest $custom_activity_type_attribute_request
     *   customActivityTypeAttributeRequest
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType
     */
    public function deleteCustomActivityTypeAttributesUsingPOST(
        string $api_name,
        \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeAttributeRequest $custom_activity_type_attribute_request
    ): \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType {
        list($response) = $this->deleteCustomActivityTypeAttributesUsingPOSTWithHttpInfo($api_name, $custom_activity_type_attribute_request);
        return $response;
    }

    /**
     * Delete Custom Activity Type Attributes
     *
     * @param string $api_name
     *   API Name of the activity type
     * @param \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeAttributeRequest $custom_activity_type_attribute_request
     *   customActivityTypeAttributeRequest
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType,
     *     int,
     *     array<array<string>>
     * }
     */
    public function deleteCustomActivityTypeAttributesUsingPOSTWithHttpInfo(
        string $api_name,
        \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeAttributeRequest $custom_activity_type_attribute_request
    ): array {
        $request = $this->deleteCustomActivityTypeAttributesUsingPOSTRequest($api_name, $custom_activity_type_attribute_request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType::class
            );
        } catch (ApiException $e) {
            throw $this->deleteCustomActivityTypeAttributesUsingPOSTHandleException($e);
        }
    }

    /**
     * Delete Custom Activity Type Attributes
     *
     * @param string $api_name
     *   API Name of the activity type
     * @param \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeAttributeRequest $custom_activity_type_attribute_request
     *   customActivityTypeAttributeRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCustomActivityTypeAttributesUsingPOSTAsync(
        string $api_name,
        \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeAttributeRequest $custom_activity_type_attribute_request
    ): PromiseInterface {
        return $this->deleteCustomActivityTypeAttributesUsingPOSTAsyncWithHttpInfo($api_name, $custom_activity_type_attribute_request)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType {
                    return $response[0];
                }
            );
    }

    /**
     * Delete Custom Activity Type Attributes
     *
     * @param string $api_name
     *   API Name of the activity type
     * @param \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeAttributeRequest $custom_activity_type_attribute_request
     *   customActivityTypeAttributeRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCustomActivityTypeAttributesUsingPOSTAsyncWithHttpInfo(
        string $api_name,
        \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeAttributeRequest $custom_activity_type_attribute_request
    ): PromiseInterface {
        $request = $this->deleteCustomActivityTypeAttributesUsingPOSTRequest($api_name, $custom_activity_type_attribute_request);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType::class,
            [$this, 'deleteCustomActivityTypeAttributesUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'deleteCustomActivityTypeAttributesUsingPOST'
     *
     * @param string $api_name
     *   API Name of the activity type
     * @param \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeAttributeRequest $custom_activity_type_attribute_request
     *   customActivityTypeAttributeRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteCustomActivityTypeAttributesUsingPOSTRequest(
        string $api_name,
        \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeAttributeRequest $custom_activity_type_attribute_request
    ): Request {

        $resourcePath = '/rest/v1/activities/external/type/{apiName}/attributes/delete.json';
        $resourcePath = str_replace(
            '{' . 'apiName' . '}',
            ObjectSerializer::toPathValue($api_name),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            $custom_activity_type_attribute_request
        );
    }

    /**
     * Exception handler for deleteCustomActivityTypeUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function deleteCustomActivityTypeUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Delete Custom Activity Type
     *
     * @param string $api_name
     *   API Name of the activity type
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType
     */
    public function deleteCustomActivityTypeUsingPOST(
        string $api_name
    ): \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType {
        list($response) = $this->deleteCustomActivityTypeUsingPOSTWithHttpInfo($api_name);
        return $response;
    }

    /**
     * Delete Custom Activity Type
     *
     * @param string $api_name
     *   API Name of the activity type
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType,
     *     int,
     *     array<array<string>>
     * }
     */
    public function deleteCustomActivityTypeUsingPOSTWithHttpInfo(
        string $api_name
    ): array {
        $request = $this->deleteCustomActivityTypeUsingPOSTRequest($api_name);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType::class
            );
        } catch (ApiException $e) {
            throw $this->deleteCustomActivityTypeUsingPOSTHandleException($e);
        }
    }

    /**
     * Delete Custom Activity Type
     *
     * @param string $api_name
     *   API Name of the activity type
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCustomActivityTypeUsingPOSTAsync(
        string $api_name
    ): PromiseInterface {
        return $this->deleteCustomActivityTypeUsingPOSTAsyncWithHttpInfo($api_name)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType {
                    return $response[0];
                }
            );
    }

    /**
     * Delete Custom Activity Type
     *
     * @param string $api_name
     *   API Name of the activity type
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCustomActivityTypeUsingPOSTAsyncWithHttpInfo(
        string $api_name
    ): PromiseInterface {
        $request = $this->deleteCustomActivityTypeUsingPOSTRequest($api_name);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType::class,
            [$this, 'deleteCustomActivityTypeUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'deleteCustomActivityTypeUsingPOST'
     *
     * @param string $api_name
     *   API Name of the activity type
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteCustomActivityTypeUsingPOSTRequest(
        string $api_name
    ): Request {

        $resourcePath = '/rest/v1/activities/external/type/{apiName}/delete.json';
        $resourcePath = str_replace(
            '{' . 'apiName' . '}',
            ObjectSerializer::toPathValue($api_name),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for describeCustomActivityTypeUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function describeCustomActivityTypeUsingGETHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Describe Custom Activity Type
     *
     * @param string $api_name
     *   API Name of the activity type
     * @param bool|null $draft
     *   draft
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType
     */
    public function describeCustomActivityTypeUsingGET(
        string $api_name,
        bool $draft = null
    ): \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType {
        list($response) = $this->describeCustomActivityTypeUsingGETWithHttpInfo($api_name, $draft);
        return $response;
    }

    /**
     * Describe Custom Activity Type
     *
     * @param string $api_name
     *   API Name of the activity type
     * @param bool|null $draft
     *   draft
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType,
     *     int,
     *     array<array<string>>
     * }
     */
    public function describeCustomActivityTypeUsingGETWithHttpInfo(
        string $api_name,
        bool $draft = null
    ): array {
        $request = $this->describeCustomActivityTypeUsingGETRequest($api_name, $draft);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType::class
            );
        } catch (ApiException $e) {
            throw $this->describeCustomActivityTypeUsingGETHandleException($e);
        }
    }

    /**
     * Describe Custom Activity Type
     *
     * @param string $api_name
     *   API Name of the activity type
     * @param bool|null $draft
     *   draft
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function describeCustomActivityTypeUsingGETAsync(
        string $api_name,
        bool $draft = null
    ): PromiseInterface {
        return $this->describeCustomActivityTypeUsingGETAsyncWithHttpInfo($api_name, $draft)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType {
                    return $response[0];
                }
            );
    }

    /**
     * Describe Custom Activity Type
     *
     * @param string $api_name
     *   API Name of the activity type
     * @param bool|null $draft
     *   draft
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function describeCustomActivityTypeUsingGETAsyncWithHttpInfo(
        string $api_name,
        bool $draft = null
    ): PromiseInterface {
        $request = $this->describeCustomActivityTypeUsingGETRequest($api_name, $draft);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType::class,
            [$this, 'describeCustomActivityTypeUsingGETHandleException']
        );
    }

    /**
     * Create request for operation 'describeCustomActivityTypeUsingGET'
     *
     * @param string $api_name
     *   API Name of the activity type
     * @param bool|null $draft
     *   draft
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function describeCustomActivityTypeUsingGETRequest(
        string $api_name,
        bool $draft = null
    ): Request {

        $resourcePath = '/rest/v1/activities/external/type/{apiName}/describe.json';
        $resourcePath = str_replace(
            '{' . 'apiName' . '}',
            ObjectSerializer::toPathValue($api_name),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'GET',
            $operationHost . $resourcePath,
            // Query.
            [
                'draft' => ObjectSerializer::toQueryValue($draft),
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for discardDraftofCustomActivityTypeUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function discardDraftofCustomActivityTypeUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Discard Custom Activity Type Draft
     *
     * @param string $api_name
     *   API Name of the activity type
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType
     */
    public function discardDraftofCustomActivityTypeUsingPOST(
        string $api_name
    ): \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType {
        list($response) = $this->discardDraftofCustomActivityTypeUsingPOSTWithHttpInfo($api_name);
        return $response;
    }

    /**
     * Discard Custom Activity Type Draft
     *
     * @param string $api_name
     *   API Name of the activity type
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType,
     *     int,
     *     array<array<string>>
     * }
     */
    public function discardDraftofCustomActivityTypeUsingPOSTWithHttpInfo(
        string $api_name
    ): array {
        $request = $this->discardDraftofCustomActivityTypeUsingPOSTRequest($api_name);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType::class
            );
        } catch (ApiException $e) {
            throw $this->discardDraftofCustomActivityTypeUsingPOSTHandleException($e);
        }
    }

    /**
     * Discard Custom Activity Type Draft
     *
     * @param string $api_name
     *   API Name of the activity type
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function discardDraftofCustomActivityTypeUsingPOSTAsync(
        string $api_name
    ): PromiseInterface {
        return $this->discardDraftofCustomActivityTypeUsingPOSTAsyncWithHttpInfo($api_name)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType {
                    return $response[0];
                }
            );
    }

    /**
     * Discard Custom Activity Type Draft
     *
     * @param string $api_name
     *   API Name of the activity type
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function discardDraftofCustomActivityTypeUsingPOSTAsyncWithHttpInfo(
        string $api_name
    ): PromiseInterface {
        $request = $this->discardDraftofCustomActivityTypeUsingPOSTRequest($api_name);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType::class,
            [$this, 'discardDraftofCustomActivityTypeUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'discardDraftofCustomActivityTypeUsingPOST'
     *
     * @param string $api_name
     *   API Name of the activity type
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function discardDraftofCustomActivityTypeUsingPOSTRequest(
        string $api_name
    ): Request {

        $resourcePath = '/rest/v1/activities/external/type/{apiName}/discardDraft.json';
        $resourcePath = str_replace(
            '{' . 'apiName' . '}',
            ObjectSerializer::toPathValue($api_name),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for getActivitiesPagingTokenUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function getActivitiesPagingTokenUsingGETHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Lead\Model\ResponseOfVoid::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Paging Token
     *
     * @param \DateTime $since_datetime
     *   Earliest datetime to retrieve activities from
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfVoid
     */
    public function getActivitiesPagingTokenUsingGET(
        \DateTime $since_datetime
    ): \NecLimDul\MarketoRest\Lead\Model\ResponseOfVoid {
        list($response) = $this->getActivitiesPagingTokenUsingGETWithHttpInfo($since_datetime);
        return $response;
    }

    /**
     * Get Paging Token
     *
     * @param \DateTime $since_datetime
     *   Earliest datetime to retrieve activities from
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Lead\Model\ResponseOfVoid,
     *     int,
     *     array<array<string>>
     * }
     */
    public function getActivitiesPagingTokenUsingGETWithHttpInfo(
        \DateTime $since_datetime
    ): array {
        $request = $this->getActivitiesPagingTokenUsingGETRequest($since_datetime);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Lead\Model\ResponseOfVoid::class
            );
        } catch (ApiException $e) {
            throw $this->getActivitiesPagingTokenUsingGETHandleException($e);
        }
    }

    /**
     * Get Paging Token
     *
     * @param \DateTime $since_datetime
     *   Earliest datetime to retrieve activities from
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getActivitiesPagingTokenUsingGETAsync(
        \DateTime $since_datetime
    ): PromiseInterface {
        return $this->getActivitiesPagingTokenUsingGETAsyncWithHttpInfo($since_datetime)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Lead\Model\ResponseOfVoid {
                    return $response[0];
                }
            );
    }

    /**
     * Get Paging Token
     *
     * @param \DateTime $since_datetime
     *   Earliest datetime to retrieve activities from
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getActivitiesPagingTokenUsingGETAsyncWithHttpInfo(
        \DateTime $since_datetime
    ): PromiseInterface {
        $request = $this->getActivitiesPagingTokenUsingGETRequest($since_datetime);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Lead\Model\ResponseOfVoid::class,
            [$this, 'getActivitiesPagingTokenUsingGETHandleException']
        );
    }

    /**
     * Create request for operation 'getActivitiesPagingTokenUsingGET'
     *
     * @param \DateTime $since_datetime
     *   Earliest datetime to retrieve activities from
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getActivitiesPagingTokenUsingGETRequest(
        \DateTime $since_datetime
    ): Request {

        $resourcePath = '/rest/v1/activities/pagingtoken.json';

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'GET',
            $operationHost . $resourcePath,
            // Query.
            [
                'sinceDatetime' => ObjectSerializer::toQueryValue($since_datetime),
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for getAllActivityTypesUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function getAllActivityTypesUsingGETHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Lead\Model\ResponseOfActivityType::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Activity Types
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfActivityType
     */
    public function getAllActivityTypesUsingGET(): \NecLimDul\MarketoRest\Lead\Model\ResponseOfActivityType
    {
        list($response) = $this->getAllActivityTypesUsingGETWithHttpInfo();
        return $response;
    }

    /**
     * Get Activity Types
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Lead\Model\ResponseOfActivityType,
     *     int,
     *     array<array<string>>
     * }
     */
    public function getAllActivityTypesUsingGETWithHttpInfo(): array
    {
        $request = $this->getAllActivityTypesUsingGETRequest();
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Lead\Model\ResponseOfActivityType::class
            );
        } catch (ApiException $e) {
            throw $this->getAllActivityTypesUsingGETHandleException($e);
        }
    }

    /**
     * Get Activity Types
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllActivityTypesUsingGETAsync(): PromiseInterface
    {
        return $this->getAllActivityTypesUsingGETAsyncWithHttpInfo()
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Lead\Model\ResponseOfActivityType {
                    return $response[0];
                }
            );
    }

    /**
     * Get Activity Types
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllActivityTypesUsingGETAsyncWithHttpInfo(): PromiseInterface
    {
        $request = $this->getAllActivityTypesUsingGETRequest();
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Lead\Model\ResponseOfActivityType::class,
            [$this, 'getAllActivityTypesUsingGETHandleException']
        );
    }

    /**
     * Create request for operation 'getAllActivityTypesUsingGET'
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAllActivityTypesUsingGETRequest(): Request
    {

        $resourcePath = '/rest/v1/activities/types.json';

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'GET',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for getCustomActivityTypeUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function getCustomActivityTypeUsingGETHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Custom Activity Types
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType
     */
    public function getCustomActivityTypeUsingGET(): \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType
    {
        list($response) = $this->getCustomActivityTypeUsingGETWithHttpInfo();
        return $response;
    }

    /**
     * Get Custom Activity Types
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType,
     *     int,
     *     array<array<string>>
     * }
     */
    public function getCustomActivityTypeUsingGETWithHttpInfo(): array
    {
        $request = $this->getCustomActivityTypeUsingGETRequest();
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType::class
            );
        } catch (ApiException $e) {
            throw $this->getCustomActivityTypeUsingGETHandleException($e);
        }
    }

    /**
     * Get Custom Activity Types
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomActivityTypeUsingGETAsync(): PromiseInterface
    {
        return $this->getCustomActivityTypeUsingGETAsyncWithHttpInfo()
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType {
                    return $response[0];
                }
            );
    }

    /**
     * Get Custom Activity Types
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomActivityTypeUsingGETAsyncWithHttpInfo(): PromiseInterface
    {
        $request = $this->getCustomActivityTypeUsingGETRequest();
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType::class,
            [$this, 'getCustomActivityTypeUsingGETHandleException']
        );
    }

    /**
     * Create request for operation 'getCustomActivityTypeUsingGET'
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCustomActivityTypeUsingGETRequest(): Request
    {

        $resourcePath = '/rest/v1/activities/external/types.json';

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'GET',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for getDeletedLeadsUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function getDeletedLeadsUsingGETHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Lead\Model\ResponseOfActivity::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Deleted Leads
     *
     * @param string $next_page_token
     *   Token representation of a datetime returned by the Get Paging Token endpoint.  This endpoint will return activities after this datetime
     * @param int|null $batch_size
     *   Maximum number of records to return.  Maximum and default is 300.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfActivity
     */
    public function getDeletedLeadsUsingGET(
        string $next_page_token,
        int $batch_size = null
    ): \NecLimDul\MarketoRest\Lead\Model\ResponseOfActivity {
        list($response) = $this->getDeletedLeadsUsingGETWithHttpInfo($next_page_token, $batch_size);
        return $response;
    }

    /**
     * Get Deleted Leads
     *
     * @param string $next_page_token
     *   Token representation of a datetime returned by the Get Paging Token endpoint.  This endpoint will return activities after this datetime
     * @param int|null $batch_size
     *   Maximum number of records to return.  Maximum and default is 300.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Lead\Model\ResponseOfActivity,
     *     int,
     *     array<array<string>>
     * }
     */
    public function getDeletedLeadsUsingGETWithHttpInfo(
        string $next_page_token,
        int $batch_size = null
    ): array {
        $request = $this->getDeletedLeadsUsingGETRequest($next_page_token, $batch_size);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Lead\Model\ResponseOfActivity::class
            );
        } catch (ApiException $e) {
            throw $this->getDeletedLeadsUsingGETHandleException($e);
        }
    }

    /**
     * Get Deleted Leads
     *
     * @param string $next_page_token
     *   Token representation of a datetime returned by the Get Paging Token endpoint.  This endpoint will return activities after this datetime
     * @param int|null $batch_size
     *   Maximum number of records to return.  Maximum and default is 300.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDeletedLeadsUsingGETAsync(
        string $next_page_token,
        int $batch_size = null
    ): PromiseInterface {
        return $this->getDeletedLeadsUsingGETAsyncWithHttpInfo($next_page_token, $batch_size)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Lead\Model\ResponseOfActivity {
                    return $response[0];
                }
            );
    }

    /**
     * Get Deleted Leads
     *
     * @param string $next_page_token
     *   Token representation of a datetime returned by the Get Paging Token endpoint.  This endpoint will return activities after this datetime
     * @param int|null $batch_size
     *   Maximum number of records to return.  Maximum and default is 300.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDeletedLeadsUsingGETAsyncWithHttpInfo(
        string $next_page_token,
        int $batch_size = null
    ): PromiseInterface {
        $request = $this->getDeletedLeadsUsingGETRequest($next_page_token, $batch_size);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Lead\Model\ResponseOfActivity::class,
            [$this, 'getDeletedLeadsUsingGETHandleException']
        );
    }

    /**
     * Create request for operation 'getDeletedLeadsUsingGET'
     *
     * @param string $next_page_token
     *   Token representation of a datetime returned by the Get Paging Token endpoint.  This endpoint will return activities after this datetime
     * @param int|null $batch_size
     *   Maximum number of records to return.  Maximum and default is 300.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDeletedLeadsUsingGETRequest(
        string $next_page_token,
        int $batch_size = null
    ): Request {

        $resourcePath = '/rest/v1/activities/deletedleads.json';

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'GET',
            $operationHost . $resourcePath,
            // Query.
            [
                'nextPageToken' => ObjectSerializer::toQueryValue($next_page_token),
                'batchSize' => ObjectSerializer::toQueryValue($batch_size),
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for getLeadActivitiesUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function getLeadActivitiesUsingGETHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Lead\Model\ResponseOfActivity::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Lead Activities
     *
     * @param string $next_page_token
     *   Token representation of a datetime returned by the Get Paging Token endpoint.  This endpoint will return activities after this datetime
     * @param int[] $activity_type_ids
     *   Comma-separated list of activity type ids. These can be retrieved with the Get Activity Types API.
     * @param int[]|null $asset_ids
     *   Id of the primary asset for an activity.  This is based on the primary asset id of a given activity type.  Should only be used when a single activity type is set
     * @param int|null $list_id
     *   Id of a static list.  If set, will only return activities of members of this static list.
     * @param int[]|null $lead_ids
     *   Comma-separated list of lead ids.  If set, will only return activities of the leads with these ids.  Allows up to 30 entries.
     * @param int|null $batch_size
     *   Maximum number of records to return.  Maximum and default is 300.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfActivity
     */
    public function getLeadActivitiesUsingGET(
        string $next_page_token,
        array $activity_type_ids,
        array $asset_ids = null,
        int $list_id = null,
        array $lead_ids = null,
        int $batch_size = null
    ): \NecLimDul\MarketoRest\Lead\Model\ResponseOfActivity {
        list($response) = $this->getLeadActivitiesUsingGETWithHttpInfo($next_page_token, $activity_type_ids, $asset_ids, $list_id, $lead_ids, $batch_size);
        return $response;
    }

    /**
     * Get Lead Activities
     *
     * @param string $next_page_token
     *   Token representation of a datetime returned by the Get Paging Token endpoint.  This endpoint will return activities after this datetime
     * @param int[] $activity_type_ids
     *   Comma-separated list of activity type ids. These can be retrieved with the Get Activity Types API.
     * @param int[]|null $asset_ids
     *   Id of the primary asset for an activity.  This is based on the primary asset id of a given activity type.  Should only be used when a single activity type is set
     * @param int|null $list_id
     *   Id of a static list.  If set, will only return activities of members of this static list.
     * @param int[]|null $lead_ids
     *   Comma-separated list of lead ids.  If set, will only return activities of the leads with these ids.  Allows up to 30 entries.
     * @param int|null $batch_size
     *   Maximum number of records to return.  Maximum and default is 300.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Lead\Model\ResponseOfActivity,
     *     int,
     *     array<array<string>>
     * }
     */
    public function getLeadActivitiesUsingGETWithHttpInfo(
        string $next_page_token,
        array $activity_type_ids,
        array $asset_ids = null,
        int $list_id = null,
        array $lead_ids = null,
        int $batch_size = null
    ): array {
        $request = $this->getLeadActivitiesUsingGETRequest($next_page_token, $activity_type_ids, $asset_ids, $list_id, $lead_ids, $batch_size);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Lead\Model\ResponseOfActivity::class
            );
        } catch (ApiException $e) {
            throw $this->getLeadActivitiesUsingGETHandleException($e);
        }
    }

    /**
     * Get Lead Activities
     *
     * @param string $next_page_token
     *   Token representation of a datetime returned by the Get Paging Token endpoint.  This endpoint will return activities after this datetime
     * @param int[] $activity_type_ids
     *   Comma-separated list of activity type ids. These can be retrieved with the Get Activity Types API.
     * @param int[]|null $asset_ids
     *   Id of the primary asset for an activity.  This is based on the primary asset id of a given activity type.  Should only be used when a single activity type is set
     * @param int|null $list_id
     *   Id of a static list.  If set, will only return activities of members of this static list.
     * @param int[]|null $lead_ids
     *   Comma-separated list of lead ids.  If set, will only return activities of the leads with these ids.  Allows up to 30 entries.
     * @param int|null $batch_size
     *   Maximum number of records to return.  Maximum and default is 300.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLeadActivitiesUsingGETAsync(
        string $next_page_token,
        array $activity_type_ids,
        array $asset_ids = null,
        int $list_id = null,
        array $lead_ids = null,
        int $batch_size = null
    ): PromiseInterface {
        return $this->getLeadActivitiesUsingGETAsyncWithHttpInfo($next_page_token, $activity_type_ids, $asset_ids, $list_id, $lead_ids, $batch_size)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Lead\Model\ResponseOfActivity {
                    return $response[0];
                }
            );
    }

    /**
     * Get Lead Activities
     *
     * @param string $next_page_token
     *   Token representation of a datetime returned by the Get Paging Token endpoint.  This endpoint will return activities after this datetime
     * @param int[] $activity_type_ids
     *   Comma-separated list of activity type ids. These can be retrieved with the Get Activity Types API.
     * @param int[]|null $asset_ids
     *   Id of the primary asset for an activity.  This is based on the primary asset id of a given activity type.  Should only be used when a single activity type is set
     * @param int|null $list_id
     *   Id of a static list.  If set, will only return activities of members of this static list.
     * @param int[]|null $lead_ids
     *   Comma-separated list of lead ids.  If set, will only return activities of the leads with these ids.  Allows up to 30 entries.
     * @param int|null $batch_size
     *   Maximum number of records to return.  Maximum and default is 300.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLeadActivitiesUsingGETAsyncWithHttpInfo(
        string $next_page_token,
        array $activity_type_ids,
        array $asset_ids = null,
        int $list_id = null,
        array $lead_ids = null,
        int $batch_size = null
    ): PromiseInterface {
        $request = $this->getLeadActivitiesUsingGETRequest($next_page_token, $activity_type_ids, $asset_ids, $list_id, $lead_ids, $batch_size);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Lead\Model\ResponseOfActivity::class,
            [$this, 'getLeadActivitiesUsingGETHandleException']
        );
    }

    /**
     * Create request for operation 'getLeadActivitiesUsingGET'
     *
     * @param string $next_page_token
     *   Token representation of a datetime returned by the Get Paging Token endpoint.  This endpoint will return activities after this datetime
     * @param int[] $activity_type_ids
     *   Comma-separated list of activity type ids. These can be retrieved with the Get Activity Types API.
     * @param int[]|null $asset_ids
     *   Id of the primary asset for an activity.  This is based on the primary asset id of a given activity type.  Should only be used when a single activity type is set
     * @param int|null $list_id
     *   Id of a static list.  If set, will only return activities of members of this static list.
     * @param int[]|null $lead_ids
     *   Comma-separated list of lead ids.  If set, will only return activities of the leads with these ids.  Allows up to 30 entries.
     * @param int|null $batch_size
     *   Maximum number of records to return.  Maximum and default is 300.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLeadActivitiesUsingGETRequest(
        string $next_page_token,
        array $activity_type_ids,
        array $asset_ids = null,
        int $list_id = null,
        array $lead_ids = null,
        int $batch_size = null
    ): Request {
        // Verify the required parameter 'activity_type_ids' is set.
        if (empty($activity_type_ids)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $activity_type_ids when calling getLeadActivitiesUsingGET'
            );
        }

        $resourcePath = '/rest/v1/activities.json';

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'GET',
            $operationHost . $resourcePath,
            // Query.
            [
                'nextPageToken' => ObjectSerializer::toQueryValue($next_page_token),
                'activityTypeIds' => ObjectSerializer::toQueryValue($activity_type_ids),
                'assetIds' => ObjectSerializer::toQueryValue($asset_ids),
                'listId' => ObjectSerializer::toQueryValue($list_id),
                'leadIds' => ObjectSerializer::toQueryValue($lead_ids),
                'batchSize' => ObjectSerializer::toQueryValue($batch_size),
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for getLeadChangesUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function getLeadChangesUsingGETHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadChange::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Lead Changes
     *
     * @param string $next_page_token
     *   Token representation of a datetime returned by the Get Paging Token endpoint.  This endpoint will return activities after this datetime
     * @param string[] $fields
     *   Comma-separated list of field names to return changes for.  Field names can be retrieved with the Describe Lead API.
     * @param int|null $list_id
     *   Id of a static list.  If set, will only return activities of members of this static list.
     * @param int[]|null $lead_ids
     *   Comma-separated list of lead ids.  If set, will only return activities of the leads with these ids.  Allows up to 30 entries.
     * @param int|null $batch_size
     *   Maximum number of records to return.  Maximum and default is 300.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadChange
     */
    public function getLeadChangesUsingGET(
        string $next_page_token,
        array $fields,
        int $list_id = null,
        array $lead_ids = null,
        int $batch_size = null
    ): \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadChange {
        list($response) = $this->getLeadChangesUsingGETWithHttpInfo($next_page_token, $fields, $list_id, $lead_ids, $batch_size);
        return $response;
    }

    /**
     * Get Lead Changes
     *
     * @param string $next_page_token
     *   Token representation of a datetime returned by the Get Paging Token endpoint.  This endpoint will return activities after this datetime
     * @param string[] $fields
     *   Comma-separated list of field names to return changes for.  Field names can be retrieved with the Describe Lead API.
     * @param int|null $list_id
     *   Id of a static list.  If set, will only return activities of members of this static list.
     * @param int[]|null $lead_ids
     *   Comma-separated list of lead ids.  If set, will only return activities of the leads with these ids.  Allows up to 30 entries.
     * @param int|null $batch_size
     *   Maximum number of records to return.  Maximum and default is 300.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadChange,
     *     int,
     *     array<array<string>>
     * }
     */
    public function getLeadChangesUsingGETWithHttpInfo(
        string $next_page_token,
        array $fields,
        int $list_id = null,
        array $lead_ids = null,
        int $batch_size = null
    ): array {
        $request = $this->getLeadChangesUsingGETRequest($next_page_token, $fields, $list_id, $lead_ids, $batch_size);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadChange::class
            );
        } catch (ApiException $e) {
            throw $this->getLeadChangesUsingGETHandleException($e);
        }
    }

    /**
     * Get Lead Changes
     *
     * @param string $next_page_token
     *   Token representation of a datetime returned by the Get Paging Token endpoint.  This endpoint will return activities after this datetime
     * @param string[] $fields
     *   Comma-separated list of field names to return changes for.  Field names can be retrieved with the Describe Lead API.
     * @param int|null $list_id
     *   Id of a static list.  If set, will only return activities of members of this static list.
     * @param int[]|null $lead_ids
     *   Comma-separated list of lead ids.  If set, will only return activities of the leads with these ids.  Allows up to 30 entries.
     * @param int|null $batch_size
     *   Maximum number of records to return.  Maximum and default is 300.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLeadChangesUsingGETAsync(
        string $next_page_token,
        array $fields,
        int $list_id = null,
        array $lead_ids = null,
        int $batch_size = null
    ): PromiseInterface {
        return $this->getLeadChangesUsingGETAsyncWithHttpInfo($next_page_token, $fields, $list_id, $lead_ids, $batch_size)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadChange {
                    return $response[0];
                }
            );
    }

    /**
     * Get Lead Changes
     *
     * @param string $next_page_token
     *   Token representation of a datetime returned by the Get Paging Token endpoint.  This endpoint will return activities after this datetime
     * @param string[] $fields
     *   Comma-separated list of field names to return changes for.  Field names can be retrieved with the Describe Lead API.
     * @param int|null $list_id
     *   Id of a static list.  If set, will only return activities of members of this static list.
     * @param int[]|null $lead_ids
     *   Comma-separated list of lead ids.  If set, will only return activities of the leads with these ids.  Allows up to 30 entries.
     * @param int|null $batch_size
     *   Maximum number of records to return.  Maximum and default is 300.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLeadChangesUsingGETAsyncWithHttpInfo(
        string $next_page_token,
        array $fields,
        int $list_id = null,
        array $lead_ids = null,
        int $batch_size = null
    ): PromiseInterface {
        $request = $this->getLeadChangesUsingGETRequest($next_page_token, $fields, $list_id, $lead_ids, $batch_size);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadChange::class,
            [$this, 'getLeadChangesUsingGETHandleException']
        );
    }

    /**
     * Create request for operation 'getLeadChangesUsingGET'
     *
     * @param string $next_page_token
     *   Token representation of a datetime returned by the Get Paging Token endpoint.  This endpoint will return activities after this datetime
     * @param string[] $fields
     *   Comma-separated list of field names to return changes for.  Field names can be retrieved with the Describe Lead API.
     * @param int|null $list_id
     *   Id of a static list.  If set, will only return activities of members of this static list.
     * @param int[]|null $lead_ids
     *   Comma-separated list of lead ids.  If set, will only return activities of the leads with these ids.  Allows up to 30 entries.
     * @param int|null $batch_size
     *   Maximum number of records to return.  Maximum and default is 300.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLeadChangesUsingGETRequest(
        string $next_page_token,
        array $fields,
        int $list_id = null,
        array $lead_ids = null,
        int $batch_size = null
    ): Request {
        // Verify the required parameter 'fields' is set.
        if (empty($fields)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fields when calling getLeadChangesUsingGET'
            );
        }

        $resourcePath = '/rest/v1/activities/leadchanges.json';

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'GET',
            $operationHost . $resourcePath,
            // Query.
            [
                'nextPageToken' => ObjectSerializer::toQueryValue($next_page_token),
                'fields' => ObjectSerializer::toQueryValue($fields),
                'listId' => ObjectSerializer::toQueryValue($list_id),
                'leadIds' => ObjectSerializer::toQueryValue($lead_ids),
                'batchSize' => ObjectSerializer::toQueryValue($batch_size),
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for updateCustomActivityTypeAttributesUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function updateCustomActivityTypeAttributesUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Update Custom Activity Type Attributes
     *
     * @param string $api_name
     *   API Name of the activity type
     * @param \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeAttributeRequest $custom_activity_type_attribute_request
     *   customActivityTypeAttributeRequest
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType
     */
    public function updateCustomActivityTypeAttributesUsingPOST(
        string $api_name,
        \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeAttributeRequest $custom_activity_type_attribute_request
    ): \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType {
        list($response) = $this->updateCustomActivityTypeAttributesUsingPOSTWithHttpInfo($api_name, $custom_activity_type_attribute_request);
        return $response;
    }

    /**
     * Update Custom Activity Type Attributes
     *
     * @param string $api_name
     *   API Name of the activity type
     * @param \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeAttributeRequest $custom_activity_type_attribute_request
     *   customActivityTypeAttributeRequest
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType,
     *     int,
     *     array<array<string>>
     * }
     */
    public function updateCustomActivityTypeAttributesUsingPOSTWithHttpInfo(
        string $api_name,
        \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeAttributeRequest $custom_activity_type_attribute_request
    ): array {
        $request = $this->updateCustomActivityTypeAttributesUsingPOSTRequest($api_name, $custom_activity_type_attribute_request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType::class
            );
        } catch (ApiException $e) {
            throw $this->updateCustomActivityTypeAttributesUsingPOSTHandleException($e);
        }
    }

    /**
     * Update Custom Activity Type Attributes
     *
     * @param string $api_name
     *   API Name of the activity type
     * @param \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeAttributeRequest $custom_activity_type_attribute_request
     *   customActivityTypeAttributeRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCustomActivityTypeAttributesUsingPOSTAsync(
        string $api_name,
        \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeAttributeRequest $custom_activity_type_attribute_request
    ): PromiseInterface {
        return $this->updateCustomActivityTypeAttributesUsingPOSTAsyncWithHttpInfo($api_name, $custom_activity_type_attribute_request)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType {
                    return $response[0];
                }
            );
    }

    /**
     * Update Custom Activity Type Attributes
     *
     * @param string $api_name
     *   API Name of the activity type
     * @param \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeAttributeRequest $custom_activity_type_attribute_request
     *   customActivityTypeAttributeRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCustomActivityTypeAttributesUsingPOSTAsyncWithHttpInfo(
        string $api_name,
        \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeAttributeRequest $custom_activity_type_attribute_request
    ): PromiseInterface {
        $request = $this->updateCustomActivityTypeAttributesUsingPOSTRequest($api_name, $custom_activity_type_attribute_request);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType::class,
            [$this, 'updateCustomActivityTypeAttributesUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'updateCustomActivityTypeAttributesUsingPOST'
     *
     * @param string $api_name
     *   API Name of the activity type
     * @param \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeAttributeRequest $custom_activity_type_attribute_request
     *   customActivityTypeAttributeRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateCustomActivityTypeAttributesUsingPOSTRequest(
        string $api_name,
        \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeAttributeRequest $custom_activity_type_attribute_request
    ): Request {

        $resourcePath = '/rest/v1/activities/external/type/{apiName}/attributes/update.json';
        $resourcePath = str_replace(
            '{' . 'apiName' . '}',
            ObjectSerializer::toPathValue($api_name),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            $custom_activity_type_attribute_request
        );
    }

    /**
     * Exception handler for updateCustomActivityTypeUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function updateCustomActivityTypeUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Update Custom Activity Type
     *
     * @param string $api_name
     *   API Name of the activity type
     * @param \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeRequest $custom_activity_type_request
     *   customActivityTypeRequest
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType
     */
    public function updateCustomActivityTypeUsingPOST(
        string $api_name,
        \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeRequest $custom_activity_type_request
    ): \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType {
        list($response) = $this->updateCustomActivityTypeUsingPOSTWithHttpInfo($api_name, $custom_activity_type_request);
        return $response;
    }

    /**
     * Update Custom Activity Type
     *
     * @param string $api_name
     *   API Name of the activity type
     * @param \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeRequest $custom_activity_type_request
     *   customActivityTypeRequest
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType,
     *     int,
     *     array<array<string>>
     * }
     */
    public function updateCustomActivityTypeUsingPOSTWithHttpInfo(
        string $api_name,
        \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeRequest $custom_activity_type_request
    ): array {
        $request = $this->updateCustomActivityTypeUsingPOSTRequest($api_name, $custom_activity_type_request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType::class
            );
        } catch (ApiException $e) {
            throw $this->updateCustomActivityTypeUsingPOSTHandleException($e);
        }
    }

    /**
     * Update Custom Activity Type
     *
     * @param string $api_name
     *   API Name of the activity type
     * @param \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeRequest $custom_activity_type_request
     *   customActivityTypeRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCustomActivityTypeUsingPOSTAsync(
        string $api_name,
        \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeRequest $custom_activity_type_request
    ): PromiseInterface {
        return $this->updateCustomActivityTypeUsingPOSTAsyncWithHttpInfo($api_name, $custom_activity_type_request)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType {
                    return $response[0];
                }
            );
    }

    /**
     * Update Custom Activity Type
     *
     * @param string $api_name
     *   API Name of the activity type
     * @param \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeRequest $custom_activity_type_request
     *   customActivityTypeRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCustomActivityTypeUsingPOSTAsyncWithHttpInfo(
        string $api_name,
        \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeRequest $custom_activity_type_request
    ): PromiseInterface {
        $request = $this->updateCustomActivityTypeUsingPOSTRequest($api_name, $custom_activity_type_request);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType::class,
            [$this, 'updateCustomActivityTypeUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'updateCustomActivityTypeUsingPOST'
     *
     * @param string $api_name
     *   API Name of the activity type
     * @param \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeRequest $custom_activity_type_request
     *   customActivityTypeRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateCustomActivityTypeUsingPOSTRequest(
        string $api_name,
        \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeRequest $custom_activity_type_request
    ): Request {

        $resourcePath = '/rest/v1/activities/external/type/{apiName}.json';
        $resourcePath = str_replace(
            '{' . 'apiName' . '}',
            ObjectSerializer::toPathValue($api_name),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            $custom_activity_type_request
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array<string, mixed> of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    /**
     * Make a request.
     *
     * @param \GuzzleHttp\Psr7\Request $request An initialized request object.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @return \Psr\Http\Message\ResponseInterface
     */
    private function makeRequest(Request $request)
    {
        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            $response = $e->getResponse();
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                (int) $e->getCode(),
                $response ? $response->getHeaders() : [],
                $response ? (string) $response->getBody() : null
            );
        }

        $statusCode = $response->getStatusCode();
        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    (string) $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                (string) $response->getBody()
            );
        }
        return $response;
    }

    /**
     * Make an async request.
     *
     * @param \GuzzleHttp\Psr7\Request $request An initialized request object.
     * @param class-string $returnType The return type.
     * @param callable $exceptionHandler A callback to process HTTP errors.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @return \GuzzleHttp\Promise\PromiseInterface A promise that will return a processed response.
     */
    private function makeAsyncRequest(Request $request, string $returnType, callable $exceptionHandler)
    {
        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function (ResponseInterface $response) use ($returnType) {
                    return $this->responseToReturn($response, $returnType);
                },
                function (RequestException $exception) use ($exceptionHandler) {
                    $response = $exception->getResponse();
                    $e = new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : [],
                        $response ? (string) $response->getBody() : null
                    );
                    throw $exceptionHandler($e);
                }
            );
    }

    /**
     * Convert a response to a return standard return array.
     *
     * @template T
     * @param \Psr\Http\Message\ResponseInterface $response A response from a request with a serialized body.
     * @param string $returnType The primary return type.
     * @phpstan-param class-string<T> $returnType
     *
     * @return array structured array or response and http info.
     * @phpstan-return array{T, int, array<array<string>>}
     */
    private function responseToReturn(ResponseInterface $response, string $returnType)
    {
        return [
            $this->deserializeResponseBody($response->getBody(), $returnType),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    /**
     * Deserialize a response body.
     *
     * @template T
     * @param mixed $responseBody The response body.
     * @param string $returnType The return type.
     * @param array<string, string[]> $headers A list of headers from the response.
     * @phpstan-param class-string<T> $returnType
     *
     * @return mixed Either a string or a stream to be passed to a file object.
     * @phpstan-return T
     * @psalm-return T
     */
    private function deserializeResponseBody($responseBody, string $returnType, array $headers = [])
    {
        return ObjectSerializer::deserialize(
            $returnType === \SplFileObject::class ? $responseBody : (string) $responseBody,
            $returnType,
            $headers
        );
    }
}
