<?php
/**
 * ActivitiesApi
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Lead
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketo Rest API
 *
 * Marketo Rest API
 *
 * OpenAPI spec version: 1.0
 * Contact: developerfeedback@marketo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.24
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace NecLimDul\MarketoRest\Lead\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Query;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\ResponseInterface;
use NecLimDul\MarketoRest\Lead\ApiException;
use NecLimDul\MarketoRest\Lead\Configuration;
use NecLimDul\MarketoRest\Lead\HeaderSelector;
use NecLimDul\MarketoRest\Lead\ObjectSerializer;

/**
 * ActivitiesApi Class Doc Comment
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Lead
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ActivitiesApi
{

    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addCustomActivityUsingPOST
     *
     * Add Custom Activities
     *
     * @param  \NecLimDul\MarketoRest\Lead\Model\CustomActivityRequest $custom_activity_request customActivityRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivity
     */
    public function addCustomActivityUsingPOST($custom_activity_request)
    {
        list($response) = $this->addCustomActivityUsingPOSTWithHttpInfo($custom_activity_request);
        return $response;
    }

    /**
     * Operation addCustomActivityUsingPOSTWithHttpInfo
     *
     * Add Custom Activities
     *
     * @param  \NecLimDul\MarketoRest\Lead\Model\CustomActivityRequest $custom_activity_request customActivityRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivity, HTTP status code, HTTP response headers (array of strings)
     */
    public function addCustomActivityUsingPOSTWithHttpInfo($custom_activity_request)
    {
        $request = $this->addCustomActivityUsingPOSTRequest($custom_activity_request);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivity');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivity');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivity',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addCustomActivityUsingPOSTAsync
     *
     * Add Custom Activities
     *
     * @param  \NecLimDul\MarketoRest\Lead\Model\CustomActivityRequest $custom_activity_request customActivityRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addCustomActivityUsingPOSTAsync($custom_activity_request)
    {
        return $this->addCustomActivityUsingPOSTAsyncWithHttpInfo($custom_activity_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addCustomActivityUsingPOSTAsyncWithHttpInfo
     *
     * Add Custom Activities
     *
     * @param  \NecLimDul\MarketoRest\Lead\Model\CustomActivityRequest $custom_activity_request customActivityRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addCustomActivityUsingPOSTAsyncWithHttpInfo($custom_activity_request)
    {
        $request = $this->addCustomActivityUsingPOSTRequest($custom_activity_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivity');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'addCustomActivityUsingPOST'
     *
     * @param  \NecLimDul\MarketoRest\Lead\Model\CustomActivityRequest $custom_activity_request customActivityRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addCustomActivityUsingPOSTRequest($custom_activity_request)
    {
        // Verify the required parameter 'custom_activity_request' is set.
        if ($custom_activity_request === null || (is_array($custom_activity_request) && empty($custom_activity_request))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $custom_activity_request when calling addCustomActivityUsingPOST'
            );
        }

        $resourcePath = '/rest/v1/activities/external.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );

        // for model (json/xml)
        if (!empty($custom_activity_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($custom_activity_request));
            } elseif (!is_array($custom_activity_request)) {
                $httpBody = (string) $custom_activity_request;
            }
            else {
                $httpBody = '';
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation approveCustomActivityTypeUsingPOST
     *
     * Approve Custom Activity Type
     *
     * @param  string $api_name API Name of the activity type (required)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType
     */
    public function approveCustomActivityTypeUsingPOST($api_name)
    {
        list($response) = $this->approveCustomActivityTypeUsingPOSTWithHttpInfo($api_name);
        return $response;
    }

    /**
     * Operation approveCustomActivityTypeUsingPOSTWithHttpInfo
     *
     * Approve Custom Activity Type
     *
     * @param  string $api_name API Name of the activity type (required)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType, HTTP status code, HTTP response headers (array of strings)
     */
    public function approveCustomActivityTypeUsingPOSTWithHttpInfo($api_name)
    {
        $request = $this->approveCustomActivityTypeUsingPOSTRequest($api_name);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation approveCustomActivityTypeUsingPOSTAsync
     *
     * Approve Custom Activity Type
     *
     * @param  string $api_name API Name of the activity type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function approveCustomActivityTypeUsingPOSTAsync($api_name)
    {
        return $this->approveCustomActivityTypeUsingPOSTAsyncWithHttpInfo($api_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation approveCustomActivityTypeUsingPOSTAsyncWithHttpInfo
     *
     * Approve Custom Activity Type
     *
     * @param  string $api_name API Name of the activity type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function approveCustomActivityTypeUsingPOSTAsyncWithHttpInfo($api_name)
    {
        $request = $this->approveCustomActivityTypeUsingPOSTRequest($api_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'approveCustomActivityTypeUsingPOST'
     *
     * @param  string $api_name API Name of the activity type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function approveCustomActivityTypeUsingPOSTRequest($api_name)
    {
        // Verify the required parameter 'api_name' is set.
        if ($api_name === null || (is_array($api_name) && empty($api_name))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_name when calling approveCustomActivityTypeUsingPOST'
            );
        }

        $resourcePath = '/rest/v1/activities/external/type/{apiName}/approve.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'apiName' . '}',
            ObjectSerializer::toPathValue($api_name),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createCustomActivityTypeAttributesUsingPOST
     *
     * Create Custom Activity Type Attributes
     *
     * @param  string $api_name API Name of the activity type (required)
     * @param  \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeAttributeRequest $custom_activity_type_attribute_request customActivityTypeAttributeRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType
     */
    public function createCustomActivityTypeAttributesUsingPOST($api_name, $custom_activity_type_attribute_request)
    {
        list($response) = $this->createCustomActivityTypeAttributesUsingPOSTWithHttpInfo($api_name, $custom_activity_type_attribute_request);
        return $response;
    }

    /**
     * Operation createCustomActivityTypeAttributesUsingPOSTWithHttpInfo
     *
     * Create Custom Activity Type Attributes
     *
     * @param  string $api_name API Name of the activity type (required)
     * @param  \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeAttributeRequest $custom_activity_type_attribute_request customActivityTypeAttributeRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType, HTTP status code, HTTP response headers (array of strings)
     */
    public function createCustomActivityTypeAttributesUsingPOSTWithHttpInfo($api_name, $custom_activity_type_attribute_request)
    {
        $request = $this->createCustomActivityTypeAttributesUsingPOSTRequest($api_name, $custom_activity_type_attribute_request);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createCustomActivityTypeAttributesUsingPOSTAsync
     *
     * Create Custom Activity Type Attributes
     *
     * @param  string $api_name API Name of the activity type (required)
     * @param  \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeAttributeRequest $custom_activity_type_attribute_request customActivityTypeAttributeRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCustomActivityTypeAttributesUsingPOSTAsync($api_name, $custom_activity_type_attribute_request)
    {
        return $this->createCustomActivityTypeAttributesUsingPOSTAsyncWithHttpInfo($api_name, $custom_activity_type_attribute_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createCustomActivityTypeAttributesUsingPOSTAsyncWithHttpInfo
     *
     * Create Custom Activity Type Attributes
     *
     * @param  string $api_name API Name of the activity type (required)
     * @param  \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeAttributeRequest $custom_activity_type_attribute_request customActivityTypeAttributeRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCustomActivityTypeAttributesUsingPOSTAsyncWithHttpInfo($api_name, $custom_activity_type_attribute_request)
    {
        $request = $this->createCustomActivityTypeAttributesUsingPOSTRequest($api_name, $custom_activity_type_attribute_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'createCustomActivityTypeAttributesUsingPOST'
     *
     * @param  string $api_name API Name of the activity type (required)
     * @param  \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeAttributeRequest $custom_activity_type_attribute_request customActivityTypeAttributeRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createCustomActivityTypeAttributesUsingPOSTRequest($api_name, $custom_activity_type_attribute_request)
    {
        // Verify the required parameter 'api_name' is set.
        if ($api_name === null || (is_array($api_name) && empty($api_name))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_name when calling createCustomActivityTypeAttributesUsingPOST'
            );
        }
        // Verify the required parameter 'custom_activity_type_attribute_request' is set.
        if ($custom_activity_type_attribute_request === null || (is_array($custom_activity_type_attribute_request) && empty($custom_activity_type_attribute_request))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $custom_activity_type_attribute_request when calling createCustomActivityTypeAttributesUsingPOST'
            );
        }

        $resourcePath = '/rest/v1/activities/external/type/{apiName}/attributes/create.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'apiName' . '}',
            ObjectSerializer::toPathValue($api_name),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );

        // for model (json/xml)
        if (!empty($custom_activity_type_attribute_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($custom_activity_type_attribute_request));
            } elseif (!is_array($custom_activity_type_attribute_request)) {
                $httpBody = (string) $custom_activity_type_attribute_request;
            }
            else {
                $httpBody = '';
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createCustomActivityTypeUsingPOST
     *
     * Create Custom Activity Type
     *
     * @param  \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeRequest $custom_activity_type_request customActivityTypeRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType
     */
    public function createCustomActivityTypeUsingPOST($custom_activity_type_request)
    {
        list($response) = $this->createCustomActivityTypeUsingPOSTWithHttpInfo($custom_activity_type_request);
        return $response;
    }

    /**
     * Operation createCustomActivityTypeUsingPOSTWithHttpInfo
     *
     * Create Custom Activity Type
     *
     * @param  \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeRequest $custom_activity_type_request customActivityTypeRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType, HTTP status code, HTTP response headers (array of strings)
     */
    public function createCustomActivityTypeUsingPOSTWithHttpInfo($custom_activity_type_request)
    {
        $request = $this->createCustomActivityTypeUsingPOSTRequest($custom_activity_type_request);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createCustomActivityTypeUsingPOSTAsync
     *
     * Create Custom Activity Type
     *
     * @param  \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeRequest $custom_activity_type_request customActivityTypeRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCustomActivityTypeUsingPOSTAsync($custom_activity_type_request)
    {
        return $this->createCustomActivityTypeUsingPOSTAsyncWithHttpInfo($custom_activity_type_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createCustomActivityTypeUsingPOSTAsyncWithHttpInfo
     *
     * Create Custom Activity Type
     *
     * @param  \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeRequest $custom_activity_type_request customActivityTypeRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCustomActivityTypeUsingPOSTAsyncWithHttpInfo($custom_activity_type_request)
    {
        $request = $this->createCustomActivityTypeUsingPOSTRequest($custom_activity_type_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'createCustomActivityTypeUsingPOST'
     *
     * @param  \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeRequest $custom_activity_type_request customActivityTypeRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createCustomActivityTypeUsingPOSTRequest($custom_activity_type_request)
    {
        // Verify the required parameter 'custom_activity_type_request' is set.
        if ($custom_activity_type_request === null || (is_array($custom_activity_type_request) && empty($custom_activity_type_request))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $custom_activity_type_request when calling createCustomActivityTypeUsingPOST'
            );
        }

        $resourcePath = '/rest/v1/activities/external/type.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );

        // for model (json/xml)
        if (!empty($custom_activity_type_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($custom_activity_type_request));
            } elseif (!is_array($custom_activity_type_request)) {
                $httpBody = (string) $custom_activity_type_request;
            }
            else {
                $httpBody = '';
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteCustomActivityTypeAttributesUsingPOST
     *
     * Delete Custom Activity Type Attributes
     *
     * @param  string $api_name API Name of the activity type (required)
     * @param  \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeAttributeRequest $custom_activity_type_attribute_request customActivityTypeAttributeRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType
     */
    public function deleteCustomActivityTypeAttributesUsingPOST($api_name, $custom_activity_type_attribute_request)
    {
        list($response) = $this->deleteCustomActivityTypeAttributesUsingPOSTWithHttpInfo($api_name, $custom_activity_type_attribute_request);
        return $response;
    }

    /**
     * Operation deleteCustomActivityTypeAttributesUsingPOSTWithHttpInfo
     *
     * Delete Custom Activity Type Attributes
     *
     * @param  string $api_name API Name of the activity type (required)
     * @param  \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeAttributeRequest $custom_activity_type_attribute_request customActivityTypeAttributeRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCustomActivityTypeAttributesUsingPOSTWithHttpInfo($api_name, $custom_activity_type_attribute_request)
    {
        $request = $this->deleteCustomActivityTypeAttributesUsingPOSTRequest($api_name, $custom_activity_type_attribute_request);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteCustomActivityTypeAttributesUsingPOSTAsync
     *
     * Delete Custom Activity Type Attributes
     *
     * @param  string $api_name API Name of the activity type (required)
     * @param  \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeAttributeRequest $custom_activity_type_attribute_request customActivityTypeAttributeRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCustomActivityTypeAttributesUsingPOSTAsync($api_name, $custom_activity_type_attribute_request)
    {
        return $this->deleteCustomActivityTypeAttributesUsingPOSTAsyncWithHttpInfo($api_name, $custom_activity_type_attribute_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteCustomActivityTypeAttributesUsingPOSTAsyncWithHttpInfo
     *
     * Delete Custom Activity Type Attributes
     *
     * @param  string $api_name API Name of the activity type (required)
     * @param  \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeAttributeRequest $custom_activity_type_attribute_request customActivityTypeAttributeRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCustomActivityTypeAttributesUsingPOSTAsyncWithHttpInfo($api_name, $custom_activity_type_attribute_request)
    {
        $request = $this->deleteCustomActivityTypeAttributesUsingPOSTRequest($api_name, $custom_activity_type_attribute_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteCustomActivityTypeAttributesUsingPOST'
     *
     * @param  string $api_name API Name of the activity type (required)
     * @param  \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeAttributeRequest $custom_activity_type_attribute_request customActivityTypeAttributeRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteCustomActivityTypeAttributesUsingPOSTRequest($api_name, $custom_activity_type_attribute_request)
    {
        // Verify the required parameter 'api_name' is set.
        if ($api_name === null || (is_array($api_name) && empty($api_name))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_name when calling deleteCustomActivityTypeAttributesUsingPOST'
            );
        }
        // Verify the required parameter 'custom_activity_type_attribute_request' is set.
        if ($custom_activity_type_attribute_request === null || (is_array($custom_activity_type_attribute_request) && empty($custom_activity_type_attribute_request))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $custom_activity_type_attribute_request when calling deleteCustomActivityTypeAttributesUsingPOST'
            );
        }

        $resourcePath = '/rest/v1/activities/external/type/{apiName}/attributes/delete.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'apiName' . '}',
            ObjectSerializer::toPathValue($api_name),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );

        // for model (json/xml)
        if (!empty($custom_activity_type_attribute_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($custom_activity_type_attribute_request));
            } elseif (!is_array($custom_activity_type_attribute_request)) {
                $httpBody = (string) $custom_activity_type_attribute_request;
            }
            else {
                $httpBody = '';
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteCustomActivityTypeUsingPOST
     *
     * Delete Custom Activity Type
     *
     * @param  string $api_name API Name of the activity type (required)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType
     */
    public function deleteCustomActivityTypeUsingPOST($api_name)
    {
        list($response) = $this->deleteCustomActivityTypeUsingPOSTWithHttpInfo($api_name);
        return $response;
    }

    /**
     * Operation deleteCustomActivityTypeUsingPOSTWithHttpInfo
     *
     * Delete Custom Activity Type
     *
     * @param  string $api_name API Name of the activity type (required)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCustomActivityTypeUsingPOSTWithHttpInfo($api_name)
    {
        $request = $this->deleteCustomActivityTypeUsingPOSTRequest($api_name);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteCustomActivityTypeUsingPOSTAsync
     *
     * Delete Custom Activity Type
     *
     * @param  string $api_name API Name of the activity type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCustomActivityTypeUsingPOSTAsync($api_name)
    {
        return $this->deleteCustomActivityTypeUsingPOSTAsyncWithHttpInfo($api_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteCustomActivityTypeUsingPOSTAsyncWithHttpInfo
     *
     * Delete Custom Activity Type
     *
     * @param  string $api_name API Name of the activity type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCustomActivityTypeUsingPOSTAsyncWithHttpInfo($api_name)
    {
        $request = $this->deleteCustomActivityTypeUsingPOSTRequest($api_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteCustomActivityTypeUsingPOST'
     *
     * @param  string $api_name API Name of the activity type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteCustomActivityTypeUsingPOSTRequest($api_name)
    {
        // Verify the required parameter 'api_name' is set.
        if ($api_name === null || (is_array($api_name) && empty($api_name))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_name when calling deleteCustomActivityTypeUsingPOST'
            );
        }

        $resourcePath = '/rest/v1/activities/external/type/{apiName}/delete.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'apiName' . '}',
            ObjectSerializer::toPathValue($api_name),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation describeCustomActivityTypeUsingGET
     *
     * Describe Custom Activity Type
     *
     * @param  string $api_name API Name of the activity type (required)
     * @param  bool $draft draft (optional)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType
     */
    public function describeCustomActivityTypeUsingGET($api_name, $draft = null)
    {
        list($response) = $this->describeCustomActivityTypeUsingGETWithHttpInfo($api_name, $draft);
        return $response;
    }

    /**
     * Operation describeCustomActivityTypeUsingGETWithHttpInfo
     *
     * Describe Custom Activity Type
     *
     * @param  string $api_name API Name of the activity type (required)
     * @param  bool $draft draft (optional)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType, HTTP status code, HTTP response headers (array of strings)
     */
    public function describeCustomActivityTypeUsingGETWithHttpInfo($api_name, $draft = null)
    {
        $request = $this->describeCustomActivityTypeUsingGETRequest($api_name, $draft);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation describeCustomActivityTypeUsingGETAsync
     *
     * Describe Custom Activity Type
     *
     * @param  string $api_name API Name of the activity type (required)
     * @param  bool $draft draft (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function describeCustomActivityTypeUsingGETAsync($api_name, $draft = null)
    {
        return $this->describeCustomActivityTypeUsingGETAsyncWithHttpInfo($api_name, $draft)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation describeCustomActivityTypeUsingGETAsyncWithHttpInfo
     *
     * Describe Custom Activity Type
     *
     * @param  string $api_name API Name of the activity type (required)
     * @param  bool $draft draft (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function describeCustomActivityTypeUsingGETAsyncWithHttpInfo($api_name, $draft = null)
    {
        $request = $this->describeCustomActivityTypeUsingGETRequest($api_name, $draft);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'describeCustomActivityTypeUsingGET'
     *
     * @param  string $api_name API Name of the activity type (required)
     * @param  bool $draft draft (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function describeCustomActivityTypeUsingGETRequest($api_name, $draft = null)
    {
        // Verify the required parameter 'api_name' is set.
        if ($api_name === null || (is_array($api_name) && empty($api_name))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_name when calling describeCustomActivityTypeUsingGET'
            );
        }

        $resourcePath = '/rest/v1/activities/external/type/{apiName}/describe.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Query parameters.
        if (is_array($draft)) {
            $draft = ObjectSerializer::serializeCollection($draft, '', true);
        }
        $queryParams['draft'] = $draft;
        // Remove any null (optional values).
        $queryParams = array_filter($queryParams, function($v) { return $v !== null; });

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'apiName' . '}',
            ObjectSerializer::toPathValue($api_name),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation discardDraftofCustomActivityTypeUsingPOST
     *
     * Discard Custom Activity Type Draft
     *
     * @param  string $api_name API Name of the activity type (required)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType
     */
    public function discardDraftofCustomActivityTypeUsingPOST($api_name)
    {
        list($response) = $this->discardDraftofCustomActivityTypeUsingPOSTWithHttpInfo($api_name);
        return $response;
    }

    /**
     * Operation discardDraftofCustomActivityTypeUsingPOSTWithHttpInfo
     *
     * Discard Custom Activity Type Draft
     *
     * @param  string $api_name API Name of the activity type (required)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType, HTTP status code, HTTP response headers (array of strings)
     */
    public function discardDraftofCustomActivityTypeUsingPOSTWithHttpInfo($api_name)
    {
        $request = $this->discardDraftofCustomActivityTypeUsingPOSTRequest($api_name);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation discardDraftofCustomActivityTypeUsingPOSTAsync
     *
     * Discard Custom Activity Type Draft
     *
     * @param  string $api_name API Name of the activity type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function discardDraftofCustomActivityTypeUsingPOSTAsync($api_name)
    {
        return $this->discardDraftofCustomActivityTypeUsingPOSTAsyncWithHttpInfo($api_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation discardDraftofCustomActivityTypeUsingPOSTAsyncWithHttpInfo
     *
     * Discard Custom Activity Type Draft
     *
     * @param  string $api_name API Name of the activity type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function discardDraftofCustomActivityTypeUsingPOSTAsyncWithHttpInfo($api_name)
    {
        $request = $this->discardDraftofCustomActivityTypeUsingPOSTRequest($api_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'discardDraftofCustomActivityTypeUsingPOST'
     *
     * @param  string $api_name API Name of the activity type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function discardDraftofCustomActivityTypeUsingPOSTRequest($api_name)
    {
        // Verify the required parameter 'api_name' is set.
        if ($api_name === null || (is_array($api_name) && empty($api_name))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_name when calling discardDraftofCustomActivityTypeUsingPOST'
            );
        }

        $resourcePath = '/rest/v1/activities/external/type/{apiName}/discardDraft.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'apiName' . '}',
            ObjectSerializer::toPathValue($api_name),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getActivitiesPagingTokenUsingGET
     *
     * Get Paging Token
     *
     * @param  \DateTime $since_datetime Earliest datetime to retrieve activities from (required)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfVoid
     */
    public function getActivitiesPagingTokenUsingGET($since_datetime)
    {
        list($response) = $this->getActivitiesPagingTokenUsingGETWithHttpInfo($since_datetime);
        return $response;
    }

    /**
     * Operation getActivitiesPagingTokenUsingGETWithHttpInfo
     *
     * Get Paging Token
     *
     * @param  \DateTime $since_datetime Earliest datetime to retrieve activities from (required)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Lead\Model\ResponseOfVoid, HTTP status code, HTTP response headers (array of strings)
     */
    public function getActivitiesPagingTokenUsingGETWithHttpInfo($since_datetime)
    {
        $request = $this->getActivitiesPagingTokenUsingGETRequest($since_datetime);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfVoid');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfVoid');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Lead\Model\ResponseOfVoid',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getActivitiesPagingTokenUsingGETAsync
     *
     * Get Paging Token
     *
     * @param  \DateTime $since_datetime Earliest datetime to retrieve activities from (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getActivitiesPagingTokenUsingGETAsync($since_datetime)
    {
        return $this->getActivitiesPagingTokenUsingGETAsyncWithHttpInfo($since_datetime)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getActivitiesPagingTokenUsingGETAsyncWithHttpInfo
     *
     * Get Paging Token
     *
     * @param  \DateTime $since_datetime Earliest datetime to retrieve activities from (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getActivitiesPagingTokenUsingGETAsyncWithHttpInfo($since_datetime)
    {
        $request = $this->getActivitiesPagingTokenUsingGETRequest($since_datetime);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfVoid');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'getActivitiesPagingTokenUsingGET'
     *
     * @param  \DateTime $since_datetime Earliest datetime to retrieve activities from (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getActivitiesPagingTokenUsingGETRequest($since_datetime)
    {
        // Verify the required parameter 'since_datetime' is set.
        if ($since_datetime === null || (is_array($since_datetime) && empty($since_datetime))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $since_datetime when calling getActivitiesPagingTokenUsingGET'
            );
        }

        $resourcePath = '/rest/v1/activities/pagingtoken.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Query parameters.
        if (is_array($since_datetime)) {
            $since_datetime = ObjectSerializer::serializeCollection($since_datetime, '', true);
        }
        $queryParams['sinceDatetime'] = $since_datetime;
        // Remove any null (optional values).
        $queryParams = array_filter($queryParams, function($v) { return $v !== null; });
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAllActivityTypesUsingGET
     *
     * Get Activity Types
     *
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfActivityType
     */
    public function getAllActivityTypesUsingGET()
    {
        list($response) = $this->getAllActivityTypesUsingGETWithHttpInfo();
        return $response;
    }

    /**
     * Operation getAllActivityTypesUsingGETWithHttpInfo
     *
     * Get Activity Types
     *
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Lead\Model\ResponseOfActivityType, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllActivityTypesUsingGETWithHttpInfo()
    {
        $request = $this->getAllActivityTypesUsingGETRequest();

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfActivityType');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfActivityType');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Lead\Model\ResponseOfActivityType',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAllActivityTypesUsingGETAsync
     *
     * Get Activity Types
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllActivityTypesUsingGETAsync()
    {
        return $this->getAllActivityTypesUsingGETAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllActivityTypesUsingGETAsyncWithHttpInfo
     *
     * Get Activity Types
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllActivityTypesUsingGETAsyncWithHttpInfo()
    {
        $request = $this->getAllActivityTypesUsingGETRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfActivityType');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllActivityTypesUsingGET'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAllActivityTypesUsingGETRequest()
    {

        $resourcePath = '/rest/v1/activities/types.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCustomActivityTypeUsingGET
     *
     * Get Custom Activity Types
     *
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType
     */
    public function getCustomActivityTypeUsingGET()
    {
        list($response) = $this->getCustomActivityTypeUsingGETWithHttpInfo();
        return $response;
    }

    /**
     * Operation getCustomActivityTypeUsingGETWithHttpInfo
     *
     * Get Custom Activity Types
     *
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCustomActivityTypeUsingGETWithHttpInfo()
    {
        $request = $this->getCustomActivityTypeUsingGETRequest();

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCustomActivityTypeUsingGETAsync
     *
     * Get Custom Activity Types
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomActivityTypeUsingGETAsync()
    {
        return $this->getCustomActivityTypeUsingGETAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCustomActivityTypeUsingGETAsyncWithHttpInfo
     *
     * Get Custom Activity Types
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomActivityTypeUsingGETAsyncWithHttpInfo()
    {
        $request = $this->getCustomActivityTypeUsingGETRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCustomActivityTypeUsingGET'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCustomActivityTypeUsingGETRequest()
    {

        $resourcePath = '/rest/v1/activities/external/types.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDeletedLeadsUsingGET
     *
     * Get Deleted Leads
     *
     * @param  string $next_page_token Token representation of a datetime returned by the Get Paging Token endpoint.  This endpoint will return activities after this datetime (required)
     * @param  int $batch_size Maximum number of records to return.  Maximum and default is 300. (optional)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfActivity
     */
    public function getDeletedLeadsUsingGET($next_page_token, $batch_size = null)
    {
        list($response) = $this->getDeletedLeadsUsingGETWithHttpInfo($next_page_token, $batch_size);
        return $response;
    }

    /**
     * Operation getDeletedLeadsUsingGETWithHttpInfo
     *
     * Get Deleted Leads
     *
     * @param  string $next_page_token Token representation of a datetime returned by the Get Paging Token endpoint.  This endpoint will return activities after this datetime (required)
     * @param  int $batch_size Maximum number of records to return.  Maximum and default is 300. (optional)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Lead\Model\ResponseOfActivity, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDeletedLeadsUsingGETWithHttpInfo($next_page_token, $batch_size = null)
    {
        $request = $this->getDeletedLeadsUsingGETRequest($next_page_token, $batch_size);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfActivity');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfActivity');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Lead\Model\ResponseOfActivity',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDeletedLeadsUsingGETAsync
     *
     * Get Deleted Leads
     *
     * @param  string $next_page_token Token representation of a datetime returned by the Get Paging Token endpoint.  This endpoint will return activities after this datetime (required)
     * @param  int $batch_size Maximum number of records to return.  Maximum and default is 300. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDeletedLeadsUsingGETAsync($next_page_token, $batch_size = null)
    {
        return $this->getDeletedLeadsUsingGETAsyncWithHttpInfo($next_page_token, $batch_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDeletedLeadsUsingGETAsyncWithHttpInfo
     *
     * Get Deleted Leads
     *
     * @param  string $next_page_token Token representation of a datetime returned by the Get Paging Token endpoint.  This endpoint will return activities after this datetime (required)
     * @param  int $batch_size Maximum number of records to return.  Maximum and default is 300. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDeletedLeadsUsingGETAsyncWithHttpInfo($next_page_token, $batch_size = null)
    {
        $request = $this->getDeletedLeadsUsingGETRequest($next_page_token, $batch_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfActivity');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDeletedLeadsUsingGET'
     *
     * @param  string $next_page_token Token representation of a datetime returned by the Get Paging Token endpoint.  This endpoint will return activities after this datetime (required)
     * @param  int $batch_size Maximum number of records to return.  Maximum and default is 300. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDeletedLeadsUsingGETRequest($next_page_token, $batch_size = null)
    {
        // Verify the required parameter 'next_page_token' is set.
        if ($next_page_token === null || (is_array($next_page_token) && empty($next_page_token))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $next_page_token when calling getDeletedLeadsUsingGET'
            );
        }

        $resourcePath = '/rest/v1/activities/deletedleads.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Query parameters.
        if (is_array($next_page_token)) {
            $next_page_token = ObjectSerializer::serializeCollection($next_page_token, '', true);
        }
        $queryParams['nextPageToken'] = $next_page_token;
        if (is_array($batch_size)) {
            $batch_size = ObjectSerializer::serializeCollection($batch_size, '', true);
        }
        $queryParams['batchSize'] = $batch_size;
        // Remove any null (optional values).
        $queryParams = array_filter($queryParams, function($v) { return $v !== null; });
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLeadActivitiesUsingGET
     *
     * Get Lead Activities
     *
     * @param  string $next_page_token Token representation of a datetime returned by the Get Paging Token endpoint.  This endpoint will return activities after this datetime (required)
     * @param  int[] $activity_type_ids Comma-separated list of activity type ids. These can be retrieved with the Get Activity Types API. (required)
     * @param  int[] $asset_ids Id of the primary asset for an activity.  This is based on the primary asset id of a given activity type.  Should only be used when a single activity type is set (optional)
     * @param  int $list_id Id of a static list.  If set, will only return activities of members of this static list. (optional)
     * @param  int[] $lead_ids Comma-separated list of lead ids.  If set, will only return activities of the leads with these ids.  Allows up to 30 entries. (optional)
     * @param  int $batch_size Maximum number of records to return.  Maximum and default is 300. (optional)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfActivity
     */
    public function getLeadActivitiesUsingGET($next_page_token, $activity_type_ids, $asset_ids = null, $list_id = null, $lead_ids = null, $batch_size = null)
    {
        list($response) = $this->getLeadActivitiesUsingGETWithHttpInfo($next_page_token, $activity_type_ids, $asset_ids, $list_id, $lead_ids, $batch_size);
        return $response;
    }

    /**
     * Operation getLeadActivitiesUsingGETWithHttpInfo
     *
     * Get Lead Activities
     *
     * @param  string $next_page_token Token representation of a datetime returned by the Get Paging Token endpoint.  This endpoint will return activities after this datetime (required)
     * @param  int[] $activity_type_ids Comma-separated list of activity type ids. These can be retrieved with the Get Activity Types API. (required)
     * @param  int[] $asset_ids Id of the primary asset for an activity.  This is based on the primary asset id of a given activity type.  Should only be used when a single activity type is set (optional)
     * @param  int $list_id Id of a static list.  If set, will only return activities of members of this static list. (optional)
     * @param  int[] $lead_ids Comma-separated list of lead ids.  If set, will only return activities of the leads with these ids.  Allows up to 30 entries. (optional)
     * @param  int $batch_size Maximum number of records to return.  Maximum and default is 300. (optional)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Lead\Model\ResponseOfActivity, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLeadActivitiesUsingGETWithHttpInfo($next_page_token, $activity_type_ids, $asset_ids = null, $list_id = null, $lead_ids = null, $batch_size = null)
    {
        $request = $this->getLeadActivitiesUsingGETRequest($next_page_token, $activity_type_ids, $asset_ids, $list_id, $lead_ids, $batch_size);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfActivity');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfActivity');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Lead\Model\ResponseOfActivity',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLeadActivitiesUsingGETAsync
     *
     * Get Lead Activities
     *
     * @param  string $next_page_token Token representation of a datetime returned by the Get Paging Token endpoint.  This endpoint will return activities after this datetime (required)
     * @param  int[] $activity_type_ids Comma-separated list of activity type ids. These can be retrieved with the Get Activity Types API. (required)
     * @param  int[] $asset_ids Id of the primary asset for an activity.  This is based on the primary asset id of a given activity type.  Should only be used when a single activity type is set (optional)
     * @param  int $list_id Id of a static list.  If set, will only return activities of members of this static list. (optional)
     * @param  int[] $lead_ids Comma-separated list of lead ids.  If set, will only return activities of the leads with these ids.  Allows up to 30 entries. (optional)
     * @param  int $batch_size Maximum number of records to return.  Maximum and default is 300. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLeadActivitiesUsingGETAsync($next_page_token, $activity_type_ids, $asset_ids = null, $list_id = null, $lead_ids = null, $batch_size = null)
    {
        return $this->getLeadActivitiesUsingGETAsyncWithHttpInfo($next_page_token, $activity_type_ids, $asset_ids, $list_id, $lead_ids, $batch_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLeadActivitiesUsingGETAsyncWithHttpInfo
     *
     * Get Lead Activities
     *
     * @param  string $next_page_token Token representation of a datetime returned by the Get Paging Token endpoint.  This endpoint will return activities after this datetime (required)
     * @param  int[] $activity_type_ids Comma-separated list of activity type ids. These can be retrieved with the Get Activity Types API. (required)
     * @param  int[] $asset_ids Id of the primary asset for an activity.  This is based on the primary asset id of a given activity type.  Should only be used when a single activity type is set (optional)
     * @param  int $list_id Id of a static list.  If set, will only return activities of members of this static list. (optional)
     * @param  int[] $lead_ids Comma-separated list of lead ids.  If set, will only return activities of the leads with these ids.  Allows up to 30 entries. (optional)
     * @param  int $batch_size Maximum number of records to return.  Maximum and default is 300. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLeadActivitiesUsingGETAsyncWithHttpInfo($next_page_token, $activity_type_ids, $asset_ids = null, $list_id = null, $lead_ids = null, $batch_size = null)
    {
        $request = $this->getLeadActivitiesUsingGETRequest($next_page_token, $activity_type_ids, $asset_ids, $list_id, $lead_ids, $batch_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfActivity');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLeadActivitiesUsingGET'
     *
     * @param  string $next_page_token Token representation of a datetime returned by the Get Paging Token endpoint.  This endpoint will return activities after this datetime (required)
     * @param  int[] $activity_type_ids Comma-separated list of activity type ids. These can be retrieved with the Get Activity Types API. (required)
     * @param  int[] $asset_ids Id of the primary asset for an activity.  This is based on the primary asset id of a given activity type.  Should only be used when a single activity type is set (optional)
     * @param  int $list_id Id of a static list.  If set, will only return activities of members of this static list. (optional)
     * @param  int[] $lead_ids Comma-separated list of lead ids.  If set, will only return activities of the leads with these ids.  Allows up to 30 entries. (optional)
     * @param  int $batch_size Maximum number of records to return.  Maximum and default is 300. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLeadActivitiesUsingGETRequest($next_page_token, $activity_type_ids, $asset_ids = null, $list_id = null, $lead_ids = null, $batch_size = null)
    {
        // Verify the required parameter 'next_page_token' is set.
        if ($next_page_token === null || (is_array($next_page_token) && empty($next_page_token))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $next_page_token when calling getLeadActivitiesUsingGET'
            );
        }
        // Verify the required parameter 'activity_type_ids' is set.
        if ($activity_type_ids === null || (is_array($activity_type_ids) && empty($activity_type_ids))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $activity_type_ids when calling getLeadActivitiesUsingGET'
            );
        }

        $resourcePath = '/rest/v1/activities.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Query parameters.
        if (is_array($next_page_token)) {
            $next_page_token = ObjectSerializer::serializeCollection($next_page_token, '', true);
        }
        $queryParams['nextPageToken'] = $next_page_token;
        if (is_array($activity_type_ids)) {
            $activity_type_ids = ObjectSerializer::serializeCollection($activity_type_ids, 'multi', true);
        }
        $queryParams['activityTypeIds'] = $activity_type_ids;
        if (is_array($asset_ids)) {
            $asset_ids = ObjectSerializer::serializeCollection($asset_ids, 'multi', true);
        }
        $queryParams['assetIds'] = $asset_ids;
        if (is_array($list_id)) {
            $list_id = ObjectSerializer::serializeCollection($list_id, '', true);
        }
        $queryParams['listId'] = $list_id;
        if (is_array($lead_ids)) {
            $lead_ids = ObjectSerializer::serializeCollection($lead_ids, 'multi', true);
        }
        $queryParams['leadIds'] = $lead_ids;
        if (is_array($batch_size)) {
            $batch_size = ObjectSerializer::serializeCollection($batch_size, '', true);
        }
        $queryParams['batchSize'] = $batch_size;
        // Remove any null (optional values).
        $queryParams = array_filter($queryParams, function($v) { return $v !== null; });
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLeadChangesUsingGET
     *
     * Get Lead Changes
     *
     * @param  string $next_page_token Token representation of a datetime returned by the Get Paging Token endpoint.  This endpoint will return activities after this datetime (required)
     * @param  string[] $fields Comma-separated list of field names to return changes for.  Field names can be retrieved with the Describe Lead API. (required)
     * @param  int $list_id Id of a static list.  If set, will only return activities of members of this static list. (optional)
     * @param  int[] $lead_ids Comma-separated list of lead ids.  If set, will only return activities of the leads with these ids.  Allows up to 30 entries. (optional)
     * @param  int $batch_size Maximum number of records to return.  Maximum and default is 300. (optional)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadChange
     */
    public function getLeadChangesUsingGET($next_page_token, $fields, $list_id = null, $lead_ids = null, $batch_size = null)
    {
        list($response) = $this->getLeadChangesUsingGETWithHttpInfo($next_page_token, $fields, $list_id, $lead_ids, $batch_size);
        return $response;
    }

    /**
     * Operation getLeadChangesUsingGETWithHttpInfo
     *
     * Get Lead Changes
     *
     * @param  string $next_page_token Token representation of a datetime returned by the Get Paging Token endpoint.  This endpoint will return activities after this datetime (required)
     * @param  string[] $fields Comma-separated list of field names to return changes for.  Field names can be retrieved with the Describe Lead API. (required)
     * @param  int $list_id Id of a static list.  If set, will only return activities of members of this static list. (optional)
     * @param  int[] $lead_ids Comma-separated list of lead ids.  If set, will only return activities of the leads with these ids.  Allows up to 30 entries. (optional)
     * @param  int $batch_size Maximum number of records to return.  Maximum and default is 300. (optional)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadChange, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLeadChangesUsingGETWithHttpInfo($next_page_token, $fields, $list_id = null, $lead_ids = null, $batch_size = null)
    {
        $request = $this->getLeadChangesUsingGETRequest($next_page_token, $fields, $list_id, $lead_ids, $batch_size);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadChange');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadChange');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadChange',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLeadChangesUsingGETAsync
     *
     * Get Lead Changes
     *
     * @param  string $next_page_token Token representation of a datetime returned by the Get Paging Token endpoint.  This endpoint will return activities after this datetime (required)
     * @param  string[] $fields Comma-separated list of field names to return changes for.  Field names can be retrieved with the Describe Lead API. (required)
     * @param  int $list_id Id of a static list.  If set, will only return activities of members of this static list. (optional)
     * @param  int[] $lead_ids Comma-separated list of lead ids.  If set, will only return activities of the leads with these ids.  Allows up to 30 entries. (optional)
     * @param  int $batch_size Maximum number of records to return.  Maximum and default is 300. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLeadChangesUsingGETAsync($next_page_token, $fields, $list_id = null, $lead_ids = null, $batch_size = null)
    {
        return $this->getLeadChangesUsingGETAsyncWithHttpInfo($next_page_token, $fields, $list_id, $lead_ids, $batch_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLeadChangesUsingGETAsyncWithHttpInfo
     *
     * Get Lead Changes
     *
     * @param  string $next_page_token Token representation of a datetime returned by the Get Paging Token endpoint.  This endpoint will return activities after this datetime (required)
     * @param  string[] $fields Comma-separated list of field names to return changes for.  Field names can be retrieved with the Describe Lead API. (required)
     * @param  int $list_id Id of a static list.  If set, will only return activities of members of this static list. (optional)
     * @param  int[] $lead_ids Comma-separated list of lead ids.  If set, will only return activities of the leads with these ids.  Allows up to 30 entries. (optional)
     * @param  int $batch_size Maximum number of records to return.  Maximum and default is 300. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLeadChangesUsingGETAsyncWithHttpInfo($next_page_token, $fields, $list_id = null, $lead_ids = null, $batch_size = null)
    {
        $request = $this->getLeadChangesUsingGETRequest($next_page_token, $fields, $list_id, $lead_ids, $batch_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadChange');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLeadChangesUsingGET'
     *
     * @param  string $next_page_token Token representation of a datetime returned by the Get Paging Token endpoint.  This endpoint will return activities after this datetime (required)
     * @param  string[] $fields Comma-separated list of field names to return changes for.  Field names can be retrieved with the Describe Lead API. (required)
     * @param  int $list_id Id of a static list.  If set, will only return activities of members of this static list. (optional)
     * @param  int[] $lead_ids Comma-separated list of lead ids.  If set, will only return activities of the leads with these ids.  Allows up to 30 entries. (optional)
     * @param  int $batch_size Maximum number of records to return.  Maximum and default is 300. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLeadChangesUsingGETRequest($next_page_token, $fields, $list_id = null, $lead_ids = null, $batch_size = null)
    {
        // Verify the required parameter 'next_page_token' is set.
        if ($next_page_token === null || (is_array($next_page_token) && empty($next_page_token))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $next_page_token when calling getLeadChangesUsingGET'
            );
        }
        // Verify the required parameter 'fields' is set.
        if ($fields === null || (is_array($fields) && empty($fields))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fields when calling getLeadChangesUsingGET'
            );
        }

        $resourcePath = '/rest/v1/activities/leadchanges.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Query parameters.
        if (is_array($next_page_token)) {
            $next_page_token = ObjectSerializer::serializeCollection($next_page_token, '', true);
        }
        $queryParams['nextPageToken'] = $next_page_token;
        if (is_array($fields)) {
            $fields = ObjectSerializer::serializeCollection($fields, 'multi', true);
        }
        $queryParams['fields'] = $fields;
        if (is_array($list_id)) {
            $list_id = ObjectSerializer::serializeCollection($list_id, '', true);
        }
        $queryParams['listId'] = $list_id;
        if (is_array($lead_ids)) {
            $lead_ids = ObjectSerializer::serializeCollection($lead_ids, 'multi', true);
        }
        $queryParams['leadIds'] = $lead_ids;
        if (is_array($batch_size)) {
            $batch_size = ObjectSerializer::serializeCollection($batch_size, '', true);
        }
        $queryParams['batchSize'] = $batch_size;
        // Remove any null (optional values).
        $queryParams = array_filter($queryParams, function($v) { return $v !== null; });
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateCustomActivityTypeAttributesUsingPOST
     *
     * Update Custom Activity Type Attributes
     *
     * @param  string $api_name API Name of the activity type (required)
     * @param  \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeAttributeRequest $custom_activity_type_attribute_request customActivityTypeAttributeRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType
     */
    public function updateCustomActivityTypeAttributesUsingPOST($api_name, $custom_activity_type_attribute_request)
    {
        list($response) = $this->updateCustomActivityTypeAttributesUsingPOSTWithHttpInfo($api_name, $custom_activity_type_attribute_request);
        return $response;
    }

    /**
     * Operation updateCustomActivityTypeAttributesUsingPOSTWithHttpInfo
     *
     * Update Custom Activity Type Attributes
     *
     * @param  string $api_name API Name of the activity type (required)
     * @param  \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeAttributeRequest $custom_activity_type_attribute_request customActivityTypeAttributeRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCustomActivityTypeAttributesUsingPOSTWithHttpInfo($api_name, $custom_activity_type_attribute_request)
    {
        $request = $this->updateCustomActivityTypeAttributesUsingPOSTRequest($api_name, $custom_activity_type_attribute_request);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateCustomActivityTypeAttributesUsingPOSTAsync
     *
     * Update Custom Activity Type Attributes
     *
     * @param  string $api_name API Name of the activity type (required)
     * @param  \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeAttributeRequest $custom_activity_type_attribute_request customActivityTypeAttributeRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCustomActivityTypeAttributesUsingPOSTAsync($api_name, $custom_activity_type_attribute_request)
    {
        return $this->updateCustomActivityTypeAttributesUsingPOSTAsyncWithHttpInfo($api_name, $custom_activity_type_attribute_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateCustomActivityTypeAttributesUsingPOSTAsyncWithHttpInfo
     *
     * Update Custom Activity Type Attributes
     *
     * @param  string $api_name API Name of the activity type (required)
     * @param  \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeAttributeRequest $custom_activity_type_attribute_request customActivityTypeAttributeRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCustomActivityTypeAttributesUsingPOSTAsyncWithHttpInfo($api_name, $custom_activity_type_attribute_request)
    {
        $request = $this->updateCustomActivityTypeAttributesUsingPOSTRequest($api_name, $custom_activity_type_attribute_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateCustomActivityTypeAttributesUsingPOST'
     *
     * @param  string $api_name API Name of the activity type (required)
     * @param  \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeAttributeRequest $custom_activity_type_attribute_request customActivityTypeAttributeRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateCustomActivityTypeAttributesUsingPOSTRequest($api_name, $custom_activity_type_attribute_request)
    {
        // Verify the required parameter 'api_name' is set.
        if ($api_name === null || (is_array($api_name) && empty($api_name))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_name when calling updateCustomActivityTypeAttributesUsingPOST'
            );
        }
        // Verify the required parameter 'custom_activity_type_attribute_request' is set.
        if ($custom_activity_type_attribute_request === null || (is_array($custom_activity_type_attribute_request) && empty($custom_activity_type_attribute_request))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $custom_activity_type_attribute_request when calling updateCustomActivityTypeAttributesUsingPOST'
            );
        }

        $resourcePath = '/rest/v1/activities/external/type/{apiName}/attributes/update.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'apiName' . '}',
            ObjectSerializer::toPathValue($api_name),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );

        // for model (json/xml)
        if (!empty($custom_activity_type_attribute_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($custom_activity_type_attribute_request));
            } elseif (!is_array($custom_activity_type_attribute_request)) {
                $httpBody = (string) $custom_activity_type_attribute_request;
            }
            else {
                $httpBody = '';
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateCustomActivityTypeUsingPOST
     *
     * Update Custom Activity Type
     *
     * @param  string $api_name API Name of the activity type (required)
     * @param  \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeRequest $custom_activity_type_request customActivityTypeRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType
     */
    public function updateCustomActivityTypeUsingPOST($api_name, $custom_activity_type_request)
    {
        list($response) = $this->updateCustomActivityTypeUsingPOSTWithHttpInfo($api_name, $custom_activity_type_request);
        return $response;
    }

    /**
     * Operation updateCustomActivityTypeUsingPOSTWithHttpInfo
     *
     * Update Custom Activity Type
     *
     * @param  string $api_name API Name of the activity type (required)
     * @param  \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeRequest $custom_activity_type_request customActivityTypeRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCustomActivityTypeUsingPOSTWithHttpInfo($api_name, $custom_activity_type_request)
    {
        $request = $this->updateCustomActivityTypeUsingPOSTRequest($api_name, $custom_activity_type_request);

        try {
            $response = $this->makeRequest($request);

            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType');
            }

            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType');

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $e->setResponseObject(
                        $this->deserializeResponseBody(
                            $e->getResponseBody(),
                            '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType',
                            $e->getResponseHeaders()
                        )
                    );
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateCustomActivityTypeUsingPOSTAsync
     *
     * Update Custom Activity Type
     *
     * @param  string $api_name API Name of the activity type (required)
     * @param  \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeRequest $custom_activity_type_request customActivityTypeRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCustomActivityTypeUsingPOSTAsync($api_name, $custom_activity_type_request)
    {
        return $this->updateCustomActivityTypeUsingPOSTAsyncWithHttpInfo($api_name, $custom_activity_type_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateCustomActivityTypeUsingPOSTAsyncWithHttpInfo
     *
     * Update Custom Activity Type
     *
     * @param  string $api_name API Name of the activity type (required)
     * @param  \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeRequest $custom_activity_type_request customActivityTypeRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCustomActivityTypeUsingPOSTAsyncWithHttpInfo($api_name, $custom_activity_type_request)
    {
        $request = $this->updateCustomActivityTypeUsingPOSTRequest($api_name, $custom_activity_type_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType');
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateCustomActivityTypeUsingPOST'
     *
     * @param  string $api_name API Name of the activity type (required)
     * @param  \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeRequest $custom_activity_type_request customActivityTypeRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateCustomActivityTypeUsingPOSTRequest($api_name, $custom_activity_type_request)
    {
        // Verify the required parameter 'api_name' is set.
        if ($api_name === null || (is_array($api_name) && empty($api_name))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_name when calling updateCustomActivityTypeUsingPOST'
            );
        }
        // Verify the required parameter 'custom_activity_type_request' is set.
        if ($custom_activity_type_request === null || (is_array($custom_activity_type_request) && empty($custom_activity_type_request))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $custom_activity_type_request when calling updateCustomActivityTypeUsingPOST'
            );
        }

        $resourcePath = '/rest/v1/activities/external/type/{apiName}.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'apiName' . '}',
            ObjectSerializer::toPathValue($api_name),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );

        // for model (json/xml)
        if (!empty($custom_activity_type_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($custom_activity_type_request));
            } elseif (!is_array($custom_activity_type_request)) {
                $httpBody = (string) $custom_activity_type_request;
            }
            else {
                $httpBody = '';
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    /**
     * Make a request.
     *
     * @param \GuzzleHttp\Psr7\Request $request
     *   An initialized request object.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @return \Psr\Http\Message\ResponseInterface
     */
    private function makeRequest(Request $request) {
        $options = $this->createHttpClientOption();
        try {
           $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            $response = $e->getResponse();
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                (int) $e->getCode(),
                $response ? $response->getHeaders() : null,
                $response ? (string) $response->getBody() : null
            );
        }

        $statusCode = $response->getStatusCode();
        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    (string) $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                (string) $response->getBody()
            );
        }
        return $response;
    }

    /**
     * Convert a response to a return standard return array.
     *
     * @param \Psr\Http\Message\ResponseInterface $response
     *   A response from a request with a serialized body.
     * @param string $returnType
     *   The return type.
     *
     * @return array
     */
    private function responseToReturn(ResponseInterface $response, string $returnType) {
        return [
            $this->deserializeResponseBody($response->getBody(), $returnType),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    /**
     * Deserialize a response body.
     *
     * @param mixed $responseBody
     *   The response body.
     * @param string $returnType
     *   The return type.
     * @param array|null $headers
     *   The a list of headers from the response.
     * @return mixed
     *   Either a string or a stream to be passed to a file object.
     */
    private function deserializeResponseBody($responseBody, $returnType, $headers = [])
    {
        return ObjectSerializer::deserialize(
            $returnType === '\SplFileObject' ? $responseBody : (string) $responseBody,
            $returnType,
            $headers
        );
    }

}
