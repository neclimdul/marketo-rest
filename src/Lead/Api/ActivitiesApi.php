<?php
/**
 * ActivitiesApi
 * PHP version 5
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Lead
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketo Rest API
 *
 * Marketo Rest API
 *
 * OpenAPI spec version: 1.0
 * Contact: developerfeedback@marketo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace NecLimDul\MarketoRest\Lead\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use NecLimDul\MarketoRest\Lead\ApiException;
use NecLimDul\MarketoRest\Lead\Configuration;
use NecLimDul\MarketoRest\Lead\HeaderSelector;
use NecLimDul\MarketoRest\Lead\ObjectSerializer;

/**
 * ActivitiesApi Class Doc Comment
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Lead
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ActivitiesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addCustomActivityUsingPOST
     *
     * Add Custom Activities
     *
     * @param  \NecLimDul\MarketoRest\Lead\Model\CustomActivityRequest $custom_activity_request customActivityRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivity
     */
    public function addCustomActivityUsingPOST($custom_activity_request)
    {
        list($response) = $this->addCustomActivityUsingPOSTWithHttpInfo($custom_activity_request);
        return $response;
    }

    /**
     * Operation addCustomActivityUsingPOSTWithHttpInfo
     *
     * Add Custom Activities
     *
     * @param  \NecLimDul\MarketoRest\Lead\Model\CustomActivityRequest $custom_activity_request customActivityRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivity, HTTP status code, HTTP response headers (array of strings)
     */
    public function addCustomActivityUsingPOSTWithHttpInfo($custom_activity_request)
    {
        $returnType = '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivity';
        $request = $this->addCustomActivityUsingPOSTRequest($custom_activity_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addCustomActivityUsingPOSTAsync
     *
     * Add Custom Activities
     *
     * @param  \NecLimDul\MarketoRest\Lead\Model\CustomActivityRequest $custom_activity_request customActivityRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addCustomActivityUsingPOSTAsync($custom_activity_request)
    {
        return $this->addCustomActivityUsingPOSTAsyncWithHttpInfo($custom_activity_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addCustomActivityUsingPOSTAsyncWithHttpInfo
     *
     * Add Custom Activities
     *
     * @param  \NecLimDul\MarketoRest\Lead\Model\CustomActivityRequest $custom_activity_request customActivityRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addCustomActivityUsingPOSTAsyncWithHttpInfo($custom_activity_request)
    {
        $returnType = '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivity';
        $request = $this->addCustomActivityUsingPOSTRequest($custom_activity_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addCustomActivityUsingPOST'
     *
     * @param  \NecLimDul\MarketoRest\Lead\Model\CustomActivityRequest $custom_activity_request customActivityRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addCustomActivityUsingPOSTRequest($custom_activity_request)
    {
        // verify the required parameter 'custom_activity_request' is set
        if ($custom_activity_request === null || (is_array($custom_activity_request) && count($custom_activity_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $custom_activity_request when calling addCustomActivityUsingPOST'
            );
        }

        $resourcePath = '/rest/v1/activities/external.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($custom_activity_request)) {
            $_tempBody = $custom_activity_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation approveCustomActivityTypeUsingPOST
     *
     * Approve Custom Activity Type
     *
     * @param  string $api_name API Name of the activity type (required)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType
     */
    public function approveCustomActivityTypeUsingPOST($api_name)
    {
        list($response) = $this->approveCustomActivityTypeUsingPOSTWithHttpInfo($api_name);
        return $response;
    }

    /**
     * Operation approveCustomActivityTypeUsingPOSTWithHttpInfo
     *
     * Approve Custom Activity Type
     *
     * @param  string $api_name API Name of the activity type (required)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType, HTTP status code, HTTP response headers (array of strings)
     */
    public function approveCustomActivityTypeUsingPOSTWithHttpInfo($api_name)
    {
        $returnType = '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType';
        $request = $this->approveCustomActivityTypeUsingPOSTRequest($api_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation approveCustomActivityTypeUsingPOSTAsync
     *
     * Approve Custom Activity Type
     *
     * @param  string $api_name API Name of the activity type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function approveCustomActivityTypeUsingPOSTAsync($api_name)
    {
        return $this->approveCustomActivityTypeUsingPOSTAsyncWithHttpInfo($api_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation approveCustomActivityTypeUsingPOSTAsyncWithHttpInfo
     *
     * Approve Custom Activity Type
     *
     * @param  string $api_name API Name of the activity type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function approveCustomActivityTypeUsingPOSTAsyncWithHttpInfo($api_name)
    {
        $returnType = '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType';
        $request = $this->approveCustomActivityTypeUsingPOSTRequest($api_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'approveCustomActivityTypeUsingPOST'
     *
     * @param  string $api_name API Name of the activity type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function approveCustomActivityTypeUsingPOSTRequest($api_name)
    {
        // verify the required parameter 'api_name' is set
        if ($api_name === null || (is_array($api_name) && count($api_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_name when calling approveCustomActivityTypeUsingPOST'
            );
        }

        $resourcePath = '/rest/v1/activities/external/type/{apiName}/approve.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($api_name !== null) {
            $resourcePath = str_replace(
                '{' . 'apiName' . '}',
                ObjectSerializer::toPathValue($api_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createCustomActivityTypeAttributesUsingPOST
     *
     * Create Custom Activity Type Attributes
     *
     * @param  string $api_name API Name of the activity type (required)
     * @param  \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeAttributeRequest $custom_activity_type_attribute_request customActivityTypeAttributeRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType
     */
    public function createCustomActivityTypeAttributesUsingPOST($api_name, $custom_activity_type_attribute_request)
    {
        list($response) = $this->createCustomActivityTypeAttributesUsingPOSTWithHttpInfo($api_name, $custom_activity_type_attribute_request);
        return $response;
    }

    /**
     * Operation createCustomActivityTypeAttributesUsingPOSTWithHttpInfo
     *
     * Create Custom Activity Type Attributes
     *
     * @param  string $api_name API Name of the activity type (required)
     * @param  \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeAttributeRequest $custom_activity_type_attribute_request customActivityTypeAttributeRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType, HTTP status code, HTTP response headers (array of strings)
     */
    public function createCustomActivityTypeAttributesUsingPOSTWithHttpInfo($api_name, $custom_activity_type_attribute_request)
    {
        $returnType = '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType';
        $request = $this->createCustomActivityTypeAttributesUsingPOSTRequest($api_name, $custom_activity_type_attribute_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createCustomActivityTypeAttributesUsingPOSTAsync
     *
     * Create Custom Activity Type Attributes
     *
     * @param  string $api_name API Name of the activity type (required)
     * @param  \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeAttributeRequest $custom_activity_type_attribute_request customActivityTypeAttributeRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCustomActivityTypeAttributesUsingPOSTAsync($api_name, $custom_activity_type_attribute_request)
    {
        return $this->createCustomActivityTypeAttributesUsingPOSTAsyncWithHttpInfo($api_name, $custom_activity_type_attribute_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createCustomActivityTypeAttributesUsingPOSTAsyncWithHttpInfo
     *
     * Create Custom Activity Type Attributes
     *
     * @param  string $api_name API Name of the activity type (required)
     * @param  \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeAttributeRequest $custom_activity_type_attribute_request customActivityTypeAttributeRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCustomActivityTypeAttributesUsingPOSTAsyncWithHttpInfo($api_name, $custom_activity_type_attribute_request)
    {
        $returnType = '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType';
        $request = $this->createCustomActivityTypeAttributesUsingPOSTRequest($api_name, $custom_activity_type_attribute_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createCustomActivityTypeAttributesUsingPOST'
     *
     * @param  string $api_name API Name of the activity type (required)
     * @param  \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeAttributeRequest $custom_activity_type_attribute_request customActivityTypeAttributeRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createCustomActivityTypeAttributesUsingPOSTRequest($api_name, $custom_activity_type_attribute_request)
    {
        // verify the required parameter 'api_name' is set
        if ($api_name === null || (is_array($api_name) && count($api_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_name when calling createCustomActivityTypeAttributesUsingPOST'
            );
        }
        // verify the required parameter 'custom_activity_type_attribute_request' is set
        if ($custom_activity_type_attribute_request === null || (is_array($custom_activity_type_attribute_request) && count($custom_activity_type_attribute_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $custom_activity_type_attribute_request when calling createCustomActivityTypeAttributesUsingPOST'
            );
        }

        $resourcePath = '/rest/v1/activities/external/type/{apiName}/attributes/create.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($api_name !== null) {
            $resourcePath = str_replace(
                '{' . 'apiName' . '}',
                ObjectSerializer::toPathValue($api_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($custom_activity_type_attribute_request)) {
            $_tempBody = $custom_activity_type_attribute_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createCustomActivityTypeUsingPOST
     *
     * Create Custom Activity Type
     *
     * @param  \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeRequest $custom_activity_type_request customActivityTypeRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType
     */
    public function createCustomActivityTypeUsingPOST($custom_activity_type_request)
    {
        list($response) = $this->createCustomActivityTypeUsingPOSTWithHttpInfo($custom_activity_type_request);
        return $response;
    }

    /**
     * Operation createCustomActivityTypeUsingPOSTWithHttpInfo
     *
     * Create Custom Activity Type
     *
     * @param  \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeRequest $custom_activity_type_request customActivityTypeRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType, HTTP status code, HTTP response headers (array of strings)
     */
    public function createCustomActivityTypeUsingPOSTWithHttpInfo($custom_activity_type_request)
    {
        $returnType = '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType';
        $request = $this->createCustomActivityTypeUsingPOSTRequest($custom_activity_type_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createCustomActivityTypeUsingPOSTAsync
     *
     * Create Custom Activity Type
     *
     * @param  \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeRequest $custom_activity_type_request customActivityTypeRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCustomActivityTypeUsingPOSTAsync($custom_activity_type_request)
    {
        return $this->createCustomActivityTypeUsingPOSTAsyncWithHttpInfo($custom_activity_type_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createCustomActivityTypeUsingPOSTAsyncWithHttpInfo
     *
     * Create Custom Activity Type
     *
     * @param  \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeRequest $custom_activity_type_request customActivityTypeRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCustomActivityTypeUsingPOSTAsyncWithHttpInfo($custom_activity_type_request)
    {
        $returnType = '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType';
        $request = $this->createCustomActivityTypeUsingPOSTRequest($custom_activity_type_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createCustomActivityTypeUsingPOST'
     *
     * @param  \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeRequest $custom_activity_type_request customActivityTypeRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createCustomActivityTypeUsingPOSTRequest($custom_activity_type_request)
    {
        // verify the required parameter 'custom_activity_type_request' is set
        if ($custom_activity_type_request === null || (is_array($custom_activity_type_request) && count($custom_activity_type_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $custom_activity_type_request when calling createCustomActivityTypeUsingPOST'
            );
        }

        $resourcePath = '/rest/v1/activities/external/type.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($custom_activity_type_request)) {
            $_tempBody = $custom_activity_type_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteCustomActivityTypeAttributesUsingPOST
     *
     * Delete Custom Activity Type Attributes
     *
     * @param  string $api_name API Name of the activity type (required)
     * @param  \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeAttributeRequest $custom_activity_type_attribute_request customActivityTypeAttributeRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType
     */
    public function deleteCustomActivityTypeAttributesUsingPOST($api_name, $custom_activity_type_attribute_request)
    {
        list($response) = $this->deleteCustomActivityTypeAttributesUsingPOSTWithHttpInfo($api_name, $custom_activity_type_attribute_request);
        return $response;
    }

    /**
     * Operation deleteCustomActivityTypeAttributesUsingPOSTWithHttpInfo
     *
     * Delete Custom Activity Type Attributes
     *
     * @param  string $api_name API Name of the activity type (required)
     * @param  \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeAttributeRequest $custom_activity_type_attribute_request customActivityTypeAttributeRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCustomActivityTypeAttributesUsingPOSTWithHttpInfo($api_name, $custom_activity_type_attribute_request)
    {
        $returnType = '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType';
        $request = $this->deleteCustomActivityTypeAttributesUsingPOSTRequest($api_name, $custom_activity_type_attribute_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteCustomActivityTypeAttributesUsingPOSTAsync
     *
     * Delete Custom Activity Type Attributes
     *
     * @param  string $api_name API Name of the activity type (required)
     * @param  \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeAttributeRequest $custom_activity_type_attribute_request customActivityTypeAttributeRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCustomActivityTypeAttributesUsingPOSTAsync($api_name, $custom_activity_type_attribute_request)
    {
        return $this->deleteCustomActivityTypeAttributesUsingPOSTAsyncWithHttpInfo($api_name, $custom_activity_type_attribute_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteCustomActivityTypeAttributesUsingPOSTAsyncWithHttpInfo
     *
     * Delete Custom Activity Type Attributes
     *
     * @param  string $api_name API Name of the activity type (required)
     * @param  \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeAttributeRequest $custom_activity_type_attribute_request customActivityTypeAttributeRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCustomActivityTypeAttributesUsingPOSTAsyncWithHttpInfo($api_name, $custom_activity_type_attribute_request)
    {
        $returnType = '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType';
        $request = $this->deleteCustomActivityTypeAttributesUsingPOSTRequest($api_name, $custom_activity_type_attribute_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteCustomActivityTypeAttributesUsingPOST'
     *
     * @param  string $api_name API Name of the activity type (required)
     * @param  \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeAttributeRequest $custom_activity_type_attribute_request customActivityTypeAttributeRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteCustomActivityTypeAttributesUsingPOSTRequest($api_name, $custom_activity_type_attribute_request)
    {
        // verify the required parameter 'api_name' is set
        if ($api_name === null || (is_array($api_name) && count($api_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_name when calling deleteCustomActivityTypeAttributesUsingPOST'
            );
        }
        // verify the required parameter 'custom_activity_type_attribute_request' is set
        if ($custom_activity_type_attribute_request === null || (is_array($custom_activity_type_attribute_request) && count($custom_activity_type_attribute_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $custom_activity_type_attribute_request when calling deleteCustomActivityTypeAttributesUsingPOST'
            );
        }

        $resourcePath = '/rest/v1/activities/external/type/{apiName}/attributes/delete.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($api_name !== null) {
            $resourcePath = str_replace(
                '{' . 'apiName' . '}',
                ObjectSerializer::toPathValue($api_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($custom_activity_type_attribute_request)) {
            $_tempBody = $custom_activity_type_attribute_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteCustomActivityTypeUsingPOST
     *
     * Delete Custom Activity Type
     *
     * @param  string $api_name API Name of the activity type (required)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType
     */
    public function deleteCustomActivityTypeUsingPOST($api_name)
    {
        list($response) = $this->deleteCustomActivityTypeUsingPOSTWithHttpInfo($api_name);
        return $response;
    }

    /**
     * Operation deleteCustomActivityTypeUsingPOSTWithHttpInfo
     *
     * Delete Custom Activity Type
     *
     * @param  string $api_name API Name of the activity type (required)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCustomActivityTypeUsingPOSTWithHttpInfo($api_name)
    {
        $returnType = '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType';
        $request = $this->deleteCustomActivityTypeUsingPOSTRequest($api_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteCustomActivityTypeUsingPOSTAsync
     *
     * Delete Custom Activity Type
     *
     * @param  string $api_name API Name of the activity type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCustomActivityTypeUsingPOSTAsync($api_name)
    {
        return $this->deleteCustomActivityTypeUsingPOSTAsyncWithHttpInfo($api_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteCustomActivityTypeUsingPOSTAsyncWithHttpInfo
     *
     * Delete Custom Activity Type
     *
     * @param  string $api_name API Name of the activity type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCustomActivityTypeUsingPOSTAsyncWithHttpInfo($api_name)
    {
        $returnType = '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType';
        $request = $this->deleteCustomActivityTypeUsingPOSTRequest($api_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteCustomActivityTypeUsingPOST'
     *
     * @param  string $api_name API Name of the activity type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteCustomActivityTypeUsingPOSTRequest($api_name)
    {
        // verify the required parameter 'api_name' is set
        if ($api_name === null || (is_array($api_name) && count($api_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_name when calling deleteCustomActivityTypeUsingPOST'
            );
        }

        $resourcePath = '/rest/v1/activities/external/type/{apiName}/delete.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($api_name !== null) {
            $resourcePath = str_replace(
                '{' . 'apiName' . '}',
                ObjectSerializer::toPathValue($api_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation describeCustomActivityTypeUsingGET
     *
     * Describe Custom Activity Type
     *
     * @param  string $api_name API Name of the activity type (required)
     * @param  bool $draft draft (optional)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType
     */
    public function describeCustomActivityTypeUsingGET($api_name, $draft = null)
    {
        list($response) = $this->describeCustomActivityTypeUsingGETWithHttpInfo($api_name, $draft);
        return $response;
    }

    /**
     * Operation describeCustomActivityTypeUsingGETWithHttpInfo
     *
     * Describe Custom Activity Type
     *
     * @param  string $api_name API Name of the activity type (required)
     * @param  bool $draft draft (optional)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType, HTTP status code, HTTP response headers (array of strings)
     */
    public function describeCustomActivityTypeUsingGETWithHttpInfo($api_name, $draft = null)
    {
        $returnType = '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType';
        $request = $this->describeCustomActivityTypeUsingGETRequest($api_name, $draft);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation describeCustomActivityTypeUsingGETAsync
     *
     * Describe Custom Activity Type
     *
     * @param  string $api_name API Name of the activity type (required)
     * @param  bool $draft draft (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function describeCustomActivityTypeUsingGETAsync($api_name, $draft = null)
    {
        return $this->describeCustomActivityTypeUsingGETAsyncWithHttpInfo($api_name, $draft)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation describeCustomActivityTypeUsingGETAsyncWithHttpInfo
     *
     * Describe Custom Activity Type
     *
     * @param  string $api_name API Name of the activity type (required)
     * @param  bool $draft draft (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function describeCustomActivityTypeUsingGETAsyncWithHttpInfo($api_name, $draft = null)
    {
        $returnType = '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType';
        $request = $this->describeCustomActivityTypeUsingGETRequest($api_name, $draft);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'describeCustomActivityTypeUsingGET'
     *
     * @param  string $api_name API Name of the activity type (required)
     * @param  bool $draft draft (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function describeCustomActivityTypeUsingGETRequest($api_name, $draft = null)
    {
        // verify the required parameter 'api_name' is set
        if ($api_name === null || (is_array($api_name) && count($api_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_name when calling describeCustomActivityTypeUsingGET'
            );
        }

        $resourcePath = '/rest/v1/activities/external/type/{apiName}/describe.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($draft !== null) {
            $queryParams['draft'] = ObjectSerializer::toQueryValue($draft);
        }

        // path params
        if ($api_name !== null) {
            $resourcePath = str_replace(
                '{' . 'apiName' . '}',
                ObjectSerializer::toPathValue($api_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation discardDraftofCustomActivityTypeUsingPOST
     *
     * Discard Custom Activity Type Draft
     *
     * @param  string $api_name API Name of the activity type (required)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType
     */
    public function discardDraftofCustomActivityTypeUsingPOST($api_name)
    {
        list($response) = $this->discardDraftofCustomActivityTypeUsingPOSTWithHttpInfo($api_name);
        return $response;
    }

    /**
     * Operation discardDraftofCustomActivityTypeUsingPOSTWithHttpInfo
     *
     * Discard Custom Activity Type Draft
     *
     * @param  string $api_name API Name of the activity type (required)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType, HTTP status code, HTTP response headers (array of strings)
     */
    public function discardDraftofCustomActivityTypeUsingPOSTWithHttpInfo($api_name)
    {
        $returnType = '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType';
        $request = $this->discardDraftofCustomActivityTypeUsingPOSTRequest($api_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation discardDraftofCustomActivityTypeUsingPOSTAsync
     *
     * Discard Custom Activity Type Draft
     *
     * @param  string $api_name API Name of the activity type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function discardDraftofCustomActivityTypeUsingPOSTAsync($api_name)
    {
        return $this->discardDraftofCustomActivityTypeUsingPOSTAsyncWithHttpInfo($api_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation discardDraftofCustomActivityTypeUsingPOSTAsyncWithHttpInfo
     *
     * Discard Custom Activity Type Draft
     *
     * @param  string $api_name API Name of the activity type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function discardDraftofCustomActivityTypeUsingPOSTAsyncWithHttpInfo($api_name)
    {
        $returnType = '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType';
        $request = $this->discardDraftofCustomActivityTypeUsingPOSTRequest($api_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'discardDraftofCustomActivityTypeUsingPOST'
     *
     * @param  string $api_name API Name of the activity type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function discardDraftofCustomActivityTypeUsingPOSTRequest($api_name)
    {
        // verify the required parameter 'api_name' is set
        if ($api_name === null || (is_array($api_name) && count($api_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_name when calling discardDraftofCustomActivityTypeUsingPOST'
            );
        }

        $resourcePath = '/rest/v1/activities/external/type/{apiName}/discardDraft.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($api_name !== null) {
            $resourcePath = str_replace(
                '{' . 'apiName' . '}',
                ObjectSerializer::toPathValue($api_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getActivitiesPagingTokenUsingGET
     *
     * Get Paging Token
     *
     * @param  \DateTime $since_datetime Earliest datetime to retrieve activities from (required)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfVoid
     */
    public function getActivitiesPagingTokenUsingGET($since_datetime)
    {
        list($response) = $this->getActivitiesPagingTokenUsingGETWithHttpInfo($since_datetime);
        return $response;
    }

    /**
     * Operation getActivitiesPagingTokenUsingGETWithHttpInfo
     *
     * Get Paging Token
     *
     * @param  \DateTime $since_datetime Earliest datetime to retrieve activities from (required)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Lead\Model\ResponseOfVoid, HTTP status code, HTTP response headers (array of strings)
     */
    public function getActivitiesPagingTokenUsingGETWithHttpInfo($since_datetime)
    {
        $returnType = '\NecLimDul\MarketoRest\Lead\Model\ResponseOfVoid';
        $request = $this->getActivitiesPagingTokenUsingGETRequest($since_datetime);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Lead\Model\ResponseOfVoid',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getActivitiesPagingTokenUsingGETAsync
     *
     * Get Paging Token
     *
     * @param  \DateTime $since_datetime Earliest datetime to retrieve activities from (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getActivitiesPagingTokenUsingGETAsync($since_datetime)
    {
        return $this->getActivitiesPagingTokenUsingGETAsyncWithHttpInfo($since_datetime)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getActivitiesPagingTokenUsingGETAsyncWithHttpInfo
     *
     * Get Paging Token
     *
     * @param  \DateTime $since_datetime Earliest datetime to retrieve activities from (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getActivitiesPagingTokenUsingGETAsyncWithHttpInfo($since_datetime)
    {
        $returnType = '\NecLimDul\MarketoRest\Lead\Model\ResponseOfVoid';
        $request = $this->getActivitiesPagingTokenUsingGETRequest($since_datetime);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getActivitiesPagingTokenUsingGET'
     *
     * @param  \DateTime $since_datetime Earliest datetime to retrieve activities from (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getActivitiesPagingTokenUsingGETRequest($since_datetime)
    {
        // verify the required parameter 'since_datetime' is set
        if ($since_datetime === null || (is_array($since_datetime) && count($since_datetime) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $since_datetime when calling getActivitiesPagingTokenUsingGET'
            );
        }

        $resourcePath = '/rest/v1/activities/pagingtoken.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($since_datetime !== null) {
            $queryParams['sinceDatetime'] = ObjectSerializer::toQueryValue($since_datetime);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAllActivityTypesUsingGET
     *
     * Get Activity Types
     *
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfActivityType
     */
    public function getAllActivityTypesUsingGET()
    {
        list($response) = $this->getAllActivityTypesUsingGETWithHttpInfo();
        return $response;
    }

    /**
     * Operation getAllActivityTypesUsingGETWithHttpInfo
     *
     * Get Activity Types
     *
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Lead\Model\ResponseOfActivityType, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllActivityTypesUsingGETWithHttpInfo()
    {
        $returnType = '\NecLimDul\MarketoRest\Lead\Model\ResponseOfActivityType';
        $request = $this->getAllActivityTypesUsingGETRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Lead\Model\ResponseOfActivityType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAllActivityTypesUsingGETAsync
     *
     * Get Activity Types
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllActivityTypesUsingGETAsync()
    {
        return $this->getAllActivityTypesUsingGETAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllActivityTypesUsingGETAsyncWithHttpInfo
     *
     * Get Activity Types
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllActivityTypesUsingGETAsyncWithHttpInfo()
    {
        $returnType = '\NecLimDul\MarketoRest\Lead\Model\ResponseOfActivityType';
        $request = $this->getAllActivityTypesUsingGETRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllActivityTypesUsingGET'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAllActivityTypesUsingGETRequest()
    {

        $resourcePath = '/rest/v1/activities/types.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCustomActivityTypeUsingGET
     *
     * Get Custom Activity Types
     *
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType
     */
    public function getCustomActivityTypeUsingGET()
    {
        list($response) = $this->getCustomActivityTypeUsingGETWithHttpInfo();
        return $response;
    }

    /**
     * Operation getCustomActivityTypeUsingGETWithHttpInfo
     *
     * Get Custom Activity Types
     *
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCustomActivityTypeUsingGETWithHttpInfo()
    {
        $returnType = '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType';
        $request = $this->getCustomActivityTypeUsingGETRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCustomActivityTypeUsingGETAsync
     *
     * Get Custom Activity Types
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomActivityTypeUsingGETAsync()
    {
        return $this->getCustomActivityTypeUsingGETAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCustomActivityTypeUsingGETAsyncWithHttpInfo
     *
     * Get Custom Activity Types
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomActivityTypeUsingGETAsyncWithHttpInfo()
    {
        $returnType = '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType';
        $request = $this->getCustomActivityTypeUsingGETRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCustomActivityTypeUsingGET'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCustomActivityTypeUsingGETRequest()
    {

        $resourcePath = '/rest/v1/activities/external/types.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDeletedLeadsUsingGET
     *
     * Get Deleted Leads
     *
     * @param  string $next_page_token Token representation of a datetime returned by the Get Paging Token endpoint.  This endpoint will return activities after this datetime (required)
     * @param  int $batch_size Maximum number of records to return.  Maximum and default is 300. (optional)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfActivity
     */
    public function getDeletedLeadsUsingGET($next_page_token, $batch_size = null)
    {
        list($response) = $this->getDeletedLeadsUsingGETWithHttpInfo($next_page_token, $batch_size);
        return $response;
    }

    /**
     * Operation getDeletedLeadsUsingGETWithHttpInfo
     *
     * Get Deleted Leads
     *
     * @param  string $next_page_token Token representation of a datetime returned by the Get Paging Token endpoint.  This endpoint will return activities after this datetime (required)
     * @param  int $batch_size Maximum number of records to return.  Maximum and default is 300. (optional)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Lead\Model\ResponseOfActivity, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDeletedLeadsUsingGETWithHttpInfo($next_page_token, $batch_size = null)
    {
        $returnType = '\NecLimDul\MarketoRest\Lead\Model\ResponseOfActivity';
        $request = $this->getDeletedLeadsUsingGETRequest($next_page_token, $batch_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Lead\Model\ResponseOfActivity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDeletedLeadsUsingGETAsync
     *
     * Get Deleted Leads
     *
     * @param  string $next_page_token Token representation of a datetime returned by the Get Paging Token endpoint.  This endpoint will return activities after this datetime (required)
     * @param  int $batch_size Maximum number of records to return.  Maximum and default is 300. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDeletedLeadsUsingGETAsync($next_page_token, $batch_size = null)
    {
        return $this->getDeletedLeadsUsingGETAsyncWithHttpInfo($next_page_token, $batch_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDeletedLeadsUsingGETAsyncWithHttpInfo
     *
     * Get Deleted Leads
     *
     * @param  string $next_page_token Token representation of a datetime returned by the Get Paging Token endpoint.  This endpoint will return activities after this datetime (required)
     * @param  int $batch_size Maximum number of records to return.  Maximum and default is 300. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDeletedLeadsUsingGETAsyncWithHttpInfo($next_page_token, $batch_size = null)
    {
        $returnType = '\NecLimDul\MarketoRest\Lead\Model\ResponseOfActivity';
        $request = $this->getDeletedLeadsUsingGETRequest($next_page_token, $batch_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDeletedLeadsUsingGET'
     *
     * @param  string $next_page_token Token representation of a datetime returned by the Get Paging Token endpoint.  This endpoint will return activities after this datetime (required)
     * @param  int $batch_size Maximum number of records to return.  Maximum and default is 300. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getDeletedLeadsUsingGETRequest($next_page_token, $batch_size = null)
    {
        // verify the required parameter 'next_page_token' is set
        if ($next_page_token === null || (is_array($next_page_token) && count($next_page_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $next_page_token when calling getDeletedLeadsUsingGET'
            );
        }

        $resourcePath = '/rest/v1/activities/deletedleads.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($next_page_token !== null) {
            $queryParams['nextPageToken'] = ObjectSerializer::toQueryValue($next_page_token);
        }
        // query params
        if ($batch_size !== null) {
            $queryParams['batchSize'] = ObjectSerializer::toQueryValue($batch_size);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLeadActivitiesUsingGET
     *
     * Get Lead Activities
     *
     * @param  string $next_page_token Token representation of a datetime returned by the Get Paging Token endpoint.  This endpoint will return activities after this datetime (required)
     * @param  int[] $activity_type_ids Comma-separated list of activity type ids. These can be retrieved with the Get Activity Types API. (required)
     * @param  int[] $asset_ids Id of the primary asset for an activity.  This is based on the primary asset id of a given activity type.  Should only be used when a single activity type is set (optional)
     * @param  int $list_id Id of a static list.  If set, will only return activities of members of this static list. (optional)
     * @param  int[] $lead_ids Comma-separated list of lead ids.  If set, will only return activities of the leads with these ids.  Allows up to 30 entries. (optional)
     * @param  int $batch_size Maximum number of records to return.  Maximum and default is 300. (optional)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfActivity
     */
    public function getLeadActivitiesUsingGET($next_page_token, $activity_type_ids, $asset_ids = null, $list_id = null, $lead_ids = null, $batch_size = null)
    {
        list($response) = $this->getLeadActivitiesUsingGETWithHttpInfo($next_page_token, $activity_type_ids, $asset_ids, $list_id, $lead_ids, $batch_size);
        return $response;
    }

    /**
     * Operation getLeadActivitiesUsingGETWithHttpInfo
     *
     * Get Lead Activities
     *
     * @param  string $next_page_token Token representation of a datetime returned by the Get Paging Token endpoint.  This endpoint will return activities after this datetime (required)
     * @param  int[] $activity_type_ids Comma-separated list of activity type ids. These can be retrieved with the Get Activity Types API. (required)
     * @param  int[] $asset_ids Id of the primary asset for an activity.  This is based on the primary asset id of a given activity type.  Should only be used when a single activity type is set (optional)
     * @param  int $list_id Id of a static list.  If set, will only return activities of members of this static list. (optional)
     * @param  int[] $lead_ids Comma-separated list of lead ids.  If set, will only return activities of the leads with these ids.  Allows up to 30 entries. (optional)
     * @param  int $batch_size Maximum number of records to return.  Maximum and default is 300. (optional)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Lead\Model\ResponseOfActivity, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLeadActivitiesUsingGETWithHttpInfo($next_page_token, $activity_type_ids, $asset_ids = null, $list_id = null, $lead_ids = null, $batch_size = null)
    {
        $returnType = '\NecLimDul\MarketoRest\Lead\Model\ResponseOfActivity';
        $request = $this->getLeadActivitiesUsingGETRequest($next_page_token, $activity_type_ids, $asset_ids, $list_id, $lead_ids, $batch_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Lead\Model\ResponseOfActivity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLeadActivitiesUsingGETAsync
     *
     * Get Lead Activities
     *
     * @param  string $next_page_token Token representation of a datetime returned by the Get Paging Token endpoint.  This endpoint will return activities after this datetime (required)
     * @param  int[] $activity_type_ids Comma-separated list of activity type ids. These can be retrieved with the Get Activity Types API. (required)
     * @param  int[] $asset_ids Id of the primary asset for an activity.  This is based on the primary asset id of a given activity type.  Should only be used when a single activity type is set (optional)
     * @param  int $list_id Id of a static list.  If set, will only return activities of members of this static list. (optional)
     * @param  int[] $lead_ids Comma-separated list of lead ids.  If set, will only return activities of the leads with these ids.  Allows up to 30 entries. (optional)
     * @param  int $batch_size Maximum number of records to return.  Maximum and default is 300. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLeadActivitiesUsingGETAsync($next_page_token, $activity_type_ids, $asset_ids = null, $list_id = null, $lead_ids = null, $batch_size = null)
    {
        return $this->getLeadActivitiesUsingGETAsyncWithHttpInfo($next_page_token, $activity_type_ids, $asset_ids, $list_id, $lead_ids, $batch_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLeadActivitiesUsingGETAsyncWithHttpInfo
     *
     * Get Lead Activities
     *
     * @param  string $next_page_token Token representation of a datetime returned by the Get Paging Token endpoint.  This endpoint will return activities after this datetime (required)
     * @param  int[] $activity_type_ids Comma-separated list of activity type ids. These can be retrieved with the Get Activity Types API. (required)
     * @param  int[] $asset_ids Id of the primary asset for an activity.  This is based on the primary asset id of a given activity type.  Should only be used when a single activity type is set (optional)
     * @param  int $list_id Id of a static list.  If set, will only return activities of members of this static list. (optional)
     * @param  int[] $lead_ids Comma-separated list of lead ids.  If set, will only return activities of the leads with these ids.  Allows up to 30 entries. (optional)
     * @param  int $batch_size Maximum number of records to return.  Maximum and default is 300. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLeadActivitiesUsingGETAsyncWithHttpInfo($next_page_token, $activity_type_ids, $asset_ids = null, $list_id = null, $lead_ids = null, $batch_size = null)
    {
        $returnType = '\NecLimDul\MarketoRest\Lead\Model\ResponseOfActivity';
        $request = $this->getLeadActivitiesUsingGETRequest($next_page_token, $activity_type_ids, $asset_ids, $list_id, $lead_ids, $batch_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLeadActivitiesUsingGET'
     *
     * @param  string $next_page_token Token representation of a datetime returned by the Get Paging Token endpoint.  This endpoint will return activities after this datetime (required)
     * @param  int[] $activity_type_ids Comma-separated list of activity type ids. These can be retrieved with the Get Activity Types API. (required)
     * @param  int[] $asset_ids Id of the primary asset for an activity.  This is based on the primary asset id of a given activity type.  Should only be used when a single activity type is set (optional)
     * @param  int $list_id Id of a static list.  If set, will only return activities of members of this static list. (optional)
     * @param  int[] $lead_ids Comma-separated list of lead ids.  If set, will only return activities of the leads with these ids.  Allows up to 30 entries. (optional)
     * @param  int $batch_size Maximum number of records to return.  Maximum and default is 300. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getLeadActivitiesUsingGETRequest($next_page_token, $activity_type_ids, $asset_ids = null, $list_id = null, $lead_ids = null, $batch_size = null)
    {
        // verify the required parameter 'next_page_token' is set
        if ($next_page_token === null || (is_array($next_page_token) && count($next_page_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $next_page_token when calling getLeadActivitiesUsingGET'
            );
        }
        // verify the required parameter 'activity_type_ids' is set
        if ($activity_type_ids === null || (is_array($activity_type_ids) && count($activity_type_ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $activity_type_ids when calling getLeadActivitiesUsingGET'
            );
        }

        $resourcePath = '/rest/v1/activities.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($next_page_token !== null) {
            $queryParams['nextPageToken'] = ObjectSerializer::toQueryValue($next_page_token);
        }
        // query params
        if (is_array($activity_type_ids)) {
            $queryParams['activityTypeIds'] = $activity_type_ids;
        } else
        if ($activity_type_ids !== null) {
            $queryParams['activityTypeIds'] = ObjectSerializer::toQueryValue($activity_type_ids);
        }
        // query params
        if (is_array($asset_ids)) {
            $queryParams['assetIds'] = $asset_ids;
        } else
        if ($asset_ids !== null) {
            $queryParams['assetIds'] = ObjectSerializer::toQueryValue($asset_ids);
        }
        // query params
        if ($list_id !== null) {
            $queryParams['listId'] = ObjectSerializer::toQueryValue($list_id);
        }
        // query params
        if (is_array($lead_ids)) {
            $queryParams['leadIds'] = $lead_ids;
        } else
        if ($lead_ids !== null) {
            $queryParams['leadIds'] = ObjectSerializer::toQueryValue($lead_ids);
        }
        // query params
        if ($batch_size !== null) {
            $queryParams['batchSize'] = ObjectSerializer::toQueryValue($batch_size);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLeadChangesUsingGET
     *
     * Get Lead Changes
     *
     * @param  string $next_page_token Token representation of a datetime returned by the Get Paging Token endpoint.  This endpoint will return activities after this datetime (required)
     * @param  string[] $fields Comma-separated list of field names to return changes for.  Field names can be retrieved with the Describe Lead API. (required)
     * @param  int $list_id Id of a static list.  If set, will only return activities of members of this static list. (optional)
     * @param  int[] $lead_ids Comma-separated list of lead ids.  If set, will only return activities of the leads with these ids.  Allows up to 30 entries. (optional)
     * @param  int $batch_size Maximum number of records to return.  Maximum and default is 300. (optional)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadChange
     */
    public function getLeadChangesUsingGET($next_page_token, $fields, $list_id = null, $lead_ids = null, $batch_size = null)
    {
        list($response) = $this->getLeadChangesUsingGETWithHttpInfo($next_page_token, $fields, $list_id, $lead_ids, $batch_size);
        return $response;
    }

    /**
     * Operation getLeadChangesUsingGETWithHttpInfo
     *
     * Get Lead Changes
     *
     * @param  string $next_page_token Token representation of a datetime returned by the Get Paging Token endpoint.  This endpoint will return activities after this datetime (required)
     * @param  string[] $fields Comma-separated list of field names to return changes for.  Field names can be retrieved with the Describe Lead API. (required)
     * @param  int $list_id Id of a static list.  If set, will only return activities of members of this static list. (optional)
     * @param  int[] $lead_ids Comma-separated list of lead ids.  If set, will only return activities of the leads with these ids.  Allows up to 30 entries. (optional)
     * @param  int $batch_size Maximum number of records to return.  Maximum and default is 300. (optional)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadChange, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLeadChangesUsingGETWithHttpInfo($next_page_token, $fields, $list_id = null, $lead_ids = null, $batch_size = null)
    {
        $returnType = '\NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadChange';
        $request = $this->getLeadChangesUsingGETRequest($next_page_token, $fields, $list_id, $lead_ids, $batch_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadChange',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLeadChangesUsingGETAsync
     *
     * Get Lead Changes
     *
     * @param  string $next_page_token Token representation of a datetime returned by the Get Paging Token endpoint.  This endpoint will return activities after this datetime (required)
     * @param  string[] $fields Comma-separated list of field names to return changes for.  Field names can be retrieved with the Describe Lead API. (required)
     * @param  int $list_id Id of a static list.  If set, will only return activities of members of this static list. (optional)
     * @param  int[] $lead_ids Comma-separated list of lead ids.  If set, will only return activities of the leads with these ids.  Allows up to 30 entries. (optional)
     * @param  int $batch_size Maximum number of records to return.  Maximum and default is 300. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLeadChangesUsingGETAsync($next_page_token, $fields, $list_id = null, $lead_ids = null, $batch_size = null)
    {
        return $this->getLeadChangesUsingGETAsyncWithHttpInfo($next_page_token, $fields, $list_id, $lead_ids, $batch_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLeadChangesUsingGETAsyncWithHttpInfo
     *
     * Get Lead Changes
     *
     * @param  string $next_page_token Token representation of a datetime returned by the Get Paging Token endpoint.  This endpoint will return activities after this datetime (required)
     * @param  string[] $fields Comma-separated list of field names to return changes for.  Field names can be retrieved with the Describe Lead API. (required)
     * @param  int $list_id Id of a static list.  If set, will only return activities of members of this static list. (optional)
     * @param  int[] $lead_ids Comma-separated list of lead ids.  If set, will only return activities of the leads with these ids.  Allows up to 30 entries. (optional)
     * @param  int $batch_size Maximum number of records to return.  Maximum and default is 300. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLeadChangesUsingGETAsyncWithHttpInfo($next_page_token, $fields, $list_id = null, $lead_ids = null, $batch_size = null)
    {
        $returnType = '\NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadChange';
        $request = $this->getLeadChangesUsingGETRequest($next_page_token, $fields, $list_id, $lead_ids, $batch_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLeadChangesUsingGET'
     *
     * @param  string $next_page_token Token representation of a datetime returned by the Get Paging Token endpoint.  This endpoint will return activities after this datetime (required)
     * @param  string[] $fields Comma-separated list of field names to return changes for.  Field names can be retrieved with the Describe Lead API. (required)
     * @param  int $list_id Id of a static list.  If set, will only return activities of members of this static list. (optional)
     * @param  int[] $lead_ids Comma-separated list of lead ids.  If set, will only return activities of the leads with these ids.  Allows up to 30 entries. (optional)
     * @param  int $batch_size Maximum number of records to return.  Maximum and default is 300. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getLeadChangesUsingGETRequest($next_page_token, $fields, $list_id = null, $lead_ids = null, $batch_size = null)
    {
        // verify the required parameter 'next_page_token' is set
        if ($next_page_token === null || (is_array($next_page_token) && count($next_page_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $next_page_token when calling getLeadChangesUsingGET'
            );
        }
        // verify the required parameter 'fields' is set
        if ($fields === null || (is_array($fields) && count($fields) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fields when calling getLeadChangesUsingGET'
            );
        }

        $resourcePath = '/rest/v1/activities/leadchanges.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($next_page_token !== null) {
            $queryParams['nextPageToken'] = ObjectSerializer::toQueryValue($next_page_token);
        }
        // query params
        if (is_array($fields)) {
            $queryParams['fields'] = $fields;
        } else
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if ($list_id !== null) {
            $queryParams['listId'] = ObjectSerializer::toQueryValue($list_id);
        }
        // query params
        if (is_array($lead_ids)) {
            $queryParams['leadIds'] = $lead_ids;
        } else
        if ($lead_ids !== null) {
            $queryParams['leadIds'] = ObjectSerializer::toQueryValue($lead_ids);
        }
        // query params
        if ($batch_size !== null) {
            $queryParams['batchSize'] = ObjectSerializer::toQueryValue($batch_size);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateCustomActivityTypeAttributesUsingPOST
     *
     * Update Custom Activity Type Attributes
     *
     * @param  string $api_name API Name of the activity type (required)
     * @param  \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeAttributeRequest $custom_activity_type_attribute_request customActivityTypeAttributeRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType
     */
    public function updateCustomActivityTypeAttributesUsingPOST($api_name, $custom_activity_type_attribute_request)
    {
        list($response) = $this->updateCustomActivityTypeAttributesUsingPOSTWithHttpInfo($api_name, $custom_activity_type_attribute_request);
        return $response;
    }

    /**
     * Operation updateCustomActivityTypeAttributesUsingPOSTWithHttpInfo
     *
     * Update Custom Activity Type Attributes
     *
     * @param  string $api_name API Name of the activity type (required)
     * @param  \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeAttributeRequest $custom_activity_type_attribute_request customActivityTypeAttributeRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCustomActivityTypeAttributesUsingPOSTWithHttpInfo($api_name, $custom_activity_type_attribute_request)
    {
        $returnType = '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType';
        $request = $this->updateCustomActivityTypeAttributesUsingPOSTRequest($api_name, $custom_activity_type_attribute_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateCustomActivityTypeAttributesUsingPOSTAsync
     *
     * Update Custom Activity Type Attributes
     *
     * @param  string $api_name API Name of the activity type (required)
     * @param  \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeAttributeRequest $custom_activity_type_attribute_request customActivityTypeAttributeRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCustomActivityTypeAttributesUsingPOSTAsync($api_name, $custom_activity_type_attribute_request)
    {
        return $this->updateCustomActivityTypeAttributesUsingPOSTAsyncWithHttpInfo($api_name, $custom_activity_type_attribute_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateCustomActivityTypeAttributesUsingPOSTAsyncWithHttpInfo
     *
     * Update Custom Activity Type Attributes
     *
     * @param  string $api_name API Name of the activity type (required)
     * @param  \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeAttributeRequest $custom_activity_type_attribute_request customActivityTypeAttributeRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCustomActivityTypeAttributesUsingPOSTAsyncWithHttpInfo($api_name, $custom_activity_type_attribute_request)
    {
        $returnType = '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType';
        $request = $this->updateCustomActivityTypeAttributesUsingPOSTRequest($api_name, $custom_activity_type_attribute_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateCustomActivityTypeAttributesUsingPOST'
     *
     * @param  string $api_name API Name of the activity type (required)
     * @param  \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeAttributeRequest $custom_activity_type_attribute_request customActivityTypeAttributeRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateCustomActivityTypeAttributesUsingPOSTRequest($api_name, $custom_activity_type_attribute_request)
    {
        // verify the required parameter 'api_name' is set
        if ($api_name === null || (is_array($api_name) && count($api_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_name when calling updateCustomActivityTypeAttributesUsingPOST'
            );
        }
        // verify the required parameter 'custom_activity_type_attribute_request' is set
        if ($custom_activity_type_attribute_request === null || (is_array($custom_activity_type_attribute_request) && count($custom_activity_type_attribute_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $custom_activity_type_attribute_request when calling updateCustomActivityTypeAttributesUsingPOST'
            );
        }

        $resourcePath = '/rest/v1/activities/external/type/{apiName}/attributes/update.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($api_name !== null) {
            $resourcePath = str_replace(
                '{' . 'apiName' . '}',
                ObjectSerializer::toPathValue($api_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($custom_activity_type_attribute_request)) {
            $_tempBody = $custom_activity_type_attribute_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateCustomActivityTypeUsingPOST
     *
     * Update Custom Activity Type
     *
     * @param  string $api_name API Name of the activity type (required)
     * @param  \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeRequest $custom_activity_type_request customActivityTypeRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType
     */
    public function updateCustomActivityTypeUsingPOST($api_name, $custom_activity_type_request)
    {
        list($response) = $this->updateCustomActivityTypeUsingPOSTWithHttpInfo($api_name, $custom_activity_type_request);
        return $response;
    }

    /**
     * Operation updateCustomActivityTypeUsingPOSTWithHttpInfo
     *
     * Update Custom Activity Type
     *
     * @param  string $api_name API Name of the activity type (required)
     * @param  \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeRequest $custom_activity_type_request customActivityTypeRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCustomActivityTypeUsingPOSTWithHttpInfo($api_name, $custom_activity_type_request)
    {
        $returnType = '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType';
        $request = $this->updateCustomActivityTypeUsingPOSTRequest($api_name, $custom_activity_type_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateCustomActivityTypeUsingPOSTAsync
     *
     * Update Custom Activity Type
     *
     * @param  string $api_name API Name of the activity type (required)
     * @param  \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeRequest $custom_activity_type_request customActivityTypeRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCustomActivityTypeUsingPOSTAsync($api_name, $custom_activity_type_request)
    {
        return $this->updateCustomActivityTypeUsingPOSTAsyncWithHttpInfo($api_name, $custom_activity_type_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateCustomActivityTypeUsingPOSTAsyncWithHttpInfo
     *
     * Update Custom Activity Type
     *
     * @param  string $api_name API Name of the activity type (required)
     * @param  \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeRequest $custom_activity_type_request customActivityTypeRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCustomActivityTypeUsingPOSTAsyncWithHttpInfo($api_name, $custom_activity_type_request)
    {
        $returnType = '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCustomActivityType';
        $request = $this->updateCustomActivityTypeUsingPOSTRequest($api_name, $custom_activity_type_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateCustomActivityTypeUsingPOST'
     *
     * @param  string $api_name API Name of the activity type (required)
     * @param  \NecLimDul\MarketoRest\Lead\Model\CustomActivityTypeRequest $custom_activity_type_request customActivityTypeRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateCustomActivityTypeUsingPOSTRequest($api_name, $custom_activity_type_request)
    {
        // verify the required parameter 'api_name' is set
        if ($api_name === null || (is_array($api_name) && count($api_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_name when calling updateCustomActivityTypeUsingPOST'
            );
        }
        // verify the required parameter 'custom_activity_type_request' is set
        if ($custom_activity_type_request === null || (is_array($custom_activity_type_request) && count($custom_activity_type_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $custom_activity_type_request when calling updateCustomActivityTypeUsingPOST'
            );
        }

        $resourcePath = '/rest/v1/activities/external/type/{apiName}.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($api_name !== null) {
            $resourcePath = str_replace(
                '{' . 'apiName' . '}',
                ObjectSerializer::toPathValue($api_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($custom_activity_type_request)) {
            $_tempBody = $custom_activity_type_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
