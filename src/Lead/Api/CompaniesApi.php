<?php
/**
 * CompaniesApi
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Lead
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketo Rest API
 *
 * Marketo Rest API
 *
 * OpenAPI spec version: 1.0
 * Contact: developerfeedback@marketo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.26
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace NecLimDul\MarketoRest\Lead\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Query;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\ResponseInterface;
use NecLimDul\MarketoRest\Lead\ApiException;
use NecLimDul\MarketoRest\Lead\Configuration;
use NecLimDul\MarketoRest\Lead\HeaderSelector;
use NecLimDul\MarketoRest\Lead\ObjectSerializer;

/**
 * CompaniesApi Class Doc Comment
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Lead
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CompaniesApi
{

    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Exception handler for deleteCompaniesUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function deleteCompaniesUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCompany',
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Delete Companies
     *
     * @param  \NecLimDul\MarketoRest\Lead\Model\DeleteCompanyRequest $delete_company_request deleteCompanyRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfCompany
     */
    public function deleteCompaniesUsingPOST($delete_company_request)
    {
        list($response) = $this->deleteCompaniesUsingPOSTWithHttpInfo($delete_company_request);
        return $response;
    }

    /**
     * Delete Companies
     *
     * @param  \NecLimDul\MarketoRest\Lead\Model\DeleteCompanyRequest $delete_company_request deleteCompanyRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Lead\Model\ResponseOfCompany, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCompaniesUsingPOSTWithHttpInfo($delete_company_request)
    {
        $request = $this->deleteCompaniesUsingPOSTRequest($delete_company_request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCompany');
        } catch (ApiException $e) {
            throw $this->deleteCompaniesUsingPOSTHandleException($e);
        }
    }

    /**
     * Delete Companies
     *
     * @param  \NecLimDul\MarketoRest\Lead\Model\DeleteCompanyRequest $delete_company_request deleteCompanyRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCompaniesUsingPOSTAsync($delete_company_request)
    {
        return $this->deleteCompaniesUsingPOSTAsyncWithHttpInfo($delete_company_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Delete Companies
     *
     * @param  \NecLimDul\MarketoRest\Lead\Model\DeleteCompanyRequest $delete_company_request deleteCompanyRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCompaniesUsingPOSTAsyncWithHttpInfo($delete_company_request)
    {
        $request = $this->deleteCompaniesUsingPOSTRequest($delete_company_request);
        return $this->makeAsyncRequest($request, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCompany', [$this, 'deleteCompaniesUsingPOSTHandleException']);
    }

    /**
     * Create request for operation 'deleteCompaniesUsingPOST'
     *
     * @param  \NecLimDul\MarketoRest\Lead\Model\DeleteCompanyRequest $delete_company_request deleteCompanyRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteCompaniesUsingPOSTRequest($delete_company_request)
    {
        // Verify the required parameter 'delete_company_request' is set.
        if (!isset($delete_company_request)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delete_company_request when calling deleteCompaniesUsingPOST'
            );
        }

        $resourcePath = '/rest/v1/companies/delete.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );
        $httpBody = ObjectSerializer::toBodyValue($delete_company_request, $headers['Content-Type'] === 'application/json');


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Exception handler for describeUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function describeUsingGETHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Lead\Model\ResponseOfObjectMetaData',
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Describe Companies
     *
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfObjectMetaData
     */
    public function describeUsingGET()
    {
        list($response) = $this->describeUsingGETWithHttpInfo();
        return $response;
    }

    /**
     * Describe Companies
     *
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Lead\Model\ResponseOfObjectMetaData, HTTP status code, HTTP response headers (array of strings)
     */
    public function describeUsingGETWithHttpInfo()
    {
        $request = $this->describeUsingGETRequest();
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfObjectMetaData');
        } catch (ApiException $e) {
            throw $this->describeUsingGETHandleException($e);
        }
    }

    /**
     * Describe Companies
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function describeUsingGETAsync()
    {
        return $this->describeUsingGETAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Describe Companies
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function describeUsingGETAsyncWithHttpInfo()
    {
        $request = $this->describeUsingGETRequest();
        return $this->makeAsyncRequest($request, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfObjectMetaData', [$this, 'describeUsingGETHandleException']);
    }

    /**
     * Create request for operation 'describeUsingGET'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function describeUsingGETRequest()
    {

        $resourcePath = '/rest/v1/companies/describe.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Exception handler for getCompaniesUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function getCompaniesUsingGETHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCompany',
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Companies
     *
     * @param  string $filter_type The company field to filter on.  Searchable fields can be retrieved with the Describe Company call. (required)
     * @param  string[] $filter_values Comma-separated list of values to match against (required)
     * @param  string[] $fields Comma-separated list of fields to include in the response (optional)
     * @param  int $batch_size The batch size to return.  The max and default value is 300. (optional)
     * @param  string $next_page_token A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info. (optional)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfCompany
     */
    public function getCompaniesUsingGET($filter_type, $filter_values, $fields = null, $batch_size = null, $next_page_token = null)
    {
        list($response) = $this->getCompaniesUsingGETWithHttpInfo($filter_type, $filter_values, $fields, $batch_size, $next_page_token);
        return $response;
    }

    /**
     * Get Companies
     *
     * @param  string $filter_type The company field to filter on.  Searchable fields can be retrieved with the Describe Company call. (required)
     * @param  string[] $filter_values Comma-separated list of values to match against (required)
     * @param  string[] $fields Comma-separated list of fields to include in the response (optional)
     * @param  int $batch_size The batch size to return.  The max and default value is 300. (optional)
     * @param  string $next_page_token A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info. (optional)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Lead\Model\ResponseOfCompany, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCompaniesUsingGETWithHttpInfo($filter_type, $filter_values, $fields = null, $batch_size = null, $next_page_token = null)
    {
        $request = $this->getCompaniesUsingGETRequest($filter_type, $filter_values, $fields, $batch_size, $next_page_token);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCompany');
        } catch (ApiException $e) {
            throw $this->getCompaniesUsingGETHandleException($e);
        }
    }

    /**
     * Get Companies
     *
     * @param  string $filter_type The company field to filter on.  Searchable fields can be retrieved with the Describe Company call. (required)
     * @param  string[] $filter_values Comma-separated list of values to match against (required)
     * @param  string[] $fields Comma-separated list of fields to include in the response (optional)
     * @param  int $batch_size The batch size to return.  The max and default value is 300. (optional)
     * @param  string $next_page_token A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCompaniesUsingGETAsync($filter_type, $filter_values, $fields = null, $batch_size = null, $next_page_token = null)
    {
        return $this->getCompaniesUsingGETAsyncWithHttpInfo($filter_type, $filter_values, $fields, $batch_size, $next_page_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Get Companies
     *
     * @param  string $filter_type The company field to filter on.  Searchable fields can be retrieved with the Describe Company call. (required)
     * @param  string[] $filter_values Comma-separated list of values to match against (required)
     * @param  string[] $fields Comma-separated list of fields to include in the response (optional)
     * @param  int $batch_size The batch size to return.  The max and default value is 300. (optional)
     * @param  string $next_page_token A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCompaniesUsingGETAsyncWithHttpInfo($filter_type, $filter_values, $fields = null, $batch_size = null, $next_page_token = null)
    {
        $request = $this->getCompaniesUsingGETRequest($filter_type, $filter_values, $fields, $batch_size, $next_page_token);
        return $this->makeAsyncRequest($request, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCompany', [$this, 'getCompaniesUsingGETHandleException']);
    }

    /**
     * Create request for operation 'getCompaniesUsingGET'
     *
     * @param  string $filter_type The company field to filter on.  Searchable fields can be retrieved with the Describe Company call. (required)
     * @param  string[] $filter_values Comma-separated list of values to match against (required)
     * @param  string[] $fields Comma-separated list of fields to include in the response (optional)
     * @param  int $batch_size The batch size to return.  The max and default value is 300. (optional)
     * @param  string $next_page_token A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCompaniesUsingGETRequest($filter_type, $filter_values, $fields = null, $batch_size = null, $next_page_token = null)
    {
        // Verify the required parameter 'filter_type' is set.
        if (!isset($filter_type)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $filter_type when calling getCompaniesUsingGET'
            );
        }
        // Verify the required parameter 'filter_values' is set.
        if (!isset($filter_values) || (is_array($filter_values) && empty($filter_values))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $filter_values when calling getCompaniesUsingGET'
            );
        }

        $resourcePath = '/rest/v1/companies.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Query parameters.
        $queryParams['filterType'] = ObjectSerializer::toQueryValue($filter_type);
        $queryParams['filterValues'] = ObjectSerializer::toQueryValue($filter_values);
        $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        $queryParams['batchSize'] = ObjectSerializer::toQueryValue($batch_size);
        $queryParams['nextPageToken'] = ObjectSerializer::toQueryValue($next_page_token);
        // Remove any null (optional values).
        $queryParams = array_filter($queryParams, function($v) { return $v !== null; });
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Exception handler for getCompanyFieldByNameUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function getCompanyFieldByNameUsingGETHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadField',
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Company Field by Name
     *
     * @param  string $field_api_name The API name of company field (required)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadField
     */
    public function getCompanyFieldByNameUsingGET($field_api_name)
    {
        list($response) = $this->getCompanyFieldByNameUsingGETWithHttpInfo($field_api_name);
        return $response;
    }

    /**
     * Get Company Field by Name
     *
     * @param  string $field_api_name The API name of company field (required)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadField, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCompanyFieldByNameUsingGETWithHttpInfo($field_api_name)
    {
        $request = $this->getCompanyFieldByNameUsingGETRequest($field_api_name);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadField');
        } catch (ApiException $e) {
            throw $this->getCompanyFieldByNameUsingGETHandleException($e);
        }
    }

    /**
     * Get Company Field by Name
     *
     * @param  string $field_api_name The API name of company field (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCompanyFieldByNameUsingGETAsync($field_api_name)
    {
        return $this->getCompanyFieldByNameUsingGETAsyncWithHttpInfo($field_api_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Get Company Field by Name
     *
     * @param  string $field_api_name The API name of company field (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCompanyFieldByNameUsingGETAsyncWithHttpInfo($field_api_name)
    {
        $request = $this->getCompanyFieldByNameUsingGETRequest($field_api_name);
        return $this->makeAsyncRequest($request, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadField', [$this, 'getCompanyFieldByNameUsingGETHandleException']);
    }

    /**
     * Create request for operation 'getCompanyFieldByNameUsingGET'
     *
     * @param  string $field_api_name The API name of company field (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCompanyFieldByNameUsingGETRequest($field_api_name)
    {
        // Verify the required parameter 'field_api_name' is set.
        if (!isset($field_api_name)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $field_api_name when calling getCompanyFieldByNameUsingGET'
            );
        }

        $resourcePath = '/rest/v1/companies/schema/fields/{fieldApiName}.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Path parameters.
        $resourcePath = str_replace(
            '{' . 'fieldApiName' . '}',
            ObjectSerializer::toPathValue($field_api_name),
            $resourcePath
        );
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Exception handler for getCompanyFieldsUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function getCompanyFieldsUsingGETHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadField',
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Company Fields
     *
     * @param  int $batch_size The batch size to return. The max and default value is 300. (optional)
     * @param  string $next_page_token A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter. See Paging Tokens for more info. (optional)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadField
     */
    public function getCompanyFieldsUsingGET($batch_size = null, $next_page_token = null)
    {
        list($response) = $this->getCompanyFieldsUsingGETWithHttpInfo($batch_size, $next_page_token);
        return $response;
    }

    /**
     * Get Company Fields
     *
     * @param  int $batch_size The batch size to return. The max and default value is 300. (optional)
     * @param  string $next_page_token A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter. See Paging Tokens for more info. (optional)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadField, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCompanyFieldsUsingGETWithHttpInfo($batch_size = null, $next_page_token = null)
    {
        $request = $this->getCompanyFieldsUsingGETRequest($batch_size, $next_page_token);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadField');
        } catch (ApiException $e) {
            throw $this->getCompanyFieldsUsingGETHandleException($e);
        }
    }

    /**
     * Get Company Fields
     *
     * @param  int $batch_size The batch size to return. The max and default value is 300. (optional)
     * @param  string $next_page_token A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter. See Paging Tokens for more info. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCompanyFieldsUsingGETAsync($batch_size = null, $next_page_token = null)
    {
        return $this->getCompanyFieldsUsingGETAsyncWithHttpInfo($batch_size, $next_page_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Get Company Fields
     *
     * @param  int $batch_size The batch size to return. The max and default value is 300. (optional)
     * @param  string $next_page_token A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter. See Paging Tokens for more info. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCompanyFieldsUsingGETAsyncWithHttpInfo($batch_size = null, $next_page_token = null)
    {
        $request = $this->getCompanyFieldsUsingGETRequest($batch_size, $next_page_token);
        return $this->makeAsyncRequest($request, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadField', [$this, 'getCompanyFieldsUsingGETHandleException']);
    }

    /**
     * Create request for operation 'getCompanyFieldsUsingGET'
     *
     * @param  int $batch_size The batch size to return. The max and default value is 300. (optional)
     * @param  string $next_page_token A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter. See Paging Tokens for more info. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCompanyFieldsUsingGETRequest($batch_size = null, $next_page_token = null)
    {

        $resourcePath = '/rest/v1/companies/schema/fields.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // Query parameters.
        $queryParams['batchSize'] = ObjectSerializer::toQueryValue($batch_size);
        $queryParams['nextPageToken'] = ObjectSerializer::toQueryValue($next_page_token);
        // Remove any null (optional values).
        $queryParams = array_filter($queryParams, function($v) { return $v !== null; });
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Exception handler for syncCompaniesUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function syncCompaniesUsingPOSTHandleException(ApiException $e)
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCompany',
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Sync Companies
     *
     * @param  \NecLimDul\MarketoRest\Lead\Model\SyncCompanyRequest $sync_company_request syncCompanyRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfCompany
     */
    public function syncCompaniesUsingPOST($sync_company_request)
    {
        list($response) = $this->syncCompaniesUsingPOSTWithHttpInfo($sync_company_request);
        return $response;
    }

    /**
     * Sync Companies
     *
     * @param  \NecLimDul\MarketoRest\Lead\Model\SyncCompanyRequest $sync_company_request syncCompanyRequest (required)
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NecLimDul\MarketoRest\Lead\Model\ResponseOfCompany, HTTP status code, HTTP response headers (array of strings)
     */
    public function syncCompaniesUsingPOSTWithHttpInfo($sync_company_request)
    {
        $request = $this->syncCompaniesUsingPOSTRequest($sync_company_request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn($response, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCompany');
        } catch (ApiException $e) {
            throw $this->syncCompaniesUsingPOSTHandleException($e);
        }
    }

    /**
     * Sync Companies
     *
     * @param  \NecLimDul\MarketoRest\Lead\Model\SyncCompanyRequest $sync_company_request syncCompanyRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function syncCompaniesUsingPOSTAsync($sync_company_request)
    {
        return $this->syncCompaniesUsingPOSTAsyncWithHttpInfo($sync_company_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Sync Companies
     *
     * @param  \NecLimDul\MarketoRest\Lead\Model\SyncCompanyRequest $sync_company_request syncCompanyRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function syncCompaniesUsingPOSTAsyncWithHttpInfo($sync_company_request)
    {
        $request = $this->syncCompaniesUsingPOSTRequest($sync_company_request);
        return $this->makeAsyncRequest($request, '\NecLimDul\MarketoRest\Lead\Model\ResponseOfCompany', [$this, 'syncCompaniesUsingPOSTHandleException']);
    }

    /**
     * Create request for operation 'syncCompaniesUsingPOST'
     *
     * @param  \NecLimDul\MarketoRest\Lead\Model\SyncCompanyRequest $sync_company_request syncCompanyRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function syncCompaniesUsingPOSTRequest($sync_company_request)
    {
        // Verify the required parameter 'sync_company_request' is set.
        if (!isset($sync_company_request)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sync_company_request when calling syncCompaniesUsingPOST'
            );
        }

        $resourcePath = '/rest/v1/companies.json';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );
        $httpBody = ObjectSerializer::toBodyValue($sync_company_request, $headers['Content-Type'] === 'application/json');


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    /**
     * Make a request.
     *
     * @param \GuzzleHttp\Psr7\Request $request An initialized request object.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @return \Psr\Http\Message\ResponseInterface
     */
    private function makeRequest(Request $request) {
        $options = $this->createHttpClientOption();
        try {
           $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            $response = $e->getResponse();
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                (int) $e->getCode(),
                $response ? $response->getHeaders() : null,
                $response ? (string) $response->getBody() : null
            );
        }

        $statusCode = $response->getStatusCode();
        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    (string) $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                (string) $response->getBody()
            );
        }
        return $response;
    }

    /**
     * Make an async request.
     *
     * @param \GuzzleHttp\Psr7\Request $request An initialized request object.
     * @param string $returnType The return type.
     * @param callable $exceptionHandler A callback to process HTTP errors.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @return \GuzzleHttp\Promise\PromiseInterface A promise that will return a processed response.
     */
    private function makeAsyncRequest(Request $request, string $returnType, callable $exceptionHandler)
    {
        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->responseToReturn($response, $returnType);
                },
                function (RequestException $exception) use ($exceptionHandler) {
                    $response = $exception->getResponse();
                    $e = new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : null,
                        $response ? (string) $response->getBody() : null
                    );
                    throw $exceptionHandler($e);
                }
            );
    }

    /**
     * Convert a response to a return standard return array.
     *
     * @param \Psr\Http\Message\ResponseInterface $response A response from a request with a serialized body.
     * @param string $returnType The primary return type.
     *
     * @return array
     */
    private function responseToReturn(ResponseInterface $response, string $returnType) {
        return [
            $this->deserializeResponseBody($response->getBody(), $returnType),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    /**
     * Deserialize a response body.
     *
     * @param mixed $responseBody
     *   The response body.
     * @param string $returnType
     *   The return type.
     * @param array<string, string[]>|null $headers
     *   The a list of headers from the response.
     * @return mixed
     *   Either a string or a stream to be passed to a file object.
     */
    private function deserializeResponseBody($responseBody, string $returnType, ?array $headers = [])
    {
        return ObjectSerializer::deserialize(
            $returnType === '\SplFileObject' ? $responseBody : (string) $responseBody,
            $returnType,
            $headers
        );
    }

}
