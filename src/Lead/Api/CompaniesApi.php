<?php

/**
 * CompaniesApi
 *
 * Marketo Rest API
 *
 * Marketo Rest API
 *
 * OpenAPI spec version: 1.0
 * Contact: developerfeedback@marketo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.26
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Lead
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace NecLimDul\MarketoRest\Lead\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\Promise\PromiseInterface;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\ResponseInterface;
use NecLimDul\MarketoRest\Lead\ApiException;
use NecLimDul\MarketoRest\Lead\Configuration;
use NecLimDul\MarketoRest\Lead\HeaderSelector;
use NecLimDul\MarketoRest\Lead\ObjectSerializer;

/**
 * CompaniesApi Class Doc Comment
 *
 * @category Class
 * @package  NecLimDul\MarketoRest\Lead
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CompaniesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the spec.
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Exception handler for deleteCompaniesUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function deleteCompaniesUsingPOSTHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Lead\Model\ResponseOfCompany::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Delete Companies
     *
     * @param \NecLimDul\MarketoRest\Lead\Model\DeleteCompanyRequest $delete_company_request
     *   deleteCompanyRequest
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfCompany
     */
    public function deleteCompaniesUsingPOST(
        \NecLimDul\MarketoRest\Lead\Model\DeleteCompanyRequest $delete_company_request
    ): \NecLimDul\MarketoRest\Lead\Model\ResponseOfCompany {
        list($response) = $this->deleteCompaniesUsingPOSTWithHttpInfo($delete_company_request);
        return $response;
    }

    /**
     * Delete Companies
     *
     * @param \NecLimDul\MarketoRest\Lead\Model\DeleteCompanyRequest $delete_company_request
     *   deleteCompanyRequest
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Lead\Model\ResponseOfCompany,
     *     int,
     *     array<array<string>>
     * }
     */
    public function deleteCompaniesUsingPOSTWithHttpInfo(
        \NecLimDul\MarketoRest\Lead\Model\DeleteCompanyRequest $delete_company_request
    ): array {
        $request = $this->deleteCompaniesUsingPOSTRequest($delete_company_request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Lead\Model\ResponseOfCompany::class
            );
        } catch (ApiException $e) {
            throw $this->deleteCompaniesUsingPOSTHandleException($e);
        }
    }

    /**
     * Delete Companies
     *
     * @param \NecLimDul\MarketoRest\Lead\Model\DeleteCompanyRequest $delete_company_request
     *   deleteCompanyRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCompaniesUsingPOSTAsync(
        \NecLimDul\MarketoRest\Lead\Model\DeleteCompanyRequest $delete_company_request
    ): PromiseInterface {
        return $this->deleteCompaniesUsingPOSTAsyncWithHttpInfo($delete_company_request)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Lead\Model\ResponseOfCompany {
                    return $response[0];
                }
            );
    }

    /**
     * Delete Companies
     *
     * @param \NecLimDul\MarketoRest\Lead\Model\DeleteCompanyRequest $delete_company_request
     *   deleteCompanyRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCompaniesUsingPOSTAsyncWithHttpInfo(
        \NecLimDul\MarketoRest\Lead\Model\DeleteCompanyRequest $delete_company_request
    ): PromiseInterface {
        $request = $this->deleteCompaniesUsingPOSTRequest($delete_company_request);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Lead\Model\ResponseOfCompany::class,
            [$this, 'deleteCompaniesUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'deleteCompaniesUsingPOST'
     *
     * @param \NecLimDul\MarketoRest\Lead\Model\DeleteCompanyRequest $delete_company_request
     *   deleteCompanyRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteCompaniesUsingPOSTRequest(
        \NecLimDul\MarketoRest\Lead\Model\DeleteCompanyRequest $delete_company_request
    ): Request {

        $resourcePath = '/rest/v1/companies/delete.json';

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            $delete_company_request
        );
    }

    /**
     * Exception handler for describeUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function describeUsingGETHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Lead\Model\ResponseOfObjectMetaData::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Describe Companies
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfObjectMetaData
     */
    public function describeUsingGET(): \NecLimDul\MarketoRest\Lead\Model\ResponseOfObjectMetaData
    {
        list($response) = $this->describeUsingGETWithHttpInfo();
        return $response;
    }

    /**
     * Describe Companies
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Lead\Model\ResponseOfObjectMetaData,
     *     int,
     *     array<array<string>>
     * }
     */
    public function describeUsingGETWithHttpInfo(): array
    {
        $request = $this->describeUsingGETRequest();
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Lead\Model\ResponseOfObjectMetaData::class
            );
        } catch (ApiException $e) {
            throw $this->describeUsingGETHandleException($e);
        }
    }

    /**
     * Describe Companies
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function describeUsingGETAsync(): PromiseInterface
    {
        return $this->describeUsingGETAsyncWithHttpInfo()
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Lead\Model\ResponseOfObjectMetaData {
                    return $response[0];
                }
            );
    }

    /**
     * Describe Companies
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function describeUsingGETAsyncWithHttpInfo(): PromiseInterface
    {
        $request = $this->describeUsingGETRequest();
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Lead\Model\ResponseOfObjectMetaData::class,
            [$this, 'describeUsingGETHandleException']
        );
    }

    /**
     * Create request for operation 'describeUsingGET'
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function describeUsingGETRequest(): Request
    {

        $resourcePath = '/rest/v1/companies/describe.json';

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'GET',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for getCompaniesUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function getCompaniesUsingGETHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Lead\Model\ResponseOfCompany::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Companies
     *
     * @param string $filter_type
     *   The company field to filter on.  Searchable fields can be retrieved with the Describe Company call.
     * @param string[] $filter_values
     *   Comma-separated list of values to match against
     * @param string[]|null $fields
     *   Comma-separated list of fields to include in the response
     * @param int|null $batch_size
     *   The batch size to return.  The max and default value is 300.
     * @param string|null $next_page_token
     *   A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfCompany
     */
    public function getCompaniesUsingGET(
        string $filter_type,
        array $filter_values,
        array $fields = null,
        int $batch_size = null,
        string $next_page_token = null
    ): \NecLimDul\MarketoRest\Lead\Model\ResponseOfCompany {
        list($response) = $this->getCompaniesUsingGETWithHttpInfo($filter_type, $filter_values, $fields, $batch_size, $next_page_token);
        return $response;
    }

    /**
     * Get Companies
     *
     * @param string $filter_type
     *   The company field to filter on.  Searchable fields can be retrieved with the Describe Company call.
     * @param string[] $filter_values
     *   Comma-separated list of values to match against
     * @param string[]|null $fields
     *   Comma-separated list of fields to include in the response
     * @param int|null $batch_size
     *   The batch size to return.  The max and default value is 300.
     * @param string|null $next_page_token
     *   A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Lead\Model\ResponseOfCompany,
     *     int,
     *     array<array<string>>
     * }
     */
    public function getCompaniesUsingGETWithHttpInfo(
        string $filter_type,
        array $filter_values,
        array $fields = null,
        int $batch_size = null,
        string $next_page_token = null
    ): array {
        $request = $this->getCompaniesUsingGETRequest($filter_type, $filter_values, $fields, $batch_size, $next_page_token);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Lead\Model\ResponseOfCompany::class
            );
        } catch (ApiException $e) {
            throw $this->getCompaniesUsingGETHandleException($e);
        }
    }

    /**
     * Get Companies
     *
     * @param string $filter_type
     *   The company field to filter on.  Searchable fields can be retrieved with the Describe Company call.
     * @param string[] $filter_values
     *   Comma-separated list of values to match against
     * @param string[]|null $fields
     *   Comma-separated list of fields to include in the response
     * @param int|null $batch_size
     *   The batch size to return.  The max and default value is 300.
     * @param string|null $next_page_token
     *   A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCompaniesUsingGETAsync(
        string $filter_type,
        array $filter_values,
        array $fields = null,
        int $batch_size = null,
        string $next_page_token = null
    ): PromiseInterface {
        return $this->getCompaniesUsingGETAsyncWithHttpInfo($filter_type, $filter_values, $fields, $batch_size, $next_page_token)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Lead\Model\ResponseOfCompany {
                    return $response[0];
                }
            );
    }

    /**
     * Get Companies
     *
     * @param string $filter_type
     *   The company field to filter on.  Searchable fields can be retrieved with the Describe Company call.
     * @param string[] $filter_values
     *   Comma-separated list of values to match against
     * @param string[]|null $fields
     *   Comma-separated list of fields to include in the response
     * @param int|null $batch_size
     *   The batch size to return.  The max and default value is 300.
     * @param string|null $next_page_token
     *   A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCompaniesUsingGETAsyncWithHttpInfo(
        string $filter_type,
        array $filter_values,
        array $fields = null,
        int $batch_size = null,
        string $next_page_token = null
    ): PromiseInterface {
        $request = $this->getCompaniesUsingGETRequest($filter_type, $filter_values, $fields, $batch_size, $next_page_token);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Lead\Model\ResponseOfCompany::class,
            [$this, 'getCompaniesUsingGETHandleException']
        );
    }

    /**
     * Create request for operation 'getCompaniesUsingGET'
     *
     * @param string $filter_type
     *   The company field to filter on.  Searchable fields can be retrieved with the Describe Company call.
     * @param string[] $filter_values
     *   Comma-separated list of values to match against
     * @param string[]|null $fields
     *   Comma-separated list of fields to include in the response
     * @param int|null $batch_size
     *   The batch size to return.  The max and default value is 300.
     * @param string|null $next_page_token
     *   A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCompaniesUsingGETRequest(
        string $filter_type,
        array $filter_values,
        array $fields = null,
        int $batch_size = null,
        string $next_page_token = null
    ): Request {
        // Verify the required parameter 'filter_values' is set.
        if (empty($filter_values)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $filter_values when calling getCompaniesUsingGET'
            );
        }

        $resourcePath = '/rest/v1/companies.json';

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'GET',
            $operationHost . $resourcePath,
            // Query.
            [
                'filterType' => ObjectSerializer::toQueryValue($filter_type),
                'filterValues' => ObjectSerializer::serializeCollection($filter_values, 'multi'),
                'fields' => isset($fields) ? ObjectSerializer::serializeCollection($fields, 'multi') : null,
                'batchSize' => isset($batch_size) ? ObjectSerializer::toQueryValue($batch_size) : null,
                'nextPageToken' => isset($next_page_token) ? ObjectSerializer::toQueryValue($next_page_token) : null,
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for getCompanyFieldByNameUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function getCompanyFieldByNameUsingGETHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadField::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Company Field by Name
     *
     * @param string $field_api_name
     *   The API name of company field
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadField
     */
    public function getCompanyFieldByNameUsingGET(
        string $field_api_name
    ): \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadField {
        list($response) = $this->getCompanyFieldByNameUsingGETWithHttpInfo($field_api_name);
        return $response;
    }

    /**
     * Get Company Field by Name
     *
     * @param string $field_api_name
     *   The API name of company field
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadField,
     *     int,
     *     array<array<string>>
     * }
     */
    public function getCompanyFieldByNameUsingGETWithHttpInfo(
        string $field_api_name
    ): array {
        $request = $this->getCompanyFieldByNameUsingGETRequest($field_api_name);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadField::class
            );
        } catch (ApiException $e) {
            throw $this->getCompanyFieldByNameUsingGETHandleException($e);
        }
    }

    /**
     * Get Company Field by Name
     *
     * @param string $field_api_name
     *   The API name of company field
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCompanyFieldByNameUsingGETAsync(
        string $field_api_name
    ): PromiseInterface {
        return $this->getCompanyFieldByNameUsingGETAsyncWithHttpInfo($field_api_name)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadField {
                    return $response[0];
                }
            );
    }

    /**
     * Get Company Field by Name
     *
     * @param string $field_api_name
     *   The API name of company field
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCompanyFieldByNameUsingGETAsyncWithHttpInfo(
        string $field_api_name
    ): PromiseInterface {
        $request = $this->getCompanyFieldByNameUsingGETRequest($field_api_name);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadField::class,
            [$this, 'getCompanyFieldByNameUsingGETHandleException']
        );
    }

    /**
     * Create request for operation 'getCompanyFieldByNameUsingGET'
     *
     * @param string $field_api_name
     *   The API name of company field
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCompanyFieldByNameUsingGETRequest(
        string $field_api_name
    ): Request {

        $resourcePath = '/rest/v1/companies/schema/fields/{fieldApiName}.json';
        $resourcePath = str_replace(
            '{' . 'fieldApiName' . '}',
            ObjectSerializer::toPathValue($field_api_name),
            $resourcePath
        );

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'GET',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for getCompanyFieldsUsingGET.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function getCompanyFieldsUsingGETHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadField::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get Company Fields
     *
     * @param int|null $batch_size
     *   The batch size to return. The max and default value is 300.
     * @param string|null $next_page_token
     *   A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter. See Paging Tokens for more info.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadField
     */
    public function getCompanyFieldsUsingGET(
        int $batch_size = null,
        string $next_page_token = null
    ): \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadField {
        list($response) = $this->getCompanyFieldsUsingGETWithHttpInfo($batch_size, $next_page_token);
        return $response;
    }

    /**
     * Get Company Fields
     *
     * @param int|null $batch_size
     *   The batch size to return. The max and default value is 300.
     * @param string|null $next_page_token
     *   A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter. See Paging Tokens for more info.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadField,
     *     int,
     *     array<array<string>>
     * }
     */
    public function getCompanyFieldsUsingGETWithHttpInfo(
        int $batch_size = null,
        string $next_page_token = null
    ): array {
        $request = $this->getCompanyFieldsUsingGETRequest($batch_size, $next_page_token);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadField::class
            );
        } catch (ApiException $e) {
            throw $this->getCompanyFieldsUsingGETHandleException($e);
        }
    }

    /**
     * Get Company Fields
     *
     * @param int|null $batch_size
     *   The batch size to return. The max and default value is 300.
     * @param string|null $next_page_token
     *   A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter. See Paging Tokens for more info.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCompanyFieldsUsingGETAsync(
        int $batch_size = null,
        string $next_page_token = null
    ): PromiseInterface {
        return $this->getCompanyFieldsUsingGETAsyncWithHttpInfo($batch_size, $next_page_token)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadField {
                    return $response[0];
                }
            );
    }

    /**
     * Get Company Fields
     *
     * @param int|null $batch_size
     *   The batch size to return. The max and default value is 300.
     * @param string|null $next_page_token
     *   A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter. See Paging Tokens for more info.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCompanyFieldsUsingGETAsyncWithHttpInfo(
        int $batch_size = null,
        string $next_page_token = null
    ): PromiseInterface {
        $request = $this->getCompanyFieldsUsingGETRequest($batch_size, $next_page_token);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Lead\Model\ResponseOfLeadField::class,
            [$this, 'getCompanyFieldsUsingGETHandleException']
        );
    }

    /**
     * Create request for operation 'getCompanyFieldsUsingGET'
     *
     * @param int|null $batch_size
     *   The batch size to return. The max and default value is 300.
     * @param string|null $next_page_token
     *   A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter. See Paging Tokens for more info.
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCompanyFieldsUsingGETRequest(
        int $batch_size = null,
        string $next_page_token = null
    ): Request {

        $resourcePath = '/rest/v1/companies/schema/fields.json';

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'GET',
            $operationHost . $resourcePath,
            // Query.
            [
                'batchSize' => isset($batch_size) ? ObjectSerializer::toQueryValue($batch_size) : null,
                'nextPageToken' => isset($next_page_token) ? ObjectSerializer::toQueryValue($next_page_token) : null,
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for syncCompaniesUsingPOST.
     *
     * @param \NecLimDul\MarketoRest\Lead\ApiException $e Unprocessed exception.
     *
     * @return \NecLimDul\MarketoRest\Lead\ApiException Processed exception.
     */
    protected function syncCompaniesUsingPOSTHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 200:
                $e->setResponseObject(
                    $this->deserializeResponseBody(
                        $e->getResponseBody(),
                        \NecLimDul\MarketoRest\Lead\Model\ResponseOfCompany::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Sync Companies
     *
     * @param \NecLimDul\MarketoRest\Lead\Model\SyncCompanyRequest $sync_company_request
     *   syncCompanyRequest
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NecLimDul\MarketoRest\Lead\Model\ResponseOfCompany
     */
    public function syncCompaniesUsingPOST(
        \NecLimDul\MarketoRest\Lead\Model\SyncCompanyRequest $sync_company_request
    ): \NecLimDul\MarketoRest\Lead\Model\ResponseOfCompany {
        list($response) = $this->syncCompaniesUsingPOSTWithHttpInfo($sync_company_request);
        return $response;
    }

    /**
     * Sync Companies
     *
     * @param \NecLimDul\MarketoRest\Lead\Model\SyncCompanyRequest $sync_company_request
     *   syncCompanyRequest
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \NecLimDul\MarketoRest\Lead\Model\ResponseOfCompany,
     *     int,
     *     array<array<string>>
     * }
     */
    public function syncCompaniesUsingPOSTWithHttpInfo(
        \NecLimDul\MarketoRest\Lead\Model\SyncCompanyRequest $sync_company_request
    ): array {
        $request = $this->syncCompaniesUsingPOSTRequest($sync_company_request);
        try {
            $response = $this->makeRequest($request);
            return $this->responseToReturn(
                $response,
                \NecLimDul\MarketoRest\Lead\Model\ResponseOfCompany::class
            );
        } catch (ApiException $e) {
            throw $this->syncCompaniesUsingPOSTHandleException($e);
        }
    }

    /**
     * Sync Companies
     *
     * @param \NecLimDul\MarketoRest\Lead\Model\SyncCompanyRequest $sync_company_request
     *   syncCompanyRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function syncCompaniesUsingPOSTAsync(
        \NecLimDul\MarketoRest\Lead\Model\SyncCompanyRequest $sync_company_request
    ): PromiseInterface {
        return $this->syncCompaniesUsingPOSTAsyncWithHttpInfo($sync_company_request)
            ->then(
                function (array $response): \NecLimDul\MarketoRest\Lead\Model\ResponseOfCompany {
                    return $response[0];
                }
            );
    }

    /**
     * Sync Companies
     *
     * @param \NecLimDul\MarketoRest\Lead\Model\SyncCompanyRequest $sync_company_request
     *   syncCompanyRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function syncCompaniesUsingPOSTAsyncWithHttpInfo(
        \NecLimDul\MarketoRest\Lead\Model\SyncCompanyRequest $sync_company_request
    ): PromiseInterface {
        $request = $this->syncCompaniesUsingPOSTRequest($sync_company_request);
        return $this->makeAsyncRequest(
            $request,
            \NecLimDul\MarketoRest\Lead\Model\ResponseOfCompany::class,
            [$this, 'syncCompaniesUsingPOSTHandleException']
        );
    }

    /**
     * Create request for operation 'syncCompaniesUsingPOST'
     *
     * @param \NecLimDul\MarketoRest\Lead\Model\SyncCompanyRequest $sync_company_request
     *   syncCompanyRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function syncCompaniesUsingPOSTRequest(
        \NecLimDul\MarketoRest\Lead\Model\SyncCompanyRequest $sync_company_request
    ): Request {

        $resourcePath = '/rest/v1/companies.json';

        $headers = [];
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            $sync_company_request
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array<string, mixed> of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    /**
     * Make a request.
     *
     * @param \GuzzleHttp\Psr7\Request $request An initialized request object.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @return \Psr\Http\Message\ResponseInterface
     */
    protected function makeRequest(Request $request)
    {
        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            $response = $e->getResponse();
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                (int) $e->getCode(),
                $response ? $response->getHeaders() : [],
                $response ? (string) $response->getBody() : null
            );
        }

        $statusCode = $response->getStatusCode();
        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    (string) $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                (string) $response->getBody()
            );
        }
        return $response;
    }

    /**
     * Make an async request.
     *
     * @param \GuzzleHttp\Psr7\Request $request An initialized request object.
     * @param class-string $returnType The return type.
     * @param callable $exceptionHandler A callback to process HTTP errors.
     *
     * @throws \NecLimDul\MarketoRest\Lead\ApiException on non-2xx response
     * @return \GuzzleHttp\Promise\PromiseInterface A promise that will return a processed response.
     */
    protected function makeAsyncRequest(Request $request, string $returnType, callable $exceptionHandler)
    {
        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function (ResponseInterface $response) use ($returnType) {
                    return $this->responseToReturn($response, $returnType);
                },
                function (RequestException $exception) use ($exceptionHandler) {
                    $response = $exception->getResponse();
                    $e = new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : [],
                        $response ? (string) $response->getBody() : null
                    );
                    throw $exceptionHandler($e);
                }
            );
    }

    /**
     * Convert a response to a return standard return array.
     *
     * @template T
     * @param \Psr\Http\Message\ResponseInterface $response A response from a request with a serialized body.
     * @param string $returnType The primary return type.
     * @phpstan-param class-string<T> $returnType
     *
     * @return array structured array or response and http info.
     * @phpstan-return array{T, int, array<array<string>>}
     */
    protected function responseToReturn(ResponseInterface $response, string $returnType)
    {
        return [
            $this->deserializeResponseBody($response->getBody(), $returnType),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    /**
     * Deserialize a response body.
     *
     * @template T
     * @param mixed $responseBody The response body.
     * @param string $returnType The return type.
     * @param array<string, string[]> $headers A list of headers from the response.
     * @phpstan-param class-string<T> $returnType
     *
     * @return mixed Either a string or a stream to be passed to a file object.
     * @phpstan-return T
     * @psalm-return T
     */
    private function deserializeResponseBody($responseBody, string $returnType, array $headers = [])
    {
        return ObjectSerializer::deserialize(
            $returnType === \SplFileObject::class ? $responseBody : (string) $responseBody,
            $returnType,
            $headers
        );
    }
}
